
PLAYER_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram1_low    00004000  20004000  20004000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .sram1_upper  0000c000  20008000  20008000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .sram2        00000000  20014000  20014000  00034000  2**0
                  CONTENTS
  3 .ccm_sram_all 00000000  20018000  20018000  00034000  2**0
                  CONTENTS
  4 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .text         0000aae0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000148  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0800ae08  0800ae08  00034000  2**0
                  CONTENTS
  8 .ARM          00000008  0800ae08  0800ae08  0001ae08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0800ae10  0800ae10  00034000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  0800ae10  0800ae10  0001ae10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000004  0800ae14  0800ae14  0001ae14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000008c  20000000  0800ae18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00002444  2000008c  0800aea4  0002008c  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  200024d0  0800aea4  000224d0  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003004f  00000000  00000000  00034030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00005818  00000000  00000000  0006407f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000025c0  00000000  00000000  00069898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002388  00000000  00000000  0006be58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00006da9  00000000  00000000  0006e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002c5f3  00000000  00000000  00074f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00129ce0  00000000  00000000  000a157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001cb25c  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a4e0  00000000  00000000  001cb2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aca8 	.word	0x0800aca8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	0800aca8 	.word	0x0800aca8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <braeden_main>:
#include <FreeRTOS.h>
#include <task.h>

void braeden_main(void *ignore) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 800052c:	f009 fa4a 	bl	80099c4 <xTaskGetCurrentTaskHandle>
 8000530:	4603      	mov	r3, r0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 fd74 	bl	8009020 <vTaskSuspend>
	vTaskDelete(NULL);
 8000538:	2000      	movs	r0, #0
 800053a:	f008 fccb 	bl	8008ed4 <vTaskDelete>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <bryant_main>:
#include <FreeRTOS.h>
#include <task.h>

extern uint8_t audio_buffer[49152]; //Can be recast to a more appropriate type.

void bryant_main(void *ignore) {
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]


	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 800054e:	f009 fa39 	bl	80099c4 <xTaskGetCurrentTaskHandle>
 8000552:	4603      	mov	r3, r0
 8000554:	4618      	mov	r0, r3
 8000556:	f008 fd63 	bl	8009020 <vTaskSuspend>
	vTaskDelete(NULL);
 800055a:	2000      	movs	r0, #0
 800055c:	f008 fcba 	bl	8008ed4 <vTaskDelete>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <jeremy_main>:
extern DMA_HandleTypeDef hdma_dac1_ch1;
#define AUD_GREEN_L_DMA hdma_dac1_ch1;

//DAC_DHR12LD

void jeremy_main(void *ignore) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&AUDIO_44_1_KHZ_TIMER);
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <jeremy_main+0x40>)
 8000572:	f005 fc13 	bl	8005d9c <HAL_TIM_Base_Start>
	HAL_DAC_Start(&AUD_GREEN_DAC, DAC_CHANNEL_1);
 8000576:	2100      	movs	r1, #0
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <jeremy_main+0x44>)
 800057a:	f003 f8eb 	bl	8003754 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&AUD_GREEN_DAC, DAC_CHANNEL_1, (uint32_t*)audio_buffer, 32, DAC_ALIGN_12B_R);
 800057e:	2300      	movs	r3, #0
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2320      	movs	r3, #32
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <jeremy_main+0x48>)
 8000586:	2100      	movs	r1, #0
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <jeremy_main+0x44>)
 800058a:	f003 f94f 	bl	800382c <HAL_DAC_Start_DMA>

	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 800058e:	f009 fa19 	bl	80099c4 <xTaskGetCurrentTaskHandle>
 8000592:	4603      	mov	r3, r0
 8000594:	4618      	mov	r0, r3
 8000596:	f008 fd43 	bl	8009020 <vTaskSuspend>
	vTaskDelete(NULL);
 800059a:	2000      	movs	r0, #0
 800059c:	f008 fc9a 	bl	8008ed4 <vTaskDelete>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000618 	.word	0x20000618
 80005ac:	200002c4 	.word	0x200002c4
 80005b0:	20008000 	.word	0x20008000

080005b4 <wyatt_main>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "jeremy.h"
//#include "wyatt.h"
void wyatt_main(void *ignore){}; //temporary measure
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f001 fe88 	bl	80022e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f89d 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 fea9 	bl	800132c <MX_GPIO_Init>
  MX_DMA_Init();
 80005da:	f000 fe7d 	bl	80012d8 <MX_DMA_Init>
  MX_DAC1_Init();
 80005de:	f000 fb05 	bl	8000bec <MX_DAC1_Init>
  MX_DAC2_Init();
 80005e2:	f000 fb47 	bl	8000c74 <MX_DAC2_Init>
  MX_DAC3_Init();
 80005e6:	f000 fb7f 	bl	8000ce8 <MX_DAC3_Init>
  MX_DAC4_Init();
 80005ea:	f000 fbc1 	bl	8000d70 <MX_DAC4_Init>
  MX_OPAMP1_Init();
 80005ee:	f000 fc03 	bl	8000df8 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80005f2:	f000 fc27 	bl	8000e44 <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 80005f6:	f000 fc4b 	bl	8000e90 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 80005fa:	f000 fc6f 	bl	8000edc <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 80005fe:	f000 fc93 	bl	8000f28 <MX_OPAMP6_Init>
  MX_QUADSPI1_Init();
 8000602:	f000 fcb7 	bl	8000f74 <MX_QUADSPI1_Init>
  MX_SPI2_Init();
 8000606:	f000 fcdd 	bl	8000fc4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800060a:	f000 fd19 	bl	8001040 <MX_SPI3_Init>
  MX_SPI4_Init();
 800060e:	f000 fd55 	bl	80010bc <MX_SPI4_Init>
  MX_UART5_Init();
 8000612:	f000 fdc7 	bl	80011a4 <MX_UART5_Init>
  MX_USART3_Init();
 8000616:	f000 fe11 	bl	800123c <MX_USART3_Init>
  MX_ADC1_Init();
 800061a:	f000 f8c5 	bl	80007a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800061e:	f000 f93b 	bl	8000898 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000622:	f000 f99f 	bl	8000964 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000626:	f000 fa15 	bl	8000a54 <MX_ADC4_Init>
  MX_ADC5_Init();
 800062a:	f000 fa79 	bl	8000b20 <MX_ADC5_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800062e:	f007 fabd 	bl	8007bac <MX_FATFS_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <main+0x74>
    Error_Handler();
 8000638:	f000 ff62 	bl	8001500 <Error_Handler>
  }
  MX_TIM6_Init();
 800063c:	f000 fd7c 	bl	8001138 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000640:	f007 fbc4 	bl	8007dcc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000644:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <main+0xfc>)
 8000646:	2100      	movs	r1, #0
 8000648:	481f      	ldr	r0, [pc, #124]	; (80006c8 <main+0x100>)
 800064a:	f007 fc09 	bl	8007e60 <osThreadNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <main+0x104>)
 8000652:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  static StaticTask_t threads[4];
  xTaskCreateStatic(wyatt_main, 	"wyatt_main_thread", 	1024, NULL, 5, (StackType_t *)wyatt_memspace, 	&threads[0]);
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <main+0x108>)
 8000656:	9302      	str	r3, [sp, #8]
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <main+0x10c>)
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2305      	movs	r3, #5
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000666:	491c      	ldr	r1, [pc, #112]	; (80006d8 <main+0x110>)
 8000668:	481c      	ldr	r0, [pc, #112]	; (80006dc <main+0x114>)
 800066a:	f008 fa7b 	bl	8008b64 <xTaskCreateStatic>
  xTaskCreateStatic(jeremy_main, 	"jeremy_main_thread", 	1024, NULL, 5, (StackType_t *)jeremy_memspace, 	&threads[1]);
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <main+0x118>)
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <main+0x11c>)
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2305      	movs	r3, #5
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000680:	4919      	ldr	r1, [pc, #100]	; (80006e8 <main+0x120>)
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <main+0x124>)
 8000684:	f008 fa6e 	bl	8008b64 <xTaskCreateStatic>
  xTaskCreateStatic(bryant_main, 	"bryant_main_thread", 	1024, NULL, 5, (StackType_t *)bryant_memspace, 	&threads[2]);
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <main+0x128>)
 800068a:	9302      	str	r3, [sp, #8]
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <main+0x12c>)
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	2305      	movs	r3, #5
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800069a:	4917      	ldr	r1, [pc, #92]	; (80006f8 <main+0x130>)
 800069c:	4817      	ldr	r0, [pc, #92]	; (80006fc <main+0x134>)
 800069e:	f008 fa61 	bl	8008b64 <xTaskCreateStatic>
  xTaskCreateStatic(braeden_main, 	"braeden_main_thread", 	1024, NULL, 5, (StackType_t *)braeden_memspace, &threads[3]);
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <main+0x138>)
 80006a4:	9302      	str	r3, [sp, #8]
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <main+0x13c>)
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2305      	movs	r3, #5
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b4:	4914      	ldr	r1, [pc, #80]	; (8000708 <main+0x140>)
 80006b6:	4815      	ldr	r0, [pc, #84]	; (800070c <main+0x144>)
 80006b8:	f008 fa54 	bl	8008b64 <xTaskCreateStatic>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006bc:	f007 fbaa 	bl	8007e14 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <main+0xf8>
 80006c2:	bf00      	nop
 80006c4:	0800ad34 	.word	0x0800ad34
 80006c8:	080014cd 	.word	0x080014cd
 80006cc:	20000758 	.word	0x20000758
 80006d0:	2000075c 	.word	0x2000075c
 80006d4:	20004000 	.word	0x20004000
 80006d8:	0800accc 	.word	0x0800accc
 80006dc:	080005b5 	.word	0x080005b5
 80006e0:	20000818 	.word	0x20000818
 80006e4:	20007000 	.word	0x20007000
 80006e8:	0800ace0 	.word	0x0800ace0
 80006ec:	08000569 	.word	0x08000569
 80006f0:	200008d4 	.word	0x200008d4
 80006f4:	20005000 	.word	0x20005000
 80006f8:	0800acf4 	.word	0x0800acf4
 80006fc:	08000547 	.word	0x08000547
 8000700:	20000990 	.word	0x20000990
 8000704:	20006000 	.word	0x20006000
 8000708:	0800ad08 	.word	0x0800ad08
 800070c:	08000525 	.word	0x08000525

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	2238      	movs	r2, #56	; 0x38
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00a f9f8 	bl	800ab14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000732:	2000      	movs	r0, #0
 8000734:	f004 f8f4 	bl	8004920 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	2303      	movs	r3, #3
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800074a:	2301      	movs	r3, #1
 800074c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800074e:	2314      	movs	r3, #20
 8000750:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000756:	2304      	movs	r3, #4
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0318 	add.w	r3, r7, #24
 8000762:	4618      	mov	r0, r3
 8000764:	f004 fa42 	bl	8004bec <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800076e:	f000 fec7 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2303      	movs	r3, #3
 8000778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2104      	movs	r1, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f004 fd40 	bl	8005210 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000796:	f000 feb3 	bl	8001500 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800079a:	f004 ff3f 	bl	800561c <HAL_RCC_EnableCSS>
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00a f9a7 	bl	800ab14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_ADC1_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000802:	2201      	movs	r2, #1
 8000804:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000824:	2200      	movs	r2, #0
 8000826:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_ADC1_Init+0xe8>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000832:	f001 ff63 	bl	80026fc <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800083c:	f000 fe60 	bl	8001500 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_ADC1_Init+0xe8>)
 800084c:	f002 fd78 	bl	8003340 <HAL_ADCEx_MultiModeConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000856:	f000 fe53 	bl	8001500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_ADC1_Init+0xec>)
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2306      	movs	r3, #6
 8000860:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000866:	237f      	movs	r3, #127	; 0x7f
 8000868:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_ADC1_Init+0xe8>)
 8000878:	f002 f8fc 	bl	8002a74 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000882:	f000 fe3d 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	; 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000a8 	.word	0x200000a8
 8000894:	08600004 	.word	0x08600004

08000898 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f00a f935 	bl	800ab14 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008ac:	4a2b      	ldr	r2, [pc, #172]	; (800095c <MX_ADC2_Init+0xc4>)
 80008ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b0:	4b29      	ldr	r3, [pc, #164]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008b8:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008d2:	2204      	movs	r2, #4
 80008d4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_ADC2_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_ADC2_Init+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000912:	4811      	ldr	r0, [pc, #68]	; (8000958 <MX_ADC2_Init+0xc0>)
 8000914:	f001 fef2 	bl	80026fc <HAL_ADC_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800091e:	f000 fdef 	bl	8001500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_ADC2_Init+0xc8>)
 8000924:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000926:	2306      	movs	r3, #6
 8000928:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092e:	237f      	movs	r3, #127	; 0x7f
 8000930:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000932:	2304      	movs	r3, #4
 8000934:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <MX_ADC2_Init+0xc0>)
 8000940:	f002 f898 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800094a:	f000 fdd9 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000114 	.word	0x20000114
 800095c:	50000100 	.word	0x50000100
 8000960:	10c00010 	.word	0x10c00010

08000964 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2220      	movs	r2, #32
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f00a f8c9 	bl	800ab14 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <MX_ADC3_Init+0xe4>)
 8000984:	4a31      	ldr	r2, [pc, #196]	; (8000a4c <MX_ADC3_Init+0xe8>)
 8000986:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <MX_ADC3_Init+0xe4>)
 800098a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800098e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_ADC3_Init+0xe4>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000996:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <MX_ADC3_Init+0xe4>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_ADC3_Init+0xe4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009aa:	2204      	movs	r2, #4
 80009ac:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009bc:	2201      	movs	r2, #1
 80009be:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009ea:	4817      	ldr	r0, [pc, #92]	; (8000a48 <MX_ADC3_Init+0xe4>)
 80009ec:	f001 fe86 	bl	80026fc <HAL_ADC_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80009f6:	f000 fd83 	bl	8001500 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <MX_ADC3_Init+0xe4>)
 8000a06:	f002 fc9b 	bl	8003340 <HAL_ADCEx_MultiModeConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000a10:	f000 fd76 	bl	8001500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_ADC3_Init+0xec>)
 8000a16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a18:	2306      	movs	r3, #6
 8000a1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a20:	237f      	movs	r3, #127	; 0x7f
 8000a22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a24:	2304      	movs	r3, #4
 8000a26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_ADC3_Init+0xe4>)
 8000a32:	f002 f81f 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000a3c:	f000 fd60 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3730      	adds	r7, #48	; 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000180 	.word	0x20000180
 8000a4c:	50000400 	.word	0x50000400
 8000a50:	21800100 	.word	0x21800100

08000a54 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f00a f857 	bl	800ab14 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000a68:	4a2b      	ldr	r2, [pc, #172]	; (8000b18 <MX_ADC4_Init+0xc4>)
 8000a6a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000a6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a72:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000ace:	4811      	ldr	r0, [pc, #68]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000ad0:	f001 fe14 	bl	80026fc <HAL_ADC_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000ada:	f000 fd11 	bl	8001500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_ADC4_Init+0xc8>)
 8000ae0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aea:	237f      	movs	r3, #127	; 0x7f
 8000aec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aee:	2304      	movs	r3, #4
 8000af0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <MX_ADC4_Init+0xc0>)
 8000afc:	f001 ffba 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000b06:	f000 fcfb 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200001ec 	.word	0x200001ec
 8000b18:	50000500 	.word	0x50000500
 8000b1c:	25b00200 	.word	0x25b00200

08000b20 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	2220      	movs	r2, #32
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f009 fff1 	bl	800ab14 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b34:	4a2b      	ldr	r2, [pc, #172]	; (8000be4 <MX_ADC5_Init+0xc4>)
 8000b36:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b3e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000b9c:	f001 fdae 	bl	80026fc <HAL_ADC_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000ba6:	f000 fcab 	bl	8001500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_ADC5_Init+0xc8>)
 8000bac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bb6:	237f      	movs	r3, #127	; 0x7f
 8000bb8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_ADC5_Init+0xc0>)
 8000bc8:	f001 ff54 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000bd2:	f000 fc95 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000258 	.word	0x20000258
 8000be4:	50000600 	.word	0x50000600
 8000be8:	08600004 	.word	0x08600004

08000bec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2230      	movs	r2, #48	; 0x30
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f009 ff8b 	bl	800ab14 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_DAC1_Init+0x80>)
 8000c00:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <MX_DAC1_Init+0x84>)
 8000c02:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c04:	4819      	ldr	r0, [pc, #100]	; (8000c6c <MX_DAC1_Init+0x80>)
 8000c06:	f002 fd83 	bl	8003710 <HAL_DAC_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c10:	f000 fc76 	bl	8001500 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000c14:	2302      	movs	r3, #2
 8000c16:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000c24:	231e      	movs	r3, #30
 8000c26:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <MX_DAC1_Init+0x80>)
 8000c40:	f002 ff46 	bl	8003ad0 <HAL_DAC_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000c4a:	f000 fc59 	bl	8001500 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2210      	movs	r2, #16
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_DAC1_Init+0x80>)
 8000c56:	f002 ff3b 	bl	8003ad0 <HAL_DAC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000c60:	f000 fc4e 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3730      	adds	r7, #48	; 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200002c4 	.word	0x200002c4
 8000c70:	50000800 	.word	0x50000800

08000c74 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	; 0x30
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2230      	movs	r2, #48	; 0x30
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f009 ff47 	bl	800ab14 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_DAC2_Init+0x6c>)
 8000c88:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <MX_DAC2_Init+0x70>)
 8000c8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000c8c:	4814      	ldr	r0, [pc, #80]	; (8000ce0 <MX_DAC2_Init+0x6c>)
 8000c8e:	f002 fd3f 	bl	8003710 <HAL_DAC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000c98:	f000 fc32 	bl	8001500 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <MX_DAC2_Init+0x6c>)
 8000cc8:	f002 ff02 	bl	8003ad0 <HAL_DAC_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000cd2:	f000 fc15 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3730      	adds	r7, #48	; 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200002d8 	.word	0x200002d8
 8000ce4:	50000c00 	.word	0x50000c00

08000ce8 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2230      	movs	r2, #48	; 0x30
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f009 ff0d 	bl	800ab14 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_DAC3_Init+0x80>)
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <MX_DAC3_Init+0x84>)
 8000cfe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000d00:	4819      	ldr	r0, [pc, #100]	; (8000d68 <MX_DAC3_Init+0x80>)
 8000d02:	f002 fd05 	bl	8003710 <HAL_DAC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000d0c:	f000 fbf8 	bl	8001500 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d10:	2302      	movs	r3, #2
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480b      	ldr	r0, [pc, #44]	; (8000d68 <MX_DAC3_Init+0x80>)
 8000d3c:	f002 fec8 	bl	8003ad0 <HAL_DAC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000d46:	f000 fbdb 	bl	8001500 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_DAC3_Init+0x80>)
 8000d52:	f002 febd 	bl	8003ad0 <HAL_DAC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000d5c:	f000 fbd0 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	; 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200002ec 	.word	0x200002ec
 8000d6c:	50001000 	.word	0x50001000

08000d70 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2230      	movs	r2, #48	; 0x30
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fec9 	bl	800ab14 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_DAC4_Init+0x80>)
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <MX_DAC4_Init+0x84>)
 8000d86:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8000d88:	4819      	ldr	r0, [pc, #100]	; (8000df0 <MX_DAC4_Init+0x80>)
 8000d8a:	f002 fcc1 	bl	8003710 <HAL_DAC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8000d94:	f000 fbb4 	bl	8001500 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000db0:	2302      	movs	r3, #2
 8000db2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480b      	ldr	r0, [pc, #44]	; (8000df0 <MX_DAC4_Init+0x80>)
 8000dc4:	f002 fe84 	bl	8003ad0 <HAL_DAC_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8000dce:	f000 fb97 	bl	8001500 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_DAC4_Init+0x80>)
 8000dda:	f002 fe79 	bl	8003ad0 <HAL_DAC_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_DAC4_Init+0x78>
  {
    Error_Handler();
 8000de4:	f000 fb8c 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3730      	adds	r7, #48	; 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000300 	.word	0x20000300
 8000df4:	50001400 	.word	0x50001400

08000df8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_OPAMP1_Init+0x44>)
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <MX_OPAMP1_Init+0x48>)
 8000e00:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_OPAMP1_Init+0x44>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_OPAMP1_Init+0x44>)
 8000e0a:	2260      	movs	r2, #96	; 0x60
 8000e0c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_OPAMP1_Init+0x44>)
 8000e10:	220c      	movs	r2, #12
 8000e12:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_OPAMP1_Init+0x44>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_OPAMP1_Init+0x44>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_OPAMP1_Init+0x44>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_OPAMP1_Init+0x44>)
 8000e28:	f003 fcaa 	bl	8004780 <HAL_OPAMP_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000e32:	f000 fb65 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000374 	.word	0x20000374
 8000e40:	40010300 	.word	0x40010300

08000e44 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_OPAMP3_Init+0x44>)
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <MX_OPAMP3_Init+0x48>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_OPAMP3_Init+0x44>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_OPAMP3_Init+0x44>)
 8000e56:	2260      	movs	r2, #96	; 0x60
 8000e58:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_OPAMP3_Init+0x44>)
 8000e5c:	220c      	movs	r2, #12
 8000e5e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_OPAMP3_Init+0x44>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_OPAMP3_Init+0x44>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_OPAMP3_Init+0x44>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_OPAMP3_Init+0x44>)
 8000e74:	f003 fc84 	bl	8004780 <HAL_OPAMP_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000e7e:	f000 fb3f 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200003b0 	.word	0x200003b0
 8000e8c:	40010308 	.word	0x40010308

08000e90 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_OPAMP4_Init+0x44>)
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <MX_OPAMP4_Init+0x48>)
 8000e98:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_OPAMP4_Init+0x44>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_OPAMP4_Init+0x44>)
 8000ea2:	2260      	movs	r2, #96	; 0x60
 8000ea4:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_OPAMP4_Init+0x44>)
 8000ea8:	220c      	movs	r2, #12
 8000eaa:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_OPAMP4_Init+0x44>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_OPAMP4_Init+0x44>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_OPAMP4_Init+0x44>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_OPAMP4_Init+0x44>)
 8000ec0:	f003 fc5e 	bl	8004780 <HAL_OPAMP_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8000eca:	f000 fb19 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200003ec 	.word	0x200003ec
 8000ed8:	4001030c 	.word	0x4001030c

08000edc <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_OPAMP5_Init+0x44>)
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <MX_OPAMP5_Init+0x48>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_OPAMP5_Init+0x44>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_OPAMP5_Init+0x44>)
 8000eee:	2260      	movs	r2, #96	; 0x60
 8000ef0:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_OPAMP5_Init+0x44>)
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_OPAMP5_Init+0x44>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_OPAMP5_Init+0x44>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_OPAMP5_Init+0x44>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_OPAMP5_Init+0x44>)
 8000f0c:	f003 fc38 	bl	8004780 <HAL_OPAMP_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 8000f16:	f000 faf3 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000428 	.word	0x20000428
 8000f24:	40010310 	.word	0x40010310

08000f28 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_OPAMP6_Init+0x44>)
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <MX_OPAMP6_Init+0x48>)
 8000f30:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_OPAMP6_Init+0x44>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_OPAMP6_Init+0x44>)
 8000f3a:	2260      	movs	r2, #96	; 0x60
 8000f3c:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_OPAMP6_Init+0x44>)
 8000f40:	220c      	movs	r2, #12
 8000f42:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_OPAMP6_Init+0x44>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_OPAMP6_Init+0x44>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_OPAMP6_Init+0x44>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_OPAMP6_Init+0x44>)
 8000f58:	f003 fc12 	bl	8004780 <HAL_OPAMP_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 8000f62:	f000 facd 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000464 	.word	0x20000464
 8000f70:	40010314 	.word	0x40010314

08000f74 <MX_QUADSPI1_Init>:
  * @brief QUADSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  /* QUADSPI1 parameter configuration*/
  hqspi1.Instance = QUADSPI;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_QUADSPI1_Init+0x48>)
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <MX_QUADSPI1_Init+0x4c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 1;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_QUADSPI1_Init+0x48>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <MX_QUADSPI1_Init+0x48>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_QUADSPI1_Init+0x48>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 25;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <MX_QUADSPI1_Init+0x48>)
 8000f92:	2219      	movs	r2, #25
 8000f94:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_QUADSPI1_Init+0x48>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_3;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <MX_QUADSPI1_Init+0x48>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	619a      	str	r2, [r3, #24]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_QUADSPI1_Init+0x48>)
 8000fa4:	2240      	movs	r2, #64	; 0x40
 8000fa6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_QUADSPI1_Init+0x48>)
 8000faa:	f003 fd5d 	bl	8004a68 <HAL_QSPI_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_QUADSPI1_Init+0x44>
  {
    Error_Handler();
 8000fb4:	f000 faa4 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200004a0 	.word	0x200004a0
 8000fc0:	a0001000 	.word	0xa0001000

08000fc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_SPI2_Init+0x74>)
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <MX_SPI2_Init+0x78>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_SPI2_Init+0x74>)
 8000fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_SPI2_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_SPI2_Init+0x74>)
 8000fde:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fe2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_SPI2_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_SPI2_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_SPI2_Init+0x74>)
 8000ff2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ff6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_SPI2_Init+0x74>)
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_SPI2_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_SPI2_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_SPI2_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_SPI2_Init+0x74>)
 8001012:	2207      	movs	r2, #7
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_SPI2_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_SPI2_Init+0x74>)
 800101e:	2208      	movs	r2, #8
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_SPI2_Init+0x74>)
 8001024:	f004 fdb8 	bl	8005b98 <HAL_SPI_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800102e:	f000 fa67 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200004ec 	.word	0x200004ec
 800103c:	40003800 	.word	0x40003800

08001040 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_SPI3_Init+0x74>)
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <MX_SPI3_Init+0x78>)
 8001048:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_SPI3_Init+0x74>)
 800104c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001050:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_SPI3_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_SPI3_Init+0x74>)
 800105a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800105e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_SPI3_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_SPI3_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_SPI3_Init+0x74>)
 800106e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001072:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_SPI3_Init+0x74>)
 8001076:	2208      	movs	r2, #8
 8001078:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_SPI3_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_SPI3_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_SPI3_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_SPI3_Init+0x74>)
 800108e:	2207      	movs	r2, #7
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_SPI3_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_SPI3_Init+0x74>)
 800109a:	2208      	movs	r2, #8
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_SPI3_Init+0x74>)
 80010a0:	f004 fd7a 	bl	8005b98 <HAL_SPI_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010aa:	f000 fa29 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000550 	.word	0x20000550
 80010b8:	40003c00 	.word	0x40003c00

080010bc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_SPI4_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <MX_SPI4_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_SPI4_Init+0x74>)
 80010c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010cc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_SPI4_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_SPI4_Init+0x74>)
 80010d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010da:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_SPI4_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_SPI4_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_SPI4_Init+0x74>)
 80010ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010ee:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_SPI4_Init+0x74>)
 80010f2:	2208      	movs	r2, #8
 80010f4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_SPI4_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_SPI4_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_SPI4_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_SPI4_Init+0x74>)
 800110a:	2207      	movs	r2, #7
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_SPI4_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_SPI4_Init+0x74>)
 8001116:	2208      	movs	r2, #8
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_SPI4_Init+0x74>)
 800111c:	f004 fd3c 	bl	8005b98 <HAL_SPI_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 f9eb 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200005b4 	.word	0x200005b4
 8001134:	40013c00 	.word	0x40013c00

08001138 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_TIM6_Init+0x64>)
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <MX_TIM6_Init+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_TIM6_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_TIM6_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3627;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_TIM6_Init+0x64>)
 800115c:	f640 622b 	movw	r2, #3627	; 0xe2b
 8001160:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_TIM6_Init+0x64>)
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <MX_TIM6_Init+0x64>)
 800116a:	f004 fdc0 	bl	8005cee <HAL_TIM_Base_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001174:	f000 f9c4 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001178:	2320      	movs	r3, #32
 800117a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_TIM6_Init+0x64>)
 8001186:	f005 f91d 	bl	80063c4 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001190:	f000 f9b6 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000618 	.word	0x20000618
 80011a0:	40001000 	.word	0x40001000

080011a4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_UART5_Init+0x90>)
 80011aa:	4a23      	ldr	r2, [pc, #140]	; (8001238 <MX_UART5_Init+0x94>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <MX_UART5_Init+0x90>)
 80011b0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80011b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_UART5_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_UART5_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_UART5_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_UART5_Init+0x90>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_UART5_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_UART5_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_UART5_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_UART5_Init+0x90>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_UART5_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011ec:	4811      	ldr	r0, [pc, #68]	; (8001234 <MX_UART5_Init+0x90>)
 80011ee:	f005 f9c5 	bl	800657c <HAL_UART_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80011f8:	f000 f982 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fc:	2100      	movs	r1, #0
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_UART5_Init+0x90>)
 8001200:	f005 ff60 	bl	80070c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800120a:	f000 f979 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4808      	ldr	r0, [pc, #32]	; (8001234 <MX_UART5_Init+0x90>)
 8001212:	f005 ff95 	bl	8007140 <HAL_UARTEx_SetRxFifoThreshold>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800121c:	f000 f970 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_UART5_Init+0x90>)
 8001222:	f005 ff16 	bl	8007052 <HAL_UARTEx_DisableFifoMode>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800122c:	f000 f968 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000664 	.word	0x20000664
 8001238:	40005000 	.word	0x40005000

0800123c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_USART3_Init+0x90>)
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <MX_USART3_Init+0x94>)
 8001244:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <MX_USART3_Init+0x90>)
 8001248:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <MX_USART3_Init+0x98>)
 800124a:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_USART3_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_USART3_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_USART3_Init+0x90>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_USART3_Init+0x90>)
 8001260:	220c      	movs	r2, #12
 8001262:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_USART3_Init+0x90>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_USART3_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_USART3_Init+0x90>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_USART3_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_USART3_Init+0x90>)
 800127e:	2200      	movs	r2, #0
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001282:	4812      	ldr	r0, [pc, #72]	; (80012cc <MX_USART3_Init+0x90>)
 8001284:	f005 ffe8 	bl	8007258 <HAL_USART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART3_Init+0x56>
  {
    Error_Handler();
 800128e:	f000 f937 	bl	8001500 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001292:	2100      	movs	r1, #0
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_USART3_Init+0x90>)
 8001296:	f006 fbc3 	bl	8007a20 <HAL_USARTEx_SetTxFifoThreshold>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_USART3_Init+0x68>
  {
    Error_Handler();
 80012a0:	f000 f92e 	bl	8001500 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a4:	2100      	movs	r1, #0
 80012a6:	4809      	ldr	r0, [pc, #36]	; (80012cc <MX_USART3_Init+0x90>)
 80012a8:	f006 fbf8 	bl	8007a9c <HAL_USARTEx_SetRxFifoThreshold>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART3_Init+0x7a>
  {
    Error_Handler();
 80012b2:	f000 f925 	bl	8001500 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USART3_Init+0x90>)
 80012b8:	f006 fb79 	bl	80079ae <HAL_USARTEx_DisableFifoMode>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART3_Init+0x8a>
  {
    Error_Handler();
 80012c2:	f000 f91d 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200006f8 	.word	0x200006f8
 80012d0:	40004800 	.word	0x40004800
 80012d4:	007a1200 	.word	0x007a1200

080012d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_DMA_Init+0x50>)
 80012e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <MX_DMA_Init+0x50>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6493      	str	r3, [r2, #72]	; 0x48
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_DMA_Init+0x50>)
 80012ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_DMA_Init+0x50>)
 80012f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <MX_DMA_Init+0x50>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6493      	str	r3, [r2, #72]	; 0x48
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_DMA_Init+0x50>)
 8001304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	200b      	movs	r0, #11
 8001314:	f002 f9d4 	bl	80036c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001318:	200b      	movs	r0, #11
 800131a:	f002 f9eb 	bl	80036f4 <HAL_NVIC_EnableIRQ>

}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a5c      	ldr	r2, [pc, #368]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b5a      	ldr	r3, [pc, #360]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b57      	ldr	r3, [pc, #348]	; (80014b8 <MX_GPIO_Init+0x18c>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a56      	ldr	r2, [pc, #344]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b54      	ldr	r3, [pc, #336]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <MX_GPIO_Init+0x18c>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b48      	ldr	r3, [pc, #288]	; (80014b8 <MX_GPIO_Init+0x18c>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <MX_GPIO_Init+0x18c>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <MX_GPIO_Init+0x18c>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <MX_GPIO_Init+0x18c>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ba:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <MX_GPIO_Init+0x18c>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a3e      	ldr	r2, [pc, #248]	; (80014b8 <MX_GPIO_Init+0x18c>)
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <MX_GPIO_Init+0x18c>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0320 	and.w	r3, r3, #32
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_NRST_GPIO_Port, TFT_NRST_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2140      	movs	r1, #64	; 0x40
 80013d6:	4839      	ldr	r0, [pc, #228]	; (80014bc <MX_GPIO_Init+0x190>)
 80013d8:	f003 f9ba 	bl	8004750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 7101 	mov.w	r1, #516	; 0x204
 80013e2:	4837      	ldr	r0, [pc, #220]	; (80014c0 <MX_GPIO_Init+0x194>)
 80013e4:	f003 f9b4 	bl	8004750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f240 210b 	movw	r1, #523	; 0x20b
 80013ee:	4835      	ldr	r0, [pc, #212]	; (80014c4 <MX_GPIO_Init+0x198>)
 80013f0:	f003 f9ae 	bl	8004750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_SPI_DC_GPIO_Port, TFT_SPI_DC_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2101      	movs	r1, #1
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f003 f9a8 	bl	8004750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_NRST_Pin */
  GPIO_InitStruct.Pin = TFT_NRST_Pin;
 8001400:	2340      	movs	r3, #64	; 0x40
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_NRST_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4829      	ldr	r0, [pc, #164]	; (80014bc <MX_GPIO_Init+0x190>)
 8001418:	f003 f818 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : BRIDGE_CLK_Pin */
  GPIO_InitStruct.Pin = BRIDGE_CLK_Pin;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800142c:	2304      	movs	r3, #4
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BRIDGE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	4824      	ldr	r0, [pc, #144]	; (80014c8 <MX_GPIO_Init+0x19c>)
 8001438:	f003 f808 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pins : AUD_ORANGE_R_OUTPUT_EN_Pin AUD_ORANGE_L_OUTPUT_EN_Pin */
  GPIO_InitStruct.Pin = AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin;
 800143c:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	481a      	ldr	r0, [pc, #104]	; (80014c0 <MX_GPIO_Init+0x194>)
 8001456:	f002 fff9 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pins : MICRO_SD_CS_Pin AUD_GREEN_L_OUTPUT_EN_Pin AUD_GREEN_R_OUTPUT_EN_Pin ROT_B_Pin */
  GPIO_InitStruct.Pin = MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin;
 800145a:	f240 230b 	movw	r3, #523	; 0x20b
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_GPIO_Init+0x198>)
 8001474:	f002 ffea 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_A_Pin ROT_S2_Pin ROT_S1_Pin ROT_C_Pin */
  GPIO_InitStruct.Pin = ROT_A_Pin|ROT_S2_Pin|ROT_S1_Pin|ROT_C_Pin;
 8001478:	2374      	movs	r3, #116	; 0x74
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	480e      	ldr	r0, [pc, #56]	; (80014c4 <MX_GPIO_Init+0x198>)
 800148c:	f002 ffde 	bl	800444c <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_SPI_DC_Pin */
  GPIO_InitStruct.Pin = TFT_SPI_DC_Pin;
 8001490:	2301      	movs	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_SPI_DC_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014aa:	f002 ffcf 	bl	800444c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	; 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48000400 	.word	0x48000400
 80014c0:	48001400 	.word	0x48001400
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000c00 	.word	0x48000c00

080014cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f006 fd55 	bl	8007f84 <osDelay>
 80014da:	e7fb      	b.n	80014d4 <StartDefaultTask+0x8>

080014dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ee:	f000 ff11 	bl	8002314 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40001400 	.word	0x40001400

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_MspInit+0x4c>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_MspInit+0x4c>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6613      	str	r3, [r2, #96]	; 0x60
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_MspInit+0x4c>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_MspInit+0x4c>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6593      	str	r3, [r2, #88]	; 0x58
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_MspInit+0x4c>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	210f      	movs	r1, #15
 8001546:	f06f 0001 	mvn.w	r0, #1
 800154a:	f002 f8b9 	bl	80036c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0a8      	sub	sp, #160	; 0xa0
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001578:	2254      	movs	r2, #84	; 0x54
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f009 fac9 	bl	800ab14 <memset>
  if(hadc->Instance==ADC1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800158a:	d141      	bne.n	8001610 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800158c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001592:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001596:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001598:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800159c:	4618      	mov	r0, r3
 800159e:	f004 f8ad 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015a8:	f7ff ffaa 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015ac:	4b84      	ldr	r3, [pc, #528]	; (80017c0 <HAL_ADC_MspInit+0x264>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	4a83      	ldr	r2, [pc, #524]	; (80017c0 <HAL_ADC_MspInit+0x264>)
 80015b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80015b6:	4b82      	ldr	r3, [pc, #520]	; (80017c0 <HAL_ADC_MspInit+0x264>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d10b      	bne.n	80015d6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015be:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a80      	ldr	r2, [pc, #512]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80015c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
 80015d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b7b      	ldr	r3, [pc, #492]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a7a      	ldr	r2, [pc, #488]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b78      	ldr	r3, [pc, #480]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
 80015ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AUD_GRN_MIC_POSTAMP_Pin;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f4:	2303      	movs	r3, #3
 80015f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_GRN_MIC_POSTAMP_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001604:	4619      	mov	r1, r3
 8001606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160a:	f002 ff1f 	bl	800444c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800160e:	e165      	b.n	80018dc <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6c      	ldr	r2, [pc, #432]	; (80017c8 <HAL_ADC_MspInit+0x26c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d141      	bne.n	800169e <HAL_ADC_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800161a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001620:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001624:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001626:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800162a:	4618      	mov	r0, r3
 800162c:	f004 f866 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_ADC_MspInit+0xde>
      Error_Handler();
 8001636:	f7ff ff63 	bl	8001500 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800163a:	4b61      	ldr	r3, [pc, #388]	; (80017c0 <HAL_ADC_MspInit+0x264>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a5f      	ldr	r2, [pc, #380]	; (80017c0 <HAL_ADC_MspInit+0x264>)
 8001642:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001644:	4b5e      	ldr	r3, [pc, #376]	; (80017c0 <HAL_ADC_MspInit+0x264>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d10b      	bne.n	8001664 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800164c:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	4a5c      	ldr	r2, [pc, #368]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 8001652:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001656:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001658:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	4a56      	ldr	r2, [pc, #344]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
 800167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_S_Pin;
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001682:	2303      	movs	r3, #3
 8001684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_S_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f002 fed8 	bl	800444c <HAL_GPIO_Init>
}
 800169c:	e11e      	b.n	80018dc <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC3)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a4a      	ldr	r2, [pc, #296]	; (80017cc <HAL_ADC_MspInit+0x270>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d142      	bne.n	800172e <HAL_ADC_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80016a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80016ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 f81e 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_ADC_MspInit+0x16e>
      Error_Handler();
 80016c6:	f7ff ff1b 	bl	8001500 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_ADC_MspInit+0x274>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a3f      	ldr	r2, [pc, #252]	; (80017d0 <HAL_ADC_MspInit+0x274>)
 80016d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016d4:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_ADC_MspInit+0x274>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10b      	bne.n	80016f4 <HAL_ADC_MspInit+0x198>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016dc:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	4a38      	ldr	r2, [pc, #224]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f4:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001700:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	623b      	str	r3, [r7, #32]
 800170a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_R1_Pin;
 800170c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001714:	2303      	movs	r3, #3
 8001716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_R1_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001724:	4619      	mov	r1, r3
 8001726:	482b      	ldr	r0, [pc, #172]	; (80017d4 <HAL_ADC_MspInit+0x278>)
 8001728:	f002 fe90 	bl	800444c <HAL_GPIO_Init>
}
 800172c:	e0d6      	b.n	80018dc <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC4)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <HAL_ADC_MspInit+0x27c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d151      	bne.n	80017dc <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800173e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001742:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001746:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800174a:	4618      	mov	r0, r3
 800174c:	f003 ffd6 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 8001756:	f7ff fed3 	bl	8001500 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_ADC_MspInit+0x274>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <HAL_ADC_MspInit+0x274>)
 8001762:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_ADC_MspInit+0x274>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10b      	bne.n	8001784 <HAL_ADC_MspInit+0x228>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 8001772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_ADC_MspInit+0x268>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_T_Pin;
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a4:	2303      	movs	r3, #3
 80017a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_T_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017b4:	4619      	mov	r1, r3
 80017b6:	4807      	ldr	r0, [pc, #28]	; (80017d4 <HAL_ADC_MspInit+0x278>)
 80017b8:	f002 fe48 	bl	800444c <HAL_GPIO_Init>
}
 80017bc:	e08e      	b.n	80018dc <HAL_ADC_MspInit+0x380>
 80017be:	bf00      	nop
 80017c0:	20000a4c 	.word	0x20000a4c
 80017c4:	40021000 	.word	0x40021000
 80017c8:	50000100 	.word	0x50000100
 80017cc:	50000400 	.word	0x50000400
 80017d0:	20000a50 	.word	0x20000a50
 80017d4:	48000c00 	.word	0x48000c00
 80017d8:	50000500 	.word	0x50000500
  else if(hadc->Instance==ADC5)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a40      	ldr	r2, [pc, #256]	; (80018e4 <HAL_ADC_MspInit+0x388>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d17a      	bne.n	80018dc <HAL_ADC_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80017e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80017ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 ff7f 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_ADC_MspInit+0x2ac>
      Error_Handler();
 8001804:	f7ff fe7c 	bl	8001500 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001808:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_ADC_MspInit+0x38c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	4a36      	ldr	r2, [pc, #216]	; (80018e8 <HAL_ADC_MspInit+0x38c>)
 8001810:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_ADC_MspInit+0x38c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10b      	bne.n	8001832 <HAL_ADC_MspInit+0x2d6>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_ADC_MspInit+0x390>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a33      	ldr	r2, [pc, #204]	; (80018ec <HAL_ADC_MspInit+0x390>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <HAL_ADC_MspInit+0x390>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <HAL_ADC_MspInit+0x390>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a2d      	ldr	r2, [pc, #180]	; (80018ec <HAL_ADC_MspInit+0x390>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_ADC_MspInit+0x390>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_ADC_MspInit+0x390>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_ADC_MspInit+0x390>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_ADC_MspInit+0x390>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_ADC_MspInit+0x390>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_ADC_MspInit+0x390>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_ADC_MspInit+0x390>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AUD_ORANGE_S_UNBUFFERED_IN_Pin;
 800187a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800187e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001882:	2303      	movs	r3, #3
 8001884:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_ORANGE_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f002 fdd8 	bl	800444c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_T_UNBUFFERED_IN_Pin|AUD_BLACK_R1_UNBUFFERED_IN_Pin|VOLUME_ANALOG_IN_Pin;
 800189c:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80018a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a4:	2303      	movs	r3, #3
 80018a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018b4:	4619      	mov	r1, r3
 80018b6:	480e      	ldr	r0, [pc, #56]	; (80018f0 <HAL_ADC_MspInit+0x394>)
 80018b8:	f002 fdc8 	bl	800444c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_S_UNBUFFERED_IN_Pin;
 80018bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_BLACK_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018d4:	4619      	mov	r1, r3
 80018d6:	4807      	ldr	r0, [pc, #28]	; (80018f4 <HAL_ADC_MspInit+0x398>)
 80018d8:	f002 fdb8 	bl	800444c <HAL_GPIO_Init>
}
 80018dc:	bf00      	nop
 80018de:	37a0      	adds	r7, #160	; 0xa0
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	50000600 	.word	0x50000600
 80018e8:	20000a50 	.word	0x20000a50
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000c00 	.word	0x48000c00
 80018f4:	48001000 	.word	0x48001000

080018f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a5b      	ldr	r2, [pc, #364]	; (8001a84 <HAL_DAC_MspInit+0x18c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d151      	bne.n	80019be <HAL_DAC_MspInit+0xc6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800191a:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a5a      	ldr	r2, [pc, #360]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192e:	623b      	str	r3, [r7, #32]
 8001930:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b55      	ldr	r3, [pc, #340]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a54      	ldr	r2, [pc, #336]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AUD_GREEN_L_PREAMP_AUDIO_Pin|AUD_GREEN_R_PREAMP_AUDIO_Pin;
 800194a:	2330      	movs	r3, #48	; 0x30
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194e:	2303      	movs	r3, #3
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f002 fd74 	bl	800444c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001964:	4b49      	ldr	r3, [pc, #292]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 8001966:	4a4a      	ldr	r2, [pc, #296]	; (8001a90 <HAL_DAC_MspInit+0x198>)
 8001968:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800196a:	4b48      	ldr	r3, [pc, #288]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 800196c:	2206      	movs	r2, #6
 800196e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001970:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 8001972:	2210      	movs	r2, #16
 8001974:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001976:	4b45      	ldr	r3, [pc, #276]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800197c:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001982:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 8001984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001988:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800198a:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 800198c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001990:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001992:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 8001994:	2220      	movs	r2, #32
 8001996:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001998:	4b3c      	ldr	r3, [pc, #240]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 800199a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800199e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80019a0:	483a      	ldr	r0, [pc, #232]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 80019a2:	f002 fae1 	bl	8003f68 <HAL_DMA_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80019ac:	f7ff fda8 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a36      	ldr	r2, [pc, #216]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	4a35      	ldr	r2, [pc, #212]	; (8001a8c <HAL_DAC_MspInit+0x194>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 80019bc:	e05d      	b.n	8001a7a <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a34      	ldr	r2, [pc, #208]	; (8001a94 <HAL_DAC_MspInit+0x19c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d12d      	bne.n	8001a24 <HAL_DAC_MspInit+0x12c>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	4a2e      	ldr	r2, [pc, #184]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 80019ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	4a28      	ldr	r2, [pc, #160]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TFT_LED_LVL_Pin;
 80019f8:	2340      	movs	r3, #64	; 0x40
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fc:	2303      	movs	r3, #3
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TFT_LED_LVL_GPIO_Port, &GPIO_InitStruct);
 8001a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0e:	f002 fd1d 	bl	800444c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	210f      	movs	r1, #15
 8001a16:	2037      	movs	r0, #55	; 0x37
 8001a18:	f001 fe52 	bl	80036c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001a1c:	2037      	movs	r0, #55	; 0x37
 8001a1e:	f001 fe69 	bl	80036f4 <HAL_NVIC_EnableIRQ>
}
 8001a22:	e02a      	b.n	8001a7a <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <HAL_DAC_MspInit+0x1a0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10c      	bne.n	8001a48 <HAL_DAC_MspInit+0x150>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
}
 8001a46:	e018      	b.n	8001a7a <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC4)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <HAL_DAC_MspInit+0x1a4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d113      	bne.n	8001a7a <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_DAC_MspInit+0x190>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	2037      	movs	r0, #55	; 0x37
 8001a70:	f001 fe26 	bl	80036c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001a74:	2037      	movs	r0, #55	; 0x37
 8001a76:	f001 fe3d 	bl	80036f4 <HAL_NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3738      	adds	r7, #56	; 0x38
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	50000800 	.word	0x50000800
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	20000314 	.word	0x20000314
 8001a90:	40020008 	.word	0x40020008
 8001a94:	50000c00 	.word	0x50000c00
 8001a98:	50001000 	.word	0x50001000
 8001a9c:	50001400 	.word	0x50001400

08001aa0 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a4d      	ldr	r2, [pc, #308]	; (8001bf4 <HAL_OPAMP_MspInit+0x154>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d119      	bne.n	8001af6 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a4c      	ldr	r2, [pc, #304]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = AUD_ORANGE_L_PREAMP_AUDIO_Pin;
 8001ada:	2304      	movs	r3, #4
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_L_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f002 fcac 	bl	800444c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001af4:	e07a      	b.n	8001bec <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP3)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a40      	ldr	r2, [pc, #256]	; (8001bfc <HAL_OPAMP_MspInit+0x15c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d118      	bne.n	8001b32 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b00:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	4a3c      	ldr	r2, [pc, #240]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AUD_ORANGE_PREAMP_AUDIO_Pin;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4835      	ldr	r0, [pc, #212]	; (8001c00 <HAL_OPAMP_MspInit+0x160>)
 8001b2c:	f002 fc8e 	bl	800444c <HAL_GPIO_Init>
}
 8001b30:	e05c      	b.n	8001bec <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP4)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a33      	ldr	r2, [pc, #204]	; (8001c04 <HAL_OPAMP_MspInit+0x164>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d119      	bne.n	8001b70 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b40:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001b42:	f043 0302 	orr.w	r3, r3, #2
 8001b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	4825      	ldr	r0, [pc, #148]	; (8001c00 <HAL_OPAMP_MspInit+0x160>)
 8001b6a:	f002 fc6f 	bl	800444c <HAL_GPIO_Init>
}
 8001b6e:	e03d      	b.n	8001bec <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP5)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a24      	ldr	r2, [pc, #144]	; (8001c08 <HAL_OPAMP_MspInit+0x168>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d11a      	bne.n	8001bb0 <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001baa:	f002 fc4f 	bl	800444c <HAL_GPIO_Init>
}
 8001bae:	e01d      	b.n	8001bec <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP6)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <HAL_OPAMP_MspInit+0x16c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d118      	bne.n	8001bec <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_OPAMP_MspInit+0x158>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <HAL_OPAMP_MspInit+0x160>)
 8001be8:	f002 fc30 	bl	800444c <HAL_GPIO_Init>
}
 8001bec:	bf00      	nop
 8001bee:	3730      	adds	r7, #48	; 0x30
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40010300 	.word	0x40010300
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010308 	.word	0x40010308
 8001c00:	48000400 	.word	0x48000400
 8001c04:	4001030c 	.word	0x4001030c
 8001c08:	40010310 	.word	0x40010310
 8001c0c:	40010314 	.word	0x40010314

08001c10 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0a0      	sub	sp, #128	; 0x80
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	2254      	movs	r2, #84	; 0x54
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 ff6f 	bl	800ab14 <memset>
  if(hqspi->Instance==QUADSPI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a3c      	ldr	r2, [pc, #240]	; (8001d2c <HAL_QSPI_MspInit+0x11c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d170      	bne.n	8001d22 <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001c40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c4a:	f107 0318 	add.w	r3, r7, #24
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fd54 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c5a:	f7ff fc51 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c62:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6513      	str	r3, [r2, #80]	; 0x50
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c76:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001c7c:	f043 0308 	orr.w	r3, r3, #8
 8001c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c82:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001c94:	f043 0320 	orr.w	r3, r3, #32
 8001c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9a:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca6:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001cac:	f043 0310 	orr.w	r3, r3, #16
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HAL_QSPI_MspInit+0x120>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
    PE15     ------> QUADSPI1_BK1_IO3
    PE11     ------> QUADSPI1_BK1_NCS
    PE14     ------> QUADSPI1_BK1_IO2
    PE13     ------> QUADSPI1_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7
 8001cbe:	23f8      	movs	r3, #248	; 0xf8
 8001cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001cce:	230a      	movs	r3, #10
 8001cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4816      	ldr	r0, [pc, #88]	; (8001d34 <HAL_QSPI_MspInit+0x124>)
 8001cda:	f002 fbb7 	bl	800444c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001cf0:	230a      	movs	r3, #10
 8001cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480f      	ldr	r0, [pc, #60]	; (8001d38 <HAL_QSPI_MspInit+0x128>)
 8001cfc:	f002 fba6 	bl	800444c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14
 8001d00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d04:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d12:	230a      	movs	r3, #10
 8001d14:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <HAL_QSPI_MspInit+0x12c>)
 8001d1e:	f002 fb95 	bl	800444c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d22:	bf00      	nop
 8001d24:	3780      	adds	r7, #128	; 0x80
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	a0001000 	.word	0xa0001000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48000c00 	.word	0x48000c00
 8001d38:	48001400 	.word	0x48001400
 8001d3c:	48001000 	.word	0x48001000

08001d40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b090      	sub	sp, #64	; 0x40
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a62      	ldr	r2, [pc, #392]	; (8001ee8 <HAL_SPI_MspInit+0x1a8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d146      	bne.n	8001df0 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d62:	4b62      	ldr	r3, [pc, #392]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	4a61      	ldr	r2, [pc, #388]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	4a5b      	ldr	r2, [pc, #364]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d86:	4b59      	ldr	r3, [pc, #356]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b56      	ldr	r3, [pc, #344]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a55      	ldr	r2, [pc, #340]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	623b      	str	r3, [r7, #32]
 8001da8:	6a3b      	ldr	r3, [r7, #32]
    PD15     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001dbc:	2306      	movs	r3, #6
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	484a      	ldr	r0, [pc, #296]	; (8001ef0 <HAL_SPI_MspInit+0x1b0>)
 8001dc8:	f002 fb40 	bl	800444c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8001dcc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dde:	2305      	movs	r3, #5
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de6:	4619      	mov	r1, r3
 8001de8:	4842      	ldr	r0, [pc, #264]	; (8001ef4 <HAL_SPI_MspInit+0x1b4>)
 8001dea:	f002 fb2f 	bl	800444c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001dee:	e077      	b.n	8001ee0 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a40      	ldr	r2, [pc, #256]	; (8001ef8 <HAL_SPI_MspInit+0x1b8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d145      	bne.n	8001e86 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dfa:	4b3c      	ldr	r3, [pc, #240]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	4a3b      	ldr	r2, [pc, #236]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e04:	6593      	str	r3, [r2, #88]	; 0x58
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	4a35      	ldr	r2, [pc, #212]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	4a2f      	ldr	r2, [pc, #188]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e42:	2320      	movs	r3, #32
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e52:	2306      	movs	r3, #6
 8001e54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4825      	ldr	r0, [pc, #148]	; (8001ef4 <HAL_SPI_MspInit+0x1b4>)
 8001e5e:	f002 faf5 	bl	800444c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001e62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e74:	2306      	movs	r3, #6
 8001e76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	481f      	ldr	r0, [pc, #124]	; (8001efc <HAL_SPI_MspInit+0x1bc>)
 8001e80:	f002 fae4 	bl	800444c <HAL_GPIO_Init>
}
 8001e84:	e02c      	b.n	8001ee0 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI4)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <HAL_SPI_MspInit+0x1c0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d127      	bne.n	8001ee0 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e94:	4a15      	ldr	r2, [pc, #84]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001eae:	f043 0310 	orr.w	r3, r3, #16
 8001eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_SPI_MspInit+0x1ac>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_2;
 8001ec0:	2374      	movs	r3, #116	; 0x74
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001ed0:	2305      	movs	r3, #5
 8001ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480a      	ldr	r0, [pc, #40]	; (8001f04 <HAL_SPI_MspInit+0x1c4>)
 8001edc:	f002 fab6 	bl	800444c <HAL_GPIO_Init>
}
 8001ee0:	bf00      	nop
 8001ee2:	3740      	adds	r7, #64	; 0x40
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40003800 	.word	0x40003800
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	48000c00 	.word	0x48000c00
 8001ef4:	48000400 	.word	0x48000400
 8001ef8:	40003c00 	.word	0x40003c00
 8001efc:	48000800 	.word	0x48000800
 8001f00:	40013c00 	.word	0x40013c00
 8001f04:	48001000 	.word	0x48001000

08001f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_TIM_Base_MspInit+0x38>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d10b      	bne.n	8001f32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_TIM_Base_MspInit+0x3c>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <HAL_TIM_Base_MspInit+0x3c>)
 8001f20:	f043 0310 	orr.w	r3, r3, #16
 8001f24:	6593      	str	r3, [r2, #88]	; 0x58
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_TIM_Base_MspInit+0x3c>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40001000 	.word	0x40001000
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0a0      	sub	sp, #128	; 0x80
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f60:	f107 0318 	add.w	r3, r7, #24
 8001f64:	2254      	movs	r2, #84	; 0x54
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f008 fdd3 	bl	800ab14 <memset>
  if(huart->Instance==UART5)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2d      	ldr	r2, [pc, #180]	; (8002028 <HAL_UART_MspInit+0xe0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d152      	bne.n	800201e <HAL_UART_MspInit+0xd6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 fbb9 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f90:	f7ff fab6 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_UART_MspInit+0xe4>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <HAL_UART_MspInit+0xe4>)
 8001f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_UART_MspInit+0xe4>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_UART_MspInit+0xe4>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_UART_MspInit+0xe4>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_UART_MspInit+0xe4>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_UART_MspInit+0xe4>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_UART_MspInit+0xe4>)
 8001fca:	f043 0308 	orr.w	r3, r3, #8
 8001fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_UART_MspInit+0xe4>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001fee:	2305      	movs	r3, #5
 8001ff0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <HAL_UART_MspInit+0xe8>)
 8001ffa:	f002 fa27 	bl	800444c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ffe:	2304      	movs	r3, #4
 8002000:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800200e:	2305      	movs	r3, #5
 8002010:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002012:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002016:	4619      	mov	r1, r3
 8002018:	4806      	ldr	r0, [pc, #24]	; (8002034 <HAL_UART_MspInit+0xec>)
 800201a:	f002 fa17 	bl	800444c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3780      	adds	r7, #128	; 0x80
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40005000 	.word	0x40005000
 800202c:	40021000 	.word	0x40021000
 8002030:	48000800 	.word	0x48000800
 8002034:	48000c00 	.word	0x48000c00

08002038 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b0a0      	sub	sp, #128	; 0x80
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002050:	f107 0318 	add.w	r3, r7, #24
 8002054:	2254      	movs	r2, #84	; 0x54
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f008 fd5b 	bl	800ab14 <memset>
  if(husart->Instance==USART3)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a2d      	ldr	r2, [pc, #180]	; (8002118 <HAL_USART_MspInit+0xe0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d153      	bne.n	8002110 <HAL_USART_MspInit+0xd8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002068:	2304      	movs	r3, #4
 800206a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	4618      	mov	r0, r3
 8002076:	f003 fb41 	bl	80056fc <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8002080:	f7ff fa3e 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002084:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_USART_MspInit+0xe4>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	4a24      	ldr	r2, [pc, #144]	; (800211c <HAL_USART_MspInit+0xe4>)
 800208a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208e:	6593      	str	r3, [r2, #88]	; 0x58
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_USART_MspInit+0xe4>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209c:	4b1f      	ldr	r3, [pc, #124]	; (800211c <HAL_USART_MspInit+0xe4>)
 800209e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a0:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_USART_MspInit+0xe4>)
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_USART_MspInit+0xe4>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_USART_MspInit+0xe4>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	4a18      	ldr	r2, [pc, #96]	; (800211c <HAL_USART_MspInit+0xe4>)
 80020ba:	f043 0308 	orr.w	r3, r3, #8
 80020be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c0:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_USART_MspInit+0xe4>)
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB9     ------> USART3_TX
    PD10     ------> USART3_CK
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020de:	2307      	movs	r3, #7
 80020e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020e6:	4619      	mov	r1, r3
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <HAL_USART_MspInit+0xe8>)
 80020ea:	f002 f9af 	bl	800444c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80020ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002100:	2307      	movs	r3, #7
 8002102:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002104:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002108:	4619      	mov	r1, r3
 800210a:	4806      	ldr	r0, [pc, #24]	; (8002124 <HAL_USART_MspInit+0xec>)
 800210c:	f002 f99e 	bl	800444c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002110:	bf00      	nop
 8002112:	3780      	adds	r7, #128	; 0x80
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40004800 	.word	0x40004800
 800211c:	40021000 	.word	0x40021000
 8002120:	48000400 	.word	0x48000400
 8002124:	48000c00 	.word	0x48000c00

08002128 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002138:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <HAL_InitTick+0xc4>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a2b      	ldr	r2, [pc, #172]	; (80021ec <HAL_InitTick+0xc4>)
 800213e:	f043 0320 	orr.w	r3, r3, #32
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
 8002144:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_InitTick+0xc4>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002150:	f107 020c 	add.w	r2, r7, #12
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f003 fa2c 	bl	80055b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002160:	f003 f9fe 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 8002164:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <HAL_InitTick+0xc8>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9b      	lsrs	r3, r3, #18
 8002170:	3b01      	subs	r3, #1
 8002172:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002174:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <HAL_InitTick+0xcc>)
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <HAL_InitTick+0xd0>)
 8002178:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_InitTick+0xcc>)
 800217c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002180:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_InitTick+0xcc>)
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_InitTick+0xcc>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_InitTick+0xcc>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8002194:	4817      	ldr	r0, [pc, #92]	; (80021f4 <HAL_InitTick+0xcc>)
 8002196:	f003 fdaa 	bl	8005cee <HAL_TIM_Base_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80021a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11b      	bne.n	80021e0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80021a8:	4812      	ldr	r0, [pc, #72]	; (80021f4 <HAL_InitTick+0xcc>)
 80021aa:	f003 fe67 	bl	8005e7c <HAL_TIM_Base_Start_IT>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80021b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d111      	bne.n	80021e0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80021bc:	2037      	movs	r0, #55	; 0x37
 80021be:	f001 fa99 	bl	80036f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d808      	bhi.n	80021da <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	2037      	movs	r0, #55	; 0x37
 80021ce:	f001 fa77 	bl	80036c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_InitTick+0xd4>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e002      	b.n	80021e0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3730      	adds	r7, #48	; 0x30
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	431bde83 	.word	0x431bde83
 80021f4:	20000a54 	.word	0x20000a54
 80021f8:	40001400 	.word	0x40001400
 80021fc:	20000004 	.word	0x20000004

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002204:	f003 fa1a 	bl	800563c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <NMI_Handler+0x8>

0800220a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <HardFault_Handler+0x4>

08002210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <MemManage_Handler+0x4>

08002216 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <UsageFault_Handler+0x4>

08002222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <DMA1_Channel1_IRQHandler+0x10>)
 8002236:	f001 ffba 	bl	80041ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000314 	.word	0x20000314

08002244 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <TIM7_DAC_IRQHandler+0x1c>)
 800224a:	f003 fe8f 	bl	8005f6c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <TIM7_DAC_IRQHandler+0x20>)
 8002250:	f001 fbc0 	bl	80039d4 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac4);
 8002254:	4804      	ldr	r0, [pc, #16]	; (8002268 <TIM7_DAC_IRQHandler+0x24>)
 8002256:	f001 fbbd 	bl	80039d4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000a54 	.word	0x20000a54
 8002264:	200002d8 	.word	0x200002d8
 8002268:	20000300 	.word	0x20000300

0800226c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <SystemInit+0x20>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <SystemInit+0x20>)
 8002278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002292:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002294:	f7ff ffea 	bl	800226c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002298:	480c      	ldr	r0, [pc, #48]	; (80022cc <LoopForever+0x6>)
  ldr r1, =_edata
 800229a:	490d      	ldr	r1, [pc, #52]	; (80022d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <LoopForever+0xe>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022b0:	4c0a      	ldr	r4, [pc, #40]	; (80022dc <LoopForever+0x16>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022be:	f008 fbf5 	bl	800aaac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022c2:	f7fe f981 	bl	80005c8 <main>

080022c6 <LoopForever>:

LoopForever:
    b LoopForever
 80022c6:	e7fe      	b.n	80022c6 <LoopForever>
  ldr   r0, =_estack
 80022c8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80022d4:	0800ae18 	.word	0x0800ae18
  ldr r2, =_sbss
 80022d8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80022dc:	200024d0 	.word	0x200024d0

080022e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC1_2_IRQHandler>

080022e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f001 f9dc 	bl	80036aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022f2:	200f      	movs	r0, #15
 80022f4:	f7ff ff18 	bl	8002128 <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	71fb      	strb	r3, [r7, #7]
 8002302:	e001      	b.n	8002308 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002304:	f7ff f902 	bl	800150c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002308:	79fb      	ldrb	r3, [r7, #7]

}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_IncTick+0x1c>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_IncTick+0x20>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4413      	add	r3, r2
 8002322:	4a03      	ldr	r2, [pc, #12]	; (8002330 <HAL_IncTick+0x1c>)
 8002324:	6013      	str	r3, [r2, #0]
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	20000aa0 	.word	0x20000aa0
 8002334:	20000008 	.word	0x20000008

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000aa0 	.word	0x20000aa0

08002350 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3360      	adds	r3, #96	; 0x60
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <LL_ADC_SetOffset+0x44>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	03fff000 	.word	0x03fff000

08002400 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3360      	adds	r3, #96	; 0x60
 800240e:	461a      	mov	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3360      	adds	r3, #96	; 0x60
 800243c:	461a      	mov	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002462:	b480      	push	{r7}
 8002464:	b087      	sub	sp, #28
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3360      	adds	r3, #96	; 0x60
 8002472:	461a      	mov	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	431a      	orrs	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800248c:	bf00      	nop
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3360      	adds	r3, #96	; 0x60
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	431a      	orrs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	615a      	str	r2, [r3, #20]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3330      	adds	r3, #48	; 0x30
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	4413      	add	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	211f      	movs	r1, #31
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	f003 011f 	and.w	r1, r3, #31
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	431a      	orrs	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3314      	adds	r3, #20
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	0e5b      	lsrs	r3, r3, #25
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	4413      	add	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	0d1b      	lsrs	r3, r3, #20
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	2107      	movs	r1, #7
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	401a      	ands	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	0d1b      	lsrs	r3, r3, #20
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	431a      	orrs	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025bc:	43db      	mvns	r3, r3
 80025be:	401a      	ands	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0318 	and.w	r3, r3, #24
 80025c6:	4908      	ldr	r1, [pc, #32]	; (80025e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025c8:	40d9      	lsrs	r1, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	400b      	ands	r3, r1
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	0007ffff 	.word	0x0007ffff

080025ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6093      	str	r3, [r2, #8]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002624:	d101      	bne.n	800262a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800264c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002674:	d101      	bne.n	800267a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <LL_ADC_IsEnabled+0x18>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <LL_ADC_IsEnabled+0x1a>
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d101      	bne.n	80026c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d101      	bne.n	80026ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1a9      	b.n	8002a6a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7fe ff19 	bl	800155c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff67 	bl	8002610 <LL_ADC_IsDeepPowerDownEnabled>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff4d 	bl	80025ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff82 	bl	8002660 <LL_ADC_IsInternalRegulatorEnabled>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d115      	bne.n	800278e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff66 	bl	8002638 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800276c:	4b9c      	ldr	r3, [pc, #624]	; (80029e0 <HAL_ADC_Init+0x2e4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	4a9c      	ldr	r2, [pc, #624]	; (80029e4 <HAL_ADC_Init+0x2e8>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	3301      	adds	r3, #1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002780:	e002      	b.n	8002788 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3b01      	subs	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f9      	bne.n	8002782 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff ff64 	bl	8002660 <LL_ADC_IsInternalRegulatorEnabled>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10d      	bne.n	80027ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	f043 0210 	orr.w	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ae:	f043 0201 	orr.w	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff75 	bl	80026ae <LL_ADC_REG_IsConversionOngoing>
 80027c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 8142 	bne.w	8002a58 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 813e 	bne.w	8002a58 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027e4:	f043 0202 	orr.w	r2, r3, #2
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff49 	bl	8002688 <LL_ADC_IsEnabled>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d141      	bne.n	8002880 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002804:	d004      	beq.n	8002810 <HAL_ADC_Init+0x114>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a77      	ldr	r2, [pc, #476]	; (80029e8 <HAL_ADC_Init+0x2ec>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d10f      	bne.n	8002830 <HAL_ADC_Init+0x134>
 8002810:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002814:	f7ff ff38 	bl	8002688 <LL_ADC_IsEnabled>
 8002818:	4604      	mov	r4, r0
 800281a:	4873      	ldr	r0, [pc, #460]	; (80029e8 <HAL_ADC_Init+0x2ec>)
 800281c:	f7ff ff34 	bl	8002688 <LL_ADC_IsEnabled>
 8002820:	4603      	mov	r3, r0
 8002822:	4323      	orrs	r3, r4
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	e012      	b.n	8002856 <HAL_ADC_Init+0x15a>
 8002830:	486e      	ldr	r0, [pc, #440]	; (80029ec <HAL_ADC_Init+0x2f0>)
 8002832:	f7ff ff29 	bl	8002688 <LL_ADC_IsEnabled>
 8002836:	4604      	mov	r4, r0
 8002838:	486d      	ldr	r0, [pc, #436]	; (80029f0 <HAL_ADC_Init+0x2f4>)
 800283a:	f7ff ff25 	bl	8002688 <LL_ADC_IsEnabled>
 800283e:	4603      	mov	r3, r0
 8002840:	431c      	orrs	r4, r3
 8002842:	486c      	ldr	r0, [pc, #432]	; (80029f4 <HAL_ADC_Init+0x2f8>)
 8002844:	f7ff ff20 	bl	8002688 <LL_ADC_IsEnabled>
 8002848:	4603      	mov	r3, r0
 800284a:	4323      	orrs	r3, r4
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d012      	beq.n	8002880 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002862:	d004      	beq.n	800286e <HAL_ADC_Init+0x172>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a5f      	ldr	r2, [pc, #380]	; (80029e8 <HAL_ADC_Init+0x2ec>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_ADC_Init+0x176>
 800286e:	4a62      	ldr	r2, [pc, #392]	; (80029f8 <HAL_ADC_Init+0x2fc>)
 8002870:	e000      	b.n	8002874 <HAL_ADC_Init+0x178>
 8002872:	4a62      	ldr	r2, [pc, #392]	; (80029fc <HAL_ADC_Init+0x300>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f7ff fd68 	bl	8002350 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7f5b      	ldrb	r3, [r3, #29]
 8002884:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800288a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002890:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002896:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800289e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d106      	bne.n	80028bc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	3b01      	subs	r3, #1
 80028b4:	045b      	lsls	r3, r3, #17
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <HAL_ADC_Init+0x304>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fee4 	bl	80026d4 <LL_ADC_INJ_IsConversionOngoing>
 800290c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d17f      	bne.n	8002a14 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d17c      	bne.n	8002a14 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800291e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002926:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002936:	f023 0302 	bic.w	r3, r3, #2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	430b      	orrs	r3, r1
 8002942:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d017      	beq.n	800297c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800295a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002964:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6911      	ldr	r1, [r2, #16]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	430b      	orrs	r3, r1
 8002976:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800297a:	e013      	b.n	80029a4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800298a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800299c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d12a      	bne.n	8002a04 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029c4:	4311      	orrs	r1, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029d0:	430a      	orrs	r2, r1
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	611a      	str	r2, [r3, #16]
 80029de:	e019      	b.n	8002a14 <HAL_ADC_Init+0x318>
 80029e0:	20000000 	.word	0x20000000
 80029e4:	053e2d63 	.word	0x053e2d63
 80029e8:	50000100 	.word	0x50000100
 80029ec:	50000400 	.word	0x50000400
 80029f0:	50000500 	.word	0x50000500
 80029f4:	50000600 	.word	0x50000600
 80029f8:	50000300 	.word	0x50000300
 80029fc:	50000700 	.word	0x50000700
 8002a00:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d10c      	bne.n	8002a36 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f023 010f 	bic.w	r1, r3, #15
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	1e5a      	subs	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
 8002a34:	e007      	b.n	8002a46 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 020f 	bic.w	r2, r2, #15
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a56:	e007      	b.n	8002a68 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	f043 0210 	orr.w	r2, r3, #16
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd90      	pop	{r4, r7, pc}
 8002a72:	bf00      	nop

08002a74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b0b6      	sub	sp, #216	; 0xd8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d102      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x24>
 8002a92:	2302      	movs	r3, #2
 8002a94:	f000 bc13 	b.w	80032be <HAL_ADC_ConfigChannel+0x84a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fe02 	bl	80026ae <LL_ADC_REG_IsConversionOngoing>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 83f3 	bne.w	8003298 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f7ff fd18 	bl	80024f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fdf0 	bl	80026ae <LL_ADC_REG_IsConversionOngoing>
 8002ace:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fdfc 	bl	80026d4 <LL_ADC_INJ_IsConversionOngoing>
 8002adc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 81d9 	bne.w	8002e9c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 81d4 	bne.w	8002e9c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002afc:	d10f      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2200      	movs	r2, #0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f7ff fd1f 	bl	800254c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fcd9 	bl	80024ce <LL_ADC_SetSamplingTimeCommonConfig>
 8002b1c:	e00e      	b.n	8002b3c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f7ff fd0e 	bl	800254c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fcc9 	bl	80024ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	08db      	lsrs	r3, r3, #3
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d022      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6919      	ldr	r1, [r3, #16]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b6e:	f7ff fc23 	bl	80023b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f7ff fc6f 	bl	8002462 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d102      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x126>
 8002b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b98:	e000      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x128>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f7ff fc7b 	bl	8002498 <LL_ADC_SetOffsetSaturation>
 8002ba2:	e17b      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fc28 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x15c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fc1d 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	f003 021f 	and.w	r2, r3, #31
 8002bce:	e01e      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x19a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fc12 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e004      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002c02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x1b2>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	e018      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x1e4>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e004      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d106      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fbe1 	bl	800242c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fbc5 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x222>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fbba 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	e01e      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x260>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fbaf 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002cb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002cc4:	2320      	movs	r3, #32
 8002cc6:	e004      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x278>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	e018      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x2aa>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d10:	2320      	movs	r3, #32
 8002d12:	e004      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d106      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2200      	movs	r2, #0
 8002d28:	2101      	movs	r1, #1
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fb7e 	bl	800242c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2102      	movs	r1, #2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fb62 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x2e8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fb57 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	0e9b      	lsrs	r3, r3, #26
 8002d56:	f003 021f 	and.w	r2, r3, #31
 8002d5a:	e01e      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x326>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2102      	movs	r1, #2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fb4c 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	e004      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d105      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x33e>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	0e9b      	lsrs	r3, r3, #26
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	e016      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x36c>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	e004      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002dd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d106      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2102      	movs	r1, #2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fb1d 	bl	800242c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2103      	movs	r1, #3
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fb01 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x3aa>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2103      	movs	r1, #3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff faf6 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	0e9b      	lsrs	r3, r3, #26
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	e017      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x3da>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2103      	movs	r1, #3
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff faeb 	bl	8002400 <LL_ADC_GetOffsetChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e38:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e40:	2320      	movs	r3, #32
 8002e42:	e003      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x3f2>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	0e9b      	lsrs	r3, r3, #26
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	e011      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x416>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e7e:	2320      	movs	r3, #32
 8002e80:	e003      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d106      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	2103      	movs	r1, #3
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fac8 	bl	800242c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fbf1 	bl	8002688 <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f040 813d 	bne.w	8003128 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f7ff fb72 	bl	80025a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4aa2      	ldr	r2, [pc, #648]	; (8003150 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	f040 812e 	bne.w	8003128 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x480>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2b09      	cmp	r3, #9
 8002eea:	bf94      	ite	ls
 8002eec:	2301      	movls	r3, #1
 8002eee:	2300      	movhi	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e019      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x4b4>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f04:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e003      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2b09      	cmp	r3, #9
 8002f20:	bf94      	ite	ls
 8002f22:	2301      	movls	r3, #1
 8002f24:	2300      	movhi	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d079      	beq.n	8003020 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x4d4>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	3301      	adds	r3, #1
 8002f40:	069b      	lsls	r3, r3, #26
 8002f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f46:	e015      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x500>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f58:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e003      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	069b      	lsls	r3, r3, #26
 8002f70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x520>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	3301      	adds	r3, #1
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	e017      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x550>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002fac:	2320      	movs	r3, #32
 8002fae:	e003      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	ea42 0103 	orr.w	r1, r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x576>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f003 021f 	and.w	r2, r3, #31
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	051b      	lsls	r3, r3, #20
 8002fe8:	e018      	b.n	800301c <HAL_ADC_ConfigChannel+0x5a8>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e003      	b.n	800300e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301c:	430b      	orrs	r3, r1
 800301e:	e07e      	b.n	800311e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_ADC_ConfigChannel+0x5c8>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	3301      	adds	r3, #1
 8003034:	069b      	lsls	r3, r3, #26
 8003036:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800303a:	e015      	b.n	8003068 <HAL_ADC_ConfigChannel+0x5f4>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e003      	b.n	8003060 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3301      	adds	r3, #1
 8003062:	069b      	lsls	r3, r3, #26
 8003064:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x614>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	0e9b      	lsrs	r3, r3, #26
 800307a:	3301      	adds	r3, #1
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	e017      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x644>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	61fb      	str	r3, [r7, #28]
  return result;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80030a0:	2320      	movs	r3, #32
 80030a2:	e003      	b.n	80030ac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	ea42 0103 	orr.w	r1, r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10d      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x670>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0e9b      	lsrs	r3, r3, #26
 80030ce:	3301      	adds	r3, #1
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	3b1e      	subs	r3, #30
 80030dc:	051b      	lsls	r3, r3, #20
 80030de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030e2:	e01b      	b.n	800311c <HAL_ADC_ConfigChannel+0x6a8>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	613b      	str	r3, [r7, #16]
  return result;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030fc:	2320      	movs	r3, #32
 80030fe:	e003      	b.n	8003108 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	3301      	adds	r3, #1
 800310a:	f003 021f 	and.w	r2, r3, #31
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	3b1e      	subs	r3, #30
 8003116:	051b      	lsls	r3, r3, #20
 8003118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800311c:	430b      	orrs	r3, r1
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	4619      	mov	r1, r3
 8003124:	f7ff fa12 	bl	800254c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_ADC_ConfigChannel+0x6e0>)
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80be 	beq.w	80032b2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800313e:	d004      	beq.n	800314a <HAL_ADC_ConfigChannel+0x6d6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <HAL_ADC_ConfigChannel+0x6e4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10a      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x6ec>
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <HAL_ADC_ConfigChannel+0x6e8>)
 800314c:	e009      	b.n	8003162 <HAL_ADC_ConfigChannel+0x6ee>
 800314e:	bf00      	nop
 8003150:	407f0000 	.word	0x407f0000
 8003154:	80080000 	.word	0x80080000
 8003158:	50000100 	.word	0x50000100
 800315c:	50000300 	.word	0x50000300
 8003160:	4b59      	ldr	r3, [pc, #356]	; (80032c8 <HAL_ADC_ConfigChannel+0x854>)
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff f91a 	bl	800239c <LL_ADC_GetCommonPathInternalCh>
 8003168:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a56      	ldr	r2, [pc, #344]	; (80032cc <HAL_ADC_ConfigChannel+0x858>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x70c>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a55      	ldr	r2, [pc, #340]	; (80032d0 <HAL_ADC_ConfigChannel+0x85c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d13a      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003184:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d134      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003194:	d005      	beq.n	80031a2 <HAL_ADC_ConfigChannel+0x72e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a4e      	ldr	r2, [pc, #312]	; (80032d4 <HAL_ADC_ConfigChannel+0x860>)
 800319c:	4293      	cmp	r3, r2
 800319e:	f040 8085 	bne.w	80032ac <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031aa:	d004      	beq.n	80031b6 <HAL_ADC_ConfigChannel+0x742>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a49      	ldr	r2, [pc, #292]	; (80032d8 <HAL_ADC_ConfigChannel+0x864>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x746>
 80031b6:	4a49      	ldr	r2, [pc, #292]	; (80032dc <HAL_ADC_ConfigChannel+0x868>)
 80031b8:	e000      	b.n	80031bc <HAL_ADC_ConfigChannel+0x748>
 80031ba:	4a43      	ldr	r2, [pc, #268]	; (80032c8 <HAL_ADC_ConfigChannel+0x854>)
 80031bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f7ff f8d5 	bl	8002376 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031cc:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <HAL_ADC_ConfigChannel+0x86c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	4a44      	ldr	r2, [pc, #272]	; (80032e4 <HAL_ADC_ConfigChannel+0x870>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031e6:	e002      	b.n	80031ee <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f9      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031f4:	e05a      	b.n	80032ac <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a3b      	ldr	r2, [pc, #236]	; (80032e8 <HAL_ADC_ConfigChannel+0x874>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d125      	bne.n	800324c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003200:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d11f      	bne.n	800324c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a31      	ldr	r2, [pc, #196]	; (80032d8 <HAL_ADC_ConfigChannel+0x864>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d104      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x7ac>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a34      	ldr	r2, [pc, #208]	; (80032ec <HAL_ADC_ConfigChannel+0x878>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d047      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003228:	d004      	beq.n	8003234 <HAL_ADC_ConfigChannel+0x7c0>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <HAL_ADC_ConfigChannel+0x864>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x7c4>
 8003234:	4a29      	ldr	r2, [pc, #164]	; (80032dc <HAL_ADC_ConfigChannel+0x868>)
 8003236:	e000      	b.n	800323a <HAL_ADC_ConfigChannel+0x7c6>
 8003238:	4a23      	ldr	r2, [pc, #140]	; (80032c8 <HAL_ADC_ConfigChannel+0x854>)
 800323a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800323e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7ff f896 	bl	8002376 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800324a:	e031      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_ADC_ConfigChannel+0x87c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d12d      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d127      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_ADC_ConfigChannel+0x864>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d022      	beq.n	80032b2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003274:	d004      	beq.n	8003280 <HAL_ADC_ConfigChannel+0x80c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <HAL_ADC_ConfigChannel+0x864>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x810>
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <HAL_ADC_ConfigChannel+0x868>)
 8003282:	e000      	b.n	8003286 <HAL_ADC_ConfigChannel+0x812>
 8003284:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <HAL_ADC_ConfigChannel+0x854>)
 8003286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800328a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f7ff f870 	bl	8002376 <LL_ADC_SetCommonPathInternalCh>
 8003296:	e00c      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80032aa:	e002      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80032ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032be:	4618      	mov	r0, r3
 80032c0:	37d8      	adds	r7, #216	; 0xd8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	50000700 	.word	0x50000700
 80032cc:	c3210000 	.word	0xc3210000
 80032d0:	90c00010 	.word	0x90c00010
 80032d4:	50000600 	.word	0x50000600
 80032d8:	50000100 	.word	0x50000100
 80032dc:	50000300 	.word	0x50000300
 80032e0:	20000000 	.word	0x20000000
 80032e4:	053e2d63 	.word	0x053e2d63
 80032e8:	c7520000 	.word	0xc7520000
 80032ec:	50000500 	.word	0x50000500
 80032f0:	cb840000 	.word	0xcb840000

080032f4 <LL_ADC_IsEnabled>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <LL_ADC_IsEnabled+0x18>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <LL_ADC_IsEnabled+0x1a>
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <LL_ADC_REG_IsConversionOngoing>:
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d101      	bne.n	8003332 <LL_ADC_REG_IsConversionOngoing+0x18>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b0a1      	sub	sp, #132	; 0x84
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800335a:	2302      	movs	r3, #2
 800335c:	e0e7      	b.n	800352e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003366:	2300      	movs	r3, #0
 8003368:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800336a:	2300      	movs	r3, #0
 800336c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003376:	d102      	bne.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	e009      	b.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6e      	ldr	r2, [pc, #440]	; (800353c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d102      	bne.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003388:	4b6d      	ldr	r3, [pc, #436]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	e001      	b.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0be      	b.n	800352e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ffb1 	bl	800331a <LL_ADC_REG_IsConversionOngoing>
 80033b8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ffab 	bl	800331a <LL_ADC_REG_IsConversionOngoing>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 80a0 	bne.w	800350c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 809c 	bne.w	800350c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033dc:	d004      	beq.n	80033e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a55      	ldr	r2, [pc, #340]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80033e8:	4b56      	ldr	r3, [pc, #344]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80033ea:	e000      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80033ec:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80033ee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d04b      	beq.n	8003490 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800340a:	035b      	lsls	r3, r3, #13
 800340c:	430b      	orrs	r3, r1
 800340e:	431a      	orrs	r2, r3
 8003410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003412:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800341c:	d004      	beq.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a45      	ldr	r2, [pc, #276]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d10f      	bne.n	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003428:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800342c:	f7ff ff62 	bl	80032f4 <LL_ADC_IsEnabled>
 8003430:	4604      	mov	r4, r0
 8003432:	4841      	ldr	r0, [pc, #260]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003434:	f7ff ff5e 	bl	80032f4 <LL_ADC_IsEnabled>
 8003438:	4603      	mov	r3, r0
 800343a:	4323      	orrs	r3, r4
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e012      	b.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003448:	483c      	ldr	r0, [pc, #240]	; (800353c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800344a:	f7ff ff53 	bl	80032f4 <LL_ADC_IsEnabled>
 800344e:	4604      	mov	r4, r0
 8003450:	483b      	ldr	r0, [pc, #236]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003452:	f7ff ff4f 	bl	80032f4 <LL_ADC_IsEnabled>
 8003456:	4603      	mov	r3, r0
 8003458:	431c      	orrs	r4, r3
 800345a:	483c      	ldr	r0, [pc, #240]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800345c:	f7ff ff4a 	bl	80032f4 <LL_ADC_IsEnabled>
 8003460:	4603      	mov	r3, r0
 8003462:	4323      	orrs	r3, r4
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d056      	beq.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800347a:	f023 030f 	bic.w	r3, r3, #15
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	6892      	ldr	r2, [r2, #8]
 8003486:	430a      	orrs	r2, r1
 8003488:	431a      	orrs	r2, r3
 800348a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800348c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800348e:	e047      	b.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a4:	d004      	beq.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a23      	ldr	r2, [pc, #140]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10f      	bne.n	80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80034b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034b4:	f7ff ff1e 	bl	80032f4 <LL_ADC_IsEnabled>
 80034b8:	4604      	mov	r4, r0
 80034ba:	481f      	ldr	r0, [pc, #124]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034bc:	f7ff ff1a 	bl	80032f4 <LL_ADC_IsEnabled>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4323      	orrs	r3, r4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e012      	b.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80034d0:	481a      	ldr	r0, [pc, #104]	; (800353c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034d2:	f7ff ff0f 	bl	80032f4 <LL_ADC_IsEnabled>
 80034d6:	4604      	mov	r4, r0
 80034d8:	4819      	ldr	r0, [pc, #100]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034da:	f7ff ff0b 	bl	80032f4 <LL_ADC_IsEnabled>
 80034de:	4603      	mov	r3, r0
 80034e0:	431c      	orrs	r4, r3
 80034e2:	481a      	ldr	r0, [pc, #104]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034e4:	f7ff ff06 	bl	80032f4 <LL_ADC_IsEnabled>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4323      	orrs	r3, r4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d012      	beq.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003502:	f023 030f 	bic.w	r3, r3, #15
 8003506:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003508:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800350a:	e009      	b.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800351e:	e000      	b.n	8003522 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003520:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800352a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800352e:	4618      	mov	r0, r3
 8003530:	3784      	adds	r7, #132	; 0x84
 8003532:	46bd      	mov	sp, r7
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	bf00      	nop
 8003538:	50000100 	.word	0x50000100
 800353c:	50000400 	.word	0x50000400
 8003540:	50000500 	.word	0x50000500
 8003544:	50000300 	.word	0x50000300
 8003548:	50000700 	.word	0x50000700
 800354c:	50000600 	.word	0x50000600

08003550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800356c:	4013      	ands	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003582:	4a04      	ldr	r2, [pc, #16]	; (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	60d3      	str	r3, [r2, #12]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <__NVIC_GetPriorityGrouping+0x18>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	f003 0307 	and.w	r3, r3, #7
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	db0b      	blt.n	80035de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	f003 021f 	and.w	r2, r3, #31
 80035cc:	4907      	ldr	r1, [pc, #28]	; (80035ec <__NVIC_EnableIRQ+0x38>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2001      	movs	r0, #1
 80035d6:	fa00 f202 	lsl.w	r2, r0, r2
 80035da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db0a      	blt.n	800361a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	490c      	ldr	r1, [pc, #48]	; (800363c <__NVIC_SetPriority+0x4c>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	440b      	add	r3, r1
 8003614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003618:	e00a      	b.n	8003630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4908      	ldr	r1, [pc, #32]	; (8003640 <__NVIC_SetPriority+0x50>)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3b04      	subs	r3, #4
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	440b      	add	r3, r1
 800362e:	761a      	strb	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f1c3 0307 	rsb	r3, r3, #7
 800365e:	2b04      	cmp	r3, #4
 8003660:	bf28      	it	cs
 8003662:	2304      	movcs	r3, #4
 8003664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3304      	adds	r3, #4
 800366a:	2b06      	cmp	r3, #6
 800366c:	d902      	bls.n	8003674 <NVIC_EncodePriority+0x30>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3b03      	subs	r3, #3
 8003672:	e000      	b.n	8003676 <NVIC_EncodePriority+0x32>
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	401a      	ands	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43d9      	mvns	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	4313      	orrs	r3, r2
         );
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ff4c 	bl	8003550 <__NVIC_SetPriorityGrouping>
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036ce:	f7ff ff63 	bl	8003598 <__NVIC_GetPriorityGrouping>
 80036d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	6978      	ldr	r0, [r7, #20]
 80036da:	f7ff ffb3 	bl	8003644 <NVIC_EncodePriority>
 80036de:	4602      	mov	r2, r0
 80036e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff82 	bl	80035f0 <__NVIC_SetPriority>
}
 80036ec:	bf00      	nop
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff ff56 	bl	80035b4 <__NVIC_EnableIRQ>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e014      	b.n	800374c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	791b      	ldrb	r3, [r3, #4]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe f8e0 	bl	80018f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e056      	b.n	8003816 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	795b      	ldrb	r3, [r3, #5]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_DAC_Start+0x20>
 8003770:	2302      	movs	r3, #2
 8003772:	e050      	b.n	8003816 <HAL_DAC_Start+0xc2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6819      	ldr	r1, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2201      	movs	r2, #1
 800378e:	409a      	lsls	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003798:	4b22      	ldr	r3, [pc, #136]	; (8003824 <HAL_DAC_Start+0xd0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	4a22      	ldr	r2, [pc, #136]	; (8003828 <HAL_DAC_Start+0xd4>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	3301      	adds	r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80037aa:	e002      	b.n	80037b2 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f9      	bne.n	80037ac <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d11d      	bne.n	8003808 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	e014      	b.n	8003808 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2102      	movs	r1, #2
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d107      	bne.n	8003808 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0202 	orr.w	r2, r2, #2
 8003806:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000000 	.word	0x20000000
 8003828:	053e2d63 	.word	0x053e2d63

0800382c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b2      	b.n	80039aa <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	795b      	ldrb	r3, [r3, #5]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_DAC_Start_DMA+0x24>
 800384c:	2302      	movs	r3, #2
 800384e:	e0ac      	b.n	80039aa <HAL_DAC_Start_DMA+0x17e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2202      	movs	r2, #2
 800385a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d129      	bne.n	80038b6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	4a53      	ldr	r2, [pc, #332]	; (80039b4 <HAL_DAC_Start_DMA+0x188>)
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	4a52      	ldr	r2, [pc, #328]	; (80039b8 <HAL_DAC_Start_DMA+0x18c>)
 8003870:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4a51      	ldr	r2, [pc, #324]	; (80039bc <HAL_DAC_Start_DMA+0x190>)
 8003878:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003888:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_DAC_Start_DMA+0x6c>
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	2b04      	cmp	r3, #4
 8003894:	d005      	beq.n	80038a2 <HAL_DAC_Start_DMA+0x76>
 8003896:	e009      	b.n	80038ac <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	61bb      	str	r3, [r7, #24]
        break;
 80038a0:	e033      	b.n	800390a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	330c      	adds	r3, #12
 80038a8:	61bb      	str	r3, [r7, #24]
        break;
 80038aa:	e02e      	b.n	800390a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3310      	adds	r3, #16
 80038b2:	61bb      	str	r3, [r7, #24]
        break;
 80038b4:	e029      	b.n	800390a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <HAL_DAC_Start_DMA+0x194>)
 80038bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	4a40      	ldr	r2, [pc, #256]	; (80039c4 <HAL_DAC_Start_DMA+0x198>)
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	4a3f      	ldr	r2, [pc, #252]	; (80039c8 <HAL_DAC_Start_DMA+0x19c>)
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038dc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_DAC_Start_DMA+0xc0>
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d005      	beq.n	80038f6 <HAL_DAC_Start_DMA+0xca>
 80038ea:	e009      	b.n	8003900 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3314      	adds	r3, #20
 80038f2:	61bb      	str	r3, [r7, #24]
        break;
 80038f4:	e009      	b.n	800390a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3318      	adds	r3, #24
 80038fc:	61bb      	str	r3, [r7, #24]
        break;
 80038fe:	e004      	b.n	800390a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	331c      	adds	r3, #28
 8003906:	61bb      	str	r3, [r7, #24]
        break;
 8003908:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d111      	bne.n	8003934 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800391e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6898      	ldr	r0, [r3, #8]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	f000 fbc5 	bl	80040b8 <HAL_DMA_Start_IT>
 800392e:	4603      	mov	r3, r0
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e010      	b.n	8003956 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003942:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68d8      	ldr	r0, [r3, #12]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	f000 fbb3 	bl	80040b8 <HAL_DMA_Start_IT>
 8003952:	4603      	mov	r3, r0
 8003954:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800395c:	7ffb      	ldrb	r3, [r7, #31]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11c      	bne.n	800399c <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6819      	ldr	r1, [r3, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2201      	movs	r2, #1
 8003970:	409a      	lsls	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_DAC_Start_DMA+0x1a0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	099b      	lsrs	r3, r3, #6
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <HAL_DAC_Start_DMA+0x1a4>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	099b      	lsrs	r3, r3, #6
 8003988:	3301      	adds	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800398c:	e002      	b.n	8003994 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3b01      	subs	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f9      	bne.n	800398e <HAL_DAC_Start_DMA+0x162>
 800399a:	e005      	b.n	80039a8 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f043 0204 	orr.w	r2, r3, #4
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80039a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	08003e41 	.word	0x08003e41
 80039b8:	08003e63 	.word	0x08003e63
 80039bc:	08003e7f 	.word	0x08003e7f
 80039c0:	08003efd 	.word	0x08003efd
 80039c4:	08003f1f 	.word	0x08003f1f
 80039c8:	08003f3b 	.word	0x08003f3b
 80039cc:	20000000 	.word	0x20000000
 80039d0:	053e2d63 	.word	0x053e2d63

080039d4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ea:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01d      	beq.n	8003a32 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d018      	beq.n	8003a32 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2204      	movs	r2, #4
 8003a04:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f845 	bl	8003abc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01d      	beq.n	8003a78 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d018      	beq.n	8003a78 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2204      	movs	r2, #4
 8003a4a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f043 0202 	orr.w	r2, r3, #2
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003a70:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa38 	bl	8003ee8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_DAC_ConfigChannel+0x1c>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e19e      	b.n	8003e2e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	795b      	ldrb	r3, [r3, #5]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_DAC_ConfigChannel+0x2c>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e198      	b.n	8003e2e <HAL_DAC_ConfigChannel+0x35e>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2202      	movs	r2, #2
 8003b06:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d17a      	bne.n	8003c06 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b10:	f7fe fc12 	bl	8002338 <HAL_GetTick>
 8003b14:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d13d      	bne.n	8003b98 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b1c:	e018      	b.n	8003b50 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b1e:	f7fe fc0b 	bl	8002338 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d911      	bls.n	8003b50 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f043 0208 	orr.w	r2, r3, #8
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e16e      	b.n	8003e2e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1df      	bne.n	8003b1e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40
 8003b68:	e020      	b.n	8003bac <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b6a:	f7fe fbe5 	bl	8002338 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d90f      	bls.n	8003b98 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da0a      	bge.n	8003b98 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f043 0208 	orr.w	r2, r3, #8
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2203      	movs	r2, #3
 8003b92:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e14a      	b.n	8003e2e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	dbe3      	blt.n	8003b6a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	ea02 0103 	and.w	r1, r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	21ff      	movs	r1, #255	; 0xff
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	ea02 0103 	and.w	r1, r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d11d      	bne.n	8003c4a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	221f      	movs	r2, #31
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c26:	4013      	ands	r3, r2
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2207      	movs	r2, #7
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c62:	4013      	ands	r3, r2
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d102      	bne.n	8003c74 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
 8003c72:	e00f      	b.n	8003c94 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d102      	bne.n	8003c82 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	623b      	str	r3, [r7, #32]
 8003c80:	e008      	b.n	8003c94 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	623b      	str	r3, [r7, #32]
 8003c8e:	e001      	b.n	8003c94 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	6a3a      	ldr	r2, [r7, #32]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	791b      	ldrb	r3, [r3, #4]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_DAC_ConfigChannel+0x1f8>
 8003cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cc6:	e000      	b.n	8003cca <HAL_DAC_ConfigChannel+0x1fa>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	795b      	ldrb	r3, [r3, #5]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d102      	bne.n	8003cf4 <HAL_DAC_ConfigChannel+0x224>
 8003cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cf2:	e000      	b.n	8003cf6 <HAL_DAC_ConfigChannel+0x226>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d114      	bne.n	8003d36 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003d0c:	f001 fc1c 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 8003d10:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4a48      	ldr	r2, [pc, #288]	; (8003e38 <HAL_DAC_ConfigChannel+0x368>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d904      	bls.n	8003d24 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
 8003d22:	e00f      	b.n	8003d44 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4a45      	ldr	r2, [pc, #276]	; (8003e3c <HAL_DAC_ConfigChannel+0x36c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d90a      	bls.n	8003d42 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
 8003d34:	e006      	b.n	8003d44 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d40:	e000      	b.n	8003d44 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003d42:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	4313      	orrs	r3, r2
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	400a      	ands	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d96:	4013      	ands	r3, r2
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	4313      	orrs	r3, r2
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	22c0      	movs	r2, #192	; 0xc0
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	ea02 0103 	and.w	r1, r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	409a      	lsls	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3728      	adds	r7, #40	; 0x28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	09896800 	.word	0x09896800
 8003e3c:	04c4b400 	.word	0x04c4b400

08003e40 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff fe16 	bl	8003a80 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	711a      	strb	r2, [r3, #4]
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff fe0f 	bl	8003a94 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f043 0204 	orr.w	r2, r3, #4
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff fe05 	bl	8003aa8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	711a      	strb	r2, [r3, #4]
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ffce 	bl	8003eac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	711a      	strb	r2, [r3, #4]
}
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff ffc7 	bl	8003ec0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff ffbd 	bl	8003ed4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	711a      	strb	r2, [r3, #4]
}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e08d      	b.n	8004096 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b47      	ldr	r3, [pc, #284]	; (80040a0 <HAL_DMA_Init+0x138>)
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d80f      	bhi.n	8003fa6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4b45      	ldr	r3, [pc, #276]	; (80040a4 <HAL_DMA_Init+0x13c>)
 8003f8e:	4413      	add	r3, r2
 8003f90:	4a45      	ldr	r2, [pc, #276]	; (80040a8 <HAL_DMA_Init+0x140>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	009a      	lsls	r2, r3, #2
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a42      	ldr	r2, [pc, #264]	; (80040ac <HAL_DMA_Init+0x144>)
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8003fa4:	e00e      	b.n	8003fc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <HAL_DMA_Init+0x148>)
 8003fae:	4413      	add	r3, r2
 8003fb0:	4a3d      	ldr	r2, [pc, #244]	; (80040a8 <HAL_DMA_Init+0x140>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	009a      	lsls	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <HAL_DMA_Init+0x14c>)
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f9b6 	bl	8004388 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004024:	d102      	bne.n	800402c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004040:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d010      	beq.n	800406c <HAL_DMA_Init+0x104>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b04      	cmp	r3, #4
 8004050:	d80c      	bhi.n	800406c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9d6 	bl	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	e008      	b.n	800407e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40020407 	.word	0x40020407
 80040a4:	bffdfff8 	.word	0xbffdfff8
 80040a8:	cccccccd 	.word	0xcccccccd
 80040ac:	40020000 	.word	0x40020000
 80040b0:	bffdfbf8 	.word	0xbffdfbf8
 80040b4:	40020400 	.word	0x40020400

080040b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_DMA_Start_IT+0x20>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e066      	b.n	80041a6 <HAL_DMA_Start_IT+0xee>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d155      	bne.n	8004198 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f8fb 	bl	800430c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 020e 	orr.w	r2, r2, #14
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e00f      	b.n	8004150 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0204 	bic.w	r2, r2, #4
 800413e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 020a 	orr.w	r2, r2, #10
 800414e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004184:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e005      	b.n	80041a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	2204      	movs	r2, #4
 80041d0:	409a      	lsls	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d026      	beq.n	8004228 <HAL_DMA_IRQHandler+0x7a>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d021      	beq.n	8004228 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d107      	bne.n	8004202 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0204 	bic.w	r2, r2, #4
 8004200:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f003 021f 	and.w	r2, r3, #31
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	2104      	movs	r1, #4
 8004210:	fa01 f202 	lsl.w	r2, r1, r2
 8004214:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	2b00      	cmp	r3, #0
 800421c:	d071      	beq.n	8004302 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004226:	e06c      	b.n	8004302 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2202      	movs	r2, #2
 8004232:	409a      	lsls	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d02e      	beq.n	800429a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d029      	beq.n	800429a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 020a 	bic.w	r2, r2, #10
 8004262:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004270:	f003 021f 	and.w	r2, r3, #31
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2102      	movs	r1, #2
 800427a:	fa01 f202 	lsl.w	r2, r1, r2
 800427e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d038      	beq.n	8004302 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004298:	e033      	b.n	8004302 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	2208      	movs	r2, #8
 80042a4:	409a      	lsls	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d02a      	beq.n	8004304 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d025      	beq.n	8004304 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 020e 	bic.w	r2, r2, #14
 80042c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042cc:	f003 021f 	and.w	r2, r3, #31
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	2101      	movs	r1, #1
 80042d6:	fa01 f202 	lsl.w	r2, r1, r2
 80042da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d004      	beq.n	8004304 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004302:	bf00      	nop
 8004304:	bf00      	nop
}
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004322:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	2b00      	cmp	r3, #0
 800432a:	d004      	beq.n	8004336 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f003 021f 	and.w	r2, r3, #31
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2101      	movs	r1, #1
 8004344:	fa01 f202 	lsl.w	r2, r1, r2
 8004348:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b10      	cmp	r3, #16
 8004358:	d108      	bne.n	800436c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800436a:	e007      	b.n	800437c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004398:	429a      	cmp	r2, r3
 800439a:	d802      	bhi.n	80043a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	e001      	b.n	80043a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80043a2:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043a4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	3b08      	subs	r3, #8
 80043b2:	4a12      	ldr	r2, [pc, #72]	; (80043fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c0:	089b      	lsrs	r3, r3, #2
 80043c2:	009a      	lsls	r2, r3, #2
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a0b      	ldr	r2, [pc, #44]	; (8004400 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2201      	movs	r2, #1
 80043dc:	409a      	lsls	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40020407 	.word	0x40020407
 80043f4:	40020800 	.word	0x40020800
 80043f8:	40020820 	.word	0x40020820
 80043fc:	cccccccd 	.word	0xcccccccd
 8004400:	40020880 	.word	0x40020880

08004404 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	461a      	mov	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a08      	ldr	r2, [pc, #32]	; (8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004426:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3b01      	subs	r3, #1
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2201      	movs	r2, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	1000823f 	.word	0x1000823f
 8004448:	40020940 	.word	0x40020940

0800444c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800445a:	e15a      	b.n	8004712 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	2101      	movs	r1, #1
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	fa01 f303 	lsl.w	r3, r1, r3
 8004468:	4013      	ands	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 814c 	beq.w	800470c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d005      	beq.n	800448c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004488:	2b02      	cmp	r3, #2
 800448a:	d130      	bne.n	80044ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	2203      	movs	r2, #3
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044c2:	2201      	movs	r2, #1
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4013      	ands	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	f003 0201 	and.w	r2, r3, #1
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d017      	beq.n	800452a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	2203      	movs	r2, #3
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d123      	bne.n	800457e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	08da      	lsrs	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3208      	adds	r2, #8
 800453e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	220f      	movs	r2, #15
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	08da      	lsrs	r2, r3, #3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3208      	adds	r2, #8
 8004578:	6939      	ldr	r1, [r7, #16]
 800457a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	2203      	movs	r2, #3
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43db      	mvns	r3, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 0203 	and.w	r2, r3, #3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80a6 	beq.w	800470c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045c0:	4b5b      	ldr	r3, [pc, #364]	; (8004730 <HAL_GPIO_Init+0x2e4>)
 80045c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c4:	4a5a      	ldr	r2, [pc, #360]	; (8004730 <HAL_GPIO_Init+0x2e4>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6613      	str	r3, [r2, #96]	; 0x60
 80045cc:	4b58      	ldr	r3, [pc, #352]	; (8004730 <HAL_GPIO_Init+0x2e4>)
 80045ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045d8:	4a56      	ldr	r2, [pc, #344]	; (8004734 <HAL_GPIO_Init+0x2e8>)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	3302      	adds	r3, #2
 80045e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	220f      	movs	r2, #15
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004602:	d01f      	beq.n	8004644 <HAL_GPIO_Init+0x1f8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a4c      	ldr	r2, [pc, #304]	; (8004738 <HAL_GPIO_Init+0x2ec>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d019      	beq.n	8004640 <HAL_GPIO_Init+0x1f4>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a4b      	ldr	r2, [pc, #300]	; (800473c <HAL_GPIO_Init+0x2f0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d013      	beq.n	800463c <HAL_GPIO_Init+0x1f0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <HAL_GPIO_Init+0x2f4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00d      	beq.n	8004638 <HAL_GPIO_Init+0x1ec>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a49      	ldr	r2, [pc, #292]	; (8004744 <HAL_GPIO_Init+0x2f8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <HAL_GPIO_Init+0x1e8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a48      	ldr	r2, [pc, #288]	; (8004748 <HAL_GPIO_Init+0x2fc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_GPIO_Init+0x1e4>
 800462c:	2305      	movs	r3, #5
 800462e:	e00a      	b.n	8004646 <HAL_GPIO_Init+0x1fa>
 8004630:	2306      	movs	r3, #6
 8004632:	e008      	b.n	8004646 <HAL_GPIO_Init+0x1fa>
 8004634:	2304      	movs	r3, #4
 8004636:	e006      	b.n	8004646 <HAL_GPIO_Init+0x1fa>
 8004638:	2303      	movs	r3, #3
 800463a:	e004      	b.n	8004646 <HAL_GPIO_Init+0x1fa>
 800463c:	2302      	movs	r3, #2
 800463e:	e002      	b.n	8004646 <HAL_GPIO_Init+0x1fa>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <HAL_GPIO_Init+0x1fa>
 8004644:	2300      	movs	r3, #0
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	f002 0203 	and.w	r2, r2, #3
 800464c:	0092      	lsls	r2, r2, #2
 800464e:	4093      	lsls	r3, r2
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004656:	4937      	ldr	r1, [pc, #220]	; (8004734 <HAL_GPIO_Init+0x2e8>)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	3302      	adds	r3, #2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004664:	4b39      	ldr	r3, [pc, #228]	; (800474c <HAL_GPIO_Init+0x300>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	43db      	mvns	r3, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004688:	4a30      	ldr	r2, [pc, #192]	; (800474c <HAL_GPIO_Init+0x300>)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800468e:	4b2f      	ldr	r3, [pc, #188]	; (800474c <HAL_GPIO_Init+0x300>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	43db      	mvns	r3, r3
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046b2:	4a26      	ldr	r2, [pc, #152]	; (800474c <HAL_GPIO_Init+0x300>)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_GPIO_Init+0x300>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046dc:	4a1b      	ldr	r2, [pc, #108]	; (800474c <HAL_GPIO_Init+0x300>)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046e2:	4b1a      	ldr	r3, [pc, #104]	; (800474c <HAL_GPIO_Init+0x300>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004706:	4a11      	ldr	r2, [pc, #68]	; (800474c <HAL_GPIO_Init+0x300>)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	3301      	adds	r3, #1
 8004710:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	f47f ae9d 	bne.w	800445c <HAL_GPIO_Init+0x10>
  }
}
 8004722:	bf00      	nop
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40021000 	.word	0x40021000
 8004734:	40010000 	.word	0x40010000
 8004738:	48000400 	.word	0x48000400
 800473c:	48000800 	.word	0x48000800
 8004740:	48000c00 	.word	0x48000c00
 8004744:	48001000 	.word	0x48001000
 8004748:	48001400 	.word	0x48001400
 800474c:	40010400 	.word	0x40010400

08004750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	807b      	strh	r3, [r7, #2]
 800475c:	4613      	mov	r3, r2
 800475e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004760:	787b      	ldrb	r3, [r7, #1]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004766:	887a      	ldrh	r2, [r7, #2]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800476c:	e002      	b.n	8004774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800476e:	887a      	ldrh	r2, [r7, #2]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e0bb      	b.n	800490e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d101      	bne.n	80047a6 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e0b3      	b.n	800490e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d101      	bne.n	80047b6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e0ab      	b.n	800490e <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b6:	4b58      	ldr	r3, [pc, #352]	; (8004918 <HAL_OPAMP_Init+0x198>)
 80047b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ba:	4a57      	ldr	r2, [pc, #348]	; (8004918 <HAL_OPAMP_Init+0x198>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	6613      	str	r3, [r2, #96]	; 0x60
 80047c2:	4b55      	ldr	r3, [pc, #340]	; (8004918 <HAL_OPAMP_Init+0x198>)
 80047c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd f95c 	bl	8001aa0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d003      	beq.n	80047f8 <HAL_OPAMP_Init+0x78>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b60      	cmp	r3, #96	; 0x60
 80047f6:	d133      	bne.n	8004860 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 0110 	bic.w	r1, r3, #16
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4b41      	ldr	r3, [pc, #260]	; (800491c <HAL_OPAMP_Init+0x19c>)
 8004816:	4013      	ands	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6851      	ldr	r1, [r2, #4]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6892      	ldr	r2, [r2, #8]
 8004820:	4311      	orrs	r1, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6912      	ldr	r2, [r2, #16]
 8004826:	430a      	orrs	r2, r1
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	7d09      	ldrb	r1, [r1, #20]
 800482c:	2901      	cmp	r1, #1
 800482e:	d102      	bne.n	8004836 <HAL_OPAMP_Init+0xb6>
 8004830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004834:	e000      	b.n	8004838 <HAL_OPAMP_Init+0xb8>
 8004836:	2100      	movs	r1, #0
 8004838:	4311      	orrs	r1, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800483e:	4311      	orrs	r1, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004844:	4311      	orrs	r1, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800484a:	04d2      	lsls	r2, r2, #19
 800484c:	4311      	orrs	r1, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004852:	0612      	lsls	r2, r2, #24
 8004854:	4311      	orrs	r1, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	430b      	orrs	r3, r1
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e035      	b.n	80048cc <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 0110 	bic.w	r1, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <HAL_OPAMP_Init+0x19c>)
 800487e:	4013      	ands	r3, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6851      	ldr	r1, [r2, #4]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6892      	ldr	r2, [r2, #8]
 8004888:	4311      	orrs	r1, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68d2      	ldr	r2, [r2, #12]
 800488e:	4311      	orrs	r1, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6912      	ldr	r2, [r2, #16]
 8004894:	430a      	orrs	r2, r1
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	7d09      	ldrb	r1, [r1, #20]
 800489a:	2901      	cmp	r1, #1
 800489c:	d102      	bne.n	80048a4 <HAL_OPAMP_Init+0x124>
 800489e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048a2:	e000      	b.n	80048a6 <HAL_OPAMP_Init+0x126>
 80048a4:	2100      	movs	r1, #0
 80048a6:	4311      	orrs	r1, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048ac:	4311      	orrs	r1, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80048b2:	4311      	orrs	r1, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048b8:	04d2      	lsls	r2, r2, #19
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048c0:	0612      	lsls	r2, r2, #24
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	db10      	blt.n	80048f8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000
 800491c:	e0003e11 	.word	0xe0003e11

08004920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d141      	bne.n	80049b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800492e:	4b4b      	ldr	r3, [pc, #300]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493a:	d131      	bne.n	80049a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800493c:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004942:	4a46      	ldr	r2, [pc, #280]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004948:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800494c:	4b43      	ldr	r3, [pc, #268]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004954:	4a41      	ldr	r2, [pc, #260]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800495a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800495c:	4b40      	ldr	r3, [pc, #256]	; (8004a60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2232      	movs	r2, #50	; 0x32
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	4a3f      	ldr	r2, [pc, #252]	; (8004a64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	0c9b      	lsrs	r3, r3, #18
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004972:	e002      	b.n	800497a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3b01      	subs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800497a:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	d102      	bne.n	800498e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f2      	bne.n	8004974 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800498e:	4b33      	ldr	r3, [pc, #204]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499a:	d158      	bne.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e057      	b.n	8004a50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049a0:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a6:	4a2d      	ldr	r2, [pc, #180]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049b0:	e04d      	b.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b8:	d141      	bne.n	8004a3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ba:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c6:	d131      	bne.n	8004a2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ce:	4a23      	ldr	r2, [pc, #140]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049e0:	4a1e      	ldr	r2, [pc, #120]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049e8:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2232      	movs	r2, #50	; 0x32
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	0c9b      	lsrs	r3, r3, #18
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049fe:	e002      	b.n	8004a06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a06:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a12:	d102      	bne.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f2      	bne.n	8004a00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d112      	bne.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e011      	b.n	8004a50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a3c:	e007      	b.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a46:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40007000 	.word	0x40007000
 8004a60:	20000000 	.word	0x20000000
 8004a64:	431bde83 	.word	0x431bde83

08004a68 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004a70:	f7fd fc62 	bl	8002338 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e069      	b.n	8004b54 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fd f8bb 	bl	8001c10 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004a9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f85e 	bl	8004b60 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	021a      	lsls	r2, r3, #8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2120      	movs	r1, #32
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f856 	bl	8004b7c <QSPI_WaitFlagStateUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004ad4:	7afb      	ldrb	r3, [r7, #11]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d137      	bne.n	8004b4a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ae4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6852      	ldr	r2, [r2, #4]
 8004aec:	0611      	lsls	r1, r2, #24
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68d2      	ldr	r2, [r2, #12]
 8004af2:	4311      	orrs	r1, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	69d2      	ldr	r2, [r2, #28]
 8004af8:	4311      	orrs	r1, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6a12      	ldr	r2, [r2, #32]
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <HAL_QSPI_Init+0xf4>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6912      	ldr	r2, [r2, #16]
 8004b16:	0411      	lsls	r1, r2, #16
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6952      	ldr	r2, [r2, #20]
 8004b1c:	4311      	orrs	r1, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6992      	ldr	r2, [r2, #24]
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004b52:	7afb      	ldrb	r3, [r7, #11]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	ffe0f8fe 	.word	0xffe0f8fe

08004b60 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b8c:	e01a      	b.n	8004bc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b94:	d016      	beq.n	8004bc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	f7fd fbcf 	bl	8002338 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	f043 0201 	orr.w	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e00e      	b.n	8004be2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf14      	ite	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	2300      	moveq	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d1d6      	bne.n	8004b8e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e2fe      	b.n	80051fc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d075      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c0a:	4b97      	ldr	r3, [pc, #604]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c14:	4b94      	ldr	r3, [pc, #592]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	d102      	bne.n	8004c2a <HAL_RCC_OscConfig+0x3e>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d002      	beq.n	8004c30 <HAL_RCC_OscConfig+0x44>
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d10b      	bne.n	8004c48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c30:	4b8d      	ldr	r3, [pc, #564]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d05b      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x108>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d157      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e2d9      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d106      	bne.n	8004c60 <HAL_RCC_OscConfig+0x74>
 8004c52:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a84      	ldr	r2, [pc, #528]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e01d      	b.n	8004c9c <HAL_RCC_OscConfig+0xb0>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x98>
 8004c6a:	4b7f      	ldr	r3, [pc, #508]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a7e      	ldr	r2, [pc, #504]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	4b7c      	ldr	r3, [pc, #496]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a7b      	ldr	r2, [pc, #492]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e00b      	b.n	8004c9c <HAL_RCC_OscConfig+0xb0>
 8004c84:	4b78      	ldr	r3, [pc, #480]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a77      	ldr	r2, [pc, #476]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	4b75      	ldr	r3, [pc, #468]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a74      	ldr	r2, [pc, #464]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d013      	beq.n	8004ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fd fb48 	bl	8002338 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cac:	f7fd fb44 	bl	8002338 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	; 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e29e      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cbe:	4b6a      	ldr	r3, [pc, #424]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0xc0>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fb34 	bl	8002338 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd4:	f7fd fb30 	bl	8002338 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	; 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e28a      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ce6:	4b60      	ldr	r3, [pc, #384]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0xe8>
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d075      	beq.n	8004dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d02:	4b59      	ldr	r3, [pc, #356]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d0c:	4b56      	ldr	r3, [pc, #344]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d102      	bne.n	8004d22 <HAL_RCC_OscConfig+0x136>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d002      	beq.n	8004d28 <HAL_RCC_OscConfig+0x13c>
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d11f      	bne.n	8004d68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d28:	4b4f      	ldr	r3, [pc, #316]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_OscConfig+0x154>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e25d      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d40:	4b49      	ldr	r3, [pc, #292]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	061b      	lsls	r3, r3, #24
 8004d4e:	4946      	ldr	r1, [pc, #280]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d54:	4b45      	ldr	r3, [pc, #276]	; (8004e6c <HAL_RCC_OscConfig+0x280>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fd f9e5 	bl	8002128 <HAL_InitTick>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d043      	beq.n	8004dec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e249      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d023      	beq.n	8004db8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d70:	4b3d      	ldr	r3, [pc, #244]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a3c      	ldr	r2, [pc, #240]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fd fadc 	bl	8002338 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d84:	f7fd fad8 	bl	8002338 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e232      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d96:	4b34      	ldr	r3, [pc, #208]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da2:	4b31      	ldr	r3, [pc, #196]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	061b      	lsls	r3, r3, #24
 8004db0:	492d      	ldr	r1, [pc, #180]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	604b      	str	r3, [r1, #4]
 8004db6:	e01a      	b.n	8004dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db8:	4b2b      	ldr	r3, [pc, #172]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7fd fab8 	bl	8002338 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dcc:	f7fd fab4 	bl	8002338 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e20e      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dde:	4b22      	ldr	r3, [pc, #136]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x1e0>
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d041      	beq.n	8004e7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01c      	beq.n	8004e3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e02:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e08:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e12:	f7fd fa91 	bl	8002338 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e1a:	f7fd fa8d 	bl	8002338 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e1e7      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0ef      	beq.n	8004e1a <HAL_RCC_OscConfig+0x22e>
 8004e3a:	e020      	b.n	8004e7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <HAL_RCC_OscConfig+0x27c>)
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4c:	f7fd fa74 	bl	8002338 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e52:	e00d      	b.n	8004e70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e54:	f7fd fa70 	bl	8002338 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d906      	bls.n	8004e70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e1ca      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
 8004e66:	bf00      	nop
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e70:	4b8c      	ldr	r3, [pc, #560]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1ea      	bne.n	8004e54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80a6 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e90:	4b84      	ldr	r3, [pc, #528]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x2b4>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCC_OscConfig+0x2b6>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	4b7f      	ldr	r3, [pc, #508]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eaa:	4a7e      	ldr	r2, [pc, #504]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004eb2:	4b7c      	ldr	r3, [pc, #496]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec2:	4b79      	ldr	r3, [pc, #484]	; (80050a8 <HAL_RCC_OscConfig+0x4bc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d118      	bne.n	8004f00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ece:	4b76      	ldr	r3, [pc, #472]	; (80050a8 <HAL_RCC_OscConfig+0x4bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a75      	ldr	r2, [pc, #468]	; (80050a8 <HAL_RCC_OscConfig+0x4bc>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eda:	f7fd fa2d 	bl	8002338 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee2:	f7fd fa29 	bl	8002338 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e183      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef4:	4b6c      	ldr	r3, [pc, #432]	; (80050a8 <HAL_RCC_OscConfig+0x4bc>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d108      	bne.n	8004f1a <HAL_RCC_OscConfig+0x32e>
 8004f08:	4b66      	ldr	r3, [pc, #408]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	4a65      	ldr	r2, [pc, #404]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f18:	e024      	b.n	8004f64 <HAL_RCC_OscConfig+0x378>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b05      	cmp	r3, #5
 8004f20:	d110      	bne.n	8004f44 <HAL_RCC_OscConfig+0x358>
 8004f22:	4b60      	ldr	r3, [pc, #384]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f28:	4a5e      	ldr	r2, [pc, #376]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f2a:	f043 0304 	orr.w	r3, r3, #4
 8004f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f32:	4b5c      	ldr	r3, [pc, #368]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	4a5a      	ldr	r2, [pc, #360]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f42:	e00f      	b.n	8004f64 <HAL_RCC_OscConfig+0x378>
 8004f44:	4b57      	ldr	r3, [pc, #348]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	4a56      	ldr	r2, [pc, #344]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f54:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	4a52      	ldr	r2, [pc, #328]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d016      	beq.n	8004f9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6c:	f7fd f9e4 	bl	8002338 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f74:	f7fd f9e0 	bl	8002338 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e138      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f8a:	4b46      	ldr	r3, [pc, #280]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ed      	beq.n	8004f74 <HAL_RCC_OscConfig+0x388>
 8004f98:	e015      	b.n	8004fc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9a:	f7fd f9cd 	bl	8002338 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa2:	f7fd f9c9 	bl	8002338 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e121      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fb8:	4b3a      	ldr	r3, [pc, #232]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ed      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fc6:	7ffb      	ldrb	r3, [r7, #31]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fcc:	4b35      	ldr	r3, [pc, #212]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	4a34      	ldr	r2, [pc, #208]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d03c      	beq.n	800505e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01c      	beq.n	8005026 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fec:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ff2:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffc:	f7fd f99c 	bl	8002338 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005004:	f7fd f998 	bl	8002338 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e0f2      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005016:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8005018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ef      	beq.n	8005004 <HAL_RCC_OscConfig+0x418>
 8005024:	e01b      	b.n	800505e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005026:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8005028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800502c:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005036:	f7fd f97f 	bl	8002338 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800503e:	f7fd f97b 	bl	8002338 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e0d5      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005050:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8005052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1ef      	bne.n	800503e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80c9 	beq.w	80051fa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005068:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 030c 	and.w	r3, r3, #12
 8005070:	2b0c      	cmp	r3, #12
 8005072:	f000 8083 	beq.w	800517c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d15e      	bne.n	800513c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <HAL_RCC_OscConfig+0x4b8>)
 8005084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508a:	f7fd f955 	bl	8002338 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005090:	e00c      	b.n	80050ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005092:	f7fd f951 	bl	8002338 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d905      	bls.n	80050ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e0ab      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ac:	4b55      	ldr	r3, [pc, #340]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ec      	bne.n	8005092 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050b8:	4b52      	ldr	r3, [pc, #328]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	4b52      	ldr	r3, [pc, #328]	; (8005208 <HAL_RCC_OscConfig+0x61c>)
 80050be:	4013      	ands	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6a11      	ldr	r1, [r2, #32]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050c8:	3a01      	subs	r2, #1
 80050ca:	0112      	lsls	r2, r2, #4
 80050cc:	4311      	orrs	r1, r2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80050d2:	0212      	lsls	r2, r2, #8
 80050d4:	4311      	orrs	r1, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050da:	0852      	lsrs	r2, r2, #1
 80050dc:	3a01      	subs	r2, #1
 80050de:	0552      	lsls	r2, r2, #21
 80050e0:	4311      	orrs	r1, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050e6:	0852      	lsrs	r2, r2, #1
 80050e8:	3a01      	subs	r2, #1
 80050ea:	0652      	lsls	r2, r2, #25
 80050ec:	4311      	orrs	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050f2:	06d2      	lsls	r2, r2, #27
 80050f4:	430a      	orrs	r2, r1
 80050f6:	4943      	ldr	r1, [pc, #268]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050fc:	4b41      	ldr	r3, [pc, #260]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a40      	ldr	r2, [pc, #256]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 8005102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005106:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005108:	4b3e      	ldr	r3, [pc, #248]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4a3d      	ldr	r2, [pc, #244]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 800510e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005112:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fd f910 	bl	8002338 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7fd f90c 	bl	8002338 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e066      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512e:	4b35      	ldr	r3, [pc, #212]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0x530>
 800513a:	e05e      	b.n	80051fa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800513c:	4b31      	ldr	r3, [pc, #196]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a30      	ldr	r2, [pc, #192]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 8005142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fd f8f6 	bl	8002338 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005150:	f7fd f8f2 	bl	8002338 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e04c      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005162:	4b28      	ldr	r3, [pc, #160]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800516e:	4b25      	ldr	r3, [pc, #148]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	4924      	ldr	r1, [pc, #144]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 8005174:	4b25      	ldr	r3, [pc, #148]	; (800520c <HAL_RCC_OscConfig+0x620>)
 8005176:	4013      	ands	r3, r2
 8005178:	60cb      	str	r3, [r1, #12]
 800517a:	e03e      	b.n	80051fa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e039      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005188:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <HAL_RCC_OscConfig+0x618>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f003 0203 	and.w	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	429a      	cmp	r2, r3
 800519a:	d12c      	bne.n	80051f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	3b01      	subs	r3, #1
 80051a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d123      	bne.n	80051f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d11b      	bne.n	80051f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d113      	bne.n	80051f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	3b01      	subs	r3, #1
 80051dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d109      	bne.n	80051f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	3b01      	subs	r3, #1
 80051f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d001      	beq.n	80051fa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40021000 	.word	0x40021000
 8005208:	019f800c 	.word	0x019f800c
 800520c:	feeefffc 	.word	0xfeeefffc

08005210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e11e      	b.n	8005466 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005228:	4b91      	ldr	r3, [pc, #580]	; (8005470 <HAL_RCC_ClockConfig+0x260>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d910      	bls.n	8005258 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005236:	4b8e      	ldr	r3, [pc, #568]	; (8005470 <HAL_RCC_ClockConfig+0x260>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f023 020f 	bic.w	r2, r3, #15
 800523e:	498c      	ldr	r1, [pc, #560]	; (8005470 <HAL_RCC_ClockConfig+0x260>)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005246:	4b8a      	ldr	r3, [pc, #552]	; (8005470 <HAL_RCC_ClockConfig+0x260>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d001      	beq.n	8005258 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e106      	b.n	8005466 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d073      	beq.n	800534c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d129      	bne.n	80052c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526c:	4b81      	ldr	r3, [pc, #516]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0f4      	b.n	8005466 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800527c:	f000 f9fa 	bl	8005674 <RCC_GetSysClockFreqFromPLLSource>
 8005280:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4a7c      	ldr	r2, [pc, #496]	; (8005478 <HAL_RCC_ClockConfig+0x268>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d93f      	bls.n	800530a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800528a:	4b7a      	ldr	r3, [pc, #488]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d033      	beq.n	800530a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d12f      	bne.n	800530a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052aa:	4b72      	ldr	r3, [pc, #456]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b2:	4a70      	ldr	r2, [pc, #448]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 80052b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e024      	b.n	800530a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d107      	bne.n	80052d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c8:	4b6a      	ldr	r3, [pc, #424]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d109      	bne.n	80052e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0c6      	b.n	8005466 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d8:	4b66      	ldr	r3, [pc, #408]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0be      	b.n	8005466 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80052e8:	f000 f8ce 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 80052ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4a61      	ldr	r2, [pc, #388]	; (8005478 <HAL_RCC_ClockConfig+0x268>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d909      	bls.n	800530a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052f6:	4b5f      	ldr	r3, [pc, #380]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052fe:	4a5d      	ldr	r2, [pc, #372]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 8005300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005304:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b5a      	ldr	r3, [pc, #360]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4957      	ldr	r1, [pc, #348]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 8005318:	4313      	orrs	r3, r2
 800531a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531c:	f7fd f80c 	bl	8002338 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e00a      	b.n	800533a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7fd f808 	bl	8002338 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e095      	b.n	8005466 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	4b4e      	ldr	r3, [pc, #312]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 020c 	and.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d1eb      	bne.n	8005324 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d023      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005364:	4b43      	ldr	r3, [pc, #268]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a42      	ldr	r2, [pc, #264]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 800536a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800536e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800537c:	4b3d      	ldr	r3, [pc, #244]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005384:	4a3b      	ldr	r2, [pc, #236]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 8005386:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800538a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800538c:	4b39      	ldr	r3, [pc, #228]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	4936      	ldr	r1, [pc, #216]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
 800539e:	e008      	b.n	80053b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b80      	cmp	r3, #128	; 0x80
 80053a4:	d105      	bne.n	80053b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053a6:	4b33      	ldr	r3, [pc, #204]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	4a32      	ldr	r2, [pc, #200]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 80053ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053b2:	4b2f      	ldr	r3, [pc, #188]	; (8005470 <HAL_RCC_ClockConfig+0x260>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d21d      	bcs.n	80053fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c0:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <HAL_RCC_ClockConfig+0x260>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f023 020f 	bic.w	r2, r3, #15
 80053c8:	4929      	ldr	r1, [pc, #164]	; (8005470 <HAL_RCC_ClockConfig+0x260>)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053d0:	f7fc ffb2 	bl	8002338 <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d6:	e00a      	b.n	80053ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d8:	f7fc ffae 	bl	8002338 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e03b      	b.n	8005466 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ee:	4b20      	ldr	r3, [pc, #128]	; (8005470 <HAL_RCC_ClockConfig+0x260>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d1ed      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005408:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4917      	ldr	r1, [pc, #92]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005426:	4b13      	ldr	r3, [pc, #76]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	490f      	ldr	r1, [pc, #60]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 8005436:	4313      	orrs	r3, r2
 8005438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800543a:	f000 f825 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 800543e:	4602      	mov	r2, r0
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <HAL_RCC_ClockConfig+0x264>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	490c      	ldr	r1, [pc, #48]	; (800547c <HAL_RCC_ClockConfig+0x26c>)
 800544c:	5ccb      	ldrb	r3, [r1, r3]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <HAL_RCC_ClockConfig+0x270>)
 8005458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800545a:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <HAL_RCC_ClockConfig+0x274>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fc fe62 	bl	8002128 <HAL_InitTick>
 8005464:	4603      	mov	r3, r0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40022000 	.word	0x40022000
 8005474:	40021000 	.word	0x40021000
 8005478:	04c4b400 	.word	0x04c4b400
 800547c:	0800ad58 	.word	0x0800ad58
 8005480:	20000000 	.word	0x20000000
 8005484:	20000004 	.word	0x20000004

08005488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800548e:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	2b04      	cmp	r3, #4
 8005498:	d102      	bne.n	80054a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800549a:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <HAL_RCC_GetSysClockFreq+0xbc>)
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	e047      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 030c 	and.w	r3, r3, #12
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d102      	bne.n	80054b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054ac:	4b25      	ldr	r3, [pc, #148]	; (8005544 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	e03e      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80054b2:	4b23      	ldr	r3, [pc, #140]	; (8005540 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 030c 	and.w	r3, r3, #12
 80054ba:	2b0c      	cmp	r3, #12
 80054bc:	d136      	bne.n	800552c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054c8:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	3301      	adds	r3, #1
 80054d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d10c      	bne.n	80054f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054dc:	4a19      	ldr	r2, [pc, #100]	; (8005544 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	4a16      	ldr	r2, [pc, #88]	; (8005540 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054e6:	68d2      	ldr	r2, [r2, #12]
 80054e8:	0a12      	lsrs	r2, r2, #8
 80054ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	617b      	str	r3, [r7, #20]
      break;
 80054f4:	e00c      	b.n	8005510 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fe:	4a10      	ldr	r2, [pc, #64]	; (8005540 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005500:	68d2      	ldr	r2, [r2, #12]
 8005502:	0a12      	lsrs	r2, r2, #8
 8005504:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]
      break;
 800550e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	0e5b      	lsrs	r3, r3, #25
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	3301      	adds	r3, #1
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	e001      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005530:	693b      	ldr	r3, [r7, #16]
}
 8005532:	4618      	mov	r0, r3
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000
 8005544:	00f42400 	.word	0x00f42400

08005548 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800554c:	4b03      	ldr	r3, [pc, #12]	; (800555c <HAL_RCC_GetHCLKFreq+0x14>)
 800554e:	681b      	ldr	r3, [r3, #0]
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000000 	.word	0x20000000

08005560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005564:	f7ff fff0 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 8005568:	4602      	mov	r2, r0
 800556a:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_RCC_GetPCLK1Freq+0x24>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	4904      	ldr	r1, [pc, #16]	; (8005588 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005576:	5ccb      	ldrb	r3, [r1, r3]
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000
 8005588:	0800ad68 	.word	0x0800ad68

0800558c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005590:	f7ff ffda 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	0adb      	lsrs	r3, r3, #11
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	4904      	ldr	r1, [pc, #16]	; (80055b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40021000 	.word	0x40021000
 80055b4:	0800ad68 	.word	0x0800ad68

080055b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	220f      	movs	r2, #15
 80055c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80055c8:	4b12      	ldr	r3, [pc, #72]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0203 	and.w	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80055d4:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	08db      	lsrs	r3, r3, #3
 80055f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_RCC_GetClockConfig+0x60>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40021000 	.word	0x40021000
 8005618:	40022000 	.word	0x40022000

0800561c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <HAL_RCC_EnableCSS+0x1c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a04      	ldr	r2, [pc, #16]	; (8005638 <HAL_RCC_EnableCSS+0x1c>)
 8005626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800562a:	6013      	str	r3, [r2, #0]
}
 800562c:	bf00      	nop
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000

0800563c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005640:	4b07      	ldr	r3, [pc, #28]	; (8005660 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564c:	d105      	bne.n	800565a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800564e:	f000 f809 	bl	8005664 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005652:	4b03      	ldr	r3, [pc, #12]	; (8005660 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005658:	621a      	str	r2, [r3, #32]
  }
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	40021000 	.word	0x40021000

08005664 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800567a:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005684:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d10c      	bne.n	80056b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005698:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	4a14      	ldr	r2, [pc, #80]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056a2:	68d2      	ldr	r2, [r2, #12]
 80056a4:	0a12      	lsrs	r2, r2, #8
 80056a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	617b      	str	r3, [r7, #20]
    break;
 80056b0:	e00c      	b.n	80056cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056b2:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	4a0e      	ldr	r2, [pc, #56]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056bc:	68d2      	ldr	r2, [r2, #12]
 80056be:	0a12      	lsrs	r2, r2, #8
 80056c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]
    break;
 80056ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	0e5b      	lsrs	r3, r3, #25
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	3301      	adds	r3, #1
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056e6:	687b      	ldr	r3, [r7, #4]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40021000 	.word	0x40021000
 80056f8:	00f42400 	.word	0x00f42400

080056fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005704:	2300      	movs	r3, #0
 8005706:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005708:	2300      	movs	r3, #0
 800570a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8098 	beq.w	800584a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800571a:	2300      	movs	r3, #0
 800571c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800571e:	4b43      	ldr	r3, [pc, #268]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10d      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800572a:	4b40      	ldr	r3, [pc, #256]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800572c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572e:	4a3f      	ldr	r2, [pc, #252]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005734:	6593      	str	r3, [r2, #88]	; 0x58
 8005736:	4b3d      	ldr	r3, [pc, #244]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005742:	2301      	movs	r3, #1
 8005744:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005746:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a39      	ldr	r2, [pc, #228]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800574c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005750:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005752:	f7fc fdf1 	bl	8002338 <HAL_GetTick>
 8005756:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005758:	e009      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800575a:	f7fc fded 	bl	8002338 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d902      	bls.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	74fb      	strb	r3, [r7, #19]
        break;
 800576c:	e005      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800576e:	4b30      	ldr	r3, [pc, #192]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0ef      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d159      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005780:	4b2a      	ldr	r3, [pc, #168]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01e      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	429a      	cmp	r2, r3
 800579a:	d019      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800579c:	4b23      	ldr	r3, [pc, #140]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057a8:	4b20      	ldr	r3, [pc, #128]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	4a1f      	ldr	r2, [pc, #124]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057b8:	4b1c      	ldr	r3, [pc, #112]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057be:	4a1b      	ldr	r2, [pc, #108]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057c8:	4a18      	ldr	r2, [pc, #96]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fc fdad 	bl	8002338 <HAL_GetTick>
 80057de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e0:	e00b      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e2:	f7fc fda9 	bl	8002338 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d902      	bls.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	74fb      	strb	r3, [r7, #19]
            break;
 80057f8:	e006      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0ec      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005808:	7cfb      	ldrb	r3, [r7, #19]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10b      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580e:	4b07      	ldr	r3, [pc, #28]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581c:	4903      	ldr	r1, [pc, #12]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005824:	e008      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005826:	7cfb      	ldrb	r3, [r7, #19]
 8005828:	74bb      	strb	r3, [r7, #18]
 800582a:	e005      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800582c:	40021000 	.word	0x40021000
 8005830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005838:	7c7b      	ldrb	r3, [r7, #17]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d105      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800583e:	4ba7      	ldr	r3, [pc, #668]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005842:	4aa6      	ldr	r2, [pc, #664]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005848:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005856:	4ba1      	ldr	r3, [pc, #644]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585c:	f023 0203 	bic.w	r2, r3, #3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	499d      	ldr	r1, [pc, #628]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005878:	4b98      	ldr	r3, [pc, #608]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	f023 020c 	bic.w	r2, r3, #12
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	4995      	ldr	r1, [pc, #596]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800589a:	4b90      	ldr	r3, [pc, #576]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	498c      	ldr	r1, [pc, #560]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058bc:	4b87      	ldr	r3, [pc, #540]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	4984      	ldr	r1, [pc, #528]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058de:	4b7f      	ldr	r3, [pc, #508]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	497b      	ldr	r1, [pc, #492]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005900:	4b76      	ldr	r3, [pc, #472]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005906:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	4973      	ldr	r1, [pc, #460]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005922:	4b6e      	ldr	r3, [pc, #440]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	496a      	ldr	r1, [pc, #424]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005944:	4b65      	ldr	r3, [pc, #404]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	4962      	ldr	r1, [pc, #392]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005966:	4b5d      	ldr	r3, [pc, #372]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	4959      	ldr	r1, [pc, #356]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005988:	4b54      	ldr	r3, [pc, #336]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800598e:	f023 0203 	bic.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	4951      	ldr	r1, [pc, #324]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059aa:	4b4c      	ldr	r3, [pc, #304]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4948      	ldr	r1, [pc, #288]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d015      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059cc:	4b43      	ldr	r3, [pc, #268]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	4940      	ldr	r1, [pc, #256]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ea:	d105      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ec:	4b3b      	ldr	r3, [pc, #236]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4a3a      	ldr	r2, [pc, #232]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d015      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a04:	4b35      	ldr	r3, [pc, #212]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	4932      	ldr	r1, [pc, #200]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a22:	d105      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a24:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	4a2c      	ldr	r2, [pc, #176]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d015      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a3c:	4b27      	ldr	r3, [pc, #156]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	4924      	ldr	r1, [pc, #144]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a5a:	d105      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a5c:	4b1f      	ldr	r3, [pc, #124]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	4a1e      	ldr	r2, [pc, #120]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d015      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a74:	4b19      	ldr	r3, [pc, #100]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	4916      	ldr	r1, [pc, #88]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a92:	d105      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a94:	4b11      	ldr	r3, [pc, #68]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4a10      	ldr	r2, [pc, #64]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d019      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005aac:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	4908      	ldr	r1, [pc, #32]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aca:	d109      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a02      	ldr	r2, [pc, #8]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad6:	60d3      	str	r3, [r2, #12]
 8005ad8:	e002      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ada:	bf00      	nop
 8005adc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d015      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005aec:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afa:	4926      	ldr	r1, [pc, #152]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b0c:	4b21      	ldr	r3, [pc, #132]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d015      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005b24:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b32:	4918      	ldr	r1, [pc, #96]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d105      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b44:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	4a12      	ldr	r2, [pc, #72]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d015      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6a:	490a      	ldr	r1, [pc, #40]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b7a:	d105      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4a04      	ldr	r2, [pc, #16]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b88:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40021000 	.word	0x40021000

08005b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e09d      	b.n	8005ce6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d108      	bne.n	8005bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bba:	d009      	beq.n	8005bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	61da      	str	r2, [r3, #28]
 8005bc2:	e005      	b.n	8005bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fc f8a8 	bl	8001d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c10:	d902      	bls.n	8005c18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	e002      	b.n	8005c1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c26:	d007      	beq.n	8005c38 <HAL_SPI_Init+0xa0>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c30:	d002      	beq.n	8005c38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7a:	ea42 0103 	orr.w	r1, r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	0c1b      	lsrs	r3, r3, #16
 8005c94:	f003 0204 	and.w	r2, r3, #4
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005cb4:	ea42 0103 	orr.w	r1, r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e049      	b.n	8005d94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7fc f8f7 	bl	8001f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	f000 fa95 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d001      	beq.n	8005db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e04c      	b.n	8005e4e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a26      	ldr	r2, [pc, #152]	; (8005e5c <HAL_TIM_Base_Start+0xc0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d022      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d01d      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <HAL_TIM_Base_Start+0xc4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <HAL_TIM_Base_Start+0xc8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <HAL_TIM_Base_Start+0xcc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1e      	ldr	r2, [pc, #120]	; (8005e6c <HAL_TIM_Base_Start+0xd0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <HAL_TIM_Base_Start+0xd4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_TIM_Base_Start+0x70>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1b      	ldr	r2, [pc, #108]	; (8005e74 <HAL_TIM_Base_Start+0xd8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d115      	bne.n	8005e38 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <HAL_TIM_Base_Start+0xdc>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b06      	cmp	r3, #6
 8005e1c:	d015      	beq.n	8005e4a <HAL_TIM_Base_Start+0xae>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e24:	d011      	beq.n	8005e4a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e36:	e008      	b.n	8005e4a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	e000      	b.n	8005e4c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40012c00 	.word	0x40012c00
 8005e60:	40000400 	.word	0x40000400
 8005e64:	40000800 	.word	0x40000800
 8005e68:	40000c00 	.word	0x40000c00
 8005e6c:	40013400 	.word	0x40013400
 8005e70:	40014000 	.word	0x40014000
 8005e74:	40015000 	.word	0x40015000
 8005e78:	00010007 	.word	0x00010007

08005e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d001      	beq.n	8005e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e054      	b.n	8005f3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a26      	ldr	r2, [pc, #152]	; (8005f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d022      	beq.n	8005efc <HAL_TIM_Base_Start_IT+0x80>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebe:	d01d      	beq.n	8005efc <HAL_TIM_Base_Start_IT+0x80>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d018      	beq.n	8005efc <HAL_TIM_Base_Start_IT+0x80>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a21      	ldr	r2, [pc, #132]	; (8005f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d013      	beq.n	8005efc <HAL_TIM_Base_Start_IT+0x80>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1f      	ldr	r2, [pc, #124]	; (8005f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00e      	beq.n	8005efc <HAL_TIM_Base_Start_IT+0x80>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1e      	ldr	r2, [pc, #120]	; (8005f5c <HAL_TIM_Base_Start_IT+0xe0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d009      	beq.n	8005efc <HAL_TIM_Base_Start_IT+0x80>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1c      	ldr	r2, [pc, #112]	; (8005f60 <HAL_TIM_Base_Start_IT+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d004      	beq.n	8005efc <HAL_TIM_Base_Start_IT+0x80>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d115      	bne.n	8005f28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	4b19      	ldr	r3, [pc, #100]	; (8005f68 <HAL_TIM_Base_Start_IT+0xec>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b06      	cmp	r3, #6
 8005f0c:	d015      	beq.n	8005f3a <HAL_TIM_Base_Start_IT+0xbe>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f14:	d011      	beq.n	8005f3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0201 	orr.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f26:	e008      	b.n	8005f3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	e000      	b.n	8005f3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40013400 	.word	0x40013400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40015000 	.word	0x40015000
 8005f68:	00010007 	.word	0x00010007

08005f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d020      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01b      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0202 	mvn.w	r2, #2
 8005fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f931 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8005fbc:	e005      	b.n	8005fca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f923 	bl	800620a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f934 	bl	8006232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d020      	beq.n	800601c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0204 	mvn.w	r2, #4
 8005fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f90b 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8006008:	e005      	b.n	8006016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8fd 	bl	800620a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f90e 	bl	8006232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d020      	beq.n	8006068 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0208 	mvn.w	r2, #8
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8e5 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8d7 	bl	800620a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8e8 	bl	8006232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b00      	cmp	r3, #0
 8006070:	d020      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0210 	mvn.w	r2, #16
 8006084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2208      	movs	r2, #8
 800608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8bf 	bl	800621e <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f8b1 	bl	800620a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8c2 	bl	8006232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0201 	mvn.w	r2, #1
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fb fa02 	bl	80014dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d104      	bne.n	80060ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00c      	beq.n	8006106 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80060fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f9ff 	bl	8006504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00c      	beq.n	800612a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f9f7 	bl	8006518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f87c 	bl	8006246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00c      	beq.n	8006172 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f06f 0220 	mvn.w	r2, #32
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f9bf 	bl	80064f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00c      	beq.n	8006196 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800618e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f9cb 	bl	800652c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00c      	beq.n	80061ba <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80061b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f9c3 	bl	8006540 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00c      	beq.n	80061de <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80061d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f9bb 	bl	8006554 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00c      	beq.n	8006202 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80061fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f9b3 	bl	8006568 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006202:	bf00      	nop
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a4c      	ldr	r2, [pc, #304]	; (80063a0 <TIM_Base_SetConfig+0x144>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d017      	beq.n	80062a4 <TIM_Base_SetConfig+0x48>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627a:	d013      	beq.n	80062a4 <TIM_Base_SetConfig+0x48>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a49      	ldr	r2, [pc, #292]	; (80063a4 <TIM_Base_SetConfig+0x148>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00f      	beq.n	80062a4 <TIM_Base_SetConfig+0x48>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a48      	ldr	r2, [pc, #288]	; (80063a8 <TIM_Base_SetConfig+0x14c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00b      	beq.n	80062a4 <TIM_Base_SetConfig+0x48>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a47      	ldr	r2, [pc, #284]	; (80063ac <TIM_Base_SetConfig+0x150>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d007      	beq.n	80062a4 <TIM_Base_SetConfig+0x48>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a46      	ldr	r2, [pc, #280]	; (80063b0 <TIM_Base_SetConfig+0x154>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_Base_SetConfig+0x48>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a45      	ldr	r2, [pc, #276]	; (80063b4 <TIM_Base_SetConfig+0x158>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d108      	bne.n	80062b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a39      	ldr	r2, [pc, #228]	; (80063a0 <TIM_Base_SetConfig+0x144>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d023      	beq.n	8006306 <TIM_Base_SetConfig+0xaa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c4:	d01f      	beq.n	8006306 <TIM_Base_SetConfig+0xaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a36      	ldr	r2, [pc, #216]	; (80063a4 <TIM_Base_SetConfig+0x148>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01b      	beq.n	8006306 <TIM_Base_SetConfig+0xaa>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a35      	ldr	r2, [pc, #212]	; (80063a8 <TIM_Base_SetConfig+0x14c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d017      	beq.n	8006306 <TIM_Base_SetConfig+0xaa>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a34      	ldr	r2, [pc, #208]	; (80063ac <TIM_Base_SetConfig+0x150>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <TIM_Base_SetConfig+0xaa>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a33      	ldr	r2, [pc, #204]	; (80063b0 <TIM_Base_SetConfig+0x154>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00f      	beq.n	8006306 <TIM_Base_SetConfig+0xaa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a33      	ldr	r2, [pc, #204]	; (80063b8 <TIM_Base_SetConfig+0x15c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00b      	beq.n	8006306 <TIM_Base_SetConfig+0xaa>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a32      	ldr	r2, [pc, #200]	; (80063bc <TIM_Base_SetConfig+0x160>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <TIM_Base_SetConfig+0xaa>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a31      	ldr	r2, [pc, #196]	; (80063c0 <TIM_Base_SetConfig+0x164>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_Base_SetConfig+0xaa>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a2c      	ldr	r2, [pc, #176]	; (80063b4 <TIM_Base_SetConfig+0x158>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d108      	bne.n	8006318 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a18      	ldr	r2, [pc, #96]	; (80063a0 <TIM_Base_SetConfig+0x144>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d013      	beq.n	800636c <TIM_Base_SetConfig+0x110>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a1a      	ldr	r2, [pc, #104]	; (80063b0 <TIM_Base_SetConfig+0x154>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00f      	beq.n	800636c <TIM_Base_SetConfig+0x110>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a1a      	ldr	r2, [pc, #104]	; (80063b8 <TIM_Base_SetConfig+0x15c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00b      	beq.n	800636c <TIM_Base_SetConfig+0x110>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a19      	ldr	r2, [pc, #100]	; (80063bc <TIM_Base_SetConfig+0x160>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <TIM_Base_SetConfig+0x110>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <TIM_Base_SetConfig+0x164>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_Base_SetConfig+0x110>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a13      	ldr	r2, [pc, #76]	; (80063b4 <TIM_Base_SetConfig+0x158>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d103      	bne.n	8006374 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b01      	cmp	r3, #1
 8006384:	d105      	bne.n	8006392 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f023 0201 	bic.w	r2, r3, #1
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	611a      	str	r2, [r3, #16]
  }
}
 8006392:	bf00      	nop
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40012c00 	.word	0x40012c00
 80063a4:	40000400 	.word	0x40000400
 80063a8:	40000800 	.word	0x40000800
 80063ac:	40000c00 	.word	0x40000c00
 80063b0:	40013400 	.word	0x40013400
 80063b4:	40015000 	.word	0x40015000
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800

080063c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063d8:	2302      	movs	r3, #2
 80063da:	e074      	b.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a34      	ldr	r2, [pc, #208]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d009      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a33      	ldr	r2, [pc, #204]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d004      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a31      	ldr	r2, [pc, #196]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d108      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006420:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645c:	d01d      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a15      	ldr	r2, [pc, #84]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a18      	ldr	r2, [pc, #96]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a11      	ldr	r2, [pc, #68]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d10c      	bne.n	80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40013400 	.word	0x40013400
 80064dc:	40015000 	.word	0x40015000
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	40000c00 	.word	0x40000c00
 80064ec:	40014000 	.word	0x40014000

080064f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e042      	b.n	8006614 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006594:	2b00      	cmp	r3, #0
 8006596:	d106      	bne.n	80065a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7fb fcd1 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2224      	movs	r2, #36	; 0x24
 80065aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0201 	bic.w	r2, r2, #1
 80065bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fb24 	bl	8006c14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f825 	bl	800661c <UART_SetConfig>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e01b      	b.n	8006614 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fba3 	bl	8006d58 <UART_CheckIdleState>
 8006612:	4603      	mov	r3, r0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800661c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006620:	b08c      	sub	sp, #48	; 0x30
 8006622:	af00      	add	r7, sp, #0
 8006624:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	431a      	orrs	r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	431a      	orrs	r2, r3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	4313      	orrs	r3, r2
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4baa      	ldr	r3, [pc, #680]	; (80068f4 <UART_SetConfig+0x2d8>)
 800664c:	4013      	ands	r3, r2
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	6812      	ldr	r2, [r2, #0]
 8006652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006654:	430b      	orrs	r3, r1
 8006656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a9f      	ldr	r2, [pc, #636]	; (80068f8 <UART_SetConfig+0x2dc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006684:	4313      	orrs	r3, r2
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006692:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800669c:	430b      	orrs	r3, r1
 800669e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	f023 010f 	bic.w	r1, r3, #15
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a90      	ldr	r2, [pc, #576]	; (80068fc <UART_SetConfig+0x2e0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d125      	bne.n	800670c <UART_SetConfig+0xf0>
 80066c0:	4b8f      	ldr	r3, [pc, #572]	; (8006900 <UART_SetConfig+0x2e4>)
 80066c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d81a      	bhi.n	8006704 <UART_SetConfig+0xe8>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <UART_SetConfig+0xb8>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080066e5 	.word	0x080066e5
 80066d8:	080066f5 	.word	0x080066f5
 80066dc:	080066ed 	.word	0x080066ed
 80066e0:	080066fd 	.word	0x080066fd
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ea:	e116      	b.n	800691a <UART_SetConfig+0x2fe>
 80066ec:	2302      	movs	r3, #2
 80066ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f2:	e112      	b.n	800691a <UART_SetConfig+0x2fe>
 80066f4:	2304      	movs	r3, #4
 80066f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fa:	e10e      	b.n	800691a <UART_SetConfig+0x2fe>
 80066fc:	2308      	movs	r3, #8
 80066fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006702:	e10a      	b.n	800691a <UART_SetConfig+0x2fe>
 8006704:	2310      	movs	r3, #16
 8006706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670a:	e106      	b.n	800691a <UART_SetConfig+0x2fe>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a7c      	ldr	r2, [pc, #496]	; (8006904 <UART_SetConfig+0x2e8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d138      	bne.n	8006788 <UART_SetConfig+0x16c>
 8006716:	4b7a      	ldr	r3, [pc, #488]	; (8006900 <UART_SetConfig+0x2e4>)
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	f003 030c 	and.w	r3, r3, #12
 8006720:	2b0c      	cmp	r3, #12
 8006722:	d82d      	bhi.n	8006780 <UART_SetConfig+0x164>
 8006724:	a201      	add	r2, pc, #4	; (adr r2, 800672c <UART_SetConfig+0x110>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	08006761 	.word	0x08006761
 8006730:	08006781 	.word	0x08006781
 8006734:	08006781 	.word	0x08006781
 8006738:	08006781 	.word	0x08006781
 800673c:	08006771 	.word	0x08006771
 8006740:	08006781 	.word	0x08006781
 8006744:	08006781 	.word	0x08006781
 8006748:	08006781 	.word	0x08006781
 800674c:	08006769 	.word	0x08006769
 8006750:	08006781 	.word	0x08006781
 8006754:	08006781 	.word	0x08006781
 8006758:	08006781 	.word	0x08006781
 800675c:	08006779 	.word	0x08006779
 8006760:	2300      	movs	r3, #0
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006766:	e0d8      	b.n	800691a <UART_SetConfig+0x2fe>
 8006768:	2302      	movs	r3, #2
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676e:	e0d4      	b.n	800691a <UART_SetConfig+0x2fe>
 8006770:	2304      	movs	r3, #4
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006776:	e0d0      	b.n	800691a <UART_SetConfig+0x2fe>
 8006778:	2308      	movs	r3, #8
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677e:	e0cc      	b.n	800691a <UART_SetConfig+0x2fe>
 8006780:	2310      	movs	r3, #16
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006786:	e0c8      	b.n	800691a <UART_SetConfig+0x2fe>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a5e      	ldr	r2, [pc, #376]	; (8006908 <UART_SetConfig+0x2ec>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d125      	bne.n	80067de <UART_SetConfig+0x1c2>
 8006792:	4b5b      	ldr	r3, [pc, #364]	; (8006900 <UART_SetConfig+0x2e4>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006798:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800679c:	2b30      	cmp	r3, #48	; 0x30
 800679e:	d016      	beq.n	80067ce <UART_SetConfig+0x1b2>
 80067a0:	2b30      	cmp	r3, #48	; 0x30
 80067a2:	d818      	bhi.n	80067d6 <UART_SetConfig+0x1ba>
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d00a      	beq.n	80067be <UART_SetConfig+0x1a2>
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d814      	bhi.n	80067d6 <UART_SetConfig+0x1ba>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <UART_SetConfig+0x19a>
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d008      	beq.n	80067c6 <UART_SetConfig+0x1aa>
 80067b4:	e00f      	b.n	80067d6 <UART_SetConfig+0x1ba>
 80067b6:	2300      	movs	r3, #0
 80067b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067bc:	e0ad      	b.n	800691a <UART_SetConfig+0x2fe>
 80067be:	2302      	movs	r3, #2
 80067c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c4:	e0a9      	b.n	800691a <UART_SetConfig+0x2fe>
 80067c6:	2304      	movs	r3, #4
 80067c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067cc:	e0a5      	b.n	800691a <UART_SetConfig+0x2fe>
 80067ce:	2308      	movs	r3, #8
 80067d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d4:	e0a1      	b.n	800691a <UART_SetConfig+0x2fe>
 80067d6:	2310      	movs	r3, #16
 80067d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067dc:	e09d      	b.n	800691a <UART_SetConfig+0x2fe>
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a4a      	ldr	r2, [pc, #296]	; (800690c <UART_SetConfig+0x2f0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d125      	bne.n	8006834 <UART_SetConfig+0x218>
 80067e8:	4b45      	ldr	r3, [pc, #276]	; (8006900 <UART_SetConfig+0x2e4>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067f2:	2bc0      	cmp	r3, #192	; 0xc0
 80067f4:	d016      	beq.n	8006824 <UART_SetConfig+0x208>
 80067f6:	2bc0      	cmp	r3, #192	; 0xc0
 80067f8:	d818      	bhi.n	800682c <UART_SetConfig+0x210>
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d00a      	beq.n	8006814 <UART_SetConfig+0x1f8>
 80067fe:	2b80      	cmp	r3, #128	; 0x80
 8006800:	d814      	bhi.n	800682c <UART_SetConfig+0x210>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <UART_SetConfig+0x1f0>
 8006806:	2b40      	cmp	r3, #64	; 0x40
 8006808:	d008      	beq.n	800681c <UART_SetConfig+0x200>
 800680a:	e00f      	b.n	800682c <UART_SetConfig+0x210>
 800680c:	2300      	movs	r3, #0
 800680e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006812:	e082      	b.n	800691a <UART_SetConfig+0x2fe>
 8006814:	2302      	movs	r3, #2
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681a:	e07e      	b.n	800691a <UART_SetConfig+0x2fe>
 800681c:	2304      	movs	r3, #4
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006822:	e07a      	b.n	800691a <UART_SetConfig+0x2fe>
 8006824:	2308      	movs	r3, #8
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682a:	e076      	b.n	800691a <UART_SetConfig+0x2fe>
 800682c:	2310      	movs	r3, #16
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006832:	e072      	b.n	800691a <UART_SetConfig+0x2fe>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a35      	ldr	r2, [pc, #212]	; (8006910 <UART_SetConfig+0x2f4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d12a      	bne.n	8006894 <UART_SetConfig+0x278>
 800683e:	4b30      	ldr	r3, [pc, #192]	; (8006900 <UART_SetConfig+0x2e4>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684c:	d01a      	beq.n	8006884 <UART_SetConfig+0x268>
 800684e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006852:	d81b      	bhi.n	800688c <UART_SetConfig+0x270>
 8006854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006858:	d00c      	beq.n	8006874 <UART_SetConfig+0x258>
 800685a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685e:	d815      	bhi.n	800688c <UART_SetConfig+0x270>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <UART_SetConfig+0x250>
 8006864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006868:	d008      	beq.n	800687c <UART_SetConfig+0x260>
 800686a:	e00f      	b.n	800688c <UART_SetConfig+0x270>
 800686c:	2300      	movs	r3, #0
 800686e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006872:	e052      	b.n	800691a <UART_SetConfig+0x2fe>
 8006874:	2302      	movs	r3, #2
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687a:	e04e      	b.n	800691a <UART_SetConfig+0x2fe>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006882:	e04a      	b.n	800691a <UART_SetConfig+0x2fe>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688a:	e046      	b.n	800691a <UART_SetConfig+0x2fe>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006892:	e042      	b.n	800691a <UART_SetConfig+0x2fe>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <UART_SetConfig+0x2dc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d13a      	bne.n	8006914 <UART_SetConfig+0x2f8>
 800689e:	4b18      	ldr	r3, [pc, #96]	; (8006900 <UART_SetConfig+0x2e4>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ac:	d01a      	beq.n	80068e4 <UART_SetConfig+0x2c8>
 80068ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068b2:	d81b      	bhi.n	80068ec <UART_SetConfig+0x2d0>
 80068b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b8:	d00c      	beq.n	80068d4 <UART_SetConfig+0x2b8>
 80068ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068be:	d815      	bhi.n	80068ec <UART_SetConfig+0x2d0>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <UART_SetConfig+0x2b0>
 80068c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c8:	d008      	beq.n	80068dc <UART_SetConfig+0x2c0>
 80068ca:	e00f      	b.n	80068ec <UART_SetConfig+0x2d0>
 80068cc:	2300      	movs	r3, #0
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068d2:	e022      	b.n	800691a <UART_SetConfig+0x2fe>
 80068d4:	2302      	movs	r3, #2
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068da:	e01e      	b.n	800691a <UART_SetConfig+0x2fe>
 80068dc:	2304      	movs	r3, #4
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068e2:	e01a      	b.n	800691a <UART_SetConfig+0x2fe>
 80068e4:	2308      	movs	r3, #8
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ea:	e016      	b.n	800691a <UART_SetConfig+0x2fe>
 80068ec:	2310      	movs	r3, #16
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f2:	e012      	b.n	800691a <UART_SetConfig+0x2fe>
 80068f4:	cfff69f3 	.word	0xcfff69f3
 80068f8:	40008000 	.word	0x40008000
 80068fc:	40013800 	.word	0x40013800
 8006900:	40021000 	.word	0x40021000
 8006904:	40004400 	.word	0x40004400
 8006908:	40004800 	.word	0x40004800
 800690c:	40004c00 	.word	0x40004c00
 8006910:	40005000 	.word	0x40005000
 8006914:	2310      	movs	r3, #16
 8006916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4aae      	ldr	r2, [pc, #696]	; (8006bd8 <UART_SetConfig+0x5bc>)
 8006920:	4293      	cmp	r3, r2
 8006922:	f040 8097 	bne.w	8006a54 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800692a:	2b08      	cmp	r3, #8
 800692c:	d823      	bhi.n	8006976 <UART_SetConfig+0x35a>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x318>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006959 	.word	0x08006959
 8006938:	08006977 	.word	0x08006977
 800693c:	08006961 	.word	0x08006961
 8006940:	08006977 	.word	0x08006977
 8006944:	08006967 	.word	0x08006967
 8006948:	08006977 	.word	0x08006977
 800694c:	08006977 	.word	0x08006977
 8006950:	08006977 	.word	0x08006977
 8006954:	0800696f 	.word	0x0800696f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006958:	f7fe fe02 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 800695c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800695e:	e010      	b.n	8006982 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006960:	4b9e      	ldr	r3, [pc, #632]	; (8006bdc <UART_SetConfig+0x5c0>)
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006964:	e00d      	b.n	8006982 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006966:	f7fe fd8f 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 800696a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800696c:	e009      	b.n	8006982 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006974:	e005      	b.n	8006982 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006980:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8130 	beq.w	8006bea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	4a94      	ldr	r2, [pc, #592]	; (8006be0 <UART_SetConfig+0x5c4>)
 8006990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006994:	461a      	mov	r2, r3
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	fbb3 f3f2 	udiv	r3, r3, r2
 800699c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	4413      	add	r3, r2
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d305      	bcc.n	80069ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d903      	bls.n	80069c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069c0:	e113      	b.n	8006bea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	2200      	movs	r2, #0
 80069c6:	60bb      	str	r3, [r7, #8]
 80069c8:	60fa      	str	r2, [r7, #12]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	4a84      	ldr	r2, [pc, #528]	; (8006be0 <UART_SetConfig+0x5c4>)
 80069d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2200      	movs	r2, #0
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069e4:	f7f9 fc1c 	bl	8000220 <__aeabi_uldivmod>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4610      	mov	r0, r2
 80069ee:	4619      	mov	r1, r3
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	020b      	lsls	r3, r1, #8
 80069fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069fe:	0202      	lsls	r2, r0, #8
 8006a00:	6979      	ldr	r1, [r7, #20]
 8006a02:	6849      	ldr	r1, [r1, #4]
 8006a04:	0849      	lsrs	r1, r1, #1
 8006a06:	2000      	movs	r0, #0
 8006a08:	460c      	mov	r4, r1
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	eb12 0804 	adds.w	r8, r2, r4
 8006a10:	eb43 0905 	adc.w	r9, r3, r5
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	469a      	mov	sl, r3
 8006a1c:	4693      	mov	fp, r2
 8006a1e:	4652      	mov	r2, sl
 8006a20:	465b      	mov	r3, fp
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f7f9 fbfb 	bl	8000220 <__aeabi_uldivmod>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4613      	mov	r3, r2
 8006a30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a38:	d308      	bcc.n	8006a4c <UART_SetConfig+0x430>
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a40:	d204      	bcs.n	8006a4c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a3a      	ldr	r2, [r7, #32]
 8006a48:	60da      	str	r2, [r3, #12]
 8006a4a:	e0ce      	b.n	8006bea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a52:	e0ca      	b.n	8006bea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5c:	d166      	bne.n	8006b2c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d827      	bhi.n	8006ab6 <UART_SetConfig+0x49a>
 8006a66:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <UART_SetConfig+0x450>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006a91 	.word	0x08006a91
 8006a70:	08006a99 	.word	0x08006a99
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	08006ab7 	.word	0x08006ab7
 8006a7c:	08006aa7 	.word	0x08006aa7
 8006a80:	08006ab7 	.word	0x08006ab7
 8006a84:	08006ab7 	.word	0x08006ab7
 8006a88:	08006ab7 	.word	0x08006ab7
 8006a8c:	08006aaf 	.word	0x08006aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a90:	f7fe fd66 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 8006a94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a96:	e014      	b.n	8006ac2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a98:	f7fe fd78 	bl	800558c <HAL_RCC_GetPCLK2Freq>
 8006a9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a9e:	e010      	b.n	8006ac2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aa0:	4b4e      	ldr	r3, [pc, #312]	; (8006bdc <UART_SetConfig+0x5c0>)
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006aa4:	e00d      	b.n	8006ac2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aa6:	f7fe fcef 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006aac:	e009      	b.n	8006ac2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ab4:	e005      	b.n	8006ac2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8090 	beq.w	8006bea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	4a44      	ldr	r2, [pc, #272]	; (8006be0 <UART_SetConfig+0x5c4>)
 8006ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006adc:	005a      	lsls	r2, r3, #1
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	085b      	lsrs	r3, r3, #1
 8006ae4:	441a      	add	r2, r3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	2b0f      	cmp	r3, #15
 8006af4:	d916      	bls.n	8006b24 <UART_SetConfig+0x508>
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006afc:	d212      	bcs.n	8006b24 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f023 030f 	bic.w	r3, r3, #15
 8006b06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	085b      	lsrs	r3, r3, #1
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	8bfb      	ldrh	r3, [r7, #30]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	8bfa      	ldrh	r2, [r7, #30]
 8006b20:	60da      	str	r2, [r3, #12]
 8006b22:	e062      	b.n	8006bea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b2a:	e05e      	b.n	8006bea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d828      	bhi.n	8006b86 <UART_SetConfig+0x56a>
 8006b34:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <UART_SetConfig+0x520>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006b69 	.word	0x08006b69
 8006b44:	08006b71 	.word	0x08006b71
 8006b48:	08006b87 	.word	0x08006b87
 8006b4c:	08006b77 	.word	0x08006b77
 8006b50:	08006b87 	.word	0x08006b87
 8006b54:	08006b87 	.word	0x08006b87
 8006b58:	08006b87 	.word	0x08006b87
 8006b5c:	08006b7f 	.word	0x08006b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b60:	f7fe fcfe 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 8006b64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b66:	e014      	b.n	8006b92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b68:	f7fe fd10 	bl	800558c <HAL_RCC_GetPCLK2Freq>
 8006b6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b6e:	e010      	b.n	8006b92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b70:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <UART_SetConfig+0x5c0>)
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b74:	e00d      	b.n	8006b92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b76:	f7fe fc87 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 8006b7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b7c:	e009      	b.n	8006b92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b84:	e005      	b.n	8006b92 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b90:	bf00      	nop
    }

    if (pclk != 0U)
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d028      	beq.n	8006bea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	4a10      	ldr	r2, [pc, #64]	; (8006be0 <UART_SetConfig+0x5c4>)
 8006b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	441a      	add	r2, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	2b0f      	cmp	r3, #15
 8006bc0:	d910      	bls.n	8006be4 <UART_SetConfig+0x5c8>
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc8:	d20c      	bcs.n	8006be4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60da      	str	r2, [r3, #12]
 8006bd4:	e009      	b.n	8006bea <UART_SetConfig+0x5ce>
 8006bd6:	bf00      	nop
 8006bd8:	40008000 	.word	0x40008000
 8006bdc:	00f42400 	.word	0x00f42400
 8006be0:	0800ad70 	.word	0x0800ad70
      }
      else
      {
        ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2200      	movs	r2, #0
 8006c04:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006c06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3730      	adds	r7, #48	; 0x30
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01a      	beq.n	8006d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d12:	d10a      	bne.n	8006d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	605a      	str	r2, [r3, #4]
  }
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b098      	sub	sp, #96	; 0x60
 8006d5c:	af02      	add	r7, sp, #8
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d68:	f7fb fae6 	bl	8002338 <HAL_GetTick>
 8006d6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d12f      	bne.n	8006ddc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d84:	2200      	movs	r2, #0
 8006d86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f88e 	bl	8006eac <UART_WaitOnFlagUntilTimeout>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d022      	beq.n	8006ddc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006daa:	653b      	str	r3, [r7, #80]	; 0x50
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db4:	647b      	str	r3, [r7, #68]	; 0x44
 8006db6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e6      	bne.n	8006d96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e063      	b.n	8006ea4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d149      	bne.n	8006e7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006df2:	2200      	movs	r2, #0
 8006df4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f857 	bl	8006eac <UART_WaitOnFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d03c      	beq.n	8006e7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	623b      	str	r3, [r7, #32]
   return(result);
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e22:	633b      	str	r3, [r7, #48]	; 0x30
 8006e24:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e6      	bne.n	8006e04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3308      	adds	r3, #8
 8006e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e56:	61fa      	str	r2, [r7, #28]
 8006e58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	69b9      	ldr	r1, [r7, #24]
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	617b      	str	r3, [r7, #20]
   return(result);
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e5      	bne.n	8006e36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e012      	b.n	8006ea4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3758      	adds	r7, #88	; 0x58
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ebc:	e04f      	b.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec4:	d04b      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec6:	f7fb fa37 	bl	8002338 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d302      	bcc.n	8006edc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e04e      	b.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d037      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d034      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d031      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d110      	bne.n	8006f2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f838 	bl	8006f86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2208      	movs	r2, #8
 8006f1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e029      	b.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f38:	d111      	bne.n	8006f5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f81e 	bl	8006f86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e00f      	b.n	8006f7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4013      	ands	r3, r2
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	bf0c      	ite	eq
 8006f6e:	2301      	moveq	r3, #1
 8006f70:	2300      	movne	r3, #0
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d0a0      	beq.n	8006ebe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b095      	sub	sp, #84	; 0x54
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fac:	643b      	str	r3, [r7, #64]	; 0x40
 8006fae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e6      	bne.n	8006f8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	f023 0301 	bic.w	r3, r3, #1
 8006fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e3      	bne.n	8006fc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d118      	bne.n	8007032 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	60bb      	str	r3, [r7, #8]
   return(result);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f023 0310 	bic.w	r3, r3, #16
 8007014:	647b      	str	r3, [r7, #68]	; 0x44
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6979      	ldr	r1, [r7, #20]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	613b      	str	r3, [r7, #16]
   return(result);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e6      	bne.n	8007000 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007046:	bf00      	nop
 8007048:	3754      	adds	r7, #84	; 0x54
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_UARTEx_DisableFifoMode+0x16>
 8007064:	2302      	movs	r3, #2
 8007066:	e027      	b.n	80070b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2224      	movs	r2, #36	; 0x24
 8007074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0201 	bic.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007096:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070d8:	2302      	movs	r3, #2
 80070da:	e02d      	b.n	8007138 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2224      	movs	r2, #36	; 0x24
 80070e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0201 	bic.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f84f 	bl	80071bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007150:	2b01      	cmp	r3, #1
 8007152:	d101      	bne.n	8007158 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007154:	2302      	movs	r3, #2
 8007156:	e02d      	b.n	80071b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2224      	movs	r2, #36	; 0x24
 8007164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f811 	bl	80071bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d108      	bne.n	80071de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071dc:	e031      	b.n	8007242 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071de:	2308      	movs	r3, #8
 80071e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071e2:	2308      	movs	r3, #8
 80071e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	0e5b      	lsrs	r3, r3, #25
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	0f5b      	lsrs	r3, r3, #29
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	7b3a      	ldrb	r2, [r7, #12]
 800720a:	4911      	ldr	r1, [pc, #68]	; (8007250 <UARTEx_SetNbDataToProcess+0x94>)
 800720c:	5c8a      	ldrb	r2, [r1, r2]
 800720e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007212:	7b3a      	ldrb	r2, [r7, #12]
 8007214:	490f      	ldr	r1, [pc, #60]	; (8007254 <UARTEx_SetNbDataToProcess+0x98>)
 8007216:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007218:	fb93 f3f2 	sdiv	r3, r3, r2
 800721c:	b29a      	uxth	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	7b7a      	ldrb	r2, [r7, #13]
 8007228:	4909      	ldr	r1, [pc, #36]	; (8007250 <UARTEx_SetNbDataToProcess+0x94>)
 800722a:	5c8a      	ldrb	r2, [r1, r2]
 800722c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007230:	7b7a      	ldrb	r2, [r7, #13]
 8007232:	4908      	ldr	r1, [pc, #32]	; (8007254 <UARTEx_SetNbDataToProcess+0x98>)
 8007234:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007236:	fb93 f3f2 	sdiv	r3, r3, r2
 800723a:	b29a      	uxth	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	0800ad88 	.word	0x0800ad88
 8007254:	0800ad90 	.word	0x0800ad90

08007258 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e03c      	b.n	80072e4 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fa feda 	bl	8002038 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0201 	bic.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f85b 	bl	8007358 <USART_SetConfig>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e01b      	b.n	80072e4 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072ba:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072ca:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fb23 	bl	8007928 <USART_CheckIdleState>
 80072e2:	4603      	mov	r3, r0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	603b      	str	r3, [r7, #0]
 80072f8:	4613      	mov	r3, r2
 80072fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80072fc:	e018      	b.n	8007330 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007304:	d014      	beq.n	8007330 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007306:	f7fb f817 	bl	8002338 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	429a      	cmp	r2, r3
 8007314:	d302      	bcc.n	800731c <USART_WaitOnFlagUntilTimeout+0x30>
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d109      	bne.n	8007330 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e00f      	b.n	8007350 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	69da      	ldr	r2, [r3, #28]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	4013      	ands	r3, r2
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	429a      	cmp	r2, r3
 800733e:	bf0c      	ite	eq
 8007340:	2301      	moveq	r3, #1
 8007342:	2300      	movne	r3, #0
 8007344:	b2db      	uxtb	r3, r3
 8007346:	461a      	mov	r2, r3
 8007348:	79fb      	ldrb	r3, [r7, #7]
 800734a:	429a      	cmp	r2, r3
 800734c:	d0d7      	beq.n	80072fe <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8007364:	2300      	movs	r3, #0
 8007366:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800737c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	4b96      	ldr	r3, [pc, #600]	; (80075e0 <USART_SetConfig+0x288>)
 8007386:	4013      	ands	r3, r2
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	6979      	ldr	r1, [r7, #20]
 800738e:	430b      	orrs	r3, r1
 8007390:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8007392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007396:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80073c6:	f023 0309 	bic.w	r3, r3, #9
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6812      	ldr	r2, [r2, #0]
 80073ce:	6979      	ldr	r1, [r7, #20]
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	f023 010f 	bic.w	r1, r3, #15
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a7d      	ldr	r2, [pc, #500]	; (80075e4 <USART_SetConfig+0x28c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d120      	bne.n	8007436 <USART_SetConfig+0xde>
 80073f4:	4b7c      	ldr	r3, [pc, #496]	; (80075e8 <USART_SetConfig+0x290>)
 80073f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d816      	bhi.n	8007430 <USART_SetConfig+0xd8>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <USART_SetConfig+0xb0>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	08007419 	.word	0x08007419
 800740c:	08007425 	.word	0x08007425
 8007410:	0800741f 	.word	0x0800741f
 8007414:	0800742b 	.word	0x0800742b
 8007418:	2301      	movs	r3, #1
 800741a:	77fb      	strb	r3, [r7, #31]
 800741c:	e06b      	b.n	80074f6 <USART_SetConfig+0x19e>
 800741e:	2302      	movs	r3, #2
 8007420:	77fb      	strb	r3, [r7, #31]
 8007422:	e068      	b.n	80074f6 <USART_SetConfig+0x19e>
 8007424:	2304      	movs	r3, #4
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e065      	b.n	80074f6 <USART_SetConfig+0x19e>
 800742a:	2308      	movs	r3, #8
 800742c:	77fb      	strb	r3, [r7, #31]
 800742e:	e062      	b.n	80074f6 <USART_SetConfig+0x19e>
 8007430:	2310      	movs	r3, #16
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e05f      	b.n	80074f6 <USART_SetConfig+0x19e>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a6c      	ldr	r2, [pc, #432]	; (80075ec <USART_SetConfig+0x294>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d132      	bne.n	80074a6 <USART_SetConfig+0x14e>
 8007440:	4b69      	ldr	r3, [pc, #420]	; (80075e8 <USART_SetConfig+0x290>)
 8007442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007446:	f003 030c 	and.w	r3, r3, #12
 800744a:	2b0c      	cmp	r3, #12
 800744c:	d828      	bhi.n	80074a0 <USART_SetConfig+0x148>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <USART_SetConfig+0xfc>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	08007489 	.word	0x08007489
 8007458:	080074a1 	.word	0x080074a1
 800745c:	080074a1 	.word	0x080074a1
 8007460:	080074a1 	.word	0x080074a1
 8007464:	08007495 	.word	0x08007495
 8007468:	080074a1 	.word	0x080074a1
 800746c:	080074a1 	.word	0x080074a1
 8007470:	080074a1 	.word	0x080074a1
 8007474:	0800748f 	.word	0x0800748f
 8007478:	080074a1 	.word	0x080074a1
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a1 	.word	0x080074a1
 8007484:	0800749b 	.word	0x0800749b
 8007488:	2300      	movs	r3, #0
 800748a:	77fb      	strb	r3, [r7, #31]
 800748c:	e033      	b.n	80074f6 <USART_SetConfig+0x19e>
 800748e:	2302      	movs	r3, #2
 8007490:	77fb      	strb	r3, [r7, #31]
 8007492:	e030      	b.n	80074f6 <USART_SetConfig+0x19e>
 8007494:	2304      	movs	r3, #4
 8007496:	77fb      	strb	r3, [r7, #31]
 8007498:	e02d      	b.n	80074f6 <USART_SetConfig+0x19e>
 800749a:	2308      	movs	r3, #8
 800749c:	77fb      	strb	r3, [r7, #31]
 800749e:	e02a      	b.n	80074f6 <USART_SetConfig+0x19e>
 80074a0:	2310      	movs	r3, #16
 80074a2:	77fb      	strb	r3, [r7, #31]
 80074a4:	e027      	b.n	80074f6 <USART_SetConfig+0x19e>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a51      	ldr	r2, [pc, #324]	; (80075f0 <USART_SetConfig+0x298>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d120      	bne.n	80074f2 <USART_SetConfig+0x19a>
 80074b0:	4b4d      	ldr	r3, [pc, #308]	; (80075e8 <USART_SetConfig+0x290>)
 80074b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074ba:	2b30      	cmp	r3, #48	; 0x30
 80074bc:	d013      	beq.n	80074e6 <USART_SetConfig+0x18e>
 80074be:	2b30      	cmp	r3, #48	; 0x30
 80074c0:	d814      	bhi.n	80074ec <USART_SetConfig+0x194>
 80074c2:	2b20      	cmp	r3, #32
 80074c4:	d009      	beq.n	80074da <USART_SetConfig+0x182>
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d810      	bhi.n	80074ec <USART_SetConfig+0x194>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <USART_SetConfig+0x17c>
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d006      	beq.n	80074e0 <USART_SetConfig+0x188>
 80074d2:	e00b      	b.n	80074ec <USART_SetConfig+0x194>
 80074d4:	2300      	movs	r3, #0
 80074d6:	77fb      	strb	r3, [r7, #31]
 80074d8:	e00d      	b.n	80074f6 <USART_SetConfig+0x19e>
 80074da:	2302      	movs	r3, #2
 80074dc:	77fb      	strb	r3, [r7, #31]
 80074de:	e00a      	b.n	80074f6 <USART_SetConfig+0x19e>
 80074e0:	2304      	movs	r3, #4
 80074e2:	77fb      	strb	r3, [r7, #31]
 80074e4:	e007      	b.n	80074f6 <USART_SetConfig+0x19e>
 80074e6:	2308      	movs	r3, #8
 80074e8:	77fb      	strb	r3, [r7, #31]
 80074ea:	e004      	b.n	80074f6 <USART_SetConfig+0x19e>
 80074ec:	2310      	movs	r3, #16
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e001      	b.n	80074f6 <USART_SetConfig+0x19e>
 80074f2:	2310      	movs	r3, #16
 80074f4:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80074f6:	7ffb      	ldrb	r3, [r7, #31]
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	f200 81e2 	bhi.w	80078c2 <USART_SetConfig+0x56a>
 80074fe:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <USART_SetConfig+0x1ac>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	08007529 	.word	0x08007529
 8007508:	080075f5 	.word	0x080075f5
 800750c:	080076ab 	.word	0x080076ab
 8007510:	080078c3 	.word	0x080078c3
 8007514:	0800775b 	.word	0x0800775b
 8007518:	080078c3 	.word	0x080078c3
 800751c:	080078c3 	.word	0x080078c3
 8007520:	080078c3 	.word	0x080078c3
 8007524:	08007811 	.word	0x08007811
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8007528:	f7fe f81a 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 800752c:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	2b00      	cmp	r3, #0
 8007534:	d044      	beq.n	80075c0 <USART_SetConfig+0x268>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	2b01      	cmp	r3, #1
 800753c:	d03e      	beq.n	80075bc <USART_SetConfig+0x264>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	2b02      	cmp	r3, #2
 8007544:	d038      	beq.n	80075b8 <USART_SetConfig+0x260>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	2b03      	cmp	r3, #3
 800754c:	d032      	beq.n	80075b4 <USART_SetConfig+0x25c>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	2b04      	cmp	r3, #4
 8007554:	d02c      	beq.n	80075b0 <USART_SetConfig+0x258>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	2b05      	cmp	r3, #5
 800755c:	d026      	beq.n	80075ac <USART_SetConfig+0x254>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	2b06      	cmp	r3, #6
 8007564:	d020      	beq.n	80075a8 <USART_SetConfig+0x250>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	2b07      	cmp	r3, #7
 800756c:	d01a      	beq.n	80075a4 <USART_SetConfig+0x24c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	2b08      	cmp	r3, #8
 8007574:	d014      	beq.n	80075a0 <USART_SetConfig+0x248>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	2b09      	cmp	r3, #9
 800757c:	d00e      	beq.n	800759c <USART_SetConfig+0x244>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	2b0a      	cmp	r3, #10
 8007584:	d008      	beq.n	8007598 <USART_SetConfig+0x240>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	2b0b      	cmp	r3, #11
 800758c:	d102      	bne.n	8007594 <USART_SetConfig+0x23c>
 800758e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007592:	e016      	b.n	80075c2 <USART_SetConfig+0x26a>
 8007594:	2301      	movs	r3, #1
 8007596:	e014      	b.n	80075c2 <USART_SetConfig+0x26a>
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	e012      	b.n	80075c2 <USART_SetConfig+0x26a>
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	e010      	b.n	80075c2 <USART_SetConfig+0x26a>
 80075a0:	2320      	movs	r3, #32
 80075a2:	e00e      	b.n	80075c2 <USART_SetConfig+0x26a>
 80075a4:	2310      	movs	r3, #16
 80075a6:	e00c      	b.n	80075c2 <USART_SetConfig+0x26a>
 80075a8:	230c      	movs	r3, #12
 80075aa:	e00a      	b.n	80075c2 <USART_SetConfig+0x26a>
 80075ac:	230a      	movs	r3, #10
 80075ae:	e008      	b.n	80075c2 <USART_SetConfig+0x26a>
 80075b0:	2308      	movs	r3, #8
 80075b2:	e006      	b.n	80075c2 <USART_SetConfig+0x26a>
 80075b4:	2306      	movs	r3, #6
 80075b6:	e004      	b.n	80075c2 <USART_SetConfig+0x26a>
 80075b8:	2304      	movs	r3, #4
 80075ba:	e002      	b.n	80075c2 <USART_SetConfig+0x26a>
 80075bc:	2302      	movs	r3, #2
 80075be:	e000      	b.n	80075c2 <USART_SetConfig+0x26a>
 80075c0:	2301      	movs	r3, #1
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c8:	005a      	lsls	r2, r3, #1
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	441a      	add	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075da:	61bb      	str	r3, [r7, #24]
      break;
 80075dc:	e174      	b.n	80078c8 <USART_SetConfig+0x570>
 80075de:	bf00      	nop
 80075e0:	cfff69f3 	.word	0xcfff69f3
 80075e4:	40013800 	.word	0x40013800
 80075e8:	40021000 	.word	0x40021000
 80075ec:	40004400 	.word	0x40004400
 80075f0:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80075f4:	f7fd ffca 	bl	800558c <HAL_RCC_GetPCLK2Freq>
 80075f8:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d044      	beq.n	800768c <USART_SetConfig+0x334>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	2b01      	cmp	r3, #1
 8007608:	d03e      	beq.n	8007688 <USART_SetConfig+0x330>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	2b02      	cmp	r3, #2
 8007610:	d038      	beq.n	8007684 <USART_SetConfig+0x32c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	2b03      	cmp	r3, #3
 8007618:	d032      	beq.n	8007680 <USART_SetConfig+0x328>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	2b04      	cmp	r3, #4
 8007620:	d02c      	beq.n	800767c <USART_SetConfig+0x324>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b05      	cmp	r3, #5
 8007628:	d026      	beq.n	8007678 <USART_SetConfig+0x320>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2b06      	cmp	r3, #6
 8007630:	d020      	beq.n	8007674 <USART_SetConfig+0x31c>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b07      	cmp	r3, #7
 8007638:	d01a      	beq.n	8007670 <USART_SetConfig+0x318>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2b08      	cmp	r3, #8
 8007640:	d014      	beq.n	800766c <USART_SetConfig+0x314>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	2b09      	cmp	r3, #9
 8007648:	d00e      	beq.n	8007668 <USART_SetConfig+0x310>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	2b0a      	cmp	r3, #10
 8007650:	d008      	beq.n	8007664 <USART_SetConfig+0x30c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	2b0b      	cmp	r3, #11
 8007658:	d102      	bne.n	8007660 <USART_SetConfig+0x308>
 800765a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800765e:	e016      	b.n	800768e <USART_SetConfig+0x336>
 8007660:	2301      	movs	r3, #1
 8007662:	e014      	b.n	800768e <USART_SetConfig+0x336>
 8007664:	2380      	movs	r3, #128	; 0x80
 8007666:	e012      	b.n	800768e <USART_SetConfig+0x336>
 8007668:	2340      	movs	r3, #64	; 0x40
 800766a:	e010      	b.n	800768e <USART_SetConfig+0x336>
 800766c:	2320      	movs	r3, #32
 800766e:	e00e      	b.n	800768e <USART_SetConfig+0x336>
 8007670:	2310      	movs	r3, #16
 8007672:	e00c      	b.n	800768e <USART_SetConfig+0x336>
 8007674:	230c      	movs	r3, #12
 8007676:	e00a      	b.n	800768e <USART_SetConfig+0x336>
 8007678:	230a      	movs	r3, #10
 800767a:	e008      	b.n	800768e <USART_SetConfig+0x336>
 800767c:	2308      	movs	r3, #8
 800767e:	e006      	b.n	800768e <USART_SetConfig+0x336>
 8007680:	2306      	movs	r3, #6
 8007682:	e004      	b.n	800768e <USART_SetConfig+0x336>
 8007684:	2304      	movs	r3, #4
 8007686:	e002      	b.n	800768e <USART_SetConfig+0x336>
 8007688:	2302      	movs	r3, #2
 800768a:	e000      	b.n	800768e <USART_SetConfig+0x336>
 800768c:	2301      	movs	r3, #1
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	fbb2 f3f3 	udiv	r3, r2, r3
 8007694:	005a      	lsls	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	085b      	lsrs	r3, r3, #1
 800769c:	441a      	add	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a6:	61bb      	str	r3, [r7, #24]
      break;
 80076a8:	e10e      	b.n	80078c8 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d044      	beq.n	800773c <USART_SetConfig+0x3e4>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d03e      	beq.n	8007738 <USART_SetConfig+0x3e0>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d038      	beq.n	8007734 <USART_SetConfig+0x3dc>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d032      	beq.n	8007730 <USART_SetConfig+0x3d8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d02c      	beq.n	800772c <USART_SetConfig+0x3d4>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	2b05      	cmp	r3, #5
 80076d8:	d026      	beq.n	8007728 <USART_SetConfig+0x3d0>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	2b06      	cmp	r3, #6
 80076e0:	d020      	beq.n	8007724 <USART_SetConfig+0x3cc>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	2b07      	cmp	r3, #7
 80076e8:	d01a      	beq.n	8007720 <USART_SetConfig+0x3c8>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d014      	beq.n	800771c <USART_SetConfig+0x3c4>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	2b09      	cmp	r3, #9
 80076f8:	d00e      	beq.n	8007718 <USART_SetConfig+0x3c0>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	2b0a      	cmp	r3, #10
 8007700:	d008      	beq.n	8007714 <USART_SetConfig+0x3bc>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	2b0b      	cmp	r3, #11
 8007708:	d102      	bne.n	8007710 <USART_SetConfig+0x3b8>
 800770a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800770e:	e016      	b.n	800773e <USART_SetConfig+0x3e6>
 8007710:	2301      	movs	r3, #1
 8007712:	e014      	b.n	800773e <USART_SetConfig+0x3e6>
 8007714:	2380      	movs	r3, #128	; 0x80
 8007716:	e012      	b.n	800773e <USART_SetConfig+0x3e6>
 8007718:	2340      	movs	r3, #64	; 0x40
 800771a:	e010      	b.n	800773e <USART_SetConfig+0x3e6>
 800771c:	2320      	movs	r3, #32
 800771e:	e00e      	b.n	800773e <USART_SetConfig+0x3e6>
 8007720:	2310      	movs	r3, #16
 8007722:	e00c      	b.n	800773e <USART_SetConfig+0x3e6>
 8007724:	230c      	movs	r3, #12
 8007726:	e00a      	b.n	800773e <USART_SetConfig+0x3e6>
 8007728:	230a      	movs	r3, #10
 800772a:	e008      	b.n	800773e <USART_SetConfig+0x3e6>
 800772c:	2308      	movs	r3, #8
 800772e:	e006      	b.n	800773e <USART_SetConfig+0x3e6>
 8007730:	2306      	movs	r3, #6
 8007732:	e004      	b.n	800773e <USART_SetConfig+0x3e6>
 8007734:	2304      	movs	r3, #4
 8007736:	e002      	b.n	800773e <USART_SetConfig+0x3e6>
 8007738:	2302      	movs	r3, #2
 800773a:	e000      	b.n	800773e <USART_SetConfig+0x3e6>
 800773c:	2301      	movs	r3, #1
 800773e:	4a79      	ldr	r2, [pc, #484]	; (8007924 <USART_SetConfig+0x5cc>)
 8007740:	fbb2 f3f3 	udiv	r3, r2, r3
 8007744:	005a      	lsls	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	085b      	lsrs	r3, r3, #1
 800774c:	441a      	add	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	fbb2 f3f3 	udiv	r3, r2, r3
 8007756:	61bb      	str	r3, [r7, #24]
      break;
 8007758:	e0b6      	b.n	80078c8 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800775a:	f7fd fe95 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 800775e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	d044      	beq.n	80077f2 <USART_SetConfig+0x49a>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	2b01      	cmp	r3, #1
 800776e:	d03e      	beq.n	80077ee <USART_SetConfig+0x496>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	2b02      	cmp	r3, #2
 8007776:	d038      	beq.n	80077ea <USART_SetConfig+0x492>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	2b03      	cmp	r3, #3
 800777e:	d032      	beq.n	80077e6 <USART_SetConfig+0x48e>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	2b04      	cmp	r3, #4
 8007786:	d02c      	beq.n	80077e2 <USART_SetConfig+0x48a>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	2b05      	cmp	r3, #5
 800778e:	d026      	beq.n	80077de <USART_SetConfig+0x486>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	2b06      	cmp	r3, #6
 8007796:	d020      	beq.n	80077da <USART_SetConfig+0x482>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	2b07      	cmp	r3, #7
 800779e:	d01a      	beq.n	80077d6 <USART_SetConfig+0x47e>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d014      	beq.n	80077d2 <USART_SetConfig+0x47a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	2b09      	cmp	r3, #9
 80077ae:	d00e      	beq.n	80077ce <USART_SetConfig+0x476>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	2b0a      	cmp	r3, #10
 80077b6:	d008      	beq.n	80077ca <USART_SetConfig+0x472>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	2b0b      	cmp	r3, #11
 80077be:	d102      	bne.n	80077c6 <USART_SetConfig+0x46e>
 80077c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077c4:	e016      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e014      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077ca:	2380      	movs	r3, #128	; 0x80
 80077cc:	e012      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077ce:	2340      	movs	r3, #64	; 0x40
 80077d0:	e010      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077d2:	2320      	movs	r3, #32
 80077d4:	e00e      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077d6:	2310      	movs	r3, #16
 80077d8:	e00c      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077da:	230c      	movs	r3, #12
 80077dc:	e00a      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077de:	230a      	movs	r3, #10
 80077e0:	e008      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077e2:	2308      	movs	r3, #8
 80077e4:	e006      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077e6:	2306      	movs	r3, #6
 80077e8:	e004      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077ea:	2304      	movs	r3, #4
 80077ec:	e002      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077ee:	2302      	movs	r3, #2
 80077f0:	e000      	b.n	80077f4 <USART_SetConfig+0x49c>
 80077f2:	2301      	movs	r3, #1
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fa:	005a      	lsls	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	441a      	add	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	61bb      	str	r3, [r7, #24]
      break;
 800780e:	e05b      	b.n	80078c8 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	2b00      	cmp	r3, #0
 8007816:	d044      	beq.n	80078a2 <USART_SetConfig+0x54a>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	2b01      	cmp	r3, #1
 800781e:	d03e      	beq.n	800789e <USART_SetConfig+0x546>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	2b02      	cmp	r3, #2
 8007826:	d038      	beq.n	800789a <USART_SetConfig+0x542>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	2b03      	cmp	r3, #3
 800782e:	d032      	beq.n	8007896 <USART_SetConfig+0x53e>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	2b04      	cmp	r3, #4
 8007836:	d02c      	beq.n	8007892 <USART_SetConfig+0x53a>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	2b05      	cmp	r3, #5
 800783e:	d026      	beq.n	800788e <USART_SetConfig+0x536>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	2b06      	cmp	r3, #6
 8007846:	d020      	beq.n	800788a <USART_SetConfig+0x532>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	2b07      	cmp	r3, #7
 800784e:	d01a      	beq.n	8007886 <USART_SetConfig+0x52e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	2b08      	cmp	r3, #8
 8007856:	d014      	beq.n	8007882 <USART_SetConfig+0x52a>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	2b09      	cmp	r3, #9
 800785e:	d00e      	beq.n	800787e <USART_SetConfig+0x526>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	2b0a      	cmp	r3, #10
 8007866:	d008      	beq.n	800787a <USART_SetConfig+0x522>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	2b0b      	cmp	r3, #11
 800786e:	d102      	bne.n	8007876 <USART_SetConfig+0x51e>
 8007870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007874:	e016      	b.n	80078a4 <USART_SetConfig+0x54c>
 8007876:	2301      	movs	r3, #1
 8007878:	e014      	b.n	80078a4 <USART_SetConfig+0x54c>
 800787a:	2380      	movs	r3, #128	; 0x80
 800787c:	e012      	b.n	80078a4 <USART_SetConfig+0x54c>
 800787e:	2340      	movs	r3, #64	; 0x40
 8007880:	e010      	b.n	80078a4 <USART_SetConfig+0x54c>
 8007882:	2320      	movs	r3, #32
 8007884:	e00e      	b.n	80078a4 <USART_SetConfig+0x54c>
 8007886:	2310      	movs	r3, #16
 8007888:	e00c      	b.n	80078a4 <USART_SetConfig+0x54c>
 800788a:	230c      	movs	r3, #12
 800788c:	e00a      	b.n	80078a4 <USART_SetConfig+0x54c>
 800788e:	230a      	movs	r3, #10
 8007890:	e008      	b.n	80078a4 <USART_SetConfig+0x54c>
 8007892:	2308      	movs	r3, #8
 8007894:	e006      	b.n	80078a4 <USART_SetConfig+0x54c>
 8007896:	2306      	movs	r3, #6
 8007898:	e004      	b.n	80078a4 <USART_SetConfig+0x54c>
 800789a:	2304      	movs	r3, #4
 800789c:	e002      	b.n	80078a4 <USART_SetConfig+0x54c>
 800789e:	2302      	movs	r3, #2
 80078a0:	e000      	b.n	80078a4 <USART_SetConfig+0x54c>
 80078a2:	2301      	movs	r3, #1
 80078a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	005a      	lsls	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	441a      	add	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80078be:	61bb      	str	r3, [r7, #24]
      break;
 80078c0:	e002      	b.n	80078c8 <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	77bb      	strb	r3, [r7, #30]
      break;
 80078c6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	2b0f      	cmp	r3, #15
 80078cc:	d916      	bls.n	80078fc <USART_SetConfig+0x5a4>
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078d4:	d212      	bcs.n	80078fc <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f023 030f 	bic.w	r3, r3, #15
 80078de:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	89fb      	ldrh	r3, [r7, #14]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	89fa      	ldrh	r2, [r7, #14]
 80078f8:	60da      	str	r2, [r3, #12]
 80078fa:	e001      	b.n	8007900 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8007918:	7fbb      	ldrb	r3, [r7, #30]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	00f42400 	.word	0x00f42400

08007928 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af02      	add	r7, sp, #8
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007936:	f7fa fcff 	bl	8002338 <HAL_GetTick>
 800793a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b08      	cmp	r3, #8
 8007948:	d10e      	bne.n	8007968 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800794a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff fcc7 	bl	80072ec <USART_WaitOnFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e01e      	b.n	80079a6 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b04      	cmp	r3, #4
 8007974:	d10e      	bne.n	8007994 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff fcb1 	bl	80072ec <USART_WaitOnFlagUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e008      	b.n	80079a6 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b085      	sub	sp, #20
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_USARTEx_DisableFifoMode+0x16>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e027      	b.n	8007a14 <HAL_USARTEx_DisableFifoMode+0x66>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0201 	bic.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079f2:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e02d      	b.n	8007a94 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0201 	bic.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f84f 	bl	8007b18 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e02d      	b.n	8007b10 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0201 	bic.w	r2, r2, #1
 8007ada:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f811 	bl	8007b18 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d106      	bne.n	8007b36 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b34:	e02f      	b.n	8007b96 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b36:	2308      	movs	r3, #8
 8007b38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b3a:	2308      	movs	r3, #8
 8007b3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8007b44:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8007b54:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	7b3a      	ldrb	r2, [r7, #12]
 8007b62:	4910      	ldr	r1, [pc, #64]	; (8007ba4 <USARTEx_SetNbDataToProcess+0x8c>)
 8007b64:	5c8a      	ldrb	r2, [r1, r2]
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8007b6a:	7b3a      	ldrb	r2, [r7, #12]
 8007b6c:	490e      	ldr	r1, [pc, #56]	; (8007ba8 <USARTEx_SetNbDataToProcess+0x90>)
 8007b6e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b70:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	7b7a      	ldrb	r2, [r7, #13]
 8007b7e:	4909      	ldr	r1, [pc, #36]	; (8007ba4 <USARTEx_SetNbDataToProcess+0x8c>)
 8007b80:	5c8a      	ldrb	r2, [r1, r2]
 8007b82:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8007b86:	7b7a      	ldrb	r2, [r7, #13]
 8007b88:	4907      	ldr	r1, [pc, #28]	; (8007ba8 <USARTEx_SetNbDataToProcess+0x90>)
 8007b8a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8007b96:	bf00      	nop
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	0800ad98 	.word	0x0800ad98
 8007ba8:	0800ada0 	.word	0x0800ada0

08007bac <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8007bb0:	4907      	ldr	r1, [pc, #28]	; (8007bd0 <MX_FATFS_Init+0x24>)
 8007bb2:	4808      	ldr	r0, [pc, #32]	; (8007bd4 <MX_FATFS_Init+0x28>)
 8007bb4:	f000 f8b6 	bl	8007d24 <FATFS_LinkDriver>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8007bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bc2:	e003      	b.n	8007bcc <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <MX_FATFS_Init+0x2c>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8007bca:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20000aa4 	.word	0x20000aa4
 8007bd4:	20000010 	.word	0x20000010
 8007bd8:	20000aa8 	.word	0x20000aa8

08007bdc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <USER_initialize+0x24>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <USER_initialize+0x24>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	2000000c 	.word	0x2000000c

08007c04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007c0e:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <USER_status+0x24>)
 8007c10:	2201      	movs	r2, #1
 8007c12:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007c14:	4b04      	ldr	r3, [pc, #16]	; (8007c28 <USER_status+0x24>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	2000000c 	.word	0x2000000c

08007c2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	607a      	str	r2, [r7, #4]
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007c3c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	603b      	str	r3, [r7, #0]
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007c5a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	603a      	str	r2, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
 8007c74:	460b      	mov	r3, r1
 8007c76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
    return res;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ca2:	4b1f      	ldr	r3, [pc, #124]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007ca4:	7a5b      	ldrb	r3, [r3, #9]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d131      	bne.n	8007d10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007cac:	4b1c      	ldr	r3, [pc, #112]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cae:	7a5b      	ldrb	r3, [r3, #9]
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007cba:	4b19      	ldr	r3, [pc, #100]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cbc:	7a5b      	ldrb	r3, [r3, #9]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	4a17      	ldr	r2, [pc, #92]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007cca:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007ccc:	7a5b      	ldrb	r3, [r3, #9]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4b13      	ldr	r3, [pc, #76]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cd4:	4413      	add	r3, r2
 8007cd6:	79fa      	ldrb	r2, [r7, #7]
 8007cd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cda:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cdc:	7a5b      	ldrb	r3, [r3, #9]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	b2d1      	uxtb	r1, r2
 8007ce4:	4a0e      	ldr	r2, [pc, #56]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007ce6:	7251      	strb	r1, [r2, #9]
 8007ce8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007cea:	7dbb      	ldrb	r3, [r7, #22]
 8007cec:	3330      	adds	r3, #48	; 0x30
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	223a      	movs	r2, #58	; 0x3a
 8007cfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	3302      	adds	r3, #2
 8007d00:	222f      	movs	r2, #47	; 0x2f
 8007d02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	3303      	adds	r3, #3
 8007d08:	2200      	movs	r2, #0
 8007d0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	20000aac 	.word	0x20000aac

08007d24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff ffaa 	bl	8007c8c <FATFS_LinkDriverEx>
 8007d38:	4603      	mov	r3, r0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <__NVIC_SetPriority>:
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	db0a      	blt.n	8007d6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	490c      	ldr	r1, [pc, #48]	; (8007d90 <__NVIC_SetPriority+0x4c>)
 8007d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d62:	0112      	lsls	r2, r2, #4
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	440b      	add	r3, r1
 8007d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007d6c:	e00a      	b.n	8007d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	4908      	ldr	r1, [pc, #32]	; (8007d94 <__NVIC_SetPriority+0x50>)
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	3b04      	subs	r3, #4
 8007d7c:	0112      	lsls	r2, r2, #4
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	440b      	add	r3, r1
 8007d82:	761a      	strb	r2, [r3, #24]
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	e000e100 	.word	0xe000e100
 8007d94:	e000ed00 	.word	0xe000ed00

08007d98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <SysTick_Handler+0x1c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007da0:	f001 fe20 	bl	80099e4 <xTaskGetSchedulerState>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d001      	beq.n	8007dae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007daa:	f002 fc05 	bl	800a5b8 <xPortSysTickHandler>
  }
}
 8007dae:	bf00      	nop
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	e000e010 	.word	0xe000e010

08007db8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	f06f 0004 	mvn.w	r0, #4
 8007dc2:	f7ff ffbf 	bl	8007d44 <__NVIC_SetPriority>
#endif
}
 8007dc6:	bf00      	nop
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dd2:	f3ef 8305 	mrs	r3, IPSR
 8007dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8007dd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007dde:	f06f 0305 	mvn.w	r3, #5
 8007de2:	607b      	str	r3, [r7, #4]
 8007de4:	e00c      	b.n	8007e00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007de6:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <osKernelInitialize+0x44>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d105      	bne.n	8007dfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007dee:	4b08      	ldr	r3, [pc, #32]	; (8007e10 <osKernelInitialize+0x44>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	607b      	str	r3, [r7, #4]
 8007df8:	e002      	b.n	8007e00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e00:	687b      	ldr	r3, [r7, #4]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20000ab8 	.word	0x20000ab8

08007e14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e1a:	f3ef 8305 	mrs	r3, IPSR
 8007e1e:	603b      	str	r3, [r7, #0]
  return(result);
 8007e20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007e26:	f06f 0305 	mvn.w	r3, #5
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	e010      	b.n	8007e50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <osKernelStart+0x48>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d109      	bne.n	8007e4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e36:	f7ff ffbf 	bl	8007db8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e3a:	4b08      	ldr	r3, [pc, #32]	; (8007e5c <osKernelStart+0x48>)
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e40:	f001 f964 	bl	800910c <vTaskStartScheduler>
      stat = osOK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	e002      	b.n	8007e50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e50:	687b      	ldr	r3, [r7, #4]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000ab8 	.word	0x20000ab8

08007e60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08e      	sub	sp, #56	; 0x38
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e70:	f3ef 8305 	mrs	r3, IPSR
 8007e74:	617b      	str	r3, [r7, #20]
  return(result);
 8007e76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d17e      	bne.n	8007f7a <osThreadNew+0x11a>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d07b      	beq.n	8007f7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e82:	2380      	movs	r3, #128	; 0x80
 8007e84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e86:	2318      	movs	r3, #24
 8007e88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d045      	beq.n	8007f26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <osThreadNew+0x48>
        name = attr->name;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <osThreadNew+0x6e>
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b38      	cmp	r3, #56	; 0x38
 8007ec0:	d805      	bhi.n	8007ece <osThreadNew+0x6e>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <osThreadNew+0x72>
        return (NULL);
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e054      	b.n	8007f7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	089b      	lsrs	r3, r3, #2
 8007ee0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00e      	beq.n	8007f08 <osThreadNew+0xa8>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	2bbb      	cmp	r3, #187	; 0xbb
 8007ef0:	d90a      	bls.n	8007f08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d006      	beq.n	8007f08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <osThreadNew+0xa8>
        mem = 1;
 8007f02:	2301      	movs	r3, #1
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	e010      	b.n	8007f2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10c      	bne.n	8007f2a <osThreadNew+0xca>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d108      	bne.n	8007f2a <osThreadNew+0xca>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d104      	bne.n	8007f2a <osThreadNew+0xca>
          mem = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61bb      	str	r3, [r7, #24]
 8007f24:	e001      	b.n	8007f2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d110      	bne.n	8007f52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f38:	9202      	str	r2, [sp, #8]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6a3a      	ldr	r2, [r7, #32]
 8007f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 fe0c 	bl	8008b64 <xTaskCreateStatic>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	613b      	str	r3, [r7, #16]
 8007f50:	e013      	b.n	8007f7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d110      	bne.n	8007f7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	f107 0310 	add.w	r3, r7, #16
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 fe57 	bl	8008c1e <xTaskCreate>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d001      	beq.n	8007f7a <osThreadNew+0x11a>
            hTask = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f7a:	693b      	ldr	r3, [r7, #16]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3728      	adds	r7, #40	; 0x28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f8c:	f3ef 8305 	mrs	r3, IPSR
 8007f90:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <osDelay+0x1c>
    stat = osErrorISR;
 8007f98:	f06f 0305 	mvn.w	r3, #5
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	e007      	b.n	8007fb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 f804 	bl	8008fb8 <vTaskDelay>
    }
  }

  return (stat);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4a07      	ldr	r2, [pc, #28]	; (8007fe8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4a06      	ldr	r2, [pc, #24]	; (8007fec <vApplicationGetIdleTaskMemory+0x30>)
 8007fd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2280      	movs	r2, #128	; 0x80
 8007fd8:	601a      	str	r2, [r3, #0]
}
 8007fda:	bf00      	nop
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20000abc 	.word	0x20000abc
 8007fec:	20000b78 	.word	0x20000b78

08007ff0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4a07      	ldr	r2, [pc, #28]	; (800801c <vApplicationGetTimerTaskMemory+0x2c>)
 8008000:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	4a06      	ldr	r2, [pc, #24]	; (8008020 <vApplicationGetTimerTaskMemory+0x30>)
 8008006:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800800e:	601a      	str	r2, [r3, #0]
}
 8008010:	bf00      	nop
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20000d78 	.word	0x20000d78
 8008020:	20000e34 	.word	0x20000e34

08008024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f103 0208 	add.w	r2, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800803c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f103 0208 	add.w	r2, r3, #8
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f103 0208 	add.w	r2, r3, #8
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
}
 80080ba:	bf00      	nop
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080dc:	d103      	bne.n	80080e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	e00c      	b.n	8008100 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3308      	adds	r3, #8
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	e002      	b.n	80080f4 <vListInsert+0x2e>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d2f6      	bcs.n	80080ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	601a      	str	r2, [r3, #0]
}
 800812c:	bf00      	nop
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6892      	ldr	r2, [r2, #8]
 800814e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6852      	ldr	r2, [r2, #4]
 8008158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d103      	bne.n	800816c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	1e5a      	subs	r2, r3, #1
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80081b6:	f002 f96d 	bl	800a494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c2:	68f9      	ldr	r1, [r7, #12]
 80081c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081c6:	fb01 f303 	mul.w	r3, r1, r3
 80081ca:	441a      	add	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e6:	3b01      	subs	r3, #1
 80081e8:	68f9      	ldr	r1, [r7, #12]
 80081ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081ec:	fb01 f303 	mul.w	r3, r1, r3
 80081f0:	441a      	add	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	22ff      	movs	r2, #255	; 0xff
 80081fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	22ff      	movs	r2, #255	; 0xff
 8008202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d114      	bne.n	8008236 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01a      	beq.n	800824a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3310      	adds	r3, #16
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fa11 	bl	8009640 <xTaskRemoveFromEventList>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d012      	beq.n	800824a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <xQueueGenericReset+0xcc>)
 8008226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	e009      	b.n	800824a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3310      	adds	r3, #16
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fef2 	bl	8008024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3324      	adds	r3, #36	; 0x24
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff feed 	bl	8008024 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800824a:	f002 f953 	bl	800a4f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800824e:	2301      	movs	r3, #1
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08e      	sub	sp, #56	; 0x38
 8008260:	af02      	add	r7, sp, #8
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <xQueueGenericCreateStatic+0x52>
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <xQueueGenericCreateStatic+0x56>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <xQueueGenericCreateStatic+0x58>
 80082b2:	2300      	movs	r3, #0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	623b      	str	r3, [r7, #32]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <xQueueGenericCreateStatic+0x7e>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <xQueueGenericCreateStatic+0x82>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <xQueueGenericCreateStatic+0x84>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	61fb      	str	r3, [r7, #28]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082fa:	2350      	movs	r3, #80	; 0x50
 80082fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b50      	cmp	r3, #80	; 0x50
 8008302:	d00a      	beq.n	800831a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	61bb      	str	r3, [r7, #24]
}
 8008316:	bf00      	nop
 8008318:	e7fe      	b.n	8008318 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800831a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00d      	beq.n	8008342 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800832e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	4613      	mov	r3, r2
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f805 	bl	800834c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008344:	4618      	mov	r0, r3
 8008346:	3730      	adds	r7, #48	; 0x30
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d103      	bne.n	8008368 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e002      	b.n	800836e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800837a:	2101      	movs	r1, #1
 800837c:	69b8      	ldr	r0, [r7, #24]
 800837e:	f7ff ff05 	bl	800818c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08e      	sub	sp, #56	; 0x38
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083a2:	2300      	movs	r3, #0
 80083a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <xQueueGenericSend+0x32>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d103      	bne.n	80083d4 <xQueueGenericSend+0x40>
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <xQueueGenericSend+0x44>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e000      	b.n	80083da <xQueueGenericSend+0x46>
 80083d8:	2300      	movs	r3, #0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <xQueueGenericSend+0x60>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d103      	bne.n	8008402 <xQueueGenericSend+0x6e>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d101      	bne.n	8008406 <xQueueGenericSend+0x72>
 8008402:	2301      	movs	r3, #1
 8008404:	e000      	b.n	8008408 <xQueueGenericSend+0x74>
 8008406:	2300      	movs	r3, #0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <xQueueGenericSend+0x8e>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	623b      	str	r3, [r7, #32]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008422:	f001 fadf 	bl	80099e4 <xTaskGetSchedulerState>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d102      	bne.n	8008432 <xQueueGenericSend+0x9e>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <xQueueGenericSend+0xa2>
 8008432:	2301      	movs	r3, #1
 8008434:	e000      	b.n	8008438 <xQueueGenericSend+0xa4>
 8008436:	2300      	movs	r3, #0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10a      	bne.n	8008452 <xQueueGenericSend+0xbe>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	61fb      	str	r3, [r7, #28]
}
 800844e:	bf00      	nop
 8008450:	e7fe      	b.n	8008450 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008452:	f002 f81f 	bl	800a494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845e:	429a      	cmp	r2, r3
 8008460:	d302      	bcc.n	8008468 <xQueueGenericSend+0xd4>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b02      	cmp	r3, #2
 8008466:	d129      	bne.n	80084bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800846e:	f000 fa0b 	bl	8008888 <prvCopyDataToQueue>
 8008472:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	d010      	beq.n	800849e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	3324      	adds	r3, #36	; 0x24
 8008480:	4618      	mov	r0, r3
 8008482:	f001 f8dd 	bl	8009640 <xTaskRemoveFromEventList>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d013      	beq.n	80084b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800848c:	4b3f      	ldr	r3, [pc, #252]	; (800858c <xQueueGenericSend+0x1f8>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	e00a      	b.n	80084b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084a4:	4b39      	ldr	r3, [pc, #228]	; (800858c <xQueueGenericSend+0x1f8>)
 80084a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084b4:	f002 f81e 	bl	800a4f4 <vPortExitCritical>
				return pdPASS;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e063      	b.n	8008584 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d103      	bne.n	80084ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084c2:	f002 f817 	bl	800a4f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	e05c      	b.n	8008584 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d106      	bne.n	80084de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084d0:	f107 0314 	add.w	r3, r7, #20
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 f917 	bl	8009708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084da:	2301      	movs	r3, #1
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084de:	f002 f809 	bl	800a4f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084e2:	f000 fe83 	bl	80091ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084e6:	f001 ffd5 	bl	800a494 <vPortEnterCritical>
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084f0:	b25b      	sxtb	r3, r3
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084f6:	d103      	bne.n	8008500 <xQueueGenericSend+0x16c>
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008506:	b25b      	sxtb	r3, r3
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800850c:	d103      	bne.n	8008516 <xQueueGenericSend+0x182>
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008516:	f001 ffed 	bl	800a4f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800851a:	1d3a      	adds	r2, r7, #4
 800851c:	f107 0314 	add.w	r3, r7, #20
 8008520:	4611      	mov	r1, r2
 8008522:	4618      	mov	r0, r3
 8008524:	f001 f906 	bl	8009734 <xTaskCheckForTimeOut>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d124      	bne.n	8008578 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800852e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008530:	f000 faa2 	bl	8008a78 <prvIsQueueFull>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d018      	beq.n	800856c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	3310      	adds	r3, #16
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f001 f82c 	bl	80095a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800854a:	f000 fa2d 	bl	80089a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800854e:	f000 fe5b 	bl	8009208 <xTaskResumeAll>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	f47f af7c 	bne.w	8008452 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800855a:	4b0c      	ldr	r3, [pc, #48]	; (800858c <xQueueGenericSend+0x1f8>)
 800855c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	e772      	b.n	8008452 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800856c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800856e:	f000 fa1b 	bl	80089a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008572:	f000 fe49 	bl	8009208 <xTaskResumeAll>
 8008576:	e76c      	b.n	8008452 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800857a:	f000 fa15 	bl	80089a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800857e:	f000 fe43 	bl	8009208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008582:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008584:	4618      	mov	r0, r3
 8008586:	3738      	adds	r7, #56	; 0x38
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	e000ed04 	.word	0xe000ed04

08008590 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b090      	sub	sp, #64	; 0x40
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80085a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10a      	bne.n	80085be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <xQueueGenericSendFromISR+0x3c>
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <xQueueGenericSendFromISR+0x40>
 80085cc:	2301      	movs	r3, #1
 80085ce:	e000      	b.n	80085d2 <xQueueGenericSendFromISR+0x42>
 80085d0:	2300      	movs	r3, #0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10a      	bne.n	80085ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d103      	bne.n	80085fa <xQueueGenericSendFromISR+0x6a>
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d101      	bne.n	80085fe <xQueueGenericSendFromISR+0x6e>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <xQueueGenericSendFromISR+0x70>
 80085fe:	2300      	movs	r3, #0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	623b      	str	r3, [r7, #32]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800861a:	f002 f81d 	bl	800a658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800861e:	f3ef 8211 	mrs	r2, BASEPRI
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	61fa      	str	r2, [r7, #28]
 8008634:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008636:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008638:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008642:	429a      	cmp	r2, r3
 8008644:	d302      	bcc.n	800864c <xQueueGenericSendFromISR+0xbc>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b02      	cmp	r3, #2
 800864a:	d12f      	bne.n	80086ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008662:	f000 f911 	bl	8008888 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008666:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800866a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800866e:	d112      	bne.n	8008696 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	d016      	beq.n	80086a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	3324      	adds	r3, #36	; 0x24
 800867c:	4618      	mov	r0, r3
 800867e:	f000 ffdf 	bl	8009640 <xTaskRemoveFromEventList>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00e      	beq.n	80086a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00b      	beq.n	80086a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	e007      	b.n	80086a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008696:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800869a:	3301      	adds	r3, #1
 800869c:	b2db      	uxtb	r3, r3
 800869e:	b25a      	sxtb	r2, r3
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086a6:	2301      	movs	r3, #1
 80086a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80086aa:	e001      	b.n	80086b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3740      	adds	r7, #64	; 0x40
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
	...

080086c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08c      	sub	sp, #48	; 0x30
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086d4:	2300      	movs	r3, #0
 80086d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <xQueueReceive+0x30>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	623b      	str	r3, [r7, #32]
}
 80086f4:	bf00      	nop
 80086f6:	e7fe      	b.n	80086f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d103      	bne.n	8008706 <xQueueReceive+0x3e>
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <xQueueReceive+0x42>
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <xQueueReceive+0x44>
 800870a:	2300      	movs	r3, #0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <xQueueReceive+0x5e>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	61fb      	str	r3, [r7, #28]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008726:	f001 f95d 	bl	80099e4 <xTaskGetSchedulerState>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d102      	bne.n	8008736 <xQueueReceive+0x6e>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <xQueueReceive+0x72>
 8008736:	2301      	movs	r3, #1
 8008738:	e000      	b.n	800873c <xQueueReceive+0x74>
 800873a:	2300      	movs	r3, #0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10a      	bne.n	8008756 <xQueueReceive+0x8e>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	61bb      	str	r3, [r7, #24]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008756:	f001 fe9d 	bl	800a494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	2b00      	cmp	r3, #0
 8008764:	d01f      	beq.n	80087a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800876a:	f000 f8f7 	bl	800895c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	1e5a      	subs	r2, r3, #1
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00f      	beq.n	800879e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	3310      	adds	r3, #16
 8008782:	4618      	mov	r0, r3
 8008784:	f000 ff5c 	bl	8009640 <xTaskRemoveFromEventList>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d007      	beq.n	800879e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800878e:	4b3d      	ldr	r3, [pc, #244]	; (8008884 <xQueueReceive+0x1bc>)
 8008790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800879e:	f001 fea9 	bl	800a4f4 <vPortExitCritical>
				return pdPASS;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e069      	b.n	800887a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087ac:	f001 fea2 	bl	800a4f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087b0:	2300      	movs	r3, #0
 80087b2:	e062      	b.n	800887a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087ba:	f107 0310 	add.w	r3, r7, #16
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 ffa2 	bl	8009708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087c4:	2301      	movs	r3, #1
 80087c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087c8:	f001 fe94 	bl	800a4f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087cc:	f000 fd0e 	bl	80091ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087d0:	f001 fe60 	bl	800a494 <vPortEnterCritical>
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087e0:	d103      	bne.n	80087ea <xQueueReceive+0x122>
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087f0:	b25b      	sxtb	r3, r3
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087f6:	d103      	bne.n	8008800 <xQueueReceive+0x138>
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008800:	f001 fe78 	bl	800a4f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008804:	1d3a      	adds	r2, r7, #4
 8008806:	f107 0310 	add.w	r3, r7, #16
 800880a:	4611      	mov	r1, r2
 800880c:	4618      	mov	r0, r3
 800880e:	f000 ff91 	bl	8009734 <xTaskCheckForTimeOut>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d123      	bne.n	8008860 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800881a:	f000 f917 	bl	8008a4c <prvIsQueueEmpty>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d017      	beq.n	8008854 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	3324      	adds	r3, #36	; 0x24
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	4611      	mov	r1, r2
 800882c:	4618      	mov	r0, r3
 800882e:	f000 feb7 	bl	80095a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008834:	f000 f8b8 	bl	80089a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008838:	f000 fce6 	bl	8009208 <xTaskResumeAll>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d189      	bne.n	8008756 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008842:	4b10      	ldr	r3, [pc, #64]	; (8008884 <xQueueReceive+0x1bc>)
 8008844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	e780      	b.n	8008756 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008856:	f000 f8a7 	bl	80089a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800885a:	f000 fcd5 	bl	8009208 <xTaskResumeAll>
 800885e:	e77a      	b.n	8008756 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008862:	f000 f8a1 	bl	80089a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008866:	f000 fccf 	bl	8009208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800886a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800886c:	f000 f8ee 	bl	8008a4c <prvIsQueueEmpty>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	f43f af6f 	beq.w	8008756 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008878:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800887a:	4618      	mov	r0, r3
 800887c:	3730      	adds	r7, #48	; 0x30
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10d      	bne.n	80088c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d14d      	bne.n	800894a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 f8b4 	bl	8009a20 <xTaskPriorityDisinherit>
 80088b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	609a      	str	r2, [r3, #8]
 80088c0:	e043      	b.n	800894a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d119      	bne.n	80088fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6858      	ldr	r0, [r3, #4]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d0:	461a      	mov	r2, r3
 80088d2:	68b9      	ldr	r1, [r7, #8]
 80088d4:	f002 f910 	bl	800aaf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d32b      	bcc.n	800894a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	605a      	str	r2, [r3, #4]
 80088fa:	e026      	b.n	800894a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68d8      	ldr	r0, [r3, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008904:	461a      	mov	r2, r3
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	f002 f8f6 	bl	800aaf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	425b      	negs	r3, r3
 8008916:	441a      	add	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	429a      	cmp	r2, r3
 8008926:	d207      	bcs.n	8008938 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008930:	425b      	negs	r3, r3
 8008932:	441a      	add	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d105      	bne.n	800894a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	3b01      	subs	r3, #1
 8008948:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	1c5a      	adds	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008952:	697b      	ldr	r3, [r7, #20]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	d018      	beq.n	80089a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008976:	441a      	add	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	429a      	cmp	r2, r3
 8008986:	d303      	bcc.n	8008990 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68d9      	ldr	r1, [r3, #12]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008998:	461a      	mov	r2, r3
 800899a:	6838      	ldr	r0, [r7, #0]
 800899c:	f002 f8ac 	bl	800aaf8 <memcpy>
	}
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089b0:	f001 fd70 	bl	800a494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089bc:	e011      	b.n	80089e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d012      	beq.n	80089ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3324      	adds	r3, #36	; 0x24
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fe38 	bl	8009640 <xTaskRemoveFromEventList>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089d6:	f000 ff0f 	bl	80097f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	3b01      	subs	r3, #1
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dce9      	bgt.n	80089be <prvUnlockQueue+0x16>
 80089ea:	e000      	b.n	80089ee <prvUnlockQueue+0x46>
					break;
 80089ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	22ff      	movs	r2, #255	; 0xff
 80089f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089f6:	f001 fd7d 	bl	800a4f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089fa:	f001 fd4b 	bl	800a494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a06:	e011      	b.n	8008a2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d012      	beq.n	8008a36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3310      	adds	r3, #16
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fe13 	bl	8009640 <xTaskRemoveFromEventList>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a20:	f000 feea 	bl	80097f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dce9      	bgt.n	8008a08 <prvUnlockQueue+0x60>
 8008a34:	e000      	b.n	8008a38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	22ff      	movs	r2, #255	; 0xff
 8008a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a40:	f001 fd58 	bl	800a4f4 <vPortExitCritical>
}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a54:	f001 fd1e 	bl	800a494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d102      	bne.n	8008a66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a60:	2301      	movs	r3, #1
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e001      	b.n	8008a6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a6a:	f001 fd43 	bl	800a4f4 <vPortExitCritical>

	return xReturn;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a80:	f001 fd08 	bl	800a494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d102      	bne.n	8008a96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a90:	2301      	movs	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	e001      	b.n	8008a9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a9a:	f001 fd2b 	bl	800a4f4 <vPortExitCritical>

	return xReturn;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	e014      	b.n	8008ae2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ab8:	4a0f      	ldr	r2, [pc, #60]	; (8008af8 <vQueueAddToRegistry+0x50>)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10b      	bne.n	8008adc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ac4:	490c      	ldr	r1, [pc, #48]	; (8008af8 <vQueueAddToRegistry+0x50>)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ace:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <vQueueAddToRegistry+0x50>)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ada:	e006      	b.n	8008aea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b07      	cmp	r3, #7
 8008ae6:	d9e7      	bls.n	8008ab8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20001234 	.word	0x20001234

08008afc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b0c:	f001 fcc2 	bl	800a494 <vPortEnterCritical>
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b16:	b25b      	sxtb	r3, r3
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b1c:	d103      	bne.n	8008b26 <vQueueWaitForMessageRestricted+0x2a>
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b2c:	b25b      	sxtb	r3, r3
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b32:	d103      	bne.n	8008b3c <vQueueWaitForMessageRestricted+0x40>
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b3c:	f001 fcda 	bl	800a4f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	3324      	adds	r3, #36	; 0x24
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	68b9      	ldr	r1, [r7, #8]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 fd49 	bl	80095e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b56:	6978      	ldr	r0, [r7, #20]
 8008b58:	f7ff ff26 	bl	80089a8 <prvUnlockQueue>
	}
 8008b5c:	bf00      	nop
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08e      	sub	sp, #56	; 0x38
 8008b68:	af04      	add	r7, sp, #16
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	623b      	str	r3, [r7, #32]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <xTaskCreateStatic+0x46>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	61fb      	str	r3, [r7, #28]
}
 8008ba6:	bf00      	nop
 8008ba8:	e7fe      	b.n	8008ba8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008baa:	23bc      	movs	r3, #188	; 0xbc
 8008bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2bbc      	cmp	r3, #188	; 0xbc
 8008bb2:	d00a      	beq.n	8008bca <xTaskCreateStatic+0x66>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	61bb      	str	r3, [r7, #24]
}
 8008bc6:	bf00      	nop
 8008bc8:	e7fe      	b.n	8008bc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d01e      	beq.n	8008c10 <xTaskCreateStatic+0xac>
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d01b      	beq.n	8008c10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008be0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	2202      	movs	r2, #2
 8008be6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bea:	2300      	movs	r3, #0
 8008bec:	9303      	str	r3, [sp, #12]
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	9302      	str	r3, [sp, #8]
 8008bf2:	f107 0314 	add.w	r3, r7, #20
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f850 	bl	8008ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c0a:	f000 f8f3 	bl	8008df4 <prvAddNewTaskToReadyList>
 8008c0e:	e001      	b.n	8008c14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c14:	697b      	ldr	r3, [r7, #20]
	}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3728      	adds	r7, #40	; 0x28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b08c      	sub	sp, #48	; 0x30
 8008c22:	af04      	add	r7, sp, #16
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	603b      	str	r3, [r7, #0]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f001 fd50 	bl	800a6d8 <pvPortMalloc>
 8008c38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00e      	beq.n	8008c5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c40:	20bc      	movs	r0, #188	; 0xbc
 8008c42:	f001 fd49 	bl	800a6d8 <pvPortMalloc>
 8008c46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	631a      	str	r2, [r3, #48]	; 0x30
 8008c54:	e005      	b.n	8008c62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c56:	6978      	ldr	r0, [r7, #20]
 8008c58:	f001 fe0a 	bl	800a870 <vPortFree>
 8008c5c:	e001      	b.n	8008c62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d017      	beq.n	8008c98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c70:	88fa      	ldrh	r2, [r7, #6]
 8008c72:	2300      	movs	r3, #0
 8008c74:	9303      	str	r3, [sp, #12]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	9302      	str	r3, [sp, #8]
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 f80e 	bl	8008ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c8c:	69f8      	ldr	r0, [r7, #28]
 8008c8e:	f000 f8b1 	bl	8008df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c92:	2301      	movs	r3, #1
 8008c94:	61bb      	str	r3, [r7, #24]
 8008c96:	e002      	b.n	8008c9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3720      	adds	r7, #32
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	21a5      	movs	r1, #165	; 0xa5
 8008cc2:	f001 ff27 	bl	800ab14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	f023 0307 	bic.w	r3, r3, #7
 8008cde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	617b      	str	r3, [r7, #20]
}
 8008cfc:	bf00      	nop
 8008cfe:	e7fe      	b.n	8008cfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d01f      	beq.n	8008d46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d06:	2300      	movs	r3, #0
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	e012      	b.n	8008d32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	4413      	add	r3, r2
 8008d12:	7819      	ldrb	r1, [r3, #0]
 8008d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	3334      	adds	r3, #52	; 0x34
 8008d1c:	460a      	mov	r2, r1
 8008d1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	4413      	add	r3, r2
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	2b0f      	cmp	r3, #15
 8008d36:	d9e9      	bls.n	8008d0c <prvInitialiseNewTask+0x64>
 8008d38:	e000      	b.n	8008d3c <prvInitialiseNewTask+0x94>
			{
				break;
 8008d3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d44:	e003      	b.n	8008d4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	2b37      	cmp	r3, #55	; 0x37
 8008d52:	d901      	bls.n	8008d58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d54:	2337      	movs	r3, #55	; 0x37
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	2200      	movs	r2, #0
 8008d68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff f978 	bl	8008064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	3318      	adds	r3, #24
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7ff f973 	bl	8008064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	3354      	adds	r3, #84	; 0x54
 8008da8:	2260      	movs	r2, #96	; 0x60
 8008daa:	2100      	movs	r1, #0
 8008dac:	4618      	mov	r0, r3
 8008dae:	f001 feb1 	bl	800ab14 <memset>
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	4a0c      	ldr	r2, [pc, #48]	; (8008de8 <prvInitialiseNewTask+0x140>)
 8008db6:	659a      	str	r2, [r3, #88]	; 0x58
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	4a0c      	ldr	r2, [pc, #48]	; (8008dec <prvInitialiseNewTask+0x144>)
 8008dbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	4a0b      	ldr	r2, [pc, #44]	; (8008df0 <prvInitialiseNewTask+0x148>)
 8008dc2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	69b8      	ldr	r0, [r7, #24]
 8008dca:	f001 fa39 	bl	800a240 <pxPortInitialiseStack>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008de0:	bf00      	nop
 8008de2:	3720      	adds	r7, #32
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	0800adc8 	.word	0x0800adc8
 8008dec:	0800ade8 	.word	0x0800ade8
 8008df0:	0800ada8 	.word	0x0800ada8

08008df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008dfc:	f001 fb4a 	bl	800a494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e00:	4b2d      	ldr	r3, [pc, #180]	; (8008eb8 <prvAddNewTaskToReadyList+0xc4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3301      	adds	r3, #1
 8008e06:	4a2c      	ldr	r2, [pc, #176]	; (8008eb8 <prvAddNewTaskToReadyList+0xc4>)
 8008e08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e0a:	4b2c      	ldr	r3, [pc, #176]	; (8008ebc <prvAddNewTaskToReadyList+0xc8>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d109      	bne.n	8008e26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e12:	4a2a      	ldr	r2, [pc, #168]	; (8008ebc <prvAddNewTaskToReadyList+0xc8>)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e18:	4b27      	ldr	r3, [pc, #156]	; (8008eb8 <prvAddNewTaskToReadyList+0xc4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d110      	bne.n	8008e42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e20:	f000 fd0e 	bl	8009840 <prvInitialiseTaskLists>
 8008e24:	e00d      	b.n	8008e42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e26:	4b26      	ldr	r3, [pc, #152]	; (8008ec0 <prvAddNewTaskToReadyList+0xcc>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d109      	bne.n	8008e42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e2e:	4b23      	ldr	r3, [pc, #140]	; (8008ebc <prvAddNewTaskToReadyList+0xc8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d802      	bhi.n	8008e42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e3c:	4a1f      	ldr	r2, [pc, #124]	; (8008ebc <prvAddNewTaskToReadyList+0xc8>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e42:	4b20      	ldr	r3, [pc, #128]	; (8008ec4 <prvAddNewTaskToReadyList+0xd0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3301      	adds	r3, #1
 8008e48:	4a1e      	ldr	r2, [pc, #120]	; (8008ec4 <prvAddNewTaskToReadyList+0xd0>)
 8008e4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e4c:	4b1d      	ldr	r3, [pc, #116]	; (8008ec4 <prvAddNewTaskToReadyList+0xd0>)
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e58:	4b1b      	ldr	r3, [pc, #108]	; (8008ec8 <prvAddNewTaskToReadyList+0xd4>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d903      	bls.n	8008e68 <prvAddNewTaskToReadyList+0x74>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	4a18      	ldr	r2, [pc, #96]	; (8008ec8 <prvAddNewTaskToReadyList+0xd4>)
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4a15      	ldr	r2, [pc, #84]	; (8008ecc <prvAddNewTaskToReadyList+0xd8>)
 8008e76:	441a      	add	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	f7ff f8fd 	bl	800807e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e84:	f001 fb36 	bl	800a4f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e88:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <prvAddNewTaskToReadyList+0xcc>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00e      	beq.n	8008eae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <prvAddNewTaskToReadyList+0xc8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d207      	bcs.n	8008eae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e9e:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <prvAddNewTaskToReadyList+0xdc>)
 8008ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eae:	bf00      	nop
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20001748 	.word	0x20001748
 8008ebc:	20001274 	.word	0x20001274
 8008ec0:	20001754 	.word	0x20001754
 8008ec4:	20001764 	.word	0x20001764
 8008ec8:	20001750 	.word	0x20001750
 8008ecc:	20001278 	.word	0x20001278
 8008ed0:	e000ed04 	.word	0xe000ed04

08008ed4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008edc:	f001 fada 	bl	800a494 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d102      	bne.n	8008eec <vTaskDelete+0x18>
 8008ee6:	4b2c      	ldr	r3, [pc, #176]	; (8008f98 <vTaskDelete+0xc4>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	e000      	b.n	8008eee <vTaskDelete+0x1a>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff f91f 	bl	8008138 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d004      	beq.n	8008f0c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3318      	adds	r3, #24
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff f916 	bl	8008138 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008f0c:	4b23      	ldr	r3, [pc, #140]	; (8008f9c <vTaskDelete+0xc8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3301      	adds	r3, #1
 8008f12:	4a22      	ldr	r2, [pc, #136]	; (8008f9c <vTaskDelete+0xc8>)
 8008f14:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008f16:	4b20      	ldr	r3, [pc, #128]	; (8008f98 <vTaskDelete+0xc4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d10b      	bne.n	8008f38 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4619      	mov	r1, r3
 8008f26:	481e      	ldr	r0, [pc, #120]	; (8008fa0 <vTaskDelete+0xcc>)
 8008f28:	f7ff f8a9 	bl	800807e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008f2c:	4b1d      	ldr	r3, [pc, #116]	; (8008fa4 <vTaskDelete+0xd0>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3301      	adds	r3, #1
 8008f32:	4a1c      	ldr	r2, [pc, #112]	; (8008fa4 <vTaskDelete+0xd0>)
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	e009      	b.n	8008f4c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008f38:	4b1b      	ldr	r3, [pc, #108]	; (8008fa8 <vTaskDelete+0xd4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	4a1a      	ldr	r2, [pc, #104]	; (8008fa8 <vTaskDelete+0xd4>)
 8008f40:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fcea 	bl	800991c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008f48:	f000 fd1c 	bl	8009984 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008f4c:	f001 fad2 	bl	800a4f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008f50:	4b16      	ldr	r3, [pc, #88]	; (8008fac <vTaskDelete+0xd8>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01b      	beq.n	8008f90 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <vTaskDelete+0xc4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d116      	bne.n	8008f90 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008f62:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <vTaskDelete+0xdc>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <vTaskDelete+0xac>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	60bb      	str	r3, [r7, #8]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008f80:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <vTaskDelete+0xe0>)
 8008f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20001274 	.word	0x20001274
 8008f9c:	20001764 	.word	0x20001764
 8008fa0:	2000171c 	.word	0x2000171c
 8008fa4:	20001730 	.word	0x20001730
 8008fa8:	20001748 	.word	0x20001748
 8008fac:	20001754 	.word	0x20001754
 8008fb0:	20001770 	.word	0x20001770
 8008fb4:	e000ed04 	.word	0xe000ed04

08008fb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d017      	beq.n	8008ffa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fca:	4b13      	ldr	r3, [pc, #76]	; (8009018 <vTaskDelay+0x60>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <vTaskDelay+0x30>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	60bb      	str	r3, [r7, #8]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fe8:	f000 f900 	bl	80091ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fec:	2100      	movs	r1, #0
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fd84 	bl	8009afc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ff4:	f000 f908 	bl	8009208 <xTaskResumeAll>
 8008ff8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d107      	bne.n	8009010 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009000:	4b06      	ldr	r3, [pc, #24]	; (800901c <vTaskDelay+0x64>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009010:	bf00      	nop
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	20001770 	.word	0x20001770
 800901c:	e000ed04 	.word	0xe000ed04

08009020 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009028:	f001 fa34 	bl	800a494 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d102      	bne.n	8009038 <vTaskSuspend+0x18>
 8009032:	4b30      	ldr	r3, [pc, #192]	; (80090f4 <vTaskSuspend+0xd4>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	e000      	b.n	800903a <vTaskSuspend+0x1a>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	3304      	adds	r3, #4
 8009040:	4618      	mov	r0, r3
 8009042:	f7ff f879 	bl	8008138 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904a:	2b00      	cmp	r3, #0
 800904c:	d004      	beq.n	8009058 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3318      	adds	r3, #24
 8009052:	4618      	mov	r0, r3
 8009054:	f7ff f870 	bl	8008138 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3304      	adds	r3, #4
 800905c:	4619      	mov	r1, r3
 800905e:	4826      	ldr	r0, [pc, #152]	; (80090f8 <vTaskSuspend+0xd8>)
 8009060:	f7ff f80d 	bl	800807e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b01      	cmp	r3, #1
 800906e:	d103      	bne.n	8009078 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009078:	f001 fa3c 	bl	800a4f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800907c:	4b1f      	ldr	r3, [pc, #124]	; (80090fc <vTaskSuspend+0xdc>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d005      	beq.n	8009090 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009084:	f001 fa06 	bl	800a494 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009088:	f000 fc7c 	bl	8009984 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800908c:	f001 fa32 	bl	800a4f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009090:	4b18      	ldr	r3, [pc, #96]	; (80090f4 <vTaskSuspend+0xd4>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	429a      	cmp	r2, r3
 8009098:	d127      	bne.n	80090ea <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800909a:	4b18      	ldr	r3, [pc, #96]	; (80090fc <vTaskSuspend+0xdc>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d017      	beq.n	80090d2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80090a2:	4b17      	ldr	r3, [pc, #92]	; (8009100 <vTaskSuspend+0xe0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00a      	beq.n	80090c0 <vTaskSuspend+0xa0>
	__asm volatile
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	f383 8811 	msr	BASEPRI, r3
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	f3bf 8f4f 	dsb	sy
 80090ba:	60bb      	str	r3, [r7, #8]
}
 80090bc:	bf00      	nop
 80090be:	e7fe      	b.n	80090be <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80090c0:	4b10      	ldr	r3, [pc, #64]	; (8009104 <vTaskSuspend+0xe4>)
 80090c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090d0:	e00b      	b.n	80090ea <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <vTaskSuspend+0xd8>)
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	4b0c      	ldr	r3, [pc, #48]	; (8009108 <vTaskSuspend+0xe8>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d103      	bne.n	80090e6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <vTaskSuspend+0xd4>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	601a      	str	r2, [r3, #0]
	}
 80090e4:	e001      	b.n	80090ea <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80090e6:	f000 f9f7 	bl	80094d8 <vTaskSwitchContext>
	}
 80090ea:	bf00      	nop
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	20001274 	.word	0x20001274
 80090f8:	20001734 	.word	0x20001734
 80090fc:	20001754 	.word	0x20001754
 8009100:	20001770 	.word	0x20001770
 8009104:	e000ed04 	.word	0xe000ed04
 8009108:	20001748 	.word	0x20001748

0800910c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08a      	sub	sp, #40	; 0x28
 8009110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009116:	2300      	movs	r3, #0
 8009118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800911a:	463a      	mov	r2, r7
 800911c:	1d39      	adds	r1, r7, #4
 800911e:	f107 0308 	add.w	r3, r7, #8
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe ff4a 	bl	8007fbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	9202      	str	r2, [sp, #8]
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	2300      	movs	r3, #0
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	2300      	movs	r3, #0
 8009138:	460a      	mov	r2, r1
 800913a:	4924      	ldr	r1, [pc, #144]	; (80091cc <vTaskStartScheduler+0xc0>)
 800913c:	4824      	ldr	r0, [pc, #144]	; (80091d0 <vTaskStartScheduler+0xc4>)
 800913e:	f7ff fd11 	bl	8008b64 <xTaskCreateStatic>
 8009142:	4603      	mov	r3, r0
 8009144:	4a23      	ldr	r2, [pc, #140]	; (80091d4 <vTaskStartScheduler+0xc8>)
 8009146:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009148:	4b22      	ldr	r3, [pc, #136]	; (80091d4 <vTaskStartScheduler+0xc8>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009150:	2301      	movs	r3, #1
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	e001      	b.n	800915a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009156:	2300      	movs	r3, #0
 8009158:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d102      	bne.n	8009166 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009160:	f000 fd20 	bl	8009ba4 <xTimerCreateTimerTask>
 8009164:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d11b      	bne.n	80091a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	613b      	str	r3, [r7, #16]
}
 800917e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009180:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <vTaskStartScheduler+0xcc>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3354      	adds	r3, #84	; 0x54
 8009186:	4a15      	ldr	r2, [pc, #84]	; (80091dc <vTaskStartScheduler+0xd0>)
 8009188:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800918a:	4b15      	ldr	r3, [pc, #84]	; (80091e0 <vTaskStartScheduler+0xd4>)
 800918c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009190:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009192:	4b14      	ldr	r3, [pc, #80]	; (80091e4 <vTaskStartScheduler+0xd8>)
 8009194:	2201      	movs	r2, #1
 8009196:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009198:	4b13      	ldr	r3, [pc, #76]	; (80091e8 <vTaskStartScheduler+0xdc>)
 800919a:	2200      	movs	r2, #0
 800919c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800919e:	f001 f8d7 	bl	800a350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091a2:	e00e      	b.n	80091c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091aa:	d10a      	bne.n	80091c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	60fb      	str	r3, [r7, #12]
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <vTaskStartScheduler+0xb4>
}
 80091c2:	bf00      	nop
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	0800ad1c 	.word	0x0800ad1c
 80091d0:	08009811 	.word	0x08009811
 80091d4:	2000176c 	.word	0x2000176c
 80091d8:	20001274 	.word	0x20001274
 80091dc:	20000028 	.word	0x20000028
 80091e0:	20001768 	.word	0x20001768
 80091e4:	20001754 	.word	0x20001754
 80091e8:	2000174c 	.word	0x2000174c

080091ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091f0:	4b04      	ldr	r3, [pc, #16]	; (8009204 <vTaskSuspendAll+0x18>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	4a03      	ldr	r2, [pc, #12]	; (8009204 <vTaskSuspendAll+0x18>)
 80091f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091fa:	bf00      	nop
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	20001770 	.word	0x20001770

08009208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009212:	2300      	movs	r3, #0
 8009214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009216:	4b42      	ldr	r3, [pc, #264]	; (8009320 <xTaskResumeAll+0x118>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <xTaskResumeAll+0x2c>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	603b      	str	r3, [r7, #0]
}
 8009230:	bf00      	nop
 8009232:	e7fe      	b.n	8009232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009234:	f001 f92e 	bl	800a494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009238:	4b39      	ldr	r3, [pc, #228]	; (8009320 <xTaskResumeAll+0x118>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3b01      	subs	r3, #1
 800923e:	4a38      	ldr	r2, [pc, #224]	; (8009320 <xTaskResumeAll+0x118>)
 8009240:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009242:	4b37      	ldr	r3, [pc, #220]	; (8009320 <xTaskResumeAll+0x118>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d162      	bne.n	8009310 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800924a:	4b36      	ldr	r3, [pc, #216]	; (8009324 <xTaskResumeAll+0x11c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d05e      	beq.n	8009310 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009252:	e02f      	b.n	80092b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009254:	4b34      	ldr	r3, [pc, #208]	; (8009328 <xTaskResumeAll+0x120>)
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3318      	adds	r3, #24
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe ff69 	bl	8008138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3304      	adds	r3, #4
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe ff64 	bl	8008138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009274:	4b2d      	ldr	r3, [pc, #180]	; (800932c <xTaskResumeAll+0x124>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d903      	bls.n	8009284 <xTaskResumeAll+0x7c>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	4a2a      	ldr	r2, [pc, #168]	; (800932c <xTaskResumeAll+0x124>)
 8009282:	6013      	str	r3, [r2, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009288:	4613      	mov	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4a27      	ldr	r2, [pc, #156]	; (8009330 <xTaskResumeAll+0x128>)
 8009292:	441a      	add	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	3304      	adds	r3, #4
 8009298:	4619      	mov	r1, r3
 800929a:	4610      	mov	r0, r2
 800929c:	f7fe feef 	bl	800807e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a4:	4b23      	ldr	r3, [pc, #140]	; (8009334 <xTaskResumeAll+0x12c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d302      	bcc.n	80092b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80092ae:	4b22      	ldr	r3, [pc, #136]	; (8009338 <xTaskResumeAll+0x130>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092b4:	4b1c      	ldr	r3, [pc, #112]	; (8009328 <xTaskResumeAll+0x120>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1cb      	bne.n	8009254 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092c2:	f000 fb5f 	bl	8009984 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092c6:	4b1d      	ldr	r3, [pc, #116]	; (800933c <xTaskResumeAll+0x134>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d010      	beq.n	80092f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092d2:	f000 f847 	bl	8009364 <xTaskIncrementTick>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092dc:	4b16      	ldr	r3, [pc, #88]	; (8009338 <xTaskResumeAll+0x130>)
 80092de:	2201      	movs	r2, #1
 80092e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1f1      	bne.n	80092d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <xTaskResumeAll+0x134>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092f4:	4b10      	ldr	r3, [pc, #64]	; (8009338 <xTaskResumeAll+0x130>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d009      	beq.n	8009310 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092fc:	2301      	movs	r3, #1
 80092fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009300:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <xTaskResumeAll+0x138>)
 8009302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009306:	601a      	str	r2, [r3, #0]
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009310:	f001 f8f0 	bl	800a4f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009314:	68bb      	ldr	r3, [r7, #8]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20001770 	.word	0x20001770
 8009324:	20001748 	.word	0x20001748
 8009328:	20001708 	.word	0x20001708
 800932c:	20001750 	.word	0x20001750
 8009330:	20001278 	.word	0x20001278
 8009334:	20001274 	.word	0x20001274
 8009338:	2000175c 	.word	0x2000175c
 800933c:	20001758 	.word	0x20001758
 8009340:	e000ed04 	.word	0xe000ed04

08009344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800934a:	4b05      	ldr	r3, [pc, #20]	; (8009360 <xTaskGetTickCount+0x1c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009350:	687b      	ldr	r3, [r7, #4]
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	2000174c 	.word	0x2000174c

08009364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800936a:	2300      	movs	r3, #0
 800936c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800936e:	4b4f      	ldr	r3, [pc, #316]	; (80094ac <xTaskIncrementTick+0x148>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f040 808f 	bne.w	8009496 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009378:	4b4d      	ldr	r3, [pc, #308]	; (80094b0 <xTaskIncrementTick+0x14c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3301      	adds	r3, #1
 800937e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009380:	4a4b      	ldr	r2, [pc, #300]	; (80094b0 <xTaskIncrementTick+0x14c>)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d120      	bne.n	80093ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800938c:	4b49      	ldr	r3, [pc, #292]	; (80094b4 <xTaskIncrementTick+0x150>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00a      	beq.n	80093ac <xTaskIncrementTick+0x48>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	603b      	str	r3, [r7, #0]
}
 80093a8:	bf00      	nop
 80093aa:	e7fe      	b.n	80093aa <xTaskIncrementTick+0x46>
 80093ac:	4b41      	ldr	r3, [pc, #260]	; (80094b4 <xTaskIncrementTick+0x150>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	4b41      	ldr	r3, [pc, #260]	; (80094b8 <xTaskIncrementTick+0x154>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a3f      	ldr	r2, [pc, #252]	; (80094b4 <xTaskIncrementTick+0x150>)
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	4a3f      	ldr	r2, [pc, #252]	; (80094b8 <xTaskIncrementTick+0x154>)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	4b3e      	ldr	r3, [pc, #248]	; (80094bc <xTaskIncrementTick+0x158>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3301      	adds	r3, #1
 80093c6:	4a3d      	ldr	r2, [pc, #244]	; (80094bc <xTaskIncrementTick+0x158>)
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	f000 fadb 	bl	8009984 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093ce:	4b3c      	ldr	r3, [pc, #240]	; (80094c0 <xTaskIncrementTick+0x15c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d349      	bcc.n	800946c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093d8:	4b36      	ldr	r3, [pc, #216]	; (80094b4 <xTaskIncrementTick+0x150>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d104      	bne.n	80093ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e2:	4b37      	ldr	r3, [pc, #220]	; (80094c0 <xTaskIncrementTick+0x15c>)
 80093e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093e8:	601a      	str	r2, [r3, #0]
					break;
 80093ea:	e03f      	b.n	800946c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ec:	4b31      	ldr	r3, [pc, #196]	; (80094b4 <xTaskIncrementTick+0x150>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	429a      	cmp	r2, r3
 8009402:	d203      	bcs.n	800940c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009404:	4a2e      	ldr	r2, [pc, #184]	; (80094c0 <xTaskIncrementTick+0x15c>)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800940a:	e02f      	b.n	800946c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	3304      	adds	r3, #4
 8009410:	4618      	mov	r0, r3
 8009412:	f7fe fe91 	bl	8008138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941a:	2b00      	cmp	r3, #0
 800941c:	d004      	beq.n	8009428 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	3318      	adds	r3, #24
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fe88 	bl	8008138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942c:	4b25      	ldr	r3, [pc, #148]	; (80094c4 <xTaskIncrementTick+0x160>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	429a      	cmp	r2, r3
 8009432:	d903      	bls.n	800943c <xTaskIncrementTick+0xd8>
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009438:	4a22      	ldr	r2, [pc, #136]	; (80094c4 <xTaskIncrementTick+0x160>)
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009440:	4613      	mov	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4a1f      	ldr	r2, [pc, #124]	; (80094c8 <xTaskIncrementTick+0x164>)
 800944a:	441a      	add	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	3304      	adds	r3, #4
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f7fe fe13 	bl	800807e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945c:	4b1b      	ldr	r3, [pc, #108]	; (80094cc <xTaskIncrementTick+0x168>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009462:	429a      	cmp	r2, r3
 8009464:	d3b8      	bcc.n	80093d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009466:	2301      	movs	r3, #1
 8009468:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800946a:	e7b5      	b.n	80093d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800946c:	4b17      	ldr	r3, [pc, #92]	; (80094cc <xTaskIncrementTick+0x168>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009472:	4915      	ldr	r1, [pc, #84]	; (80094c8 <xTaskIncrementTick+0x164>)
 8009474:	4613      	mov	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	440b      	add	r3, r1
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d901      	bls.n	8009488 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009484:	2301      	movs	r3, #1
 8009486:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009488:	4b11      	ldr	r3, [pc, #68]	; (80094d0 <xTaskIncrementTick+0x16c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009490:	2301      	movs	r3, #1
 8009492:	617b      	str	r3, [r7, #20]
 8009494:	e004      	b.n	80094a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009496:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <xTaskIncrementTick+0x170>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <xTaskIncrementTick+0x170>)
 800949e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094a0:	697b      	ldr	r3, [r7, #20]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20001770 	.word	0x20001770
 80094b0:	2000174c 	.word	0x2000174c
 80094b4:	20001700 	.word	0x20001700
 80094b8:	20001704 	.word	0x20001704
 80094bc:	20001760 	.word	0x20001760
 80094c0:	20001768 	.word	0x20001768
 80094c4:	20001750 	.word	0x20001750
 80094c8:	20001278 	.word	0x20001278
 80094cc:	20001274 	.word	0x20001274
 80094d0:	2000175c 	.word	0x2000175c
 80094d4:	20001758 	.word	0x20001758

080094d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094de:	4b2a      	ldr	r3, [pc, #168]	; (8009588 <vTaskSwitchContext+0xb0>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094e6:	4b29      	ldr	r3, [pc, #164]	; (800958c <vTaskSwitchContext+0xb4>)
 80094e8:	2201      	movs	r2, #1
 80094ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094ec:	e046      	b.n	800957c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80094ee:	4b27      	ldr	r3, [pc, #156]	; (800958c <vTaskSwitchContext+0xb4>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f4:	4b26      	ldr	r3, [pc, #152]	; (8009590 <vTaskSwitchContext+0xb8>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	e010      	b.n	800951e <vTaskSwitchContext+0x46>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <vTaskSwitchContext+0x40>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	607b      	str	r3, [r7, #4]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <vTaskSwitchContext+0x3e>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3b01      	subs	r3, #1
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	491d      	ldr	r1, [pc, #116]	; (8009594 <vTaskSwitchContext+0xbc>)
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	4613      	mov	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	440b      	add	r3, r1
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0e4      	beq.n	80094fc <vTaskSwitchContext+0x24>
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4a15      	ldr	r2, [pc, #84]	; (8009594 <vTaskSwitchContext+0xbc>)
 800953e:	4413      	add	r3, r2
 8009540:	60bb      	str	r3, [r7, #8]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	605a      	str	r2, [r3, #4]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	3308      	adds	r3, #8
 8009554:	429a      	cmp	r2, r3
 8009556:	d104      	bne.n	8009562 <vTaskSwitchContext+0x8a>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	605a      	str	r2, [r3, #4]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	4a0b      	ldr	r2, [pc, #44]	; (8009598 <vTaskSwitchContext+0xc0>)
 800956a:	6013      	str	r3, [r2, #0]
 800956c:	4a08      	ldr	r2, [pc, #32]	; (8009590 <vTaskSwitchContext+0xb8>)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009572:	4b09      	ldr	r3, [pc, #36]	; (8009598 <vTaskSwitchContext+0xc0>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3354      	adds	r3, #84	; 0x54
 8009578:	4a08      	ldr	r2, [pc, #32]	; (800959c <vTaskSwitchContext+0xc4>)
 800957a:	6013      	str	r3, [r2, #0]
}
 800957c:	bf00      	nop
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	20001770 	.word	0x20001770
 800958c:	2000175c 	.word	0x2000175c
 8009590:	20001750 	.word	0x20001750
 8009594:	20001278 	.word	0x20001278
 8009598:	20001274 	.word	0x20001274
 800959c:	20000028 	.word	0x20000028

080095a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10a      	bne.n	80095c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	60fb      	str	r3, [r7, #12]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095c6:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <vTaskPlaceOnEventList+0x44>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3318      	adds	r3, #24
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7fe fd79 	bl	80080c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095d4:	2101      	movs	r1, #1
 80095d6:	6838      	ldr	r0, [r7, #0]
 80095d8:	f000 fa90 	bl	8009afc <prvAddCurrentTaskToDelayedList>
}
 80095dc:	bf00      	nop
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20001274 	.word	0x20001274

080095e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	617b      	str	r3, [r7, #20]
}
 800960c:	bf00      	nop
 800960e:	e7fe      	b.n	800960e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009610:	4b0a      	ldr	r3, [pc, #40]	; (800963c <vTaskPlaceOnEventListRestricted+0x54>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3318      	adds	r3, #24
 8009616:	4619      	mov	r1, r3
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f7fe fd30 	bl	800807e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009628:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	68b8      	ldr	r0, [r7, #8]
 800962e:	f000 fa65 	bl	8009afc <prvAddCurrentTaskToDelayedList>
	}
 8009632:	bf00      	nop
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20001274 	.word	0x20001274

08009640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	60fb      	str	r3, [r7, #12]
}
 8009668:	bf00      	nop
 800966a:	e7fe      	b.n	800966a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	3318      	adds	r3, #24
 8009670:	4618      	mov	r0, r3
 8009672:	f7fe fd61 	bl	8008138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009676:	4b1e      	ldr	r3, [pc, #120]	; (80096f0 <xTaskRemoveFromEventList+0xb0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d11d      	bne.n	80096ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	3304      	adds	r3, #4
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fd58 	bl	8008138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <xTaskRemoveFromEventList+0xb4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	429a      	cmp	r2, r3
 8009692:	d903      	bls.n	800969c <xTaskRemoveFromEventList+0x5c>
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	4a16      	ldr	r2, [pc, #88]	; (80096f4 <xTaskRemoveFromEventList+0xb4>)
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a0:	4613      	mov	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4a13      	ldr	r2, [pc, #76]	; (80096f8 <xTaskRemoveFromEventList+0xb8>)
 80096aa:	441a      	add	r2, r3
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	3304      	adds	r3, #4
 80096b0:	4619      	mov	r1, r3
 80096b2:	4610      	mov	r0, r2
 80096b4:	f7fe fce3 	bl	800807e <vListInsertEnd>
 80096b8:	e005      	b.n	80096c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	3318      	adds	r3, #24
 80096be:	4619      	mov	r1, r3
 80096c0:	480e      	ldr	r0, [pc, #56]	; (80096fc <xTaskRemoveFromEventList+0xbc>)
 80096c2:	f7fe fcdc 	bl	800807e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ca:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <xTaskRemoveFromEventList+0xc0>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d905      	bls.n	80096e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <xTaskRemoveFromEventList+0xc4>)
 80096da:	2201      	movs	r2, #1
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	e001      	b.n	80096e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80096e0:	2300      	movs	r3, #0
 80096e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096e4:	697b      	ldr	r3, [r7, #20]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20001770 	.word	0x20001770
 80096f4:	20001750 	.word	0x20001750
 80096f8:	20001278 	.word	0x20001278
 80096fc:	20001708 	.word	0x20001708
 8009700:	20001274 	.word	0x20001274
 8009704:	2000175c 	.word	0x2000175c

08009708 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009710:	4b06      	ldr	r3, [pc, #24]	; (800972c <vTaskInternalSetTimeOutState+0x24>)
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <vTaskInternalSetTimeOutState+0x28>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	605a      	str	r2, [r3, #4]
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	20001760 	.word	0x20001760
 8009730:	2000174c 	.word	0x2000174c

08009734 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10a      	bne.n	800975a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	613b      	str	r3, [r7, #16]
}
 8009756:	bf00      	nop
 8009758:	e7fe      	b.n	8009758 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	60fb      	str	r3, [r7, #12]
}
 8009772:	bf00      	nop
 8009774:	e7fe      	b.n	8009774 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009776:	f000 fe8d 	bl	800a494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800977a:	4b1d      	ldr	r3, [pc, #116]	; (80097f0 <xTaskCheckForTimeOut+0xbc>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009792:	d102      	bne.n	800979a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009794:	2300      	movs	r3, #0
 8009796:	61fb      	str	r3, [r7, #28]
 8009798:	e023      	b.n	80097e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	4b15      	ldr	r3, [pc, #84]	; (80097f4 <xTaskCheckForTimeOut+0xc0>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d007      	beq.n	80097b6 <xTaskCheckForTimeOut+0x82>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d302      	bcc.n	80097b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097b0:	2301      	movs	r3, #1
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	e015      	b.n	80097e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d20b      	bcs.n	80097d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	1ad2      	subs	r2, r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7ff ff9b 	bl	8009708 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097d2:	2300      	movs	r3, #0
 80097d4:	61fb      	str	r3, [r7, #28]
 80097d6:	e004      	b.n	80097e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097de:	2301      	movs	r3, #1
 80097e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097e2:	f000 fe87 	bl	800a4f4 <vPortExitCritical>

	return xReturn;
 80097e6:	69fb      	ldr	r3, [r7, #28]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3720      	adds	r7, #32
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	2000174c 	.word	0x2000174c
 80097f4:	20001760 	.word	0x20001760

080097f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097fc:	4b03      	ldr	r3, [pc, #12]	; (800980c <vTaskMissedYield+0x14>)
 80097fe:	2201      	movs	r2, #1
 8009800:	601a      	str	r2, [r3, #0]
}
 8009802:	bf00      	nop
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	2000175c 	.word	0x2000175c

08009810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009818:	f000 f852 	bl	80098c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <prvIdleTask+0x28>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d9f9      	bls.n	8009818 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <prvIdleTask+0x2c>)
 8009826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009834:	e7f0      	b.n	8009818 <prvIdleTask+0x8>
 8009836:	bf00      	nop
 8009838:	20001278 	.word	0x20001278
 800983c:	e000ed04 	.word	0xe000ed04

08009840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009846:	2300      	movs	r3, #0
 8009848:	607b      	str	r3, [r7, #4]
 800984a:	e00c      	b.n	8009866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	4613      	mov	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4a12      	ldr	r2, [pc, #72]	; (80098a0 <prvInitialiseTaskLists+0x60>)
 8009858:	4413      	add	r3, r2
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fbe2 	bl	8008024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3301      	adds	r3, #1
 8009864:	607b      	str	r3, [r7, #4]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b37      	cmp	r3, #55	; 0x37
 800986a:	d9ef      	bls.n	800984c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800986c:	480d      	ldr	r0, [pc, #52]	; (80098a4 <prvInitialiseTaskLists+0x64>)
 800986e:	f7fe fbd9 	bl	8008024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009872:	480d      	ldr	r0, [pc, #52]	; (80098a8 <prvInitialiseTaskLists+0x68>)
 8009874:	f7fe fbd6 	bl	8008024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009878:	480c      	ldr	r0, [pc, #48]	; (80098ac <prvInitialiseTaskLists+0x6c>)
 800987a:	f7fe fbd3 	bl	8008024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800987e:	480c      	ldr	r0, [pc, #48]	; (80098b0 <prvInitialiseTaskLists+0x70>)
 8009880:	f7fe fbd0 	bl	8008024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009884:	480b      	ldr	r0, [pc, #44]	; (80098b4 <prvInitialiseTaskLists+0x74>)
 8009886:	f7fe fbcd 	bl	8008024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800988a:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <prvInitialiseTaskLists+0x78>)
 800988c:	4a05      	ldr	r2, [pc, #20]	; (80098a4 <prvInitialiseTaskLists+0x64>)
 800988e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009890:	4b0a      	ldr	r3, [pc, #40]	; (80098bc <prvInitialiseTaskLists+0x7c>)
 8009892:	4a05      	ldr	r2, [pc, #20]	; (80098a8 <prvInitialiseTaskLists+0x68>)
 8009894:	601a      	str	r2, [r3, #0]
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20001278 	.word	0x20001278
 80098a4:	200016d8 	.word	0x200016d8
 80098a8:	200016ec 	.word	0x200016ec
 80098ac:	20001708 	.word	0x20001708
 80098b0:	2000171c 	.word	0x2000171c
 80098b4:	20001734 	.word	0x20001734
 80098b8:	20001700 	.word	0x20001700
 80098bc:	20001704 	.word	0x20001704

080098c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098c6:	e019      	b.n	80098fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098c8:	f000 fde4 	bl	800a494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098cc:	4b10      	ldr	r3, [pc, #64]	; (8009910 <prvCheckTasksWaitingTermination+0x50>)
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3304      	adds	r3, #4
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fe fc2d 	bl	8008138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098de:	4b0d      	ldr	r3, [pc, #52]	; (8009914 <prvCheckTasksWaitingTermination+0x54>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	4a0b      	ldr	r2, [pc, #44]	; (8009914 <prvCheckTasksWaitingTermination+0x54>)
 80098e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098e8:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <prvCheckTasksWaitingTermination+0x58>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	4a0a      	ldr	r2, [pc, #40]	; (8009918 <prvCheckTasksWaitingTermination+0x58>)
 80098f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098f2:	f000 fdff 	bl	800a4f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f810 	bl	800991c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098fc:	4b06      	ldr	r3, [pc, #24]	; (8009918 <prvCheckTasksWaitingTermination+0x58>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e1      	bne.n	80098c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	2000171c 	.word	0x2000171c
 8009914:	20001748 	.word	0x20001748
 8009918:	20001730 	.word	0x20001730

0800991c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3354      	adds	r3, #84	; 0x54
 8009928:	4618      	mov	r0, r3
 800992a:	f001 f909 	bl	800ab40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009934:	2b00      	cmp	r3, #0
 8009936:	d108      	bne.n	800994a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993c:	4618      	mov	r0, r3
 800993e:	f000 ff97 	bl	800a870 <vPortFree>
				vPortFree( pxTCB );
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 ff94 	bl	800a870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009948:	e018      	b.n	800997c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009950:	2b01      	cmp	r3, #1
 8009952:	d103      	bne.n	800995c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 ff8b 	bl	800a870 <vPortFree>
	}
 800995a:	e00f      	b.n	800997c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009962:	2b02      	cmp	r3, #2
 8009964:	d00a      	beq.n	800997c <prvDeleteTCB+0x60>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	60fb      	str	r3, [r7, #12]
}
 8009978:	bf00      	nop
 800997a:	e7fe      	b.n	800997a <prvDeleteTCB+0x5e>
	}
 800997c:	bf00      	nop
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800998a:	4b0c      	ldr	r3, [pc, #48]	; (80099bc <prvResetNextTaskUnblockTime+0x38>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d104      	bne.n	800999e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009994:	4b0a      	ldr	r3, [pc, #40]	; (80099c0 <prvResetNextTaskUnblockTime+0x3c>)
 8009996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800999a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800999c:	e008      	b.n	80099b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999e:	4b07      	ldr	r3, [pc, #28]	; (80099bc <prvResetNextTaskUnblockTime+0x38>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	4a04      	ldr	r2, [pc, #16]	; (80099c0 <prvResetNextTaskUnblockTime+0x3c>)
 80099ae:	6013      	str	r3, [r2, #0]
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	20001700 	.word	0x20001700
 80099c0:	20001768 	.word	0x20001768

080099c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <xTaskGetCurrentTaskHandle+0x1c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 80099d0:	687b      	ldr	r3, [r7, #4]
	}
 80099d2:	4618      	mov	r0, r3
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	20001274 	.word	0x20001274

080099e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099ea:	4b0b      	ldr	r3, [pc, #44]	; (8009a18 <xTaskGetSchedulerState+0x34>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d102      	bne.n	80099f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099f2:	2301      	movs	r3, #1
 80099f4:	607b      	str	r3, [r7, #4]
 80099f6:	e008      	b.n	8009a0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099f8:	4b08      	ldr	r3, [pc, #32]	; (8009a1c <xTaskGetSchedulerState+0x38>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d102      	bne.n	8009a06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a00:	2302      	movs	r3, #2
 8009a02:	607b      	str	r3, [r7, #4]
 8009a04:	e001      	b.n	8009a0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a06:	2300      	movs	r3, #0
 8009a08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a0a:	687b      	ldr	r3, [r7, #4]
	}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	20001754 	.word	0x20001754
 8009a1c:	20001770 	.word	0x20001770

08009a20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d056      	beq.n	8009ae4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a36:	4b2e      	ldr	r3, [pc, #184]	; (8009af0 <xTaskPriorityDisinherit+0xd0>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d00a      	beq.n	8009a56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	60fb      	str	r3, [r7, #12]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10a      	bne.n	8009a74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	60bb      	str	r3, [r7, #8]
}
 8009a70:	bf00      	nop
 8009a72:	e7fe      	b.n	8009a72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a78:	1e5a      	subs	r2, r3, #1
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d02c      	beq.n	8009ae4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d128      	bne.n	8009ae4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	3304      	adds	r3, #4
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fb4e 	bl	8008138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab4:	4b0f      	ldr	r3, [pc, #60]	; (8009af4 <xTaskPriorityDisinherit+0xd4>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d903      	bls.n	8009ac4 <xTaskPriorityDisinherit+0xa4>
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	4a0c      	ldr	r2, [pc, #48]	; (8009af4 <xTaskPriorityDisinherit+0xd4>)
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4a09      	ldr	r2, [pc, #36]	; (8009af8 <xTaskPriorityDisinherit+0xd8>)
 8009ad2:	441a      	add	r2, r3
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f7fe facf 	bl	800807e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ae4:	697b      	ldr	r3, [r7, #20]
	}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20001274 	.word	0x20001274
 8009af4:	20001750 	.word	0x20001750
 8009af8:	20001278 	.word	0x20001278

08009afc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b06:	4b21      	ldr	r3, [pc, #132]	; (8009b8c <prvAddCurrentTaskToDelayedList+0x90>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b0c:	4b20      	ldr	r3, [pc, #128]	; (8009b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fb10 	bl	8008138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b1e:	d10a      	bne.n	8009b36 <prvAddCurrentTaskToDelayedList+0x3a>
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d007      	beq.n	8009b36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b26:	4b1a      	ldr	r3, [pc, #104]	; (8009b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	4819      	ldr	r0, [pc, #100]	; (8009b94 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b30:	f7fe faa5 	bl	800807e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b34:	e026      	b.n	8009b84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b3e:	4b14      	ldr	r3, [pc, #80]	; (8009b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d209      	bcs.n	8009b62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b4e:	4b12      	ldr	r3, [pc, #72]	; (8009b98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	4b0f      	ldr	r3, [pc, #60]	; (8009b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3304      	adds	r3, #4
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	f7fe fab3 	bl	80080c6 <vListInsert>
}
 8009b60:	e010      	b.n	8009b84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b62:	4b0e      	ldr	r3, [pc, #56]	; (8009b9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	f7fe faa9 	bl	80080c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b74:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d202      	bcs.n	8009b84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b7e:	4a08      	ldr	r2, [pc, #32]	; (8009ba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	6013      	str	r3, [r2, #0]
}
 8009b84:	bf00      	nop
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	2000174c 	.word	0x2000174c
 8009b90:	20001274 	.word	0x20001274
 8009b94:	20001734 	.word	0x20001734
 8009b98:	20001704 	.word	0x20001704
 8009b9c:	20001700 	.word	0x20001700
 8009ba0:	20001768 	.word	0x20001768

08009ba4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08a      	sub	sp, #40	; 0x28
 8009ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009baa:	2300      	movs	r3, #0
 8009bac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009bae:	f000 fb07 	bl	800a1c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <xTimerCreateTimerTask+0x80>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d021      	beq.n	8009bfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009bc2:	1d3a      	adds	r2, r7, #4
 8009bc4:	f107 0108 	add.w	r1, r7, #8
 8009bc8:	f107 030c 	add.w	r3, r7, #12
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe fa0f 	bl	8007ff0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	9202      	str	r2, [sp, #8]
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	2302      	movs	r3, #2
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	2300      	movs	r3, #0
 8009be2:	460a      	mov	r2, r1
 8009be4:	4910      	ldr	r1, [pc, #64]	; (8009c28 <xTimerCreateTimerTask+0x84>)
 8009be6:	4811      	ldr	r0, [pc, #68]	; (8009c2c <xTimerCreateTimerTask+0x88>)
 8009be8:	f7fe ffbc 	bl	8008b64 <xTaskCreateStatic>
 8009bec:	4603      	mov	r3, r0
 8009bee:	4a10      	ldr	r2, [pc, #64]	; (8009c30 <xTimerCreateTimerTask+0x8c>)
 8009bf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009bf2:	4b0f      	ldr	r3, [pc, #60]	; (8009c30 <xTimerCreateTimerTask+0x8c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	613b      	str	r3, [r7, #16]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c1a:	697b      	ldr	r3, [r7, #20]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	200017a4 	.word	0x200017a4
 8009c28:	0800ad24 	.word	0x0800ad24
 8009c2c:	08009d69 	.word	0x08009d69
 8009c30:	200017a8 	.word	0x200017a8

08009c34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	; 0x28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10a      	bne.n	8009c62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	623b      	str	r3, [r7, #32]
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c62:	4b1a      	ldr	r3, [pc, #104]	; (8009ccc <xTimerGenericCommand+0x98>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d02a      	beq.n	8009cc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b05      	cmp	r3, #5
 8009c7a:	dc18      	bgt.n	8009cae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c7c:	f7ff feb2 	bl	80099e4 <xTaskGetSchedulerState>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d109      	bne.n	8009c9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c86:	4b11      	ldr	r3, [pc, #68]	; (8009ccc <xTimerGenericCommand+0x98>)
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	f107 0110 	add.w	r1, r7, #16
 8009c8e:	2300      	movs	r3, #0
 8009c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c92:	f7fe fb7f 	bl	8008394 <xQueueGenericSend>
 8009c96:	6278      	str	r0, [r7, #36]	; 0x24
 8009c98:	e012      	b.n	8009cc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <xTimerGenericCommand+0x98>)
 8009c9c:	6818      	ldr	r0, [r3, #0]
 8009c9e:	f107 0110 	add.w	r1, r7, #16
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f7fe fb75 	bl	8008394 <xQueueGenericSend>
 8009caa:	6278      	str	r0, [r7, #36]	; 0x24
 8009cac:	e008      	b.n	8009cc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cae:	4b07      	ldr	r3, [pc, #28]	; (8009ccc <xTimerGenericCommand+0x98>)
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	f107 0110 	add.w	r1, r7, #16
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	f7fe fc69 	bl	8008590 <xQueueGenericSendFromISR>
 8009cbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3728      	adds	r7, #40	; 0x28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	200017a4 	.word	0x200017a4

08009cd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cda:	4b22      	ldr	r3, [pc, #136]	; (8009d64 <prvProcessExpiredTimer+0x94>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe fa25 	bl	8008138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cf4:	f003 0304 	and.w	r3, r3, #4
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d022      	beq.n	8009d42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	699a      	ldr	r2, [r3, #24]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	18d1      	adds	r1, r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	6978      	ldr	r0, [r7, #20]
 8009d0a:	f000 f8d1 	bl	8009eb0 <prvInsertTimerInActiveList>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d01f      	beq.n	8009d54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d14:	2300      	movs	r3, #0
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	6978      	ldr	r0, [r7, #20]
 8009d20:	f7ff ff88 	bl	8009c34 <xTimerGenericCommand>
 8009d24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d113      	bne.n	8009d54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	60fb      	str	r3, [r7, #12]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d48:	f023 0301 	bic.w	r3, r3, #1
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	6a1b      	ldr	r3, [r3, #32]
 8009d58:	6978      	ldr	r0, [r7, #20]
 8009d5a:	4798      	blx	r3
}
 8009d5c:	bf00      	nop
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	2000179c 	.word	0x2000179c

08009d68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d70:	f107 0308 	add.w	r3, r7, #8
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 f857 	bl	8009e28 <prvGetNextExpireTime>
 8009d7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 f803 	bl	8009d8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d86:	f000 f8d5 	bl	8009f34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d8a:	e7f1      	b.n	8009d70 <prvTimerTask+0x8>

08009d8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d96:	f7ff fa29 	bl	80091ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d9a:	f107 0308 	add.w	r3, r7, #8
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 f866 	bl	8009e70 <prvSampleTimeNow>
 8009da4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d130      	bne.n	8009e0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10a      	bne.n	8009dc8 <prvProcessTimerOrBlockTask+0x3c>
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d806      	bhi.n	8009dc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009dba:	f7ff fa25 	bl	8009208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009dbe:	68f9      	ldr	r1, [r7, #12]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff ff85 	bl	8009cd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009dc6:	e024      	b.n	8009e12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d008      	beq.n	8009de0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009dce:	4b13      	ldr	r3, [pc, #76]	; (8009e1c <prvProcessTimerOrBlockTask+0x90>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <prvProcessTimerOrBlockTask+0x50>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e000      	b.n	8009dde <prvProcessTimerOrBlockTask+0x52>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009de0:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <prvProcessTimerOrBlockTask+0x94>)
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	4619      	mov	r1, r3
 8009dee:	f7fe fe85 	bl	8008afc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009df2:	f7ff fa09 	bl	8009208 <xTaskResumeAll>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10a      	bne.n	8009e12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009dfc:	4b09      	ldr	r3, [pc, #36]	; (8009e24 <prvProcessTimerOrBlockTask+0x98>)
 8009dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	f3bf 8f6f 	isb	sy
}
 8009e0c:	e001      	b.n	8009e12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e0e:	f7ff f9fb 	bl	8009208 <xTaskResumeAll>
}
 8009e12:	bf00      	nop
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	200017a0 	.word	0x200017a0
 8009e20:	200017a4 	.word	0x200017a4
 8009e24:	e000ed04 	.word	0xe000ed04

08009e28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e30:	4b0e      	ldr	r3, [pc, #56]	; (8009e6c <prvGetNextExpireTime+0x44>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <prvGetNextExpireTime+0x16>
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	e000      	b.n	8009e40 <prvGetNextExpireTime+0x18>
 8009e3e:	2200      	movs	r2, #0
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d105      	bne.n	8009e58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e4c:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <prvGetNextExpireTime+0x44>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	60fb      	str	r3, [r7, #12]
 8009e56:	e001      	b.n	8009e5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	2000179c 	.word	0x2000179c

08009e70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e78:	f7ff fa64 	bl	8009344 <xTaskGetTickCount>
 8009e7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e7e:	4b0b      	ldr	r3, [pc, #44]	; (8009eac <prvSampleTimeNow+0x3c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d205      	bcs.n	8009e94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e88:	f000 f936 	bl	800a0f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	e002      	b.n	8009e9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e9a:	4a04      	ldr	r2, [pc, #16]	; (8009eac <prvSampleTimeNow+0x3c>)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	200017ac 	.word	0x200017ac

08009eb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d812      	bhi.n	8009efc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	1ad2      	subs	r2, r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d302      	bcc.n	8009eea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	617b      	str	r3, [r7, #20]
 8009ee8:	e01b      	b.n	8009f22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009eea:	4b10      	ldr	r3, [pc, #64]	; (8009f2c <prvInsertTimerInActiveList+0x7c>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	f7fe f8e6 	bl	80080c6 <vListInsert>
 8009efa:	e012      	b.n	8009f22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d206      	bcs.n	8009f12 <prvInsertTimerInActiveList+0x62>
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d302      	bcc.n	8009f12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	617b      	str	r3, [r7, #20]
 8009f10:	e007      	b.n	8009f22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f12:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <prvInsertTimerInActiveList+0x80>)
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	f7fe f8d2 	bl	80080c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f22:	697b      	ldr	r3, [r7, #20]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3718      	adds	r7, #24
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	200017a0 	.word	0x200017a0
 8009f30:	2000179c 	.word	0x2000179c

08009f34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b08e      	sub	sp, #56	; 0x38
 8009f38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f3a:	e0ca      	b.n	800a0d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	da18      	bge.n	8009f74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f42:	1d3b      	adds	r3, r7, #4
 8009f44:	3304      	adds	r3, #4
 8009f46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10a      	bne.n	8009f64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	61fb      	str	r3, [r7, #28]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f6a:	6850      	ldr	r0, [r2, #4]
 8009f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f6e:	6892      	ldr	r2, [r2, #8]
 8009f70:	4611      	mov	r1, r2
 8009f72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f2c0 80aa 	blt.w	800a0d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d004      	beq.n	8009f92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fe f8d3 	bl	8008138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f92:	463b      	mov	r3, r7
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7ff ff6b 	bl	8009e70 <prvSampleTimeNow>
 8009f9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b09      	cmp	r3, #9
 8009fa0:	f200 8097 	bhi.w	800a0d2 <prvProcessReceivedCommands+0x19e>
 8009fa4:	a201      	add	r2, pc, #4	; (adr r2, 8009fac <prvProcessReceivedCommands+0x78>)
 8009fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009faa:	bf00      	nop
 8009fac:	08009fd5 	.word	0x08009fd5
 8009fb0:	08009fd5 	.word	0x08009fd5
 8009fb4:	08009fd5 	.word	0x08009fd5
 8009fb8:	0800a049 	.word	0x0800a049
 8009fbc:	0800a05d 	.word	0x0800a05d
 8009fc0:	0800a0a7 	.word	0x0800a0a7
 8009fc4:	08009fd5 	.word	0x08009fd5
 8009fc8:	08009fd5 	.word	0x08009fd5
 8009fcc:	0800a049 	.word	0x0800a049
 8009fd0:	0800a05d 	.word	0x0800a05d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fda:	f043 0301 	orr.w	r3, r3, #1
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	18d1      	adds	r1, r2, r3
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ff4:	f7ff ff5c 	bl	8009eb0 <prvInsertTimerInActiveList>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d069      	beq.n	800a0d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a004:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a00c:	f003 0304 	and.w	r3, r3, #4
 800a010:	2b00      	cmp	r3, #0
 800a012:	d05e      	beq.n	800a0d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	441a      	add	r2, r3
 800a01c:	2300      	movs	r3, #0
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	2300      	movs	r3, #0
 800a022:	2100      	movs	r1, #0
 800a024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a026:	f7ff fe05 	bl	8009c34 <xTimerGenericCommand>
 800a02a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d14f      	bne.n	800a0d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	61bb      	str	r3, [r7, #24]
}
 800a044:	bf00      	nop
 800a046:	e7fe      	b.n	800a046 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a04e:	f023 0301 	bic.w	r3, r3, #1
 800a052:	b2da      	uxtb	r2, r3
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a05a:	e03a      	b.n	800a0d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a062:	f043 0301 	orr.w	r3, r3, #1
 800a066:	b2da      	uxtb	r2, r3
 800a068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a072:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10a      	bne.n	800a092 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	617b      	str	r3, [r7, #20]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	699a      	ldr	r2, [r3, #24]
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	18d1      	adds	r1, r2, r3
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a0:	f7ff ff06 	bl	8009eb0 <prvInsertTimerInActiveList>
					break;
 800a0a4:	e015      	b.n	800a0d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d103      	bne.n	800a0bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a0b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0b6:	f000 fbdb 	bl	800a870 <vPortFree>
 800a0ba:	e00a      	b.n	800a0d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0c2:	f023 0301 	bic.w	r3, r3, #1
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0ce:	e000      	b.n	800a0d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a0d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0d2:	4b08      	ldr	r3, [pc, #32]	; (800a0f4 <prvProcessReceivedCommands+0x1c0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	1d39      	adds	r1, r7, #4
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe faf4 	bl	80086c8 <xQueueReceive>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f47f af2a 	bne.w	8009f3c <prvProcessReceivedCommands+0x8>
	}
}
 800a0e8:	bf00      	nop
 800a0ea:	bf00      	nop
 800a0ec:	3730      	adds	r7, #48	; 0x30
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	200017a4 	.word	0x200017a4

0800a0f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0fe:	e048      	b.n	800a192 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a100:	4b2d      	ldr	r3, [pc, #180]	; (800a1b8 <prvSwitchTimerLists+0xc0>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a10a:	4b2b      	ldr	r3, [pc, #172]	; (800a1b8 <prvSwitchTimerLists+0xc0>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	3304      	adds	r3, #4
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fe f80d 	bl	8008138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b00      	cmp	r3, #0
 800a132:	d02e      	beq.n	800a192 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	4413      	add	r3, r2
 800a13c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	429a      	cmp	r2, r3
 800a144:	d90e      	bls.n	800a164 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a152:	4b19      	ldr	r3, [pc, #100]	; (800a1b8 <prvSwitchTimerLists+0xc0>)
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3304      	adds	r3, #4
 800a15a:	4619      	mov	r1, r3
 800a15c:	4610      	mov	r0, r2
 800a15e:	f7fd ffb2 	bl	80080c6 <vListInsert>
 800a162:	e016      	b.n	800a192 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a164:	2300      	movs	r3, #0
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	2300      	movs	r3, #0
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	2100      	movs	r1, #0
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f7ff fd60 	bl	8009c34 <xTimerGenericCommand>
 800a174:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10a      	bne.n	800a192 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	603b      	str	r3, [r7, #0]
}
 800a18e:	bf00      	nop
 800a190:	e7fe      	b.n	800a190 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a192:	4b09      	ldr	r3, [pc, #36]	; (800a1b8 <prvSwitchTimerLists+0xc0>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1b1      	bne.n	800a100 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a19c:	4b06      	ldr	r3, [pc, #24]	; (800a1b8 <prvSwitchTimerLists+0xc0>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1a2:	4b06      	ldr	r3, [pc, #24]	; (800a1bc <prvSwitchTimerLists+0xc4>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a04      	ldr	r2, [pc, #16]	; (800a1b8 <prvSwitchTimerLists+0xc0>)
 800a1a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1aa:	4a04      	ldr	r2, [pc, #16]	; (800a1bc <prvSwitchTimerLists+0xc4>)
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	6013      	str	r3, [r2, #0]
}
 800a1b0:	bf00      	nop
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	2000179c 	.word	0x2000179c
 800a1bc:	200017a0 	.word	0x200017a0

0800a1c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a1c6:	f000 f965 	bl	800a494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a1ca:	4b15      	ldr	r3, [pc, #84]	; (800a220 <prvCheckForValidListAndQueue+0x60>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d120      	bne.n	800a214 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1d2:	4814      	ldr	r0, [pc, #80]	; (800a224 <prvCheckForValidListAndQueue+0x64>)
 800a1d4:	f7fd ff26 	bl	8008024 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1d8:	4813      	ldr	r0, [pc, #76]	; (800a228 <prvCheckForValidListAndQueue+0x68>)
 800a1da:	f7fd ff23 	bl	8008024 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a1de:	4b13      	ldr	r3, [pc, #76]	; (800a22c <prvCheckForValidListAndQueue+0x6c>)
 800a1e0:	4a10      	ldr	r2, [pc, #64]	; (800a224 <prvCheckForValidListAndQueue+0x64>)
 800a1e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1e4:	4b12      	ldr	r3, [pc, #72]	; (800a230 <prvCheckForValidListAndQueue+0x70>)
 800a1e6:	4a10      	ldr	r2, [pc, #64]	; (800a228 <prvCheckForValidListAndQueue+0x68>)
 800a1e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	4b11      	ldr	r3, [pc, #68]	; (800a234 <prvCheckForValidListAndQueue+0x74>)
 800a1f0:	4a11      	ldr	r2, [pc, #68]	; (800a238 <prvCheckForValidListAndQueue+0x78>)
 800a1f2:	2110      	movs	r1, #16
 800a1f4:	200a      	movs	r0, #10
 800a1f6:	f7fe f831 	bl	800825c <xQueueGenericCreateStatic>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4a08      	ldr	r2, [pc, #32]	; (800a220 <prvCheckForValidListAndQueue+0x60>)
 800a1fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a200:	4b07      	ldr	r3, [pc, #28]	; (800a220 <prvCheckForValidListAndQueue+0x60>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a208:	4b05      	ldr	r3, [pc, #20]	; (800a220 <prvCheckForValidListAndQueue+0x60>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	490b      	ldr	r1, [pc, #44]	; (800a23c <prvCheckForValidListAndQueue+0x7c>)
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe fc4a 	bl	8008aa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a214:	f000 f96e 	bl	800a4f4 <vPortExitCritical>
}
 800a218:	bf00      	nop
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	200017a4 	.word	0x200017a4
 800a224:	20001774 	.word	0x20001774
 800a228:	20001788 	.word	0x20001788
 800a22c:	2000179c 	.word	0x2000179c
 800a230:	200017a0 	.word	0x200017a0
 800a234:	20001850 	.word	0x20001850
 800a238:	200017b0 	.word	0x200017b0
 800a23c:	0800ad2c 	.word	0x0800ad2c

0800a240 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3b04      	subs	r3, #4
 800a250:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3b04      	subs	r3, #4
 800a25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	f023 0201 	bic.w	r2, r3, #1
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3b04      	subs	r3, #4
 800a26e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a270:	4a0c      	ldr	r2, [pc, #48]	; (800a2a4 <pxPortInitialiseStack+0x64>)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	3b14      	subs	r3, #20
 800a27a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	3b04      	subs	r3, #4
 800a286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f06f 0202 	mvn.w	r2, #2
 800a28e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3b20      	subs	r3, #32
 800a294:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a296:	68fb      	ldr	r3, [r7, #12]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	0800a2a9 	.word	0x0800a2a9

0800a2a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2b2:	4b12      	ldr	r3, [pc, #72]	; (800a2fc <prvTaskExitError+0x54>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2ba:	d00a      	beq.n	800a2d2 <prvTaskExitError+0x2a>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	60fb      	str	r3, [r7, #12]
}
 800a2ce:	bf00      	nop
 800a2d0:	e7fe      	b.n	800a2d0 <prvTaskExitError+0x28>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	60bb      	str	r3, [r7, #8]
}
 800a2e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2e6:	bf00      	nop
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0fc      	beq.n	800a2e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2ee:	bf00      	nop
 800a2f0:	bf00      	nop
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr
 800a2fc:	20000024 	.word	0x20000024

0800a300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <pxCurrentTCBConst2>)
 800a302:	6819      	ldr	r1, [r3, #0]
 800a304:	6808      	ldr	r0, [r1, #0]
 800a306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30a:	f380 8809 	msr	PSP, r0
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f04f 0000 	mov.w	r0, #0
 800a316:	f380 8811 	msr	BASEPRI, r0
 800a31a:	4770      	bx	lr
 800a31c:	f3af 8000 	nop.w

0800a320 <pxCurrentTCBConst2>:
 800a320:	20001274 	.word	0x20001274
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop

0800a328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a328:	4808      	ldr	r0, [pc, #32]	; (800a34c <prvPortStartFirstTask+0x24>)
 800a32a:	6800      	ldr	r0, [r0, #0]
 800a32c:	6800      	ldr	r0, [r0, #0]
 800a32e:	f380 8808 	msr	MSP, r0
 800a332:	f04f 0000 	mov.w	r0, #0
 800a336:	f380 8814 	msr	CONTROL, r0
 800a33a:	b662      	cpsie	i
 800a33c:	b661      	cpsie	f
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	df00      	svc	0
 800a348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a34a:	bf00      	nop
 800a34c:	e000ed08 	.word	0xe000ed08

0800a350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a356:	4b46      	ldr	r3, [pc, #280]	; (800a470 <xPortStartScheduler+0x120>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a46      	ldr	r2, [pc, #280]	; (800a474 <xPortStartScheduler+0x124>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d10a      	bne.n	800a376 <xPortStartScheduler+0x26>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	613b      	str	r3, [r7, #16]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a376:	4b3e      	ldr	r3, [pc, #248]	; (800a470 <xPortStartScheduler+0x120>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a3f      	ldr	r2, [pc, #252]	; (800a478 <xPortStartScheduler+0x128>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d10a      	bne.n	800a396 <xPortStartScheduler+0x46>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	60fb      	str	r3, [r7, #12]
}
 800a392:	bf00      	nop
 800a394:	e7fe      	b.n	800a394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a396:	4b39      	ldr	r3, [pc, #228]	; (800a47c <xPortStartScheduler+0x12c>)
 800a398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	22ff      	movs	r2, #255	; 0xff
 800a3a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3b8:	b2da      	uxtb	r2, r3
 800a3ba:	4b31      	ldr	r3, [pc, #196]	; (800a480 <xPortStartScheduler+0x130>)
 800a3bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3be:	4b31      	ldr	r3, [pc, #196]	; (800a484 <xPortStartScheduler+0x134>)
 800a3c0:	2207      	movs	r2, #7
 800a3c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3c4:	e009      	b.n	800a3da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a3c6:	4b2f      	ldr	r3, [pc, #188]	; (800a484 <xPortStartScheduler+0x134>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	4a2d      	ldr	r2, [pc, #180]	; (800a484 <xPortStartScheduler+0x134>)
 800a3ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	005b      	lsls	r3, r3, #1
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e2:	2b80      	cmp	r3, #128	; 0x80
 800a3e4:	d0ef      	beq.n	800a3c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3e6:	4b27      	ldr	r3, [pc, #156]	; (800a484 <xPortStartScheduler+0x134>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f1c3 0307 	rsb	r3, r3, #7
 800a3ee:	2b04      	cmp	r3, #4
 800a3f0:	d00a      	beq.n	800a408 <xPortStartScheduler+0xb8>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	60bb      	str	r3, [r7, #8]
}
 800a404:	bf00      	nop
 800a406:	e7fe      	b.n	800a406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a408:	4b1e      	ldr	r3, [pc, #120]	; (800a484 <xPortStartScheduler+0x134>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	4a1d      	ldr	r2, [pc, #116]	; (800a484 <xPortStartScheduler+0x134>)
 800a410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a412:	4b1c      	ldr	r3, [pc, #112]	; (800a484 <xPortStartScheduler+0x134>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a41a:	4a1a      	ldr	r2, [pc, #104]	; (800a484 <xPortStartScheduler+0x134>)
 800a41c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	b2da      	uxtb	r2, r3
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a426:	4b18      	ldr	r3, [pc, #96]	; (800a488 <xPortStartScheduler+0x138>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a17      	ldr	r2, [pc, #92]	; (800a488 <xPortStartScheduler+0x138>)
 800a42c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a432:	4b15      	ldr	r3, [pc, #84]	; (800a488 <xPortStartScheduler+0x138>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a14      	ldr	r2, [pc, #80]	; (800a488 <xPortStartScheduler+0x138>)
 800a438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a43c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a43e:	f000 f8dd 	bl	800a5fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a442:	4b12      	ldr	r3, [pc, #72]	; (800a48c <xPortStartScheduler+0x13c>)
 800a444:	2200      	movs	r2, #0
 800a446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a448:	f000 f8fc 	bl	800a644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a44c:	4b10      	ldr	r3, [pc, #64]	; (800a490 <xPortStartScheduler+0x140>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a0f      	ldr	r2, [pc, #60]	; (800a490 <xPortStartScheduler+0x140>)
 800a452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a458:	f7ff ff66 	bl	800a328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a45c:	f7ff f83c 	bl	80094d8 <vTaskSwitchContext>
	prvTaskExitError();
 800a460:	f7ff ff22 	bl	800a2a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	e000ed00 	.word	0xe000ed00
 800a474:	410fc271 	.word	0x410fc271
 800a478:	410fc270 	.word	0x410fc270
 800a47c:	e000e400 	.word	0xe000e400
 800a480:	200018a0 	.word	0x200018a0
 800a484:	200018a4 	.word	0x200018a4
 800a488:	e000ed20 	.word	0xe000ed20
 800a48c:	20000024 	.word	0x20000024
 800a490:	e000ef34 	.word	0xe000ef34

0800a494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	607b      	str	r3, [r7, #4]
}
 800a4ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4ae:	4b0f      	ldr	r3, [pc, #60]	; (800a4ec <vPortEnterCritical+0x58>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	4a0d      	ldr	r2, [pc, #52]	; (800a4ec <vPortEnterCritical+0x58>)
 800a4b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4b8:	4b0c      	ldr	r3, [pc, #48]	; (800a4ec <vPortEnterCritical+0x58>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d10f      	bne.n	800a4e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4c0:	4b0b      	ldr	r3, [pc, #44]	; (800a4f0 <vPortEnterCritical+0x5c>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	603b      	str	r3, [r7, #0]
}
 800a4dc:	bf00      	nop
 800a4de:	e7fe      	b.n	800a4de <vPortEnterCritical+0x4a>
	}
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	20000024 	.word	0x20000024
 800a4f0:	e000ed04 	.word	0xe000ed04

0800a4f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4fa:	4b12      	ldr	r3, [pc, #72]	; (800a544 <vPortExitCritical+0x50>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10a      	bne.n	800a518 <vPortExitCritical+0x24>
	__asm volatile
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	607b      	str	r3, [r7, #4]
}
 800a514:	bf00      	nop
 800a516:	e7fe      	b.n	800a516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a518:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <vPortExitCritical+0x50>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	3b01      	subs	r3, #1
 800a51e:	4a09      	ldr	r2, [pc, #36]	; (800a544 <vPortExitCritical+0x50>)
 800a520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a522:	4b08      	ldr	r3, [pc, #32]	; (800a544 <vPortExitCritical+0x50>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d105      	bne.n	800a536 <vPortExitCritical+0x42>
 800a52a:	2300      	movs	r3, #0
 800a52c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	f383 8811 	msr	BASEPRI, r3
}
 800a534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a536:	bf00      	nop
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	20000024 	.word	0x20000024
	...

0800a550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a550:	f3ef 8009 	mrs	r0, PSP
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	4b15      	ldr	r3, [pc, #84]	; (800a5b0 <pxCurrentTCBConst>)
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	f01e 0f10 	tst.w	lr, #16
 800a560:	bf08      	it	eq
 800a562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56a:	6010      	str	r0, [r2, #0]
 800a56c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a570:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a574:	f380 8811 	msr	BASEPRI, r0
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f7fe ffaa 	bl	80094d8 <vTaskSwitchContext>
 800a584:	f04f 0000 	mov.w	r0, #0
 800a588:	f380 8811 	msr	BASEPRI, r0
 800a58c:	bc09      	pop	{r0, r3}
 800a58e:	6819      	ldr	r1, [r3, #0]
 800a590:	6808      	ldr	r0, [r1, #0]
 800a592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a596:	f01e 0f10 	tst.w	lr, #16
 800a59a:	bf08      	it	eq
 800a59c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5a0:	f380 8809 	msr	PSP, r0
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	f3af 8000 	nop.w

0800a5b0 <pxCurrentTCBConst>:
 800a5b0:	20001274 	.word	0x20001274
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop

0800a5b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	607b      	str	r3, [r7, #4]
}
 800a5d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5d2:	f7fe fec7 	bl	8009364 <xTaskIncrementTick>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d003      	beq.n	800a5e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5dc:	4b06      	ldr	r3, [pc, #24]	; (800a5f8 <xPortSysTickHandler+0x40>)
 800a5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	f383 8811 	msr	BASEPRI, r3
}
 800a5ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5f0:	bf00      	nop
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a600:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <vPortSetupTimerInterrupt+0x34>)
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a606:	4b0b      	ldr	r3, [pc, #44]	; (800a634 <vPortSetupTimerInterrupt+0x38>)
 800a608:	2200      	movs	r2, #0
 800a60a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a60c:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <vPortSetupTimerInterrupt+0x3c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a0a      	ldr	r2, [pc, #40]	; (800a63c <vPortSetupTimerInterrupt+0x40>)
 800a612:	fba2 2303 	umull	r2, r3, r2, r3
 800a616:	099b      	lsrs	r3, r3, #6
 800a618:	4a09      	ldr	r2, [pc, #36]	; (800a640 <vPortSetupTimerInterrupt+0x44>)
 800a61a:	3b01      	subs	r3, #1
 800a61c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a61e:	4b04      	ldr	r3, [pc, #16]	; (800a630 <vPortSetupTimerInterrupt+0x34>)
 800a620:	2207      	movs	r2, #7
 800a622:	601a      	str	r2, [r3, #0]
}
 800a624:	bf00      	nop
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	e000e010 	.word	0xe000e010
 800a634:	e000e018 	.word	0xe000e018
 800a638:	20000000 	.word	0x20000000
 800a63c:	10624dd3 	.word	0x10624dd3
 800a640:	e000e014 	.word	0xe000e014

0800a644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a654 <vPortEnableVFP+0x10>
 800a648:	6801      	ldr	r1, [r0, #0]
 800a64a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a64e:	6001      	str	r1, [r0, #0]
 800a650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a652:	bf00      	nop
 800a654:	e000ed88 	.word	0xe000ed88

0800a658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a65e:	f3ef 8305 	mrs	r3, IPSR
 800a662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2b0f      	cmp	r3, #15
 800a668:	d914      	bls.n	800a694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a66a:	4a17      	ldr	r2, [pc, #92]	; (800a6c8 <vPortValidateInterruptPriority+0x70>)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4413      	add	r3, r2
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a674:	4b15      	ldr	r3, [pc, #84]	; (800a6cc <vPortValidateInterruptPriority+0x74>)
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	7afa      	ldrb	r2, [r7, #11]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d20a      	bcs.n	800a694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	607b      	str	r3, [r7, #4]
}
 800a690:	bf00      	nop
 800a692:	e7fe      	b.n	800a692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a694:	4b0e      	ldr	r3, [pc, #56]	; (800a6d0 <vPortValidateInterruptPriority+0x78>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a69c:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <vPortValidateInterruptPriority+0x7c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d90a      	bls.n	800a6ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	603b      	str	r3, [r7, #0]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <vPortValidateInterruptPriority+0x60>
	}
 800a6ba:	bf00      	nop
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	e000e3f0 	.word	0xe000e3f0
 800a6cc:	200018a0 	.word	0x200018a0
 800a6d0:	e000ed0c 	.word	0xe000ed0c
 800a6d4:	200018a4 	.word	0x200018a4

0800a6d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08a      	sub	sp, #40	; 0x28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6e4:	f7fe fd82 	bl	80091ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6e8:	4b5b      	ldr	r3, [pc, #364]	; (800a858 <pvPortMalloc+0x180>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6f0:	f000 f920 	bl	800a934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6f4:	4b59      	ldr	r3, [pc, #356]	; (800a85c <pvPortMalloc+0x184>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f040 8093 	bne.w	800a828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d01d      	beq.n	800a744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a708:	2208      	movs	r2, #8
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4413      	add	r3, r2
 800a70e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f003 0307 	and.w	r3, r3, #7
 800a716:	2b00      	cmp	r3, #0
 800a718:	d014      	beq.n	800a744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f023 0307 	bic.w	r3, r3, #7
 800a720:	3308      	adds	r3, #8
 800a722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f003 0307 	and.w	r3, r3, #7
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00a      	beq.n	800a744 <pvPortMalloc+0x6c>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	617b      	str	r3, [r7, #20]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d06e      	beq.n	800a828 <pvPortMalloc+0x150>
 800a74a:	4b45      	ldr	r3, [pc, #276]	; (800a860 <pvPortMalloc+0x188>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	429a      	cmp	r2, r3
 800a752:	d869      	bhi.n	800a828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a754:	4b43      	ldr	r3, [pc, #268]	; (800a864 <pvPortMalloc+0x18c>)
 800a756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a758:	4b42      	ldr	r3, [pc, #264]	; (800a864 <pvPortMalloc+0x18c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a75e:	e004      	b.n	800a76a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	429a      	cmp	r2, r3
 800a772:	d903      	bls.n	800a77c <pvPortMalloc+0xa4>
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1f1      	bne.n	800a760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a77c:	4b36      	ldr	r3, [pc, #216]	; (800a858 <pvPortMalloc+0x180>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a782:	429a      	cmp	r2, r3
 800a784:	d050      	beq.n	800a828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2208      	movs	r2, #8
 800a78c:	4413      	add	r3, r2
 800a78e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	1ad2      	subs	r2, r2, r3
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d91f      	bls.n	800a7e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	f003 0307 	and.w	r3, r3, #7
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <pvPortMalloc+0xf8>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	613b      	str	r3, [r7, #16]
}
 800a7cc:	bf00      	nop
 800a7ce:	e7fe      	b.n	800a7ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	1ad2      	subs	r2, r2, r3
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7e2:	69b8      	ldr	r0, [r7, #24]
 800a7e4:	f000 f908 	bl	800a9f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7e8:	4b1d      	ldr	r3, [pc, #116]	; (800a860 <pvPortMalloc+0x188>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	4a1b      	ldr	r2, [pc, #108]	; (800a860 <pvPortMalloc+0x188>)
 800a7f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7f6:	4b1a      	ldr	r3, [pc, #104]	; (800a860 <pvPortMalloc+0x188>)
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	4b1b      	ldr	r3, [pc, #108]	; (800a868 <pvPortMalloc+0x190>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d203      	bcs.n	800a80a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a802:	4b17      	ldr	r3, [pc, #92]	; (800a860 <pvPortMalloc+0x188>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a18      	ldr	r2, [pc, #96]	; (800a868 <pvPortMalloc+0x190>)
 800a808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	4b13      	ldr	r3, [pc, #76]	; (800a85c <pvPortMalloc+0x184>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	431a      	orrs	r2, r3
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a81e:	4b13      	ldr	r3, [pc, #76]	; (800a86c <pvPortMalloc+0x194>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3301      	adds	r3, #1
 800a824:	4a11      	ldr	r2, [pc, #68]	; (800a86c <pvPortMalloc+0x194>)
 800a826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a828:	f7fe fcee 	bl	8009208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	f003 0307 	and.w	r3, r3, #7
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00a      	beq.n	800a84c <pvPortMalloc+0x174>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	60fb      	str	r3, [r7, #12]
}
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <pvPortMalloc+0x172>
	return pvReturn;
 800a84c:	69fb      	ldr	r3, [r7, #28]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3728      	adds	r7, #40	; 0x28
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	200024b0 	.word	0x200024b0
 800a85c:	200024c4 	.word	0x200024c4
 800a860:	200024b4 	.word	0x200024b4
 800a864:	200024a8 	.word	0x200024a8
 800a868:	200024b8 	.word	0x200024b8
 800a86c:	200024bc 	.word	0x200024bc

0800a870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d04d      	beq.n	800a91e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a882:	2308      	movs	r3, #8
 800a884:	425b      	negs	r3, r3
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	4413      	add	r3, r2
 800a88a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	4b24      	ldr	r3, [pc, #144]	; (800a928 <vPortFree+0xb8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4013      	ands	r3, r2
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10a      	bne.n	800a8b4 <vPortFree+0x44>
	__asm volatile
 800a89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	60fb      	str	r3, [r7, #12]
}
 800a8b0:	bf00      	nop
 800a8b2:	e7fe      	b.n	800a8b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00a      	beq.n	800a8d2 <vPortFree+0x62>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	60bb      	str	r3, [r7, #8]
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	4b14      	ldr	r3, [pc, #80]	; (800a928 <vPortFree+0xb8>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4013      	ands	r3, r2
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d01e      	beq.n	800a91e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d11a      	bne.n	800a91e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	4b0e      	ldr	r3, [pc, #56]	; (800a928 <vPortFree+0xb8>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	43db      	mvns	r3, r3
 800a8f2:	401a      	ands	r2, r3
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8f8:	f7fe fc78 	bl	80091ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	4b0a      	ldr	r3, [pc, #40]	; (800a92c <vPortFree+0xbc>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4413      	add	r3, r2
 800a906:	4a09      	ldr	r2, [pc, #36]	; (800a92c <vPortFree+0xbc>)
 800a908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a90a:	6938      	ldr	r0, [r7, #16]
 800a90c:	f000 f874 	bl	800a9f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a910:	4b07      	ldr	r3, [pc, #28]	; (800a930 <vPortFree+0xc0>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3301      	adds	r3, #1
 800a916:	4a06      	ldr	r2, [pc, #24]	; (800a930 <vPortFree+0xc0>)
 800a918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a91a:	f7fe fc75 	bl	8009208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a91e:	bf00      	nop
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	200024c4 	.word	0x200024c4
 800a92c:	200024b4 	.word	0x200024b4
 800a930:	200024c0 	.word	0x200024c0

0800a934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a93a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a93e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a940:	4b27      	ldr	r3, [pc, #156]	; (800a9e0 <prvHeapInit+0xac>)
 800a942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f003 0307 	and.w	r3, r3, #7
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00c      	beq.n	800a968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3307      	adds	r3, #7
 800a952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f023 0307 	bic.w	r3, r3, #7
 800a95a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	4a1f      	ldr	r2, [pc, #124]	; (800a9e0 <prvHeapInit+0xac>)
 800a964:	4413      	add	r3, r2
 800a966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a96c:	4a1d      	ldr	r2, [pc, #116]	; (800a9e4 <prvHeapInit+0xb0>)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a972:	4b1c      	ldr	r3, [pc, #112]	; (800a9e4 <prvHeapInit+0xb0>)
 800a974:	2200      	movs	r2, #0
 800a976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	4413      	add	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a980:	2208      	movs	r2, #8
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f023 0307 	bic.w	r3, r3, #7
 800a98e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4a15      	ldr	r2, [pc, #84]	; (800a9e8 <prvHeapInit+0xb4>)
 800a994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a996:	4b14      	ldr	r3, [pc, #80]	; (800a9e8 <prvHeapInit+0xb4>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2200      	movs	r2, #0
 800a99c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a99e:	4b12      	ldr	r3, [pc, #72]	; (800a9e8 <prvHeapInit+0xb4>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	1ad2      	subs	r2, r2, r3
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9b4:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <prvHeapInit+0xb4>)
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	4a0a      	ldr	r2, [pc, #40]	; (800a9ec <prvHeapInit+0xb8>)
 800a9c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	4a09      	ldr	r2, [pc, #36]	; (800a9f0 <prvHeapInit+0xbc>)
 800a9ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9cc:	4b09      	ldr	r3, [pc, #36]	; (800a9f4 <prvHeapInit+0xc0>)
 800a9ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9d2:	601a      	str	r2, [r3, #0]
}
 800a9d4:	bf00      	nop
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	200018a8 	.word	0x200018a8
 800a9e4:	200024a8 	.word	0x200024a8
 800a9e8:	200024b0 	.word	0x200024b0
 800a9ec:	200024b8 	.word	0x200024b8
 800a9f0:	200024b4 	.word	0x200024b4
 800a9f4:	200024c4 	.word	0x200024c4

0800a9f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa00:	4b28      	ldr	r3, [pc, #160]	; (800aaa4 <prvInsertBlockIntoFreeList+0xac>)
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	e002      	b.n	800aa0c <prvInsertBlockIntoFreeList+0x14>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d8f7      	bhi.n	800aa06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	4413      	add	r3, r2
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d108      	bne.n	800aa3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	441a      	add	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	441a      	add	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d118      	bne.n	800aa80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d00d      	beq.n	800aa76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	441a      	add	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	e008      	b.n	800aa88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa76:	4b0c      	ldr	r3, [pc, #48]	; (800aaa8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	e003      	b.n	800aa88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d002      	beq.n	800aa96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa96:	bf00      	nop
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	200024a8 	.word	0x200024a8
 800aaa8:	200024b0 	.word	0x200024b0

0800aaac <__libc_init_array>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	4d0d      	ldr	r5, [pc, #52]	; (800aae4 <__libc_init_array+0x38>)
 800aab0:	4c0d      	ldr	r4, [pc, #52]	; (800aae8 <__libc_init_array+0x3c>)
 800aab2:	1b64      	subs	r4, r4, r5
 800aab4:	10a4      	asrs	r4, r4, #2
 800aab6:	2600      	movs	r6, #0
 800aab8:	42a6      	cmp	r6, r4
 800aaba:	d109      	bne.n	800aad0 <__libc_init_array+0x24>
 800aabc:	4d0b      	ldr	r5, [pc, #44]	; (800aaec <__libc_init_array+0x40>)
 800aabe:	4c0c      	ldr	r4, [pc, #48]	; (800aaf0 <__libc_init_array+0x44>)
 800aac0:	f000 f8f2 	bl	800aca8 <_init>
 800aac4:	1b64      	subs	r4, r4, r5
 800aac6:	10a4      	asrs	r4, r4, #2
 800aac8:	2600      	movs	r6, #0
 800aaca:	42a6      	cmp	r6, r4
 800aacc:	d105      	bne.n	800aada <__libc_init_array+0x2e>
 800aace:	bd70      	pop	{r4, r5, r6, pc}
 800aad0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad4:	4798      	blx	r3
 800aad6:	3601      	adds	r6, #1
 800aad8:	e7ee      	b.n	800aab8 <__libc_init_array+0xc>
 800aada:	f855 3b04 	ldr.w	r3, [r5], #4
 800aade:	4798      	blx	r3
 800aae0:	3601      	adds	r6, #1
 800aae2:	e7f2      	b.n	800aaca <__libc_init_array+0x1e>
 800aae4:	0800ae10 	.word	0x0800ae10
 800aae8:	0800ae10 	.word	0x0800ae10
 800aaec:	0800ae10 	.word	0x0800ae10
 800aaf0:	0800ae14 	.word	0x0800ae14

0800aaf4 <__retarget_lock_acquire_recursive>:
 800aaf4:	4770      	bx	lr

0800aaf6 <__retarget_lock_release_recursive>:
 800aaf6:	4770      	bx	lr

0800aaf8 <memcpy>:
 800aaf8:	440a      	add	r2, r1
 800aafa:	4291      	cmp	r1, r2
 800aafc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab00:	d100      	bne.n	800ab04 <memcpy+0xc>
 800ab02:	4770      	bx	lr
 800ab04:	b510      	push	{r4, lr}
 800ab06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab0e:	4291      	cmp	r1, r2
 800ab10:	d1f9      	bne.n	800ab06 <memcpy+0xe>
 800ab12:	bd10      	pop	{r4, pc}

0800ab14 <memset>:
 800ab14:	4402      	add	r2, r0
 800ab16:	4603      	mov	r3, r0
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d100      	bne.n	800ab1e <memset+0xa>
 800ab1c:	4770      	bx	lr
 800ab1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab22:	e7f9      	b.n	800ab18 <memset+0x4>

0800ab24 <cleanup_glue>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	460c      	mov	r4, r1
 800ab28:	6809      	ldr	r1, [r1, #0]
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	b109      	cbz	r1, 800ab32 <cleanup_glue+0xe>
 800ab2e:	f7ff fff9 	bl	800ab24 <cleanup_glue>
 800ab32:	4621      	mov	r1, r4
 800ab34:	4628      	mov	r0, r5
 800ab36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab3a:	f000 b869 	b.w	800ac10 <_free_r>
	...

0800ab40 <_reclaim_reent>:
 800ab40:	4b2c      	ldr	r3, [pc, #176]	; (800abf4 <_reclaim_reent+0xb4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4283      	cmp	r3, r0
 800ab46:	b570      	push	{r4, r5, r6, lr}
 800ab48:	4604      	mov	r4, r0
 800ab4a:	d051      	beq.n	800abf0 <_reclaim_reent+0xb0>
 800ab4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab4e:	b143      	cbz	r3, 800ab62 <_reclaim_reent+0x22>
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d14a      	bne.n	800abec <_reclaim_reent+0xac>
 800ab56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab58:	6819      	ldr	r1, [r3, #0]
 800ab5a:	b111      	cbz	r1, 800ab62 <_reclaim_reent+0x22>
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f000 f857 	bl	800ac10 <_free_r>
 800ab62:	6961      	ldr	r1, [r4, #20]
 800ab64:	b111      	cbz	r1, 800ab6c <_reclaim_reent+0x2c>
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 f852 	bl	800ac10 <_free_r>
 800ab6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab6e:	b111      	cbz	r1, 800ab76 <_reclaim_reent+0x36>
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 f84d 	bl	800ac10 <_free_r>
 800ab76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab78:	b111      	cbz	r1, 800ab80 <_reclaim_reent+0x40>
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f000 f848 	bl	800ac10 <_free_r>
 800ab80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab82:	b111      	cbz	r1, 800ab8a <_reclaim_reent+0x4a>
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 f843 	bl	800ac10 <_free_r>
 800ab8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ab8c:	b111      	cbz	r1, 800ab94 <_reclaim_reent+0x54>
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f000 f83e 	bl	800ac10 <_free_r>
 800ab94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ab96:	b111      	cbz	r1, 800ab9e <_reclaim_reent+0x5e>
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f000 f839 	bl	800ac10 <_free_r>
 800ab9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aba0:	b111      	cbz	r1, 800aba8 <_reclaim_reent+0x68>
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 f834 	bl	800ac10 <_free_r>
 800aba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abaa:	b111      	cbz	r1, 800abb2 <_reclaim_reent+0x72>
 800abac:	4620      	mov	r0, r4
 800abae:	f000 f82f 	bl	800ac10 <_free_r>
 800abb2:	69a3      	ldr	r3, [r4, #24]
 800abb4:	b1e3      	cbz	r3, 800abf0 <_reclaim_reent+0xb0>
 800abb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abb8:	4620      	mov	r0, r4
 800abba:	4798      	blx	r3
 800abbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800abbe:	b1b9      	cbz	r1, 800abf0 <_reclaim_reent+0xb0>
 800abc0:	4620      	mov	r0, r4
 800abc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abc6:	f7ff bfad 	b.w	800ab24 <cleanup_glue>
 800abca:	5949      	ldr	r1, [r1, r5]
 800abcc:	b941      	cbnz	r1, 800abe0 <_reclaim_reent+0xa0>
 800abce:	3504      	adds	r5, #4
 800abd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd2:	2d80      	cmp	r5, #128	; 0x80
 800abd4:	68d9      	ldr	r1, [r3, #12]
 800abd6:	d1f8      	bne.n	800abca <_reclaim_reent+0x8a>
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 f819 	bl	800ac10 <_free_r>
 800abde:	e7ba      	b.n	800ab56 <_reclaim_reent+0x16>
 800abe0:	680e      	ldr	r6, [r1, #0]
 800abe2:	4620      	mov	r0, r4
 800abe4:	f000 f814 	bl	800ac10 <_free_r>
 800abe8:	4631      	mov	r1, r6
 800abea:	e7ef      	b.n	800abcc <_reclaim_reent+0x8c>
 800abec:	2500      	movs	r5, #0
 800abee:	e7ef      	b.n	800abd0 <_reclaim_reent+0x90>
 800abf0:	bd70      	pop	{r4, r5, r6, pc}
 800abf2:	bf00      	nop
 800abf4:	20000028 	.word	0x20000028

0800abf8 <__malloc_lock>:
 800abf8:	4801      	ldr	r0, [pc, #4]	; (800ac00 <__malloc_lock+0x8>)
 800abfa:	f7ff bf7b 	b.w	800aaf4 <__retarget_lock_acquire_recursive>
 800abfe:	bf00      	nop
 800ac00:	200024c8 	.word	0x200024c8

0800ac04 <__malloc_unlock>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__malloc_unlock+0x8>)
 800ac06:	f7ff bf76 	b.w	800aaf6 <__retarget_lock_release_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	200024c8 	.word	0x200024c8

0800ac10 <_free_r>:
 800ac10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac12:	2900      	cmp	r1, #0
 800ac14:	d044      	beq.n	800aca0 <_free_r+0x90>
 800ac16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac1a:	9001      	str	r0, [sp, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ac22:	bfb8      	it	lt
 800ac24:	18e4      	addlt	r4, r4, r3
 800ac26:	f7ff ffe7 	bl	800abf8 <__malloc_lock>
 800ac2a:	4a1e      	ldr	r2, [pc, #120]	; (800aca4 <_free_r+0x94>)
 800ac2c:	9801      	ldr	r0, [sp, #4]
 800ac2e:	6813      	ldr	r3, [r2, #0]
 800ac30:	b933      	cbnz	r3, 800ac40 <_free_r+0x30>
 800ac32:	6063      	str	r3, [r4, #4]
 800ac34:	6014      	str	r4, [r2, #0]
 800ac36:	b003      	add	sp, #12
 800ac38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac3c:	f7ff bfe2 	b.w	800ac04 <__malloc_unlock>
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	d908      	bls.n	800ac56 <_free_r+0x46>
 800ac44:	6825      	ldr	r5, [r4, #0]
 800ac46:	1961      	adds	r1, r4, r5
 800ac48:	428b      	cmp	r3, r1
 800ac4a:	bf01      	itttt	eq
 800ac4c:	6819      	ldreq	r1, [r3, #0]
 800ac4e:	685b      	ldreq	r3, [r3, #4]
 800ac50:	1949      	addeq	r1, r1, r5
 800ac52:	6021      	streq	r1, [r4, #0]
 800ac54:	e7ed      	b.n	800ac32 <_free_r+0x22>
 800ac56:	461a      	mov	r2, r3
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	b10b      	cbz	r3, 800ac60 <_free_r+0x50>
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	d9fa      	bls.n	800ac56 <_free_r+0x46>
 800ac60:	6811      	ldr	r1, [r2, #0]
 800ac62:	1855      	adds	r5, r2, r1
 800ac64:	42a5      	cmp	r5, r4
 800ac66:	d10b      	bne.n	800ac80 <_free_r+0x70>
 800ac68:	6824      	ldr	r4, [r4, #0]
 800ac6a:	4421      	add	r1, r4
 800ac6c:	1854      	adds	r4, r2, r1
 800ac6e:	42a3      	cmp	r3, r4
 800ac70:	6011      	str	r1, [r2, #0]
 800ac72:	d1e0      	bne.n	800ac36 <_free_r+0x26>
 800ac74:	681c      	ldr	r4, [r3, #0]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	6053      	str	r3, [r2, #4]
 800ac7a:	4421      	add	r1, r4
 800ac7c:	6011      	str	r1, [r2, #0]
 800ac7e:	e7da      	b.n	800ac36 <_free_r+0x26>
 800ac80:	d902      	bls.n	800ac88 <_free_r+0x78>
 800ac82:	230c      	movs	r3, #12
 800ac84:	6003      	str	r3, [r0, #0]
 800ac86:	e7d6      	b.n	800ac36 <_free_r+0x26>
 800ac88:	6825      	ldr	r5, [r4, #0]
 800ac8a:	1961      	adds	r1, r4, r5
 800ac8c:	428b      	cmp	r3, r1
 800ac8e:	bf04      	itt	eq
 800ac90:	6819      	ldreq	r1, [r3, #0]
 800ac92:	685b      	ldreq	r3, [r3, #4]
 800ac94:	6063      	str	r3, [r4, #4]
 800ac96:	bf04      	itt	eq
 800ac98:	1949      	addeq	r1, r1, r5
 800ac9a:	6021      	streq	r1, [r4, #0]
 800ac9c:	6054      	str	r4, [r2, #4]
 800ac9e:	e7ca      	b.n	800ac36 <_free_r+0x26>
 800aca0:	b003      	add	sp, #12
 800aca2:	bd30      	pop	{r4, r5, pc}
 800aca4:	200024cc 	.word	0x200024cc

0800aca8 <_init>:
 800aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acaa:	bf00      	nop
 800acac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acae:	bc08      	pop	{r3}
 800acb0:	469e      	mov	lr, r3
 800acb2:	4770      	bx	lr

0800acb4 <_fini>:
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	bf00      	nop
 800acb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acba:	bc08      	pop	{r3}
 800acbc:	469e      	mov	lr, r3
 800acbe:	4770      	bx	lr
