
PLAYER_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram1_low    00004000  20004000  20004000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .sram1_upper  0000c000  20008000  20008000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .sram2        00000000  20014000  20014000  00034000  2**0
                  CONTENTS
  3 .ccm_sram_all 00000000  20018000  20018000  00034000  2**0
                  CONTENTS
  4 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .text         00009e90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000148  0800a070  0800a070  0001a070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0800a1b8  0800a1b8  00034000  2**0
                  CONTENTS
  8 .ARM          00000008  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0800a1c0  0800a1c0  00034000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  0800a1c0  0800a1c0  0001a1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000004  0800a1c4  0800a1c4  0001a1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000008c  20000000  0800a1c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00002398  2000008c  0800a254  0002008c  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  20002424  0800a254  00022424  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002e3fc  00000000  00000000  00034030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000547f  00000000  00000000  0006242c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002508  00000000  00000000  000678b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000022e0  00000000  00000000  00069db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000676d  00000000  00000000  0006c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002b15e  00000000  00000000  00072805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012999e  00000000  00000000  0009d963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001c7301  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a1e0  00000000  00000000  001c7354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a058 	.word	0x0800a058

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	0800a058 	.word	0x0800a058

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <braeden_main>:
#include <FreeRTOS.h>
#include <task.h>

void braeden_main(void *ignore) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 800052c:	f008 fc22 	bl	8008d74 <xTaskGetCurrentTaskHandle>
 8000530:	4603      	mov	r3, r0
 8000532:	4618      	mov	r0, r3
 8000534:	f007 ff4c 	bl	80083d0 <vTaskSuspend>
	vTaskDelete(NULL);
 8000538:	2000      	movs	r0, #0
 800053a:	f007 fea3 	bl	8008284 <vTaskDelete>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <bryant_main>:
#include <FreeRTOS.h>
#include <task.h>

extern uint8_t audio_buffer[49152]; //Can be recast to a more appropriate type.

void bryant_main(void *ignore) {
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]


	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 800054e:	f008 fc11 	bl	8008d74 <xTaskGetCurrentTaskHandle>
 8000552:	4603      	mov	r3, r0
 8000554:	4618      	mov	r0, r3
 8000556:	f007 ff3b 	bl	80083d0 <vTaskSuspend>
	vTaskDelete(NULL);
 800055a:	2000      	movs	r0, #0
 800055c:	f007 fe92 	bl	8008284 <vTaskDelete>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <jeremy_main>:
#include <FreeRTOS.h>
#include <task.h>

void jeremy_main(void *ignore) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]


	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 8000570:	f008 fc00 	bl	8008d74 <xTaskGetCurrentTaskHandle>
 8000574:	4603      	mov	r3, r0
 8000576:	4618      	mov	r0, r3
 8000578:	f007 ff2a 	bl	80083d0 <vTaskSuspend>
	vTaskDelete(NULL);
 800057c:	2000      	movs	r0, #0
 800057e:	f007 fe81 	bl	8008284 <vTaskDelete>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <wyatt_main>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "jeremy.h"
//#include "wyatt.h"
void wyatt_main(void *ignore){}; //temporary measure
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f001 fdca 	bl	800213e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f899 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fe45 	bl	800123c <MX_GPIO_Init>
  MX_DAC1_Init();
 80005b2:	f000 fb03 	bl	8000bbc <MX_DAC1_Init>
  MX_DAC2_Init();
 80005b6:	f000 fb45 	bl	8000c44 <MX_DAC2_Init>
  MX_DAC3_Init();
 80005ba:	f000 fb7d 	bl	8000cb8 <MX_DAC3_Init>
  MX_DAC4_Init();
 80005be:	f000 fbbf 	bl	8000d40 <MX_DAC4_Init>
  MX_OPAMP1_Init();
 80005c2:	f000 fc01 	bl	8000dc8 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80005c6:	f000 fc25 	bl	8000e14 <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 80005ca:	f000 fc49 	bl	8000e60 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 80005ce:	f000 fc6d 	bl	8000eac <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 80005d2:	f000 fc91 	bl	8000ef8 <MX_OPAMP6_Init>
  MX_QUADSPI1_Init();
 80005d6:	f000 fcb5 	bl	8000f44 <MX_QUADSPI1_Init>
  MX_SPI2_Init();
 80005da:	f000 fcdb 	bl	8000f94 <MX_SPI2_Init>
  MX_SPI3_Init();
 80005de:	f000 fd17 	bl	8001010 <MX_SPI3_Init>
  MX_SPI4_Init();
 80005e2:	f000 fd53 	bl	800108c <MX_SPI4_Init>
  MX_UART5_Init();
 80005e6:	f000 fd8f 	bl	8001108 <MX_UART5_Init>
  MX_USART3_Init();
 80005ea:	f000 fdd9 	bl	80011a0 <MX_USART3_Init>
  MX_ADC1_Init();
 80005ee:	f000 f8c3 	bl	8000778 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005f2:	f000 f939 	bl	8000868 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005f6:	f000 f99d 	bl	8000934 <MX_ADC3_Init>
  MX_ADC4_Init();
 80005fa:	f000 fa13 	bl	8000a24 <MX_ADC4_Init>
  MX_ADC5_Init();
 80005fe:	f000 fa77 	bl	8000af0 <MX_ADC5_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000602:	f006 fcab 	bl	8006f5c <MX_FATFS_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <main+0x70>
    Error_Handler();
 800060c:	f000 ff00 	bl	8001410 <Error_Handler>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000610:	f006 fdb4 	bl	800717c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000614:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <main+0xf4>)
 8000616:	2100      	movs	r1, #0
 8000618:	481f      	ldr	r0, [pc, #124]	; (8000698 <main+0xf8>)
 800061a:	f006 fdf9 	bl	8007210 <osThreadNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a1e      	ldr	r2, [pc, #120]	; (800069c <main+0xfc>)
 8000622:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  static StaticTask_t threads[4];
  xTaskCreateStatic(wyatt_main, 	"wyatt_main_thread", 	1024, NULL, 5, (StackType_t *)wyatt_memspace, 	&threads[0]);
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <main+0x100>)
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <main+0x104>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2305      	movs	r3, #5
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000636:	491c      	ldr	r1, [pc, #112]	; (80006a8 <main+0x108>)
 8000638:	481c      	ldr	r0, [pc, #112]	; (80006ac <main+0x10c>)
 800063a:	f007 fc6b 	bl	8007f14 <xTaskCreateStatic>
  xTaskCreateStatic(jeremy_main, 	"jeremy_main_thread", 	1024, NULL, 5, (StackType_t *)jeremy_memspace, 	&threads[1]);
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <main+0x110>)
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <main+0x114>)
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2305      	movs	r3, #5
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000650:	4919      	ldr	r1, [pc, #100]	; (80006b8 <main+0x118>)
 8000652:	481a      	ldr	r0, [pc, #104]	; (80006bc <main+0x11c>)
 8000654:	f007 fc5e 	bl	8007f14 <xTaskCreateStatic>
  xTaskCreateStatic(bryant_main, 	"bryant_main_thread", 	1024, NULL, 5, (StackType_t *)bryant_memspace, 	&threads[2]);
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <main+0x120>)
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <main+0x124>)
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2305      	movs	r3, #5
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800066a:	4917      	ldr	r1, [pc, #92]	; (80006c8 <main+0x128>)
 800066c:	4817      	ldr	r0, [pc, #92]	; (80006cc <main+0x12c>)
 800066e:	f007 fc51 	bl	8007f14 <xTaskCreateStatic>
  xTaskCreateStatic(braeden_main, 	"braeden_main_thread", 	1024, NULL, 5, (StackType_t *)braeden_memspace, &threads[3]);
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <main+0x130>)
 8000674:	9302      	str	r3, [sp, #8]
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <main+0x134>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2305      	movs	r3, #5
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000684:	4914      	ldr	r1, [pc, #80]	; (80006d8 <main+0x138>)
 8000686:	4815      	ldr	r0, [pc, #84]	; (80006dc <main+0x13c>)
 8000688:	f007 fc44 	bl	8007f14 <xTaskCreateStatic>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800068c:	f006 fd9a 	bl	80071c4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0xf0>
 8000692:	bf00      	nop
 8000694:	0800a0e4 	.word	0x0800a0e4
 8000698:	080013dd 	.word	0x080013dd
 800069c:	200006ac 	.word	0x200006ac
 80006a0:	200006b0 	.word	0x200006b0
 80006a4:	20004000 	.word	0x20004000
 80006a8:	0800a07c 	.word	0x0800a07c
 80006ac:	0800058b 	.word	0x0800058b
 80006b0:	2000076c 	.word	0x2000076c
 80006b4:	20007000 	.word	0x20007000
 80006b8:	0800a090 	.word	0x0800a090
 80006bc:	08000569 	.word	0x08000569
 80006c0:	20000828 	.word	0x20000828
 80006c4:	20005000 	.word	0x20005000
 80006c8:	0800a0a4 	.word	0x0800a0a4
 80006cc:	08000547 	.word	0x08000547
 80006d0:	200008e4 	.word	0x200008e4
 80006d4:	20006000 	.word	0x20006000
 80006d8:	0800a0b8 	.word	0x0800a0b8
 80006dc:	08000525 	.word	0x08000525

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	2238      	movs	r2, #56	; 0x38
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f009 fbe8 	bl	8009ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000702:	2000      	movs	r0, #0
 8000704:	f003 fbe0 	bl	8003ec8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	2303      	movs	r3, #3
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800071a:	2301      	movs	r3, #1
 800071c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800071e:	2314      	movs	r3, #20
 8000720:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000726:	2304      	movs	r3, #4
 8000728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	4618      	mov	r0, r3
 8000734:	f003 fd2e 	bl	8004194 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800073e:	f000 fe67 	bl	8001410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2303      	movs	r3, #3
 8000748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2104      	movs	r1, #4
 800075a:	4618      	mov	r0, r3
 800075c:	f004 f82c 	bl	80047b8 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000766:	f000 fe53 	bl	8001410 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800076a:	f004 fa2b 	bl	8004bc4 <HAL_RCC_EnableCSS>
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2220      	movs	r2, #32
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f009 fb97 	bl	8009ec4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <MX_ADC1_Init+0xe8>)
 8000798:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800079c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a6:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000800:	4817      	ldr	r0, [pc, #92]	; (8000860 <MX_ADC1_Init+0xe8>)
 8000802:	f001 fea9 	bl	8002558 <HAL_ADC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800080c:	f000 fe00 	bl	8001410 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <MX_ADC1_Init+0xe8>)
 800081c:	f002 fcbe 	bl	800319c <HAL_ADCEx_MultiModeConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000826:	f000 fdf3 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_ADC1_Init+0xec>)
 800082c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082e:	2306      	movs	r3, #6
 8000830:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000836:	237f      	movs	r3, #127	; 0x7f
 8000838:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083a:	2304      	movs	r3, #4
 800083c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_ADC1_Init+0xe8>)
 8000848:	f002 f842 	bl	80028d0 <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000852:	f000 fddd 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3730      	adds	r7, #48	; 0x30
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000a8 	.word	0x200000a8
 8000864:	08600004 	.word	0x08600004

08000868 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2220      	movs	r2, #32
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f009 fb25 	bl	8009ec4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_ADC2_Init+0xc0>)
 800087c:	4a2b      	ldr	r2, [pc, #172]	; (800092c <MX_ADC2_Init+0xc4>)
 800087e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_ADC2_Init+0xc0>)
 8000882:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000886:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <MX_ADC2_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_ADC2_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_ADC2_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_ADC2_Init+0xc0>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008e2:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_ADC2_Init+0xc0>)
 80008e4:	f001 fe38 	bl	8002558 <HAL_ADC_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80008ee:	f000 fd8f 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_ADC2_Init+0xc8>)
 80008f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f6:	2306      	movs	r3, #6
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008fe:	237f      	movs	r3, #127	; 0x7f
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000902:	2304      	movs	r3, #4
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <MX_ADC2_Init+0xc0>)
 8000910:	f001 ffde 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800091a:	f000 fd79 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000114 	.word	0x20000114
 800092c:	50000100 	.word	0x50000100
 8000930:	10c00010 	.word	0x10c00010

08000934 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2220      	movs	r2, #32
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f009 fab9 	bl	8009ec4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <MX_ADC3_Init+0xe4>)
 8000954:	4a31      	ldr	r2, [pc, #196]	; (8000a1c <MX_ADC3_Init+0xe8>)
 8000956:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000958:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <MX_ADC3_Init+0xe4>)
 800095a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800095e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000960:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <MX_ADC3_Init+0xe4>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <MX_ADC3_Init+0xe4>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <MX_ADC3_Init+0xe4>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000972:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <MX_ADC3_Init+0xe4>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <MX_ADC3_Init+0xe4>)
 800097a:	2204      	movs	r2, #4
 800097c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <MX_ADC3_Init+0xe4>)
 8000980:	2200      	movs	r2, #0
 8000982:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000984:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <MX_ADC3_Init+0xe4>)
 8000986:	2200      	movs	r2, #0
 8000988:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800098a:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <MX_ADC3_Init+0xe4>)
 800098c:	2201      	movs	r2, #1
 800098e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <MX_ADC3_Init+0xe4>)
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_ADC3_Init+0xe4>)
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_ADC3_Init+0xe4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_ADC3_Init+0xe4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_ADC3_Init+0xe4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_ADC3_Init+0xe4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009ba:	4817      	ldr	r0, [pc, #92]	; (8000a18 <MX_ADC3_Init+0xe4>)
 80009bc:	f001 fdcc 	bl	8002558 <HAL_ADC_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80009c6:	f000 fd23 	bl	8001410 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4810      	ldr	r0, [pc, #64]	; (8000a18 <MX_ADC3_Init+0xe4>)
 80009d6:	f002 fbe1 	bl	800319c <HAL_ADCEx_MultiModeConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80009e0:	f000 fd16 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_ADC3_Init+0xec>)
 80009e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e8:	2306      	movs	r3, #6
 80009ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f0:	237f      	movs	r3, #127	; 0x7f
 80009f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f4:	2304      	movs	r3, #4
 80009f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_ADC3_Init+0xe4>)
 8000a02:	f001 ff65 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000a0c:	f000 fd00 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3730      	adds	r7, #48	; 0x30
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000180 	.word	0x20000180
 8000a1c:	50000400 	.word	0x50000400
 8000a20:	21800100 	.word	0x21800100

08000a24 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f009 fa47 	bl	8009ec4 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a38:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <MX_ADC4_Init+0xc4>)
 8000a3a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a3e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a42:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000aa0:	f001 fd5a 	bl	8002558 <HAL_ADC_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000aaa:	f000 fcb1 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_ADC4_Init+0xc8>)
 8000ab0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aba:	237f      	movs	r3, #127	; 0x7f
 8000abc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_ADC4_Init+0xc0>)
 8000acc:	f001 ff00 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000ad6:	f000 fc9b 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001ec 	.word	0x200001ec
 8000ae8:	50000500 	.word	0x50000500
 8000aec:	25b00200 	.word	0x25b00200

08000af0 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	463b      	mov	r3, r7
 8000af8:	2220      	movs	r2, #32
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f009 f9e1 	bl	8009ec4 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b04:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <MX_ADC5_Init+0xc4>)
 8000b06:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b08:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b0e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b16:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b28:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000b6a:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b6c:	f001 fcf4 	bl	8002558 <HAL_ADC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000b76:	f000 fc4b 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_ADC5_Init+0xc8>)
 8000b7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7e:	2306      	movs	r3, #6
 8000b80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b86:	237f      	movs	r3, #127	; 0x7f
 8000b88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <MX_ADC5_Init+0xc0>)
 8000b98:	f001 fe9a 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000ba2:	f000 fc35 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000258 	.word	0x20000258
 8000bb4:	50000600 	.word	0x50000600
 8000bb8:	08600004 	.word	0x08600004

08000bbc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	; 0x30
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2230      	movs	r2, #48	; 0x30
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f009 f97b 	bl	8009ec4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_DAC1_Init+0x80>)
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <MX_DAC1_Init+0x84>)
 8000bd2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000bd4:	4819      	ldr	r0, [pc, #100]	; (8000c3c <MX_DAC1_Init+0x80>)
 8000bd6:	f002 fcc9 	bl	800356c <HAL_DAC_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000be0:	f000 fc16 	bl	8001410 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000be4:	2302      	movs	r3, #2
 8000be6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <MX_DAC1_Init+0x80>)
 8000c10:	f002 fd2e 	bl	8003670 <HAL_DAC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000c1a:	f000 fbf9 	bl	8001410 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2210      	movs	r2, #16
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_DAC1_Init+0x80>)
 8000c26:	f002 fd23 	bl	8003670 <HAL_DAC_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000c30:	f000 fbee 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3730      	adds	r7, #48	; 0x30
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200002c4 	.word	0x200002c4
 8000c40:	50000800 	.word	0x50000800

08000c44 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2230      	movs	r2, #48	; 0x30
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f009 f937 	bl	8009ec4 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_DAC2_Init+0x6c>)
 8000c58:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <MX_DAC2_Init+0x70>)
 8000c5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000c5c:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <MX_DAC2_Init+0x6c>)
 8000c5e:	f002 fc85 	bl	800356c <HAL_DAC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000c68:	f000 fbd2 	bl	8001410 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_DAC2_Init+0x6c>)
 8000c98:	f002 fcea 	bl	8003670 <HAL_DAC_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000ca2:	f000 fbb5 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	3730      	adds	r7, #48	; 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200002d8 	.word	0x200002d8
 8000cb4:	50000c00 	.word	0x50000c00

08000cb8 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2230      	movs	r2, #48	; 0x30
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f009 f8fd 	bl	8009ec4 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_DAC3_Init+0x80>)
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <MX_DAC3_Init+0x84>)
 8000cce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000cd0:	4819      	ldr	r0, [pc, #100]	; (8000d38 <MX_DAC3_Init+0x80>)
 8000cd2:	f002 fc4b 	bl	800356c <HAL_DAC_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000cdc:	f000 fb98 	bl	8001410 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	; (8000d38 <MX_DAC3_Init+0x80>)
 8000d0c:	f002 fcb0 	bl	8003670 <HAL_DAC_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000d16:	f000 fb7b 	bl	8001410 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_DAC3_Init+0x80>)
 8000d22:	f002 fca5 	bl	8003670 <HAL_DAC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000d2c:	f000 fb70 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3730      	adds	r7, #48	; 0x30
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200002ec 	.word	0x200002ec
 8000d3c:	50001000 	.word	0x50001000

08000d40 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2230      	movs	r2, #48	; 0x30
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f009 f8b9 	bl	8009ec4 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_DAC4_Init+0x80>)
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <MX_DAC4_Init+0x84>)
 8000d56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8000d58:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <MX_DAC4_Init+0x80>)
 8000d5a:	f002 fc07 	bl	800356c <HAL_DAC_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8000d64:	f000 fb54 	bl	8001410 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000d80:	2302      	movs	r3, #2
 8000d82:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <MX_DAC4_Init+0x80>)
 8000d94:	f002 fc6c 	bl	8003670 <HAL_DAC_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8000d9e:	f000 fb37 	bl	8001410 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	2210      	movs	r2, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_DAC4_Init+0x80>)
 8000daa:	f002 fc61 	bl	8003670 <HAL_DAC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_DAC4_Init+0x78>
  {
    Error_Handler();
 8000db4:	f000 fb2c 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000300 	.word	0x20000300
 8000dc4:	50001400 	.word	0x50001400

08000dc8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_OPAMP1_Init+0x44>)
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <MX_OPAMP1_Init+0x48>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_OPAMP1_Init+0x44>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_OPAMP1_Init+0x44>)
 8000dda:	2260      	movs	r2, #96	; 0x60
 8000ddc:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_OPAMP1_Init+0x44>)
 8000de0:	220c      	movs	r2, #12
 8000de2:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_OPAMP1_Init+0x44>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_OPAMP1_Init+0x44>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_OPAMP1_Init+0x44>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_OPAMP1_Init+0x44>)
 8000df8:	f002 ff96 	bl	8003d28 <HAL_OPAMP_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000e02:	f000 fb05 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000314 	.word	0x20000314
 8000e10:	40010300 	.word	0x40010300

08000e14 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_OPAMP3_Init+0x44>)
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <MX_OPAMP3_Init+0x48>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_OPAMP3_Init+0x44>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_OPAMP3_Init+0x44>)
 8000e26:	2260      	movs	r2, #96	; 0x60
 8000e28:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_OPAMP3_Init+0x44>)
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_OPAMP3_Init+0x44>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_OPAMP3_Init+0x44>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_OPAMP3_Init+0x44>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_OPAMP3_Init+0x44>)
 8000e44:	f002 ff70 	bl	8003d28 <HAL_OPAMP_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000e4e:	f000 fadf 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000350 	.word	0x20000350
 8000e5c:	40010308 	.word	0x40010308

08000e60 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_OPAMP4_Init+0x44>)
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <MX_OPAMP4_Init+0x48>)
 8000e68:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_OPAMP4_Init+0x44>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_OPAMP4_Init+0x44>)
 8000e72:	2260      	movs	r2, #96	; 0x60
 8000e74:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_OPAMP4_Init+0x44>)
 8000e78:	220c      	movs	r2, #12
 8000e7a:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_OPAMP4_Init+0x44>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_OPAMP4_Init+0x44>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_OPAMP4_Init+0x44>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_OPAMP4_Init+0x44>)
 8000e90:	f002 ff4a 	bl	8003d28 <HAL_OPAMP_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8000e9a:	f000 fab9 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000038c 	.word	0x2000038c
 8000ea8:	4001030c 	.word	0x4001030c

08000eac <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_OPAMP5_Init+0x44>)
 8000eb2:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <MX_OPAMP5_Init+0x48>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_OPAMP5_Init+0x44>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_OPAMP5_Init+0x44>)
 8000ebe:	2260      	movs	r2, #96	; 0x60
 8000ec0:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_OPAMP5_Init+0x44>)
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_OPAMP5_Init+0x44>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_OPAMP5_Init+0x44>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_OPAMP5_Init+0x44>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_OPAMP5_Init+0x44>)
 8000edc:	f002 ff24 	bl	8003d28 <HAL_OPAMP_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 8000ee6:	f000 fa93 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200003c8 	.word	0x200003c8
 8000ef4:	40010310 	.word	0x40010310

08000ef8 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_OPAMP6_Init+0x44>)
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <MX_OPAMP6_Init+0x48>)
 8000f00:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_OPAMP6_Init+0x44>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_OPAMP6_Init+0x44>)
 8000f0a:	2260      	movs	r2, #96	; 0x60
 8000f0c:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_OPAMP6_Init+0x44>)
 8000f10:	220c      	movs	r2, #12
 8000f12:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_OPAMP6_Init+0x44>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_OPAMP6_Init+0x44>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_OPAMP6_Init+0x44>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_OPAMP6_Init+0x44>)
 8000f28:	f002 fefe 	bl	8003d28 <HAL_OPAMP_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 8000f32:	f000 fa6d 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000404 	.word	0x20000404
 8000f40:	40010314 	.word	0x40010314

08000f44 <MX_QUADSPI1_Init>:
  * @brief QUADSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  /* QUADSPI1 parameter configuration*/
  hqspi1.Instance = QUADSPI;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_QUADSPI1_Init+0x48>)
 8000f4a:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <MX_QUADSPI1_Init+0x4c>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 1;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_QUADSPI1_Init+0x48>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <MX_QUADSPI1_Init+0x48>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_QUADSPI1_Init+0x48>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 25;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MX_QUADSPI1_Init+0x48>)
 8000f62:	2219      	movs	r2, #25
 8000f64:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_QUADSPI1_Init+0x48>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_3;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <MX_QUADSPI1_Init+0x48>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	619a      	str	r2, [r3, #24]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_QUADSPI1_Init+0x48>)
 8000f74:	2240      	movs	r2, #64	; 0x40
 8000f76:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_QUADSPI1_Init+0x48>)
 8000f7a:	f003 f849 	bl	8004010 <HAL_QSPI_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_QUADSPI1_Init+0x44>
  {
    Error_Handler();
 8000f84:	f000 fa44 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000440 	.word	0x20000440
 8000f90:	a0001000 	.word	0xa0001000

08000f94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_SPI2_Init+0x74>)
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <MX_SPI2_Init+0x78>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fb2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fc2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fc6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fca:	2208      	movs	r2, #8
 8000fcc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fee:	2208      	movs	r2, #8
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_SPI2_Init+0x74>)
 8000ff4:	f004 f8a4 	bl	8005140 <HAL_SPI_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ffe:	f000 fa07 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000048c 	.word	0x2000048c
 800100c:	40003800 	.word	0x40003800

08001010 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_SPI3_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <MX_SPI3_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_SPI3_Init+0x74>)
 800101c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001020:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_SPI3_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_SPI3_Init+0x74>)
 800102a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800102e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_SPI3_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_SPI3_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_SPI3_Init+0x74>)
 800103e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001042:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_SPI3_Init+0x74>)
 8001046:	2208      	movs	r2, #8
 8001048:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_SPI3_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_SPI3_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_SPI3_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_SPI3_Init+0x74>)
 800105e:	2207      	movs	r2, #7
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_SPI3_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_SPI3_Init+0x74>)
 800106a:	2208      	movs	r2, #8
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_SPI3_Init+0x74>)
 8001070:	f004 f866 	bl	8005140 <HAL_SPI_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 f9c9 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200004f0 	.word	0x200004f0
 8001088:	40003c00 	.word	0x40003c00

0800108c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_SPI4_Init+0x74>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <MX_SPI4_Init+0x78>)
 8001094:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_SPI4_Init+0x74>)
 8001098:	f44f 7282 	mov.w	r2, #260	; 0x104
 800109c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_SPI4_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_SPI4_Init+0x74>)
 80010a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010aa:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_SPI4_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_SPI4_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_SPI4_Init+0x74>)
 80010ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010be:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_SPI4_Init+0x74>)
 80010c2:	2208      	movs	r2, #8
 80010c4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_SPI4_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_SPI4_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_SPI4_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_SPI4_Init+0x74>)
 80010da:	2207      	movs	r2, #7
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_SPI4_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_SPI4_Init+0x74>)
 80010e6:	2208      	movs	r2, #8
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_SPI4_Init+0x74>)
 80010ec:	f004 f828 	bl	8005140 <HAL_SPI_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f000 f98b 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000554 	.word	0x20000554
 8001104:	40013c00 	.word	0x40013c00

08001108 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <MX_UART5_Init+0x90>)
 800110e:	4a23      	ldr	r2, [pc, #140]	; (800119c <MX_UART5_Init+0x94>)
 8001110:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_UART5_Init+0x90>)
 8001114:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001118:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <MX_UART5_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_UART5_Init+0x90>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_UART5_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_UART5_Init+0x90>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_UART5_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_UART5_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_UART5_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_UART5_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_UART5_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001150:	4811      	ldr	r0, [pc, #68]	; (8001198 <MX_UART5_Init+0x90>)
 8001152:	f004 fbeb 	bl	800592c <HAL_UART_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800115c:	f000 f958 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001160:	2100      	movs	r1, #0
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_UART5_Init+0x90>)
 8001164:	f005 f986 	bl	8006474 <HAL_UARTEx_SetTxFifoThreshold>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800116e:	f000 f94f 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001172:	2100      	movs	r1, #0
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <MX_UART5_Init+0x90>)
 8001176:	f005 f9bb 	bl	80064f0 <HAL_UARTEx_SetRxFifoThreshold>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001180:	f000 f946 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_UART5_Init+0x90>)
 8001186:	f005 f93c 	bl	8006402 <HAL_UARTEx_DisableFifoMode>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001190:	f000 f93e 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200005b8 	.word	0x200005b8
 800119c:	40005000 	.word	0x40005000

080011a0 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <MX_USART3_Init+0x90>)
 80011a6:	4a23      	ldr	r2, [pc, #140]	; (8001234 <MX_USART3_Init+0x94>)
 80011a8:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_USART3_Init+0x90>)
 80011ac:	4a22      	ldr	r2, [pc, #136]	; (8001238 <MX_USART3_Init+0x98>)
 80011ae:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <MX_USART3_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_USART3_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_USART3_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_USART3_Init+0x90>)
 80011c4:	220c      	movs	r2, #12
 80011c6:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_USART3_Init+0x90>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_USART3_Init+0x90>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_USART3_Init+0x90>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_USART3_Init+0x90>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_USART3_Init+0x90>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80011e6:	4812      	ldr	r0, [pc, #72]	; (8001230 <MX_USART3_Init+0x90>)
 80011e8:	f005 fa0e 	bl	8006608 <HAL_USART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART3_Init+0x56>
  {
    Error_Handler();
 80011f2:	f000 f90d 	bl	8001410 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_USART3_Init+0x90>)
 80011fa:	f005 fde9 	bl	8006dd0 <HAL_USARTEx_SetTxFifoThreshold>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART3_Init+0x68>
  {
    Error_Handler();
 8001204:	f000 f904 	bl	8001410 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_USART3_Init+0x90>)
 800120c:	f005 fe1e 	bl	8006e4c <HAL_USARTEx_SetRxFifoThreshold>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART3_Init+0x7a>
  {
    Error_Handler();
 8001216:	f000 f8fb 	bl	8001410 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART3_Init+0x90>)
 800121c:	f005 fd9f 	bl	8006d5e <HAL_USARTEx_DisableFifoMode>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART3_Init+0x8a>
  {
    Error_Handler();
 8001226:	f000 f8f3 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000064c 	.word	0x2000064c
 8001234:	40004800 	.word	0x40004800
 8001238:	007a1200 	.word	0x007a1200

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001252:	4b5d      	ldr	r3, [pc, #372]	; (80013c8 <MX_GPIO_Init+0x18c>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a5c      	ldr	r2, [pc, #368]	; (80013c8 <MX_GPIO_Init+0x18c>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <MX_GPIO_Init+0x18c>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <MX_GPIO_Init+0x18c>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a56      	ldr	r2, [pc, #344]	; (80013c8 <MX_GPIO_Init+0x18c>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b54      	ldr	r3, [pc, #336]	; (80013c8 <MX_GPIO_Init+0x18c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <MX_GPIO_Init+0x18c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a50      	ldr	r2, [pc, #320]	; (80013c8 <MX_GPIO_Init+0x18c>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b4e      	ldr	r3, [pc, #312]	; (80013c8 <MX_GPIO_Init+0x18c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <MX_GPIO_Init+0x18c>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a4a      	ldr	r2, [pc, #296]	; (80013c8 <MX_GPIO_Init+0x18c>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b48      	ldr	r3, [pc, #288]	; (80013c8 <MX_GPIO_Init+0x18c>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <MX_GPIO_Init+0x18c>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a44      	ldr	r2, [pc, #272]	; (80013c8 <MX_GPIO_Init+0x18c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <MX_GPIO_Init+0x18c>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ca:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <MX_GPIO_Init+0x18c>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a3e      	ldr	r2, [pc, #248]	; (80013c8 <MX_GPIO_Init+0x18c>)
 80012d0:	f043 0320 	orr.w	r3, r3, #32
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <MX_GPIO_Init+0x18c>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_NRST_GPIO_Port, TFT_NRST_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	4839      	ldr	r0, [pc, #228]	; (80013cc <MX_GPIO_Init+0x190>)
 80012e8:	f002 fd06 	bl	8003cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 7101 	mov.w	r1, #516	; 0x204
 80012f2:	4837      	ldr	r0, [pc, #220]	; (80013d0 <MX_GPIO_Init+0x194>)
 80012f4:	f002 fd00 	bl	8003cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f240 210b 	movw	r1, #523	; 0x20b
 80012fe:	4835      	ldr	r0, [pc, #212]	; (80013d4 <MX_GPIO_Init+0x198>)
 8001300:	f002 fcfa 	bl	8003cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_SPI_DC_GPIO_Port, TFT_SPI_DC_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2101      	movs	r1, #1
 8001308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130c:	f002 fcf4 	bl	8003cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_NRST_Pin */
  GPIO_InitStruct.Pin = TFT_NRST_Pin;
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_NRST_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4829      	ldr	r0, [pc, #164]	; (80013cc <MX_GPIO_Init+0x190>)
 8001328:	f002 fb64 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRIDGE_CLK_Pin */
  GPIO_InitStruct.Pin = BRIDGE_CLK_Pin;
 800132c:	2302      	movs	r3, #2
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800133c:	2304      	movs	r3, #4
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BRIDGE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4824      	ldr	r0, [pc, #144]	; (80013d8 <MX_GPIO_Init+0x19c>)
 8001348:	f002 fb54 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUD_ORANGE_R_OUTPUT_EN_Pin AUD_ORANGE_L_OUTPUT_EN_Pin */
  GPIO_InitStruct.Pin = AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin;
 800134c:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <MX_GPIO_Init+0x194>)
 8001366:	f002 fb45 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MICRO_SD_CS_Pin AUD_GREEN_L_OUTPUT_EN_Pin AUD_GREEN_R_OUTPUT_EN_Pin ROT_B_Pin */
  GPIO_InitStruct.Pin = MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin;
 800136a:	f240 230b 	movw	r3, #523	; 0x20b
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <MX_GPIO_Init+0x198>)
 8001384:	f002 fb36 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_A_Pin ROT_S2_Pin ROT_S1_Pin ROT_C_Pin */
  GPIO_InitStruct.Pin = ROT_A_Pin|ROT_S2_Pin|ROT_S1_Pin|ROT_C_Pin;
 8001388:	2374      	movs	r3, #116	; 0x74
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <MX_GPIO_Init+0x198>)
 800139c:	f002 fb2a 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_SPI_DC_Pin */
  GPIO_InitStruct.Pin = TFT_SPI_DC_Pin;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_SPI_DC_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f002 fb1b 	bl	80039f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013be:	bf00      	nop
 80013c0:	3730      	adds	r7, #48	; 0x30
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48001400 	.word	0x48001400
 80013d4:	48000800 	.word	0x48000800
 80013d8:	48000c00 	.word	0x48000c00

080013dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f005 ffa5 	bl	8007334 <osDelay>
 80013ea:	e7fb      	b.n	80013e4 <StartDefaultTask+0x8>

080013ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013fe:	f000 feb7 	bl	8002170 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40001400 	.word	0x40001400

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001418:	e7fe      	b.n	8001418 <Error_Handler+0x8>
	...

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_MspInit+0x4c>)
 8001424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_MspInit+0x4c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6613      	str	r3, [r2, #96]	; 0x60
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_MspInit+0x4c>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_MspInit+0x4c>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_MspInit+0x4c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	6593      	str	r3, [r2, #88]	; 0x58
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_MspInit+0x4c>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	210f      	movs	r1, #15
 8001456:	f06f 0001 	mvn.w	r0, #1
 800145a:	f002 f85f 	bl	800351c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0a8      	sub	sp, #160	; 0xa0
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001488:	2254      	movs	r2, #84	; 0x54
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f008 fd19 	bl	8009ec4 <memset>
  if(hadc->Instance==ADC1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149a:	d141      	bne.n	8001520 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800149c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 fbf9 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014b8:	f7ff ffaa 	bl	8001410 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014bc:	4b84      	ldr	r3, [pc, #528]	; (80016d0 <HAL_ADC_MspInit+0x264>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a83      	ldr	r2, [pc, #524]	; (80016d0 <HAL_ADC_MspInit+0x264>)
 80014c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014c6:	4b82      	ldr	r3, [pc, #520]	; (80016d0 <HAL_ADC_MspInit+0x264>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10b      	bne.n	80014e6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014ce:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a80      	ldr	r2, [pc, #512]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 80014d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b7e      	ldr	r3, [pc, #504]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
 80014e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a7a      	ldr	r2, [pc, #488]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b78      	ldr	r3, [pc, #480]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
 80014fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AUD_GRN_MIC_POSTAMP_Pin;
 80014fe:	2302      	movs	r3, #2
 8001500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001504:	2303      	movs	r3, #3
 8001506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_GRN_MIC_POSTAMP_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151a:	f002 fa6b 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800151e:	e165      	b.n	80017ec <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a6c      	ldr	r2, [pc, #432]	; (80016d8 <HAL_ADC_MspInit+0x26c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d141      	bne.n	80015ae <HAL_ADC_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800152a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001530:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001534:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fbb2 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_ADC_MspInit+0xde>
      Error_Handler();
 8001546:	f7ff ff63 	bl	8001410 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800154a:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <HAL_ADC_MspInit+0x264>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a5f      	ldr	r2, [pc, #380]	; (80016d0 <HAL_ADC_MspInit+0x264>)
 8001552:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001554:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <HAL_ADC_MspInit+0x264>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10b      	bne.n	8001574 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800155c:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	4a5c      	ldr	r2, [pc, #368]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 8001562:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001566:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001568:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001580:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_S_Pin;
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001592:	2303      	movs	r3, #3
 8001594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_S_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a8:	f002 fa24 	bl	80039f4 <HAL_GPIO_Init>
}
 80015ac:	e11e      	b.n	80017ec <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC3)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_ADC_MspInit+0x270>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d142      	bne.n	800163e <HAL_ADC_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015bc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fb6a 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_ADC_MspInit+0x16e>
      Error_Handler();
 80015d6:	f7ff ff1b 	bl	8001410 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <HAL_ADC_MspInit+0x274>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a3f      	ldr	r2, [pc, #252]	; (80016e0 <HAL_ADC_MspInit+0x274>)
 80015e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <HAL_ADC_MspInit+0x274>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d10b      	bne.n	8001604 <HAL_ADC_MspInit+0x198>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80015ec:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	4a38      	ldr	r2, [pc, #224]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f8:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	4a32      	ldr	r2, [pc, #200]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 800160a:	f043 0308 	orr.w	r3, r3, #8
 800160e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	623b      	str	r3, [r7, #32]
 800161a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_R1_Pin;
 800161c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001620:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001624:	2303      	movs	r3, #3
 8001626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_R1_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001634:	4619      	mov	r1, r3
 8001636:	482b      	ldr	r0, [pc, #172]	; (80016e4 <HAL_ADC_MspInit+0x278>)
 8001638:	f002 f9dc 	bl	80039f4 <HAL_GPIO_Init>
}
 800163c:	e0d6      	b.n	80017ec <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC4)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a29      	ldr	r2, [pc, #164]	; (80016e8 <HAL_ADC_MspInit+0x27c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d151      	bne.n	80016ec <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800164e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001656:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fb22 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 8001666:	f7ff fed3 	bl	8001410 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_ADC_MspInit+0x274>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_ADC_MspInit+0x274>)
 8001672:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <HAL_ADC_MspInit+0x274>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d10b      	bne.n	8001694 <HAL_ADC_MspInit+0x228>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 8001682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_ADC_MspInit+0x268>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_T_Pin;
 80016ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_T_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016c4:	4619      	mov	r1, r3
 80016c6:	4807      	ldr	r0, [pc, #28]	; (80016e4 <HAL_ADC_MspInit+0x278>)
 80016c8:	f002 f994 	bl	80039f4 <HAL_GPIO_Init>
}
 80016cc:	e08e      	b.n	80017ec <HAL_ADC_MspInit+0x380>
 80016ce:	bf00      	nop
 80016d0:	200009a0 	.word	0x200009a0
 80016d4:	40021000 	.word	0x40021000
 80016d8:	50000100 	.word	0x50000100
 80016dc:	50000400 	.word	0x50000400
 80016e0:	200009a4 	.word	0x200009a4
 80016e4:	48000c00 	.word	0x48000c00
 80016e8:	50000500 	.word	0x50000500
  else if(hadc->Instance==ADC5)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a40      	ldr	r2, [pc, #256]	; (80017f4 <HAL_ADC_MspInit+0x388>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d17a      	bne.n	80017ec <HAL_ADC_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80016f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80016fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001704:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001708:	4618      	mov	r0, r3
 800170a:	f003 facb 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_ADC_MspInit+0x2ac>
      Error_Handler();
 8001714:	f7ff fe7c 	bl	8001410 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001718:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <HAL_ADC_MspInit+0x38c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a36      	ldr	r2, [pc, #216]	; (80017f8 <HAL_ADC_MspInit+0x38c>)
 8001720:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001722:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_ADC_MspInit+0x38c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d10b      	bne.n	8001742 <HAL_ADC_MspInit+0x2d6>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_ADC_MspInit+0x390>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a33      	ldr	r2, [pc, #204]	; (80017fc <HAL_ADC_MspInit+0x390>)
 8001730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_ADC_MspInit+0x390>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <HAL_ADC_MspInit+0x390>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	4a2d      	ldr	r2, [pc, #180]	; (80017fc <HAL_ADC_MspInit+0x390>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HAL_ADC_MspInit+0x390>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_ADC_MspInit+0x390>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a27      	ldr	r2, [pc, #156]	; (80017fc <HAL_ADC_MspInit+0x390>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <HAL_ADC_MspInit+0x390>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_ADC_MspInit+0x390>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_ADC_MspInit+0x390>)
 8001778:	f043 0310 	orr.w	r3, r3, #16
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <HAL_ADC_MspInit+0x390>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AUD_ORANGE_S_UNBUFFERED_IN_Pin;
 800178a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001792:	2303      	movs	r3, #3
 8001794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_ORANGE_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f002 f924 	bl	80039f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_T_UNBUFFERED_IN_Pin|AUD_BLACK_R1_UNBUFFERED_IN_Pin|VOLUME_ANALOG_IN_Pin;
 80017ac:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80017b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b4:	2303      	movs	r3, #3
 80017b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017c4:	4619      	mov	r1, r3
 80017c6:	480e      	ldr	r0, [pc, #56]	; (8001800 <HAL_ADC_MspInit+0x394>)
 80017c8:	f002 f914 	bl	80039f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_S_UNBUFFERED_IN_Pin;
 80017cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d4:	2303      	movs	r3, #3
 80017d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_BLACK_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	; (8001804 <HAL_ADC_MspInit+0x398>)
 80017e8:	f002 f904 	bl	80039f4 <HAL_GPIO_Init>
}
 80017ec:	bf00      	nop
 80017ee:	37a0      	adds	r7, #160	; 0xa0
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	50000600 	.word	0x50000600
 80017f8:	200009a4 	.word	0x200009a4
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000c00 	.word	0x48000c00
 8001804:	48001000 	.word	0x48001000

08001808 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08e      	sub	sp, #56	; 0x38
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a45      	ldr	r2, [pc, #276]	; (800193c <HAL_DAC_MspInit+0x134>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d125      	bne.n	8001876 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800182a:	4b45      	ldr	r3, [pc, #276]	; (8001940 <HAL_DAC_MspInit+0x138>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a44      	ldr	r2, [pc, #272]	; (8001940 <HAL_DAC_MspInit+0x138>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b42      	ldr	r3, [pc, #264]	; (8001940 <HAL_DAC_MspInit+0x138>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_DAC_MspInit+0x138>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <HAL_DAC_MspInit+0x138>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <HAL_DAC_MspInit+0x138>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
 8001858:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AUD_GREEN_L_PREAMP_AUDIO_Pin|AUD_GREEN_R_PREAMP_AUDIO_Pin;
 800185a:	2330      	movs	r3, #48	; 0x30
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185e:	2303      	movs	r3, #3
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001870:	f002 f8c0 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8001874:	e05d      	b.n	8001932 <HAL_DAC_MspInit+0x12a>
  else if(hdac->Instance==DAC2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a32      	ldr	r2, [pc, #200]	; (8001944 <HAL_DAC_MspInit+0x13c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d12d      	bne.n	80018dc <HAL_DAC_MspInit+0xd4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <HAL_DAC_MspInit+0x138>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	4a2e      	ldr	r2, [pc, #184]	; (8001940 <HAL_DAC_MspInit+0x138>)
 8001886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <HAL_DAC_MspInit+0x138>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_DAC_MspInit+0x138>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	4a28      	ldr	r2, [pc, #160]	; (8001940 <HAL_DAC_MspInit+0x138>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_DAC_MspInit+0x138>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TFT_LED_LVL_Pin;
 80018b0:	2340      	movs	r3, #64	; 0x40
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b4:	2303      	movs	r3, #3
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TFT_LED_LVL_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c6:	f002 f895 	bl	80039f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	210f      	movs	r1, #15
 80018ce:	2037      	movs	r0, #55	; 0x37
 80018d0:	f001 fe24 	bl	800351c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80018d4:	2037      	movs	r0, #55	; 0x37
 80018d6:	f001 fe3b 	bl	8003550 <HAL_NVIC_EnableIRQ>
}
 80018da:	e02a      	b.n	8001932 <HAL_DAC_MspInit+0x12a>
  else if(hdac->Instance==DAC3)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_DAC_MspInit+0x140>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10c      	bne.n	8001900 <HAL_DAC_MspInit+0xf8>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_DAC_MspInit+0x138>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a15      	ldr	r2, [pc, #84]	; (8001940 <HAL_DAC_MspInit+0x138>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_DAC_MspInit+0x138>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
}
 80018fe:	e018      	b.n	8001932 <HAL_DAC_MspInit+0x12a>
  else if(hdac->Instance==DAC4)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a11      	ldr	r2, [pc, #68]	; (800194c <HAL_DAC_MspInit+0x144>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d113      	bne.n	8001932 <HAL_DAC_MspInit+0x12a>
    __HAL_RCC_DAC4_CLK_ENABLE();
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_DAC_MspInit+0x138>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_DAC_MspInit+0x138>)
 8001910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_DAC_MspInit+0x138>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	210f      	movs	r1, #15
 8001926:	2037      	movs	r0, #55	; 0x37
 8001928:	f001 fdf8 	bl	800351c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800192c:	2037      	movs	r0, #55	; 0x37
 800192e:	f001 fe0f 	bl	8003550 <HAL_NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3738      	adds	r7, #56	; 0x38
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	50000800 	.word	0x50000800
 8001940:	40021000 	.word	0x40021000
 8001944:	50000c00 	.word	0x50000c00
 8001948:	50001000 	.word	0x50001000
 800194c:	50001400 	.word	0x50001400

08001950 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	; 0x30
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a4d      	ldr	r2, [pc, #308]	; (8001aa4 <HAL_OPAMP_MspInit+0x154>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d119      	bne.n	80019a6 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = AUD_ORANGE_L_PREAMP_AUDIO_Pin;
 800198a:	2304      	movs	r3, #4
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198e:	2303      	movs	r3, #3
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_L_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f002 f828 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 80019a4:	e07a      	b.n	8001a9c <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP3)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a40      	ldr	r2, [pc, #256]	; (8001aac <HAL_OPAMP_MspInit+0x15c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d118      	bne.n	80019e2 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019bc:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AUD_ORANGE_PREAMP_AUDIO_Pin;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019cc:	2303      	movs	r3, #3
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	4835      	ldr	r0, [pc, #212]	; (8001ab0 <HAL_OPAMP_MspInit+0x160>)
 80019dc:	f002 f80a 	bl	80039f4 <HAL_GPIO_Init>
}
 80019e0:	e05c      	b.n	8001a9c <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP4)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <HAL_OPAMP_MspInit+0x164>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d119      	bne.n	8001a20 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 80019f2:	f043 0302 	orr.w	r3, r3, #2
 80019f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4825      	ldr	r0, [pc, #148]	; (8001ab0 <HAL_OPAMP_MspInit+0x160>)
 8001a1a:	f001 ffeb 	bl	80039f4 <HAL_GPIO_Init>
}
 8001a1e:	e03d      	b.n	8001a9c <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP5)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <HAL_OPAMP_MspInit+0x168>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d11a      	bne.n	8001a60 <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5a:	f001 ffcb 	bl	80039f4 <HAL_GPIO_Init>
}
 8001a5e:	e01d      	b.n	8001a9c <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP6)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_OPAMP_MspInit+0x16c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d118      	bne.n	8001a9c <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_OPAMP_MspInit+0x158>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <HAL_OPAMP_MspInit+0x160>)
 8001a98:	f001 ffac 	bl	80039f4 <HAL_GPIO_Init>
}
 8001a9c:	bf00      	nop
 8001a9e:	3730      	adds	r7, #48	; 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40010300 	.word	0x40010300
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010308 	.word	0x40010308
 8001ab0:	48000400 	.word	0x48000400
 8001ab4:	4001030c 	.word	0x4001030c
 8001ab8:	40010310 	.word	0x40010310
 8001abc:	40010314 	.word	0x40010314

08001ac0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0a0      	sub	sp, #128	; 0x80
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad8:	f107 0318 	add.w	r3, r7, #24
 8001adc:	2254      	movs	r2, #84	; 0x54
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f008 f9ef 	bl	8009ec4 <memset>
  if(hqspi->Instance==QUADSPI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a3c      	ldr	r2, [pc, #240]	; (8001bdc <HAL_QSPI_MspInit+0x11c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d170      	bne.n	8001bd2 <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001af0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001af4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 f8d0 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 8001b0a:	f7ff fc81 	bl	8001410 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b0e:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b12:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b18:	6513      	str	r3, [r2, #80]	; 0x50
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b3e:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a27      	ldr	r2, [pc, #156]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b44:	f043 0320 	orr.w	r3, r3, #32
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b5c:	f043 0310 	orr.w	r3, r3, #16
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_QSPI_MspInit+0x120>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
    PE15     ------> QUADSPI1_BK1_IO3
    PE11     ------> QUADSPI1_BK1_NCS
    PE14     ------> QUADSPI1_BK1_IO2
    PE13     ------> QUADSPI1_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7
 8001b6e:	23f8      	movs	r3, #248	; 0xf8
 8001b70:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b7e:	230a      	movs	r3, #10
 8001b80:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b86:	4619      	mov	r1, r3
 8001b88:	4816      	ldr	r0, [pc, #88]	; (8001be4 <HAL_QSPI_MspInit+0x124>)
 8001b8a:	f001 ff33 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ba4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480f      	ldr	r0, [pc, #60]	; (8001be8 <HAL_QSPI_MspInit+0x128>)
 8001bac:	f001 ff22 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14
 8001bb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4807      	ldr	r0, [pc, #28]	; (8001bec <HAL_QSPI_MspInit+0x12c>)
 8001bce:	f001 ff11 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3780      	adds	r7, #128	; 0x80
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	a0001000 	.word	0xa0001000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	48000c00 	.word	0x48000c00
 8001be8:	48001400 	.word	0x48001400
 8001bec:	48001000 	.word	0x48001000

08001bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b090      	sub	sp, #64	; 0x40
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a62      	ldr	r2, [pc, #392]	; (8001d98 <HAL_SPI_MspInit+0x1a8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d146      	bne.n	8001ca0 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c12:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	4a61      	ldr	r2, [pc, #388]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2a:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	6a3b      	ldr	r3, [r7, #32]
    PD15     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001c6c:	2306      	movs	r3, #6
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c74:	4619      	mov	r1, r3
 8001c76:	484a      	ldr	r0, [pc, #296]	; (8001da0 <HAL_SPI_MspInit+0x1b0>)
 8001c78:	f001 febc 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8001c7c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c8e:	2305      	movs	r3, #5
 8001c90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c96:	4619      	mov	r1, r3
 8001c98:	4842      	ldr	r0, [pc, #264]	; (8001da4 <HAL_SPI_MspInit+0x1b4>)
 8001c9a:	f001 feab 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001c9e:	e077      	b.n	8001d90 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a40      	ldr	r2, [pc, #256]	; (8001da8 <HAL_SPI_MspInit+0x1b8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d145      	bne.n	8001d36 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb6:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	4a35      	ldr	r2, [pc, #212]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	4a2f      	ldr	r2, [pc, #188]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d02:	2306      	movs	r3, #6
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4825      	ldr	r0, [pc, #148]	; (8001da4 <HAL_SPI_MspInit+0x1b4>)
 8001d0e:	f001 fe71 	bl	80039f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001d12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d24:	2306      	movs	r3, #6
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481f      	ldr	r0, [pc, #124]	; (8001dac <HAL_SPI_MspInit+0x1bc>)
 8001d30:	f001 fe60 	bl	80039f4 <HAL_GPIO_Init>
}
 8001d34:	e02c      	b.n	8001d90 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI4)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_SPI_MspInit+0x1c0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d127      	bne.n	8001d90 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d44:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_2;
 8001d70:	2374      	movs	r3, #116	; 0x74
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d80:	2305      	movs	r3, #5
 8001d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480a      	ldr	r0, [pc, #40]	; (8001db4 <HAL_SPI_MspInit+0x1c4>)
 8001d8c:	f001 fe32 	bl	80039f4 <HAL_GPIO_Init>
}
 8001d90:	bf00      	nop
 8001d92:	3740      	adds	r7, #64	; 0x40
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40003800 	.word	0x40003800
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	48000c00 	.word	0x48000c00
 8001da4:	48000400 	.word	0x48000400
 8001da8:	40003c00 	.word	0x40003c00
 8001dac:	48000800 	.word	0x48000800
 8001db0:	40013c00 	.word	0x40013c00
 8001db4:	48001000 	.word	0x48001000

08001db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0a0      	sub	sp, #128	; 0x80
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	f107 0318 	add.w	r3, r7, #24
 8001dd4:	2254      	movs	r2, #84	; 0x54
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f008 f873 	bl	8009ec4 <memset>
  if(huart->Instance==UART5)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2d      	ldr	r2, [pc, #180]	; (8001e98 <HAL_UART_MspInit+0xe0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d152      	bne.n	8001e8e <HAL_UART_MspInit+0xd6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001de8:	2310      	movs	r3, #16
 8001dea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df0:	f107 0318 	add.w	r3, r7, #24
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 ff55 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e00:	f7ff fb06 	bl	8001410 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_UART_MspInit+0xe4>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	4a24      	ldr	r2, [pc, #144]	; (8001e9c <HAL_UART_MspInit+0xe4>)
 8001e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_UART_MspInit+0xe4>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <HAL_UART_MspInit+0xe4>)
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e20:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_UART_MspInit+0xe4>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_UART_MspInit+0xe4>)
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_UART_MspInit+0xe4>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e38:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <HAL_UART_MspInit+0xe4>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_UART_MspInit+0xe4>)
 8001e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e50:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001e5e:	2305      	movs	r3, #5
 8001e60:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e66:	4619      	mov	r1, r3
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <HAL_UART_MspInit+0xe8>)
 8001e6a:	f001 fdc3 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001e7e:	2305      	movs	r3, #5
 8001e80:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e86:	4619      	mov	r1, r3
 8001e88:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <HAL_UART_MspInit+0xec>)
 8001e8a:	f001 fdb3 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001e8e:	bf00      	nop
 8001e90:	3780      	adds	r7, #128	; 0x80
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40005000 	.word	0x40005000
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48000800 	.word	0x48000800
 8001ea4:	48000c00 	.word	0x48000c00

08001ea8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0a0      	sub	sp, #128	; 0x80
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec0:	f107 0318 	add.w	r3, r7, #24
 8001ec4:	2254      	movs	r2, #84	; 0x54
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f007 fffb 	bl	8009ec4 <memset>
  if(husart->Instance==USART3)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a2d      	ldr	r2, [pc, #180]	; (8001f88 <HAL_USART_MspInit+0xe0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d153      	bne.n	8001f80 <HAL_USART_MspInit+0xd8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ed8:	2304      	movs	r3, #4
 8001eda:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fedd 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef0:	f7ff fa8e 	bl	8001410 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_USART_MspInit+0xe4>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	4a24      	ldr	r2, [pc, #144]	; (8001f8c <HAL_USART_MspInit+0xe4>)
 8001efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efe:	6593      	str	r3, [r2, #88]	; 0x58
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_USART_MspInit+0xe4>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <HAL_USART_MspInit+0xe4>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <HAL_USART_MspInit+0xe4>)
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <HAL_USART_MspInit+0xe4>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_USART_MspInit+0xe4>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_USART_MspInit+0xe4>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_USART_MspInit+0xe4>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB9     ------> USART3_TX
    PD10     ------> USART3_CK
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f40:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f56:	4619      	mov	r1, r3
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <HAL_USART_MspInit+0xe8>)
 8001f5a:	f001 fd4b 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001f5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f70:	2307      	movs	r3, #7
 8001f72:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4806      	ldr	r0, [pc, #24]	; (8001f94 <HAL_USART_MspInit+0xec>)
 8001f7c:	f001 fd3a 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f80:	bf00      	nop
 8001f82:	3780      	adds	r7, #128	; 0x80
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40004800 	.word	0x40004800
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	48000c00 	.word	0x48000c00

08001f98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_InitTick+0xc4>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	4a2b      	ldr	r2, [pc, #172]	; (800205c <HAL_InitTick+0xc4>)
 8001fae:	f043 0320 	orr.w	r3, r3, #32
 8001fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb4:	4b29      	ldr	r3, [pc, #164]	; (800205c <HAL_InitTick+0xc4>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fc0:	f107 020c 	add.w	r2, r7, #12
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 fdc8 	bl	8004b60 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fd0:	f002 fd9a 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8001fd4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	4a21      	ldr	r2, [pc, #132]	; (8002060 <HAL_InitTick+0xc8>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	0c9b      	lsrs	r3, r3, #18
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_InitTick+0xcc>)
 8001fe6:	4a20      	ldr	r2, [pc, #128]	; (8002068 <HAL_InitTick+0xd0>)
 8001fe8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_InitTick+0xcc>)
 8001fec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <HAL_InitTick+0xcc>)
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_InitTick+0xcc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_InitTick+0xcc>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8002004:	4817      	ldr	r0, [pc, #92]	; (8002064 <HAL_InitTick+0xcc>)
 8002006:	f003 f946 	bl	8005296 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002014:	2b00      	cmp	r3, #0
 8002016:	d11b      	bne.n	8002050 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002018:	4812      	ldr	r0, [pc, #72]	; (8002064 <HAL_InitTick+0xcc>)
 800201a:	f003 f99d 	bl	8005358 <HAL_TIM_Base_Start_IT>
 800201e:	4603      	mov	r3, r0
 8002020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002024:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002028:	2b00      	cmp	r3, #0
 800202a:	d111      	bne.n	8002050 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800202c:	2037      	movs	r0, #55	; 0x37
 800202e:	f001 fa8f 	bl	8003550 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b0f      	cmp	r3, #15
 8002036:	d808      	bhi.n	800204a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 8002038:	2200      	movs	r2, #0
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	2037      	movs	r0, #55	; 0x37
 800203e:	f001 fa6d 	bl	800351c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_InitTick+0xd4>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e002      	b.n	8002050 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002054:	4618      	mov	r0, r3
 8002056:	3730      	adds	r7, #48	; 0x30
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	431bde83 	.word	0x431bde83
 8002064:	200009a8 	.word	0x200009a8
 8002068:	40001400 	.word	0x40001400
 800206c:	20000004 	.word	0x20000004

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002074:	f002 fdb6 	bl	8004be4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <NMI_Handler+0x8>

0800207a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <MemManage_Handler+0x4>

08002086 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <BusFault_Handler+0x4>

0800208c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <UsageFault_Handler+0x4>

08002092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020a4:	4805      	ldr	r0, [pc, #20]	; (80020bc <TIM7_DAC_IRQHandler+0x1c>)
 80020a6:	f003 f9cf 	bl	8005448 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <TIM7_DAC_IRQHandler+0x20>)
 80020ac:	f001 fa80 	bl	80035b0 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac4);
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <TIM7_DAC_IRQHandler+0x24>)
 80020b2:	f001 fa7d 	bl	80035b0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200009a8 	.word	0x200009a8
 80020c0:	200002d8 	.word	0x200002d8
 80020c4:	20000300 	.word	0x20000300

080020c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <SystemInit+0x20>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <SystemInit+0x20>)
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020ec:	480d      	ldr	r0, [pc, #52]	; (8002124 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f0:	f7ff ffea 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f4:	480c      	ldr	r0, [pc, #48]	; (8002128 <LoopForever+0x6>)
  ldr r1, =_edata
 80020f6:	490d      	ldr	r1, [pc, #52]	; (800212c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020f8:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <LoopForever+0xe>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020fc:	e002      	b.n	8002104 <LoopCopyDataInit>

080020fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002102:	3304      	adds	r3, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002108:	d3f9      	bcc.n	80020fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800210c:	4c0a      	ldr	r4, [pc, #40]	; (8002138 <LoopForever+0x16>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002110:	e001      	b.n	8002116 <LoopFillZerobss>

08002112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002114:	3204      	adds	r2, #4

08002116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002118:	d3fb      	bcc.n	8002112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211a:	f007 fe9f 	bl	8009e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800211e:	f7fe fa3f 	bl	80005a0 <main>

08002122 <LoopForever>:

LoopForever:
    b LoopForever
 8002122:	e7fe      	b.n	8002122 <LoopForever>
  ldr   r0, =_estack
 8002124:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002130:	0800a1c8 	.word	0x0800a1c8
  ldr r2, =_sbss
 8002134:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002138:	20002424 	.word	0x20002424

0800213c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC1_2_IRQHandler>

0800213e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002148:	2003      	movs	r0, #3
 800214a:	f001 f9dc 	bl	8003506 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800214e:	200f      	movs	r0, #15
 8002150:	f7ff ff22 	bl	8001f98 <HAL_InitTick>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	e001      	b.n	8002164 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002160:	f7ff f95c 	bl	800141c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002164:	79fb      	ldrb	r3, [r7, #7]

}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_IncTick+0x1c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_IncTick+0x20>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4413      	add	r3, r2
 800217e:	4a03      	ldr	r2, [pc, #12]	; (800218c <HAL_IncTick+0x1c>)
 8002180:	6013      	str	r3, [r2, #0]
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	200009f4 	.word	0x200009f4
 8002190:	20000008 	.word	0x20000008

08002194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return uwTick;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_GetTick+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200009f4 	.word	0x200009f4

080021ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	609a      	str	r2, [r3, #8]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	609a      	str	r2, [r3, #8]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3360      	adds	r3, #96	; 0x60
 8002226:	461a      	mov	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <LL_ADC_SetOffset+0x44>)
 8002236:	4013      	ands	r3, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	4313      	orrs	r3, r2
 8002244:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	03fff000 	.word	0x03fff000

0800225c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3360      	adds	r3, #96	; 0x60
 800226a:	461a      	mov	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3360      	adds	r3, #96	; 0x60
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022be:	b480      	push	{r7}
 80022c0:	b087      	sub	sp, #28
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3360      	adds	r3, #96	; 0x60
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3360      	adds	r3, #96	; 0x60
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	615a      	str	r2, [r3, #20]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3330      	adds	r3, #48	; 0x30
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	4413      	add	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	211f      	movs	r1, #31
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0e9b      	lsrs	r3, r3, #26
 8002388:	f003 011f 	and.w	r1, r3, #31
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	431a      	orrs	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800239c:	bf00      	nop
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3314      	adds	r3, #20
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	0e5b      	lsrs	r3, r3, #25
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	4413      	add	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	0d1b      	lsrs	r3, r3, #20
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2107      	movs	r1, #7
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	401a      	ands	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	0d1b      	lsrs	r3, r3, #20
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	43db      	mvns	r3, r3
 800241a:	401a      	ands	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f003 0318 	and.w	r3, r3, #24
 8002422:	4908      	ldr	r1, [pc, #32]	; (8002444 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002424:	40d9      	lsrs	r1, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	400b      	ands	r3, r1
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	431a      	orrs	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	0007ffff 	.word	0x0007ffff

08002448 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6093      	str	r3, [r2, #8]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800247c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002480:	d101      	bne.n	8002486 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024d0:	d101      	bne.n	80024d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <LL_ADC_IsEnabled+0x18>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <LL_ADC_IsEnabled+0x1a>
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b04      	cmp	r3, #4
 800251c:	d101      	bne.n	8002522 <LL_ADC_REG_IsConversionOngoing+0x18>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b08      	cmp	r3, #8
 8002542:	d101      	bne.n	8002548 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1a9      	b.n	80028c6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7fe ff73 	bl	800146c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff67 	bl	800246c <LL_ADC_IsDeepPowerDownEnabled>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff4d 	bl	8002448 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff82 	bl	80024bc <LL_ADC_IsInternalRegulatorEnabled>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d115      	bne.n	80025ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ff66 	bl	8002494 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025c8:	4b9c      	ldr	r3, [pc, #624]	; (800283c <HAL_ADC_Init+0x2e4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	4a9c      	ldr	r2, [pc, #624]	; (8002840 <HAL_ADC_Init+0x2e8>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	3301      	adds	r3, #1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025dc:	e002      	b.n	80025e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f9      	bne.n	80025de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff64 	bl	80024bc <LL_ADC_IsInternalRegulatorEnabled>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10d      	bne.n	8002616 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	f043 0210 	orr.w	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	f043 0201 	orr.w	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ff75 	bl	800250a <LL_ADC_REG_IsConversionOngoing>
 8002620:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 8142 	bne.w	80028b4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 813e 	bne.w	80028b4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002640:	f043 0202 	orr.w	r2, r3, #2
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff49 	bl	80024e4 <LL_ADC_IsEnabled>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d141      	bne.n	80026dc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002660:	d004      	beq.n	800266c <HAL_ADC_Init+0x114>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a77      	ldr	r2, [pc, #476]	; (8002844 <HAL_ADC_Init+0x2ec>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d10f      	bne.n	800268c <HAL_ADC_Init+0x134>
 800266c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002670:	f7ff ff38 	bl	80024e4 <LL_ADC_IsEnabled>
 8002674:	4604      	mov	r4, r0
 8002676:	4873      	ldr	r0, [pc, #460]	; (8002844 <HAL_ADC_Init+0x2ec>)
 8002678:	f7ff ff34 	bl	80024e4 <LL_ADC_IsEnabled>
 800267c:	4603      	mov	r3, r0
 800267e:	4323      	orrs	r3, r4
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e012      	b.n	80026b2 <HAL_ADC_Init+0x15a>
 800268c:	486e      	ldr	r0, [pc, #440]	; (8002848 <HAL_ADC_Init+0x2f0>)
 800268e:	f7ff ff29 	bl	80024e4 <LL_ADC_IsEnabled>
 8002692:	4604      	mov	r4, r0
 8002694:	486d      	ldr	r0, [pc, #436]	; (800284c <HAL_ADC_Init+0x2f4>)
 8002696:	f7ff ff25 	bl	80024e4 <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	431c      	orrs	r4, r3
 800269e:	486c      	ldr	r0, [pc, #432]	; (8002850 <HAL_ADC_Init+0x2f8>)
 80026a0:	f7ff ff20 	bl	80024e4 <LL_ADC_IsEnabled>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4323      	orrs	r3, r4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026be:	d004      	beq.n	80026ca <HAL_ADC_Init+0x172>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a5f      	ldr	r2, [pc, #380]	; (8002844 <HAL_ADC_Init+0x2ec>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Init+0x176>
 80026ca:	4a62      	ldr	r2, [pc, #392]	; (8002854 <HAL_ADC_Init+0x2fc>)
 80026cc:	e000      	b.n	80026d0 <HAL_ADC_Init+0x178>
 80026ce:	4a62      	ldr	r2, [pc, #392]	; (8002858 <HAL_ADC_Init+0x300>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f7ff fd68 	bl	80021ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7f5b      	ldrb	r3, [r3, #29]
 80026e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002706:	2b01      	cmp	r3, #1
 8002708:	d106      	bne.n	8002718 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	045b      	lsls	r3, r3, #17
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	4b48      	ldr	r3, [pc, #288]	; (800285c <HAL_ADC_Init+0x304>)
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	430b      	orrs	r3, r1
 8002746:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fee4 	bl	8002530 <LL_ADC_INJ_IsConversionOngoing>
 8002768:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d17f      	bne.n	8002870 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d17c      	bne.n	8002870 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800277a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002782:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002792:	f023 0302 	bic.w	r3, r3, #2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	69b9      	ldr	r1, [r7, #24]
 800279c:	430b      	orrs	r3, r1
 800279e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d017      	beq.n	80027d8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6911      	ldr	r1, [r2, #16]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027d6:	e013      	b.n	8002800 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002806:	2b01      	cmp	r3, #1
 8002808:	d12a      	bne.n	8002860 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002820:	4311      	orrs	r1, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800282c:	430a      	orrs	r2, r1
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	611a      	str	r2, [r3, #16]
 800283a:	e019      	b.n	8002870 <HAL_ADC_Init+0x318>
 800283c:	20000000 	.word	0x20000000
 8002840:	053e2d63 	.word	0x053e2d63
 8002844:	50000100 	.word	0x50000100
 8002848:	50000400 	.word	0x50000400
 800284c:	50000500 	.word	0x50000500
 8002850:	50000600 	.word	0x50000600
 8002854:	50000300 	.word	0x50000300
 8002858:	50000700 	.word	0x50000700
 800285c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d10c      	bne.n	8002892 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f023 010f 	bic.w	r1, r3, #15
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	1e5a      	subs	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
 8002890:	e007      	b.n	80028a2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 020f 	bic.w	r2, r2, #15
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	f023 0303 	bic.w	r3, r3, #3
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80028b2:	e007      	b.n	80028c4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	f043 0210 	orr.w	r2, r3, #16
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd90      	pop	{r4, r7, pc}
 80028ce:	bf00      	nop

080028d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b0b6      	sub	sp, #216	; 0xd8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x24>
 80028ee:	2302      	movs	r3, #2
 80028f0:	f000 bc13 	b.w	800311a <HAL_ADC_ConfigChannel+0x84a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fe02 	bl	800250a <LL_ADC_REG_IsConversionOngoing>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 83f3 	bne.w	80030f4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	f7ff fd18 	bl	8002350 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fdf0 	bl	800250a <LL_ADC_REG_IsConversionOngoing>
 800292a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fdfc 	bl	8002530 <LL_ADC_INJ_IsConversionOngoing>
 8002938:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800293c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 81d9 	bne.w	8002cf8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002946:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 81d4 	bne.w	8002cf8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002958:	d10f      	bne.n	800297a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	4619      	mov	r1, r3
 8002966:	f7ff fd1f 	bl	80023a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fcd9 	bl	800232a <LL_ADC_SetSamplingTimeCommonConfig>
 8002978:	e00e      	b.n	8002998 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	461a      	mov	r2, r3
 8002988:	f7ff fd0e 	bl	80023a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fcc9 	bl	800232a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	08db      	lsrs	r3, r3, #3
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d022      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6919      	ldr	r1, [r3, #16]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029ca:	f7ff fc23 	bl	8002214 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6919      	ldr	r1, [r3, #16]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	461a      	mov	r2, r3
 80029dc:	f7ff fc6f 	bl	80022be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d102      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x126>
 80029f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f4:	e000      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x128>
 80029f6:	2300      	movs	r3, #0
 80029f8:	461a      	mov	r2, r3
 80029fa:	f7ff fc7b 	bl	80022f4 <LL_ADC_SetOffsetSaturation>
 80029fe:	e17b      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fc28 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x15c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fc1d 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	f003 021f 	and.w	r2, r3, #31
 8002a2a:	e01e      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x19a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fc12 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	e004      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x1b2>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	0e9b      	lsrs	r3, r3, #26
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	e018      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x1e4>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	e004      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d106      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fbe1 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fbc5 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x222>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fbba 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	0e9b      	lsrs	r3, r3, #26
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	e01e      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x260>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fbaf 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002b20:	2320      	movs	r3, #32
 8002b22:	e004      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x278>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	e018      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x2aa>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e004      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d106      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2200      	movs	r2, #0
 8002b84:	2101      	movs	r1, #1
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fb7e 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2102      	movs	r1, #2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fb62 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10a      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x2e8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fb57 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	f003 021f 	and.w	r2, r3, #31
 8002bb6:	e01e      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x326>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fb4c 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e004      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x33e>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0e9b      	lsrs	r3, r3, #26
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	e016      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x36c>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e004      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d106      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2102      	movs	r1, #2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fb1d 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2103      	movs	r1, #3
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fb01 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x3aa>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2103      	movs	r1, #3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff faf6 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002c70:	4603      	mov	r3, r0
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	e017      	b.n	8002caa <HAL_ADC_ConfigChannel+0x3da>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2103      	movs	r1, #3
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff faeb 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c94:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e003      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x3f2>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	e011      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x416>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002cda:	2320      	movs	r3, #32
 8002cdc:	e003      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d106      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2103      	movs	r1, #3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fac8 	bl	8002288 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fbf1 	bl	80024e4 <LL_ADC_IsEnabled>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f040 813d 	bne.w	8002f84 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	461a      	mov	r2, r3
 8002d18:	f7ff fb72 	bl	8002400 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4aa2      	ldr	r2, [pc, #648]	; (8002fac <HAL_ADC_ConfigChannel+0x6dc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	f040 812e 	bne.w	8002f84 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x480>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0e9b      	lsrs	r3, r3, #26
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	bf94      	ite	ls
 8002d48:	2301      	movls	r3, #1
 8002d4a:	2300      	movhi	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e019      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x4b4>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d60:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e003      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2b09      	cmp	r3, #9
 8002d7c:	bf94      	ite	ls
 8002d7e:	2301      	movls	r3, #1
 8002d80:	2300      	movhi	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d079      	beq.n	8002e7c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x4d4>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	069b      	lsls	r3, r3, #26
 8002d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da2:	e015      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x500>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	069b      	lsls	r3, r3, #26
 8002dcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x520>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	e017      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x550>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e003      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	ea42 0103 	orr.w	r1, r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x576>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	051b      	lsls	r3, r3, #20
 8002e44:	e018      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x5a8>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e003      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	e07e      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x5c8>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	3301      	adds	r3, #1
 8002e90:	069b      	lsls	r3, r3, #26
 8002e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e96:	e015      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x5f4>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e003      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	069b      	lsls	r3, r3, #26
 8002ec0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x614>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0e9b      	lsrs	r3, r3, #26
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	e017      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x644>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	61fb      	str	r3, [r7, #28]
  return result;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e003      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	2101      	movs	r1, #1
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	ea42 0103 	orr.w	r1, r2, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x670>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0e9b      	lsrs	r3, r3, #26
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	3b1e      	subs	r3, #30
 8002f38:	051b      	lsls	r3, r3, #20
 8002f3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	e01b      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x6a8>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	613b      	str	r3, [r7, #16]
  return result;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e003      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f003 021f 	and.w	r2, r3, #31
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b1e      	subs	r3, #30
 8002f72:	051b      	lsls	r3, r3, #20
 8002f74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	6892      	ldr	r2, [r2, #8]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f7ff fa12 	bl	80023a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_ADC_ConfigChannel+0x6e0>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80be 	beq.w	800310e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f9a:	d004      	beq.n	8002fa6 <HAL_ADC_ConfigChannel+0x6d6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <HAL_ADC_ConfigChannel+0x6e4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10a      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x6ec>
 8002fa6:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <HAL_ADC_ConfigChannel+0x6e8>)
 8002fa8:	e009      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x6ee>
 8002faa:	bf00      	nop
 8002fac:	407f0000 	.word	0x407f0000
 8002fb0:	80080000 	.word	0x80080000
 8002fb4:	50000100 	.word	0x50000100
 8002fb8:	50000300 	.word	0x50000300
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <HAL_ADC_ConfigChannel+0x854>)
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff f91a 	bl	80021f8 <LL_ADC_GetCommonPathInternalCh>
 8002fc4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a56      	ldr	r2, [pc, #344]	; (8003128 <HAL_ADC_ConfigChannel+0x858>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0x70c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a55      	ldr	r2, [pc, #340]	; (800312c <HAL_ADC_ConfigChannel+0x85c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d13a      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d134      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ff0:	d005      	beq.n	8002ffe <HAL_ADC_ConfigChannel+0x72e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a4e      	ldr	r2, [pc, #312]	; (8003130 <HAL_ADC_ConfigChannel+0x860>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	f040 8085 	bne.w	8003108 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003006:	d004      	beq.n	8003012 <HAL_ADC_ConfigChannel+0x742>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a49      	ldr	r2, [pc, #292]	; (8003134 <HAL_ADC_ConfigChannel+0x864>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x746>
 8003012:	4a49      	ldr	r2, [pc, #292]	; (8003138 <HAL_ADC_ConfigChannel+0x868>)
 8003014:	e000      	b.n	8003018 <HAL_ADC_ConfigChannel+0x748>
 8003016:	4a43      	ldr	r2, [pc, #268]	; (8003124 <HAL_ADC_ConfigChannel+0x854>)
 8003018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800301c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f7ff f8d5 	bl	80021d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003028:	4b44      	ldr	r3, [pc, #272]	; (800313c <HAL_ADC_ConfigChannel+0x86c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	4a44      	ldr	r2, [pc, #272]	; (8003140 <HAL_ADC_ConfigChannel+0x870>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003042:	e002      	b.n	800304a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3b01      	subs	r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f9      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003050:	e05a      	b.n	8003108 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <HAL_ADC_ConfigChannel+0x874>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d125      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800305c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11f      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a31      	ldr	r2, [pc, #196]	; (8003134 <HAL_ADC_ConfigChannel+0x864>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d104      	bne.n	800307c <HAL_ADC_ConfigChannel+0x7ac>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a34      	ldr	r2, [pc, #208]	; (8003148 <HAL_ADC_ConfigChannel+0x878>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d047      	beq.n	800310c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003084:	d004      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x7c0>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <HAL_ADC_ConfigChannel+0x864>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x7c4>
 8003090:	4a29      	ldr	r2, [pc, #164]	; (8003138 <HAL_ADC_ConfigChannel+0x868>)
 8003092:	e000      	b.n	8003096 <HAL_ADC_ConfigChannel+0x7c6>
 8003094:	4a23      	ldr	r2, [pc, #140]	; (8003124 <HAL_ADC_ConfigChannel+0x854>)
 8003096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309e:	4619      	mov	r1, r3
 80030a0:	4610      	mov	r0, r2
 80030a2:	f7ff f896 	bl	80021d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030a6:	e031      	b.n	800310c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a27      	ldr	r2, [pc, #156]	; (800314c <HAL_ADC_ConfigChannel+0x87c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d12d      	bne.n	800310e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d127      	bne.n	800310e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <HAL_ADC_ConfigChannel+0x864>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d0:	d004      	beq.n	80030dc <HAL_ADC_ConfigChannel+0x80c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a17      	ldr	r2, [pc, #92]	; (8003134 <HAL_ADC_ConfigChannel+0x864>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d101      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x810>
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_ADC_ConfigChannel+0x868>)
 80030de:	e000      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x812>
 80030e0:	4a10      	ldr	r2, [pc, #64]	; (8003124 <HAL_ADC_ConfigChannel+0x854>)
 80030e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030ea:	4619      	mov	r1, r3
 80030ec:	4610      	mov	r0, r2
 80030ee:	f7ff f870 	bl	80021d2 <LL_ADC_SetCommonPathInternalCh>
 80030f2:	e00c      	b.n	800310e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003106:	e002      	b.n	800310e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003108:	bf00      	nop
 800310a:	e000      	b.n	800310e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800310c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003116:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800311a:	4618      	mov	r0, r3
 800311c:	37d8      	adds	r7, #216	; 0xd8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	50000700 	.word	0x50000700
 8003128:	c3210000 	.word	0xc3210000
 800312c:	90c00010 	.word	0x90c00010
 8003130:	50000600 	.word	0x50000600
 8003134:	50000100 	.word	0x50000100
 8003138:	50000300 	.word	0x50000300
 800313c:	20000000 	.word	0x20000000
 8003140:	053e2d63 	.word	0x053e2d63
 8003144:	c7520000 	.word	0xc7520000
 8003148:	50000500 	.word	0x50000500
 800314c:	cb840000 	.word	0xcb840000

08003150 <LL_ADC_IsEnabled>:
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <LL_ADC_IsEnabled+0x18>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <LL_ADC_IsEnabled+0x1a>
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <LL_ADC_REG_IsConversionOngoing>:
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d101      	bne.n	800318e <LL_ADC_REG_IsConversionOngoing+0x18>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b0a1      	sub	sp, #132	; 0x84
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e0e7      	b.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80031c2:	2300      	movs	r3, #0
 80031c4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80031c6:	2300      	movs	r3, #0
 80031c8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d2:	d102      	bne.n	80031da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	e009      	b.n	80031ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6e      	ldr	r2, [pc, #440]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d102      	bne.n	80031ea <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80031e4:	4b6d      	ldr	r3, [pc, #436]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	e001      	b.n	80031ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10b      	bne.n	800320c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	f043 0220 	orr.w	r2, r3, #32
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0be      	b.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ffb1 	bl	8003176 <LL_ADC_REG_IsConversionOngoing>
 8003214:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ffab 	bl	8003176 <LL_ADC_REG_IsConversionOngoing>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 80a0 	bne.w	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 809c 	bne.w	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003238:	d004      	beq.n	8003244 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a55      	ldr	r2, [pc, #340]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003244:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003246:	e000      	b.n	800324a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003248:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800324a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d04b      	beq.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003266:	035b      	lsls	r3, r3, #13
 8003268:	430b      	orrs	r3, r1
 800326a:	431a      	orrs	r2, r3
 800326c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003278:	d004      	beq.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a45      	ldr	r2, [pc, #276]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d10f      	bne.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003284:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003288:	f7ff ff62 	bl	8003150 <LL_ADC_IsEnabled>
 800328c:	4604      	mov	r4, r0
 800328e:	4841      	ldr	r0, [pc, #260]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003290:	f7ff ff5e 	bl	8003150 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e012      	b.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80032a4:	483c      	ldr	r0, [pc, #240]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032a6:	f7ff ff53 	bl	8003150 <LL_ADC_IsEnabled>
 80032aa:	4604      	mov	r4, r0
 80032ac:	483b      	ldr	r0, [pc, #236]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032ae:	f7ff ff4f 	bl	8003150 <LL_ADC_IsEnabled>
 80032b2:	4603      	mov	r3, r0
 80032b4:	431c      	orrs	r4, r3
 80032b6:	483c      	ldr	r0, [pc, #240]	; (80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80032b8:	f7ff ff4a 	bl	8003150 <LL_ADC_IsEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	4323      	orrs	r3, r4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d056      	beq.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032d6:	f023 030f 	bic.w	r3, r3, #15
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	6811      	ldr	r1, [r2, #0]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	6892      	ldr	r2, [r2, #8]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	431a      	orrs	r2, r3
 80032e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032ea:	e047      	b.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003300:	d004      	beq.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a23      	ldr	r2, [pc, #140]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d10f      	bne.n	800332c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800330c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003310:	f7ff ff1e 	bl	8003150 <LL_ADC_IsEnabled>
 8003314:	4604      	mov	r4, r0
 8003316:	481f      	ldr	r0, [pc, #124]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003318:	f7ff ff1a 	bl	8003150 <LL_ADC_IsEnabled>
 800331c:	4603      	mov	r3, r0
 800331e:	4323      	orrs	r3, r4
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e012      	b.n	8003352 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800332c:	481a      	ldr	r0, [pc, #104]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800332e:	f7ff ff0f 	bl	8003150 <LL_ADC_IsEnabled>
 8003332:	4604      	mov	r4, r0
 8003334:	4819      	ldr	r0, [pc, #100]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003336:	f7ff ff0b 	bl	8003150 <LL_ADC_IsEnabled>
 800333a:	4603      	mov	r3, r0
 800333c:	431c      	orrs	r4, r3
 800333e:	481a      	ldr	r0, [pc, #104]	; (80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003340:	f7ff ff06 	bl	8003150 <LL_ADC_IsEnabled>
 8003344:	4603      	mov	r3, r0
 8003346:	4323      	orrs	r3, r4
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800335e:	f023 030f 	bic.w	r3, r3, #15
 8003362:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003364:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003366:	e009      	b.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800337a:	e000      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800337c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003386:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800338a:	4618      	mov	r0, r3
 800338c:	3784      	adds	r7, #132	; 0x84
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}
 8003392:	bf00      	nop
 8003394:	50000100 	.word	0x50000100
 8003398:	50000400 	.word	0x50000400
 800339c:	50000500 	.word	0x50000500
 80033a0:	50000300 	.word	0x50000300
 80033a4:	50000700 	.word	0x50000700
 80033a8:	50000600 	.word	0x50000600

080033ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c8:	4013      	ands	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033de:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	60d3      	str	r3, [r2, #12]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <__NVIC_GetPriorityGrouping+0x18>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f003 0307 	and.w	r3, r3, #7
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	2b00      	cmp	r3, #0
 8003420:	db0b      	blt.n	800343a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	f003 021f 	and.w	r2, r3, #31
 8003428:	4907      	ldr	r1, [pc, #28]	; (8003448 <__NVIC_EnableIRQ+0x38>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2001      	movs	r0, #1
 8003432:	fa00 f202 	lsl.w	r2, r0, r2
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000e100 	.word	0xe000e100

0800344c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	2b00      	cmp	r3, #0
 800345e:	db0a      	blt.n	8003476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	490c      	ldr	r1, [pc, #48]	; (8003498 <__NVIC_SetPriority+0x4c>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	440b      	add	r3, r1
 8003470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003474:	e00a      	b.n	800348c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4908      	ldr	r1, [pc, #32]	; (800349c <__NVIC_SetPriority+0x50>)
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	3b04      	subs	r3, #4
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	440b      	add	r3, r1
 800348a:	761a      	strb	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000e100 	.word	0xe000e100
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f1c3 0307 	rsb	r3, r3, #7
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	bf28      	it	cs
 80034be:	2304      	movcs	r3, #4
 80034c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d902      	bls.n	80034d0 <NVIC_EncodePriority+0x30>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3b03      	subs	r3, #3
 80034ce:	e000      	b.n	80034d2 <NVIC_EncodePriority+0x32>
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	401a      	ands	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43d9      	mvns	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	4313      	orrs	r3, r2
         );
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ff4c 	bl	80033ac <__NVIC_SetPriorityGrouping>
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800352a:	f7ff ff63 	bl	80033f4 <__NVIC_GetPriorityGrouping>
 800352e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	6978      	ldr	r0, [r7, #20]
 8003536:	f7ff ffb3 	bl	80034a0 <NVIC_EncodePriority>
 800353a:	4602      	mov	r2, r0
 800353c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ff82 	bl	800344c <__NVIC_SetPriority>
}
 8003548:	bf00      	nop
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff ff56 	bl	8003410 <__NVIC_EnableIRQ>
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e014      	b.n	80035a8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	791b      	ldrb	r3, [r3, #4]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d105      	bne.n	8003594 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe f93a 	bl	8001808 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c6:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01d      	beq.n	800360e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d018      	beq.n	800360e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2204      	movs	r2, #4
 80035e0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003606:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f827 	bl	800365c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01d      	beq.n	8003654 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d018      	beq.n	8003654 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2204      	movs	r2, #4
 8003626:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f043 0202 	orr.w	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800363c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800364c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f9c6 	bl	80039e0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_DAC_ConfigChannel+0x1c>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e19e      	b.n	80039ce <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	795b      	ldrb	r3, [r3, #5]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_DAC_ConfigChannel+0x2c>
 8003698:	2302      	movs	r3, #2
 800369a:	e198      	b.n	80039ce <HAL_DAC_ConfigChannel+0x35e>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2202      	movs	r2, #2
 80036a6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d17a      	bne.n	80037a6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80036b0:	f7fe fd70 	bl	8002194 <HAL_GetTick>
 80036b4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d13d      	bne.n	8003738 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036bc:	e018      	b.n	80036f0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036be:	f7fe fd69 	bl	8002194 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d911      	bls.n	80036f0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f043 0208 	orr.w	r2, r3, #8
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2203      	movs	r2, #3
 80036ea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e16e      	b.n	80039ce <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1df      	bne.n	80036be <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
 8003708:	e020      	b.n	800374c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800370a:	f7fe fd43 	bl	8002194 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d90f      	bls.n	8003738 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	2b00      	cmp	r3, #0
 8003720:	da0a      	bge.n	8003738 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f043 0208 	orr.w	r2, r3, #8
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2203      	movs	r2, #3
 8003732:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e14a      	b.n	80039ce <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	2b00      	cmp	r3, #0
 8003740:	dbe3      	blt.n	800370a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	ea02 0103 	and.w	r1, r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	409a      	lsls	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	21ff      	movs	r1, #255	; 0xff
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	ea02 0103 	and.w	r1, r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	409a      	lsls	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d11d      	bne.n	80037ea <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	221f      	movs	r2, #31
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c6:	4013      	ands	r3, r2
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037de:	4313      	orrs	r3, r2
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2207      	movs	r2, #7
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003802:	4013      	ands	r3, r2
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d102      	bne.n	8003814 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800380e:	2300      	movs	r3, #0
 8003810:	623b      	str	r3, [r7, #32]
 8003812:	e00f      	b.n	8003834 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d102      	bne.n	8003822 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800381c:	2301      	movs	r3, #1
 800381e:	623b      	str	r3, [r7, #32]
 8003820:	e008      	b.n	8003834 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800382a:	2301      	movs	r3, #1
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	e001      	b.n	8003834 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003830:	2300      	movs	r3, #0
 8003832:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	6a3a      	ldr	r2, [r7, #32]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003856:	4013      	ands	r3, r2
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	791b      	ldrb	r3, [r3, #4]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d102      	bne.n	8003868 <HAL_DAC_ConfigChannel+0x1f8>
 8003862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003866:	e000      	b.n	800386a <HAL_DAC_ConfigChannel+0x1fa>
 8003868:	2300      	movs	r3, #0
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	4013      	ands	r3, r2
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	795b      	ldrb	r3, [r3, #5]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d102      	bne.n	8003894 <HAL_DAC_ConfigChannel+0x224>
 800388e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003892:	e000      	b.n	8003896 <HAL_DAC_ConfigChannel+0x226>
 8003894:	2300      	movs	r3, #0
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d114      	bne.n	80038d6 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80038ac:	f001 f920 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 80038b0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4a48      	ldr	r2, [pc, #288]	; (80039d8 <HAL_DAC_ConfigChannel+0x368>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d904      	bls.n	80038c4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	e00f      	b.n	80038e4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4a45      	ldr	r2, [pc, #276]	; (80039dc <HAL_DAC_ConfigChannel+0x36c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d90a      	bls.n	80038e2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	e006      	b.n	80038e4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	4313      	orrs	r3, r2
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
 80038e0:	e000      	b.n	80038e4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80038e2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f2:	4313      	orrs	r3, r2
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6819      	ldr	r1, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43da      	mvns	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	400a      	ands	r2, r1
 800391a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	4013      	ands	r3, r2
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	4313      	orrs	r3, r2
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6819      	ldr	r1, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	22c0      	movs	r2, #192	; 0xc0
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43da      	mvns	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	400a      	ands	r2, r1
 8003974:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	ea02 0103 	and.w	r1, r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	409a      	lsls	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80039cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3728      	adds	r7, #40	; 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	09896800 	.word	0x09896800
 80039dc:	04c4b400 	.word	0x04c4b400

080039e0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a02:	e15a      	b.n	8003cba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 814c 	beq.w	8003cb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d005      	beq.n	8003a34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d130      	bne.n	8003a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 0201 	and.w	r2, r3, #1
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d017      	beq.n	8003ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	2203      	movs	r2, #3
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d123      	bne.n	8003b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	08da      	lsrs	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3208      	adds	r2, #8
 8003ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	220f      	movs	r2, #15
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	08da      	lsrs	r2, r3, #3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3208      	adds	r2, #8
 8003b20:	6939      	ldr	r1, [r7, #16]
 8003b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2203      	movs	r2, #3
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0203 	and.w	r2, r3, #3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80a6 	beq.w	8003cb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b68:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <HAL_GPIO_Init+0x2e4>)
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6c:	4a5a      	ldr	r2, [pc, #360]	; (8003cd8 <HAL_GPIO_Init+0x2e4>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6613      	str	r3, [r2, #96]	; 0x60
 8003b74:	4b58      	ldr	r3, [pc, #352]	; (8003cd8 <HAL_GPIO_Init+0x2e4>)
 8003b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b80:	4a56      	ldr	r2, [pc, #344]	; (8003cdc <HAL_GPIO_Init+0x2e8>)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	3302      	adds	r3, #2
 8003b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	220f      	movs	r2, #15
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003baa:	d01f      	beq.n	8003bec <HAL_GPIO_Init+0x1f8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a4c      	ldr	r2, [pc, #304]	; (8003ce0 <HAL_GPIO_Init+0x2ec>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d019      	beq.n	8003be8 <HAL_GPIO_Init+0x1f4>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a4b      	ldr	r2, [pc, #300]	; (8003ce4 <HAL_GPIO_Init+0x2f0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d013      	beq.n	8003be4 <HAL_GPIO_Init+0x1f0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a4a      	ldr	r2, [pc, #296]	; (8003ce8 <HAL_GPIO_Init+0x2f4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00d      	beq.n	8003be0 <HAL_GPIO_Init+0x1ec>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a49      	ldr	r2, [pc, #292]	; (8003cec <HAL_GPIO_Init+0x2f8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <HAL_GPIO_Init+0x1e8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a48      	ldr	r2, [pc, #288]	; (8003cf0 <HAL_GPIO_Init+0x2fc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d101      	bne.n	8003bd8 <HAL_GPIO_Init+0x1e4>
 8003bd4:	2305      	movs	r3, #5
 8003bd6:	e00a      	b.n	8003bee <HAL_GPIO_Init+0x1fa>
 8003bd8:	2306      	movs	r3, #6
 8003bda:	e008      	b.n	8003bee <HAL_GPIO_Init+0x1fa>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	e006      	b.n	8003bee <HAL_GPIO_Init+0x1fa>
 8003be0:	2303      	movs	r3, #3
 8003be2:	e004      	b.n	8003bee <HAL_GPIO_Init+0x1fa>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e002      	b.n	8003bee <HAL_GPIO_Init+0x1fa>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_GPIO_Init+0x1fa>
 8003bec:	2300      	movs	r3, #0
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	f002 0203 	and.w	r2, r2, #3
 8003bf4:	0092      	lsls	r2, r2, #2
 8003bf6:	4093      	lsls	r3, r2
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bfe:	4937      	ldr	r1, [pc, #220]	; (8003cdc <HAL_GPIO_Init+0x2e8>)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c0c:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <HAL_GPIO_Init+0x300>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c30:	4a30      	ldr	r2, [pc, #192]	; (8003cf4 <HAL_GPIO_Init+0x300>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <HAL_GPIO_Init+0x300>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c5a:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <HAL_GPIO_Init+0x300>)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c60:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_GPIO_Init+0x300>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_GPIO_Init+0x300>)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <HAL_GPIO_Init+0x300>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cae:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <HAL_GPIO_Init+0x300>)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f ae9d 	bne.w	8003a04 <HAL_GPIO_Init+0x10>
  }
}
 8003cca:	bf00      	nop
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	48000400 	.word	0x48000400
 8003ce4:	48000800 	.word	0x48000800
 8003ce8:	48000c00 	.word	0x48000c00
 8003cec:	48001000 	.word	0x48001000
 8003cf0:	48001400 	.word	0x48001400
 8003cf4:	40010400 	.word	0x40010400

08003cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
 8003d04:	4613      	mov	r3, r2
 8003d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d08:	787b      	ldrb	r3, [r7, #1]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d0e:	887a      	ldrh	r2, [r7, #2]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d14:	e002      	b.n	8003d1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0bb      	b.n	8003eb6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d101      	bne.n	8003d4e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e0b3      	b.n	8003eb6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d101      	bne.n	8003d5e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0ab      	b.n	8003eb6 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5e:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <HAL_OPAMP_Init+0x198>)
 8003d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d62:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <HAL_OPAMP_Init+0x198>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	6613      	str	r3, [r2, #96]	; 0x60
 8003d6a:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <HAL_OPAMP_Init+0x198>)
 8003d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd fde0 	bl	8001950 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d003      	beq.n	8003da0 <HAL_OPAMP_Init+0x78>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b60      	cmp	r3, #96	; 0x60
 8003d9e:	d133      	bne.n	8003e08 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 0110 	bic.w	r1, r3, #16
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <HAL_OPAMP_Init+0x19c>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6851      	ldr	r1, [r2, #4]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6892      	ldr	r2, [r2, #8]
 8003dc8:	4311      	orrs	r1, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6912      	ldr	r2, [r2, #16]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	7d09      	ldrb	r1, [r1, #20]
 8003dd4:	2901      	cmp	r1, #1
 8003dd6:	d102      	bne.n	8003dde <HAL_OPAMP_Init+0xb6>
 8003dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ddc:	e000      	b.n	8003de0 <HAL_OPAMP_Init+0xb8>
 8003dde:	2100      	movs	r1, #0
 8003de0:	4311      	orrs	r1, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003de6:	4311      	orrs	r1, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003dec:	4311      	orrs	r1, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003df2:	04d2      	lsls	r2, r2, #19
 8003df4:	4311      	orrs	r1, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dfa:	0612      	lsls	r2, r2, #24
 8003dfc:	4311      	orrs	r1, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e035      	b.n	8003e74 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 0110 	bic.w	r1, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <HAL_OPAMP_Init+0x19c>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6851      	ldr	r1, [r2, #4]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6892      	ldr	r2, [r2, #8]
 8003e30:	4311      	orrs	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68d2      	ldr	r2, [r2, #12]
 8003e36:	4311      	orrs	r1, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6912      	ldr	r2, [r2, #16]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	7d09      	ldrb	r1, [r1, #20]
 8003e42:	2901      	cmp	r1, #1
 8003e44:	d102      	bne.n	8003e4c <HAL_OPAMP_Init+0x124>
 8003e46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e4a:	e000      	b.n	8003e4e <HAL_OPAMP_Init+0x126>
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4311      	orrs	r1, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e54:	4311      	orrs	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e5a:	4311      	orrs	r1, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e60:	04d2      	lsls	r2, r2, #19
 8003e62:	4311      	orrs	r1, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e68:	0612      	lsls	r2, r2, #24
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	db10      	blt.n	8003ea0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699a      	ldr	r2, [r3, #24]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	e0003e11 	.word	0xe0003e11

08003ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d141      	bne.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ed6:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d131      	bne.n	8003f48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ee4:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eea:	4a46      	ldr	r2, [pc, #280]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ef4:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003efc:	4a41      	ldr	r2, [pc, #260]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f04:	4b40      	ldr	r3, [pc, #256]	; (8004008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2232      	movs	r2, #50	; 0x32
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	4a3f      	ldr	r2, [pc, #252]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	0c9b      	lsrs	r3, r3, #18
 8003f16:	3301      	adds	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f1a:	e002      	b.n	8003f22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f22:	4b38      	ldr	r3, [pc, #224]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2e:	d102      	bne.n	8003f36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f2      	bne.n	8003f1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d158      	bne.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e057      	b.n	8003ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f48:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4e:	4a2d      	ldr	r2, [pc, #180]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f58:	e04d      	b.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f60:	d141      	bne.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f62:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d131      	bne.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f70:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f76:	4a23      	ldr	r2, [pc, #140]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f80:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f88:	4a1e      	ldr	r2, [pc, #120]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2232      	movs	r2, #50	; 0x32
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	4a1c      	ldr	r2, [pc, #112]	; (800400c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	0c9b      	lsrs	r3, r3, #18
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa6:	e002      	b.n	8003fae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fae:	4b15      	ldr	r3, [pc, #84]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d102      	bne.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f2      	bne.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d112      	bne.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e011      	b.n	8003ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fe4:	e007      	b.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fe6:	4b07      	ldr	r3, [pc, #28]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fee:	4a05      	ldr	r2, [pc, #20]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ff4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40007000 	.word	0x40007000
 8004008:	20000000 	.word	0x20000000
 800400c:	431bde83 	.word	0x431bde83

08004010 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af02      	add	r7, sp, #8
 8004016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004018:	f7fe f8bc 	bl	8002194 <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e069      	b.n	80040fc <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10b      	bne.n	800404c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7fd fd3f 	bl	8001ac0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004042:	f241 3188 	movw	r1, #5000	; 0x1388
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f85e 	bl	8004108 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	3b01      	subs	r3, #1
 800405c:	021a      	lsls	r2, r3, #8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	2120      	movs	r1, #32
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f856 	bl	8004124 <QSPI_WaitFlagStateUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800407c:	7afb      	ldrb	r3, [r7, #11]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d137      	bne.n	80040f2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800408c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6852      	ldr	r2, [r2, #4]
 8004094:	0611      	lsls	r1, r2, #24
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68d2      	ldr	r2, [r2, #12]
 800409a:	4311      	orrs	r1, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	69d2      	ldr	r2, [r2, #28]
 80040a0:	4311      	orrs	r1, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6a12      	ldr	r2, [r2, #32]
 80040a6:	4311      	orrs	r1, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	4b13      	ldr	r3, [pc, #76]	; (8004104 <HAL_QSPI_Init+0xf4>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6912      	ldr	r2, [r2, #16]
 80040be:	0411      	lsls	r1, r2, #16
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6952      	ldr	r2, [r2, #20]
 80040c4:	4311      	orrs	r1, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6992      	ldr	r2, [r2, #24]
 80040ca:	4311      	orrs	r1, r2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80040fa:	7afb      	ldrb	r3, [r7, #11]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	ffe0f8fe 	.word	0xffe0f8fe

08004108 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004134:	e01a      	b.n	800416c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800413c:	d016      	beq.n	800416c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7fe f829 	bl	8002194 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2204      	movs	r2, #4
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	f043 0201 	orr.w	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e00e      	b.n	800418a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	429a      	cmp	r2, r3
 8004186:	d1d6      	bne.n	8004136 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e2fe      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d075      	beq.n	800429e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b2:	4b97      	ldr	r3, [pc, #604]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041bc:	4b94      	ldr	r3, [pc, #592]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d102      	bne.n	80041d2 <HAL_RCC_OscConfig+0x3e>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d002      	beq.n	80041d8 <HAL_RCC_OscConfig+0x44>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	4b8d      	ldr	r3, [pc, #564]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d05b      	beq.n	800429c <HAL_RCC_OscConfig+0x108>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d157      	bne.n	800429c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e2d9      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f8:	d106      	bne.n	8004208 <HAL_RCC_OscConfig+0x74>
 80041fa:	4b85      	ldr	r3, [pc, #532]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a84      	ldr	r2, [pc, #528]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e01d      	b.n	8004244 <HAL_RCC_OscConfig+0xb0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x98>
 8004212:	4b7f      	ldr	r3, [pc, #508]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7e      	ldr	r2, [pc, #504]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b7c      	ldr	r3, [pc, #496]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7b      	ldr	r2, [pc, #492]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e00b      	b.n	8004244 <HAL_RCC_OscConfig+0xb0>
 800422c:	4b78      	ldr	r3, [pc, #480]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a77      	ldr	r2, [pc, #476]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	4b75      	ldr	r3, [pc, #468]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a74      	ldr	r2, [pc, #464]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 800423e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d013      	beq.n	8004274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd ffa2 	bl	8002194 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004254:	f7fd ff9e 	bl	8002194 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e29e      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004266:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0xc0>
 8004272:	e014      	b.n	800429e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd ff8e 	bl	8002194 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427c:	f7fd ff8a 	bl	8002194 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e28a      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800428e:	4b60      	ldr	r3, [pc, #384]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0xe8>
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d075      	beq.n	8004396 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042aa:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b4:	4b56      	ldr	r3, [pc, #344]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d102      	bne.n	80042ca <HAL_RCC_OscConfig+0x136>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d002      	beq.n	80042d0 <HAL_RCC_OscConfig+0x13c>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d11f      	bne.n	8004310 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042d0:	4b4f      	ldr	r3, [pc, #316]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_RCC_OscConfig+0x154>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e25d      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e8:	4b49      	ldr	r3, [pc, #292]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	4946      	ldr	r1, [pc, #280]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042fc:	4b45      	ldr	r3, [pc, #276]	; (8004414 <HAL_RCC_OscConfig+0x280>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd fe49 	bl	8001f98 <HAL_InitTick>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d043      	beq.n	8004394 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e249      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d023      	beq.n	8004360 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004318:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 800431e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd ff36 	bl	8002194 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800432c:	f7fd ff32 	bl	8002194 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e232      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800433e:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434a:	4b31      	ldr	r3, [pc, #196]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	061b      	lsls	r3, r3, #24
 8004358:	492d      	ldr	r1, [pc, #180]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
 800435e:	e01a      	b.n	8004396 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004360:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2a      	ldr	r2, [pc, #168]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800436a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd ff12 	bl	8002194 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004374:	f7fd ff0e 	bl	8002194 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e20e      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004386:	4b22      	ldr	r3, [pc, #136]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x1e0>
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004394:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d041      	beq.n	8004426 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01c      	beq.n	80043e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043aa:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80043ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b0:	4a17      	ldr	r2, [pc, #92]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ba:	f7fd feeb 	bl	8002194 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c2:	f7fd fee7 	bl	8002194 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e1e7      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80043d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0ef      	beq.n	80043c2 <HAL_RCC_OscConfig+0x22e>
 80043e2:	e020      	b.n	8004426 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80043e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <HAL_RCC_OscConfig+0x27c>)
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fd fece 	bl	8002194 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043fa:	e00d      	b.n	8004418 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fc:	f7fd feca 	bl	8002194 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d906      	bls.n	8004418 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e1ca      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
 8004414:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004418:	4b8c      	ldr	r3, [pc, #560]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 800441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ea      	bne.n	80043fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 80a6 	beq.w	8004580 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004434:	2300      	movs	r3, #0
 8004436:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004438:	4b84      	ldr	r3, [pc, #528]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_OscConfig+0x2b4>
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x2b6>
 8004448:	2300      	movs	r3, #0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00d      	beq.n	800446a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	4b7f      	ldr	r3, [pc, #508]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	4a7e      	ldr	r2, [pc, #504]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6593      	str	r3, [r2, #88]	; 0x58
 800445a:	4b7c      	ldr	r3, [pc, #496]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004466:	2301      	movs	r3, #1
 8004468:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446a:	4b79      	ldr	r3, [pc, #484]	; (8004650 <HAL_RCC_OscConfig+0x4bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d118      	bne.n	80044a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004476:	4b76      	ldr	r3, [pc, #472]	; (8004650 <HAL_RCC_OscConfig+0x4bc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a75      	ldr	r2, [pc, #468]	; (8004650 <HAL_RCC_OscConfig+0x4bc>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004482:	f7fd fe87 	bl	8002194 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448a:	f7fd fe83 	bl	8002194 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e183      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449c:	4b6c      	ldr	r3, [pc, #432]	; (8004650 <HAL_RCC_OscConfig+0x4bc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d108      	bne.n	80044c2 <HAL_RCC_OscConfig+0x32e>
 80044b0:	4b66      	ldr	r3, [pc, #408]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	4a65      	ldr	r2, [pc, #404]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044c0:	e024      	b.n	800450c <HAL_RCC_OscConfig+0x378>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b05      	cmp	r3, #5
 80044c8:	d110      	bne.n	80044ec <HAL_RCC_OscConfig+0x358>
 80044ca:	4b60      	ldr	r3, [pc, #384]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	4a5e      	ldr	r2, [pc, #376]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044da:	4b5c      	ldr	r3, [pc, #368]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	4a5a      	ldr	r2, [pc, #360]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ea:	e00f      	b.n	800450c <HAL_RCC_OscConfig+0x378>
 80044ec:	4b57      	ldr	r3, [pc, #348]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	4a56      	ldr	r2, [pc, #344]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044fc:	4b53      	ldr	r3, [pc, #332]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	4a52      	ldr	r2, [pc, #328]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 8004504:	f023 0304 	bic.w	r3, r3, #4
 8004508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d016      	beq.n	8004542 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fd fe3e 	bl	8002194 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fd fe3a 	bl	8002194 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	; 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e138      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004532:	4b46      	ldr	r3, [pc, #280]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ed      	beq.n	800451c <HAL_RCC_OscConfig+0x388>
 8004540:	e015      	b.n	800456e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004542:	f7fd fe27 	bl	8002194 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004548:	e00a      	b.n	8004560 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fd fe23 	bl	8002194 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	; 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e121      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004560:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1ed      	bne.n	800454a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800456e:	7ffb      	ldrb	r3, [r7, #31]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d105      	bne.n	8004580 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004574:	4b35      	ldr	r3, [pc, #212]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	4a34      	ldr	r2, [pc, #208]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 800457a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d03c      	beq.n	8004606 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01c      	beq.n	80045ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004594:	4b2d      	ldr	r3, [pc, #180]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 8004596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800459a:	4a2c      	ldr	r2, [pc, #176]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fd fdf6 	bl	8002194 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ac:	f7fd fdf2 	bl	8002194 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e0f2      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045be:	4b23      	ldr	r3, [pc, #140]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80045c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ef      	beq.n	80045ac <HAL_RCC_OscConfig+0x418>
 80045cc:	e01b      	b.n	8004606 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80045d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d4:	4a1d      	ldr	r2, [pc, #116]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fd fdd9 	bl	8002194 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e6:	f7fd fdd5 	bl	8002194 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e0d5      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045f8:	4b14      	ldr	r3, [pc, #80]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 80045fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1ef      	bne.n	80045e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80c9 	beq.w	80047a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b0c      	cmp	r3, #12
 800461a:	f000 8083 	beq.w	8004724 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d15e      	bne.n	80046e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <HAL_RCC_OscConfig+0x4b8>)
 800462c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fd fdaf 	bl	8002194 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004638:	e00c      	b.n	8004654 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463a:	f7fd fdab 	bl	8002194 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d905      	bls.n	8004654 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e0ab      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
 800464c:	40021000 	.word	0x40021000
 8004650:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004654:	4b55      	ldr	r3, [pc, #340]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ec      	bne.n	800463a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004660:	4b52      	ldr	r3, [pc, #328]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	4b52      	ldr	r3, [pc, #328]	; (80047b0 <HAL_RCC_OscConfig+0x61c>)
 8004666:	4013      	ands	r3, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6a11      	ldr	r1, [r2, #32]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004670:	3a01      	subs	r2, #1
 8004672:	0112      	lsls	r2, r2, #4
 8004674:	4311      	orrs	r1, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800467a:	0212      	lsls	r2, r2, #8
 800467c:	4311      	orrs	r1, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004682:	0852      	lsrs	r2, r2, #1
 8004684:	3a01      	subs	r2, #1
 8004686:	0552      	lsls	r2, r2, #21
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800468e:	0852      	lsrs	r2, r2, #1
 8004690:	3a01      	subs	r2, #1
 8004692:	0652      	lsls	r2, r2, #25
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800469a:	06d2      	lsls	r2, r2, #27
 800469c:	430a      	orrs	r2, r1
 800469e:	4943      	ldr	r1, [pc, #268]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a4:	4b41      	ldr	r3, [pc, #260]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a40      	ldr	r2, [pc, #256]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 80046aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046b0:	4b3e      	ldr	r3, [pc, #248]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a3d      	ldr	r2, [pc, #244]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 80046b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd fd6a 	bl	8002194 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fd fd66 	bl	8002194 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e066      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d6:	4b35      	ldr	r3, [pc, #212]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x530>
 80046e2:	e05e      	b.n	80047a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a30      	ldr	r2, [pc, #192]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 80046ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fd fd50 	bl	8002194 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fd fd4c 	bl	8002194 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e04c      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470a:	4b28      	ldr	r3, [pc, #160]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004716:	4b25      	ldr	r3, [pc, #148]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	4924      	ldr	r1, [pc, #144]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 800471c:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <HAL_RCC_OscConfig+0x620>)
 800471e:	4013      	ands	r3, r2
 8004720:	60cb      	str	r3, [r1, #12]
 8004722:	e03e      	b.n	80047a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e039      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004730:	4b1e      	ldr	r3, [pc, #120]	; (80047ac <HAL_RCC_OscConfig+0x618>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0203 	and.w	r2, r3, #3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	429a      	cmp	r2, r3
 8004742:	d12c      	bne.n	800479e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	3b01      	subs	r3, #1
 8004750:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d123      	bne.n	800479e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11b      	bne.n	800479e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d113      	bne.n	800479e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	3b01      	subs	r3, #1
 8004784:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d109      	bne.n	800479e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	3b01      	subs	r3, #1
 8004798:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d001      	beq.n	80047a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3720      	adds	r7, #32
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021000 	.word	0x40021000
 80047b0:	019f800c 	.word	0x019f800c
 80047b4:	feeefffc 	.word	0xfeeefffc

080047b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e11e      	b.n	8004a0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b91      	ldr	r3, [pc, #580]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d910      	bls.n	8004800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b8e      	ldr	r3, [pc, #568]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 020f 	bic.w	r2, r3, #15
 80047e6:	498c      	ldr	r1, [pc, #560]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b8a      	ldr	r3, [pc, #552]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e106      	b.n	8004a0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d073      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d129      	bne.n	8004868 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004814:	4b81      	ldr	r3, [pc, #516]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0f4      	b.n	8004a0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004824:	f000 f9fa 	bl	8004c1c <RCC_GetSysClockFreqFromPLLSource>
 8004828:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4a7c      	ldr	r2, [pc, #496]	; (8004a20 <HAL_RCC_ClockConfig+0x268>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d93f      	bls.n	80048b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004832:	4b7a      	ldr	r3, [pc, #488]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004846:	2b00      	cmp	r3, #0
 8004848:	d033      	beq.n	80048b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800484e:	2b00      	cmp	r3, #0
 8004850:	d12f      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004852:	4b72      	ldr	r3, [pc, #456]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485a:	4a70      	ldr	r2, [pc, #448]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 800485c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004860:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e024      	b.n	80048b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d107      	bne.n	8004880 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004870:	4b6a      	ldr	r3, [pc, #424]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0c6      	b.n	8004a0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004880:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0be      	b.n	8004a0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004890:	f000 f8ce 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 8004894:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4a61      	ldr	r2, [pc, #388]	; (8004a20 <HAL_RCC_ClockConfig+0x268>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d909      	bls.n	80048b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800489e:	4b5f      	ldr	r3, [pc, #380]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048a6:	4a5d      	ldr	r2, [pc, #372]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 80048a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048b2:	4b5a      	ldr	r3, [pc, #360]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f023 0203 	bic.w	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	4957      	ldr	r1, [pc, #348]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c4:	f7fd fc66 	bl	8002194 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048cc:	f7fd fc62 	bl	8002194 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e095      	b.n	8004a0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e2:	4b4e      	ldr	r3, [pc, #312]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 020c 	and.w	r2, r3, #12
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d1eb      	bne.n	80048cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d023      	beq.n	8004948 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800490c:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a42      	ldr	r2, [pc, #264]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004912:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004916:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004924:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800492c:	4a3b      	ldr	r2, [pc, #236]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 800492e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004932:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004934:	4b39      	ldr	r3, [pc, #228]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4936      	ldr	r1, [pc, #216]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
 8004946:	e008      	b.n	800495a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d105      	bne.n	800495a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800494e:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	4a32      	ldr	r2, [pc, #200]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 8004954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004958:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800495a:	4b2f      	ldr	r3, [pc, #188]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d21d      	bcs.n	80049a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004968:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f023 020f 	bic.w	r2, r3, #15
 8004970:	4929      	ldr	r1, [pc, #164]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004978:	f7fd fc0c 	bl	8002194 <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	e00a      	b.n	8004996 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004980:	f7fd fc08 	bl	8002194 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e03b      	b.n	8004a0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_RCC_ClockConfig+0x260>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d1ed      	bne.n	8004980 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b0:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4917      	ldr	r1, [pc, #92]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ce:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	490f      	ldr	r1, [pc, #60]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049e2:	f000 f825 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 80049e6:	4602      	mov	r2, r0
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <HAL_RCC_ClockConfig+0x264>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	490c      	ldr	r1, [pc, #48]	; (8004a24 <HAL_RCC_ClockConfig+0x26c>)
 80049f4:	5ccb      	ldrb	r3, [r1, r3]
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	fa22 f303 	lsr.w	r3, r2, r3
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <HAL_RCC_ClockConfig+0x270>)
 8004a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a02:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <HAL_RCC_ClockConfig+0x274>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fd fac6 	bl	8001f98 <HAL_InitTick>
 8004a0c:	4603      	mov	r3, r0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40022000 	.word	0x40022000
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	04c4b400 	.word	0x04c4b400
 8004a24:	0800a108 	.word	0x0800a108
 8004a28:	20000000 	.word	0x20000000
 8004a2c:	20000004 	.word	0x20000004

08004a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a36:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d102      	bne.n	8004a48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a42:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	e047      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d102      	bne.n	8004a5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	e03e      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a5a:	4b23      	ldr	r3, [pc, #140]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b0c      	cmp	r3, #12
 8004a64:	d136      	bne.n	8004ad4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a66:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d10c      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a8e:	68d2      	ldr	r2, [r2, #12]
 8004a90:	0a12      	lsrs	r2, r2, #8
 8004a92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	617b      	str	r3, [r7, #20]
      break;
 8004a9c:	e00c      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a9e:	4a13      	ldr	r2, [pc, #76]	; (8004aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	4a10      	ldr	r2, [pc, #64]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa8:	68d2      	ldr	r2, [r2, #12]
 8004aaa:	0a12      	lsrs	r2, r2, #8
 8004aac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]
      break;
 8004ab6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	0e5b      	lsrs	r3, r3, #25
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	e001      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ad8:	693b      	ldr	r3, [r7, #16]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	00f42400 	.word	0x00f42400

08004af0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004af6:	681b      	ldr	r3, [r3, #0]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000000 	.word	0x20000000

08004b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b0c:	f7ff fff0 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	0a1b      	lsrs	r3, r3, #8
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	4904      	ldr	r1, [pc, #16]	; (8004b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	0800a118 	.word	0x0800a118

08004b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b38:	f7ff ffda 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	0adb      	lsrs	r3, r3, #11
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4904      	ldr	r1, [pc, #16]	; (8004b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	0800a118 	.word	0x0800a118

08004b60 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	220f      	movs	r2, #15
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b70:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <HAL_RCC_GetClockConfig+0x5c>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 0203 	and.w	r2, r3, #3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCC_GetClockConfig+0x5c>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <HAL_RCC_GetClockConfig+0x5c>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b94:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_GetClockConfig+0x5c>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	08db      	lsrs	r3, r3, #3
 8004b9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <HAL_RCC_GetClockConfig+0x60>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 020f 	and.w	r2, r3, #15
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	40022000 	.word	0x40022000

08004bc4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_RCC_EnableCSS+0x1c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <HAL_RCC_EnableCSS+0x1c>)
 8004bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bd2:	6013      	str	r3, [r2, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000

08004be4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf4:	d105      	bne.n	8004c02 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004bf6:	f000 f809 	bl	8004c0c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004bfa:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c00:	621a      	str	r2, [r3, #32]
  }
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40021000 	.word	0x40021000

08004c0c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c22:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d10c      	bne.n	8004c5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c40:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c4a:	68d2      	ldr	r2, [r2, #12]
 8004c4c:	0a12      	lsrs	r2, r2, #8
 8004c4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	617b      	str	r3, [r7, #20]
    break;
 8004c58:	e00c      	b.n	8004c74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c5a:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	4a0e      	ldr	r2, [pc, #56]	; (8004c9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c64:	68d2      	ldr	r2, [r2, #12]
 8004c66:	0a12      	lsrs	r2, r2, #8
 8004c68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]
    break;
 8004c72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c74:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	0e5b      	lsrs	r3, r3, #25
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c8e:	687b      	ldr	r3, [r7, #4]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	00f42400 	.word	0x00f42400

08004ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cac:	2300      	movs	r3, #0
 8004cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8098 	beq.w	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cc6:	4b43      	ldr	r3, [pc, #268]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10d      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd2:	4b40      	ldr	r3, [pc, #256]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	4a3f      	ldr	r2, [pc, #252]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8004cde:	4b3d      	ldr	r3, [pc, #244]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cea:	2301      	movs	r3, #1
 8004cec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cee:	4b3a      	ldr	r3, [pc, #232]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a39      	ldr	r2, [pc, #228]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cfa:	f7fd fa4b 	bl	8002194 <HAL_GetTick>
 8004cfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d00:	e009      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d02:	f7fd fa47 	bl	8002194 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d902      	bls.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	74fb      	strb	r3, [r7, #19]
        break;
 8004d14:	e005      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d16:	4b30      	ldr	r3, [pc, #192]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0ef      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d22:	7cfb      	ldrb	r3, [r7, #19]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d159      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d28:	4b2a      	ldr	r3, [pc, #168]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01e      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d019      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d50:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d60:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d016      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fd fa07 	bl	8002194 <HAL_GetTick>
 8004d86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d88:	e00b      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fd fa03 	bl	8002194 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d902      	bls.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	74fb      	strb	r3, [r7, #19]
            break;
 8004da0:	e006      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ec      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db6:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc4:	4903      	ldr	r1, [pc, #12]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dcc:	e008      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dce:	7cfb      	ldrb	r3, [r7, #19]
 8004dd0:	74bb      	strb	r3, [r7, #18]
 8004dd2:	e005      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004de0:	7c7b      	ldrb	r3, [r7, #17]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d105      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de6:	4ba7      	ldr	r3, [pc, #668]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	4aa6      	ldr	r2, [pc, #664]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dfe:	4ba1      	ldr	r3, [pc, #644]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f023 0203 	bic.w	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	499d      	ldr	r1, [pc, #628]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e20:	4b98      	ldr	r3, [pc, #608]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e26:	f023 020c 	bic.w	r2, r3, #12
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4995      	ldr	r1, [pc, #596]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e42:	4b90      	ldr	r3, [pc, #576]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	498c      	ldr	r1, [pc, #560]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e64:	4b87      	ldr	r3, [pc, #540]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	4984      	ldr	r1, [pc, #528]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e86:	4b7f      	ldr	r3, [pc, #508]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	497b      	ldr	r1, [pc, #492]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ea8:	4b76      	ldr	r3, [pc, #472]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	4973      	ldr	r1, [pc, #460]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eca:	4b6e      	ldr	r3, [pc, #440]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	496a      	ldr	r1, [pc, #424]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eec:	4b65      	ldr	r3, [pc, #404]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	4962      	ldr	r1, [pc, #392]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f0e:	4b5d      	ldr	r3, [pc, #372]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	4959      	ldr	r1, [pc, #356]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f30:	4b54      	ldr	r3, [pc, #336]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f36:	f023 0203 	bic.w	r2, r3, #3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	4951      	ldr	r1, [pc, #324]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f52:	4b4c      	ldr	r3, [pc, #304]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	4948      	ldr	r1, [pc, #288]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f74:	4b43      	ldr	r3, [pc, #268]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4940      	ldr	r1, [pc, #256]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f94:	4b3b      	ldr	r3, [pc, #236]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4a3a      	ldr	r2, [pc, #232]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d015      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fac:	4b35      	ldr	r3, [pc, #212]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fba:	4932      	ldr	r1, [pc, #200]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fcc:	4b2d      	ldr	r3, [pc, #180]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d015      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fe4:	4b27      	ldr	r3, [pc, #156]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	4924      	ldr	r1, [pc, #144]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005002:	d105      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005004:	4b1f      	ldr	r3, [pc, #124]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800500e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d015      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800501c:	4b19      	ldr	r3, [pc, #100]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502a:	4916      	ldr	r1, [pc, #88]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503a:	d105      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800503c:	4b11      	ldr	r3, [pc, #68]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a10      	ldr	r2, [pc, #64]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005046:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d019      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	4908      	ldr	r1, [pc, #32]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005072:	d109      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005074:	4b03      	ldr	r3, [pc, #12]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4a02      	ldr	r2, [pc, #8]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800507e:	60d3      	str	r3, [r2, #12]
 8005080:	e002      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d015      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005094:	4b29      	ldr	r3, [pc, #164]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	4926      	ldr	r1, [pc, #152]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050b2:	d105      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050b4:	4b21      	ldr	r3, [pc, #132]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4a20      	ldr	r2, [pc, #128]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d015      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050da:	4918      	ldr	r1, [pc, #96]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d105      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050ec:	4b13      	ldr	r3, [pc, #76]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a12      	ldr	r2, [pc, #72]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d015      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005104:	4b0d      	ldr	r3, [pc, #52]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800510a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005112:	490a      	ldr	r1, [pc, #40]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005122:	d105      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a04      	ldr	r2, [pc, #16]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800512a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800512e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005130:	7cbb      	ldrb	r3, [r7, #18]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000

08005140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e09d      	b.n	800528e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	d108      	bne.n	800516c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005162:	d009      	beq.n	8005178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	61da      	str	r2, [r3, #28]
 800516a:	e005      	b.n	8005178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fc fd2c 	bl	8001bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b8:	d902      	bls.n	80051c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e002      	b.n	80051c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051ce:	d007      	beq.n	80051e0 <HAL_SPI_Init+0xa0>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051d8:	d002      	beq.n	80051e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	ea42 0103 	orr.w	r1, r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	f003 0204 	and.w	r2, r3, #4
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800525c:	ea42 0103 	orr.w	r1, r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800527c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e049      	b.n	800533c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f841 	bl	8005344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f000 fa2f 	bl	8005738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d001      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e054      	b.n	800541a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a26      	ldr	r2, [pc, #152]	; (8005428 <HAL_TIM_Base_Start_IT+0xd0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539a:	d01d      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a22      	ldr	r2, [pc, #136]	; (800542c <HAL_TIM_Base_Start_IT+0xd4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a21      	ldr	r2, [pc, #132]	; (8005430 <HAL_TIM_Base_Start_IT+0xd8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1f      	ldr	r2, [pc, #124]	; (8005434 <HAL_TIM_Base_Start_IT+0xdc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1e      	ldr	r2, [pc, #120]	; (8005438 <HAL_TIM_Base_Start_IT+0xe0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1c      	ldr	r2, [pc, #112]	; (800543c <HAL_TIM_Base_Start_IT+0xe4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x80>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1b      	ldr	r2, [pc, #108]	; (8005440 <HAL_TIM_Base_Start_IT+0xe8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d115      	bne.n	8005404 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_TIM_Base_Start_IT+0xec>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d015      	beq.n	8005416 <HAL_TIM_Base_Start_IT+0xbe>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f0:	d011      	beq.n	8005416 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005402:	e008      	b.n	8005416 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e000      	b.n	8005418 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40012c00 	.word	0x40012c00
 800542c:	40000400 	.word	0x40000400
 8005430:	40000800 	.word	0x40000800
 8005434:	40000c00 	.word	0x40000c00
 8005438:	40013400 	.word	0x40013400
 800543c:	40014000 	.word	0x40014000
 8005440:	40015000 	.word	0x40015000
 8005444:	00010007 	.word	0x00010007

08005448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d020      	beq.n	80054ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01b      	beq.n	80054ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0202 	mvn.w	r2, #2
 800547c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f931 	bl	80056fa <HAL_TIM_IC_CaptureCallback>
 8005498:	e005      	b.n	80054a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f923 	bl	80056e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f934 	bl	800570e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d020      	beq.n	80054f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01b      	beq.n	80054f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0204 	mvn.w	r2, #4
 80054c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f90b 	bl	80056fa <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f8fd 	bl	80056e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f90e 	bl	800570e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d020      	beq.n	8005544 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01b      	beq.n	8005544 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0208 	mvn.w	r2, #8
 8005514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2204      	movs	r2, #4
 800551a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8e5 	bl	80056fa <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f8d7 	bl	80056e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f8e8 	bl	800570e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b00      	cmp	r3, #0
 800554c:	d020      	beq.n	8005590 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01b      	beq.n	8005590 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0210 	mvn.w	r2, #16
 8005560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2208      	movs	r2, #8
 8005566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f8bf 	bl	80056fa <HAL_TIM_IC_CaptureCallback>
 800557c:	e005      	b.n	800558a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f8b1 	bl	80056e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f8c2 	bl	800570e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00c      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0201 	mvn.w	r2, #1
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fb ff1c 	bl	80013ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00c      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80055da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f969 	bl	80058b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00c      	beq.n	8005606 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f961 	bl	80058c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00c      	beq.n	800562a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f87c 	bl	8005722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00c      	beq.n	800564e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f06f 0220 	mvn.w	r2, #32
 8005646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f929 	bl	80058a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800566a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f935 	bl	80058dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00c      	beq.n	8005696 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800568e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f92d 	bl	80058f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00c      	beq.n	80056ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80056b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f925 	bl	8005904 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f91d 	bl	8005918 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a4c      	ldr	r2, [pc, #304]	; (800587c <TIM_Base_SetConfig+0x144>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d017      	beq.n	8005780 <TIM_Base_SetConfig+0x48>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d013      	beq.n	8005780 <TIM_Base_SetConfig+0x48>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a49      	ldr	r2, [pc, #292]	; (8005880 <TIM_Base_SetConfig+0x148>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00f      	beq.n	8005780 <TIM_Base_SetConfig+0x48>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a48      	ldr	r2, [pc, #288]	; (8005884 <TIM_Base_SetConfig+0x14c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00b      	beq.n	8005780 <TIM_Base_SetConfig+0x48>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a47      	ldr	r2, [pc, #284]	; (8005888 <TIM_Base_SetConfig+0x150>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d007      	beq.n	8005780 <TIM_Base_SetConfig+0x48>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a46      	ldr	r2, [pc, #280]	; (800588c <TIM_Base_SetConfig+0x154>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_Base_SetConfig+0x48>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a45      	ldr	r2, [pc, #276]	; (8005890 <TIM_Base_SetConfig+0x158>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d108      	bne.n	8005792 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a39      	ldr	r2, [pc, #228]	; (800587c <TIM_Base_SetConfig+0x144>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d023      	beq.n	80057e2 <TIM_Base_SetConfig+0xaa>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a0:	d01f      	beq.n	80057e2 <TIM_Base_SetConfig+0xaa>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a36      	ldr	r2, [pc, #216]	; (8005880 <TIM_Base_SetConfig+0x148>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01b      	beq.n	80057e2 <TIM_Base_SetConfig+0xaa>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a35      	ldr	r2, [pc, #212]	; (8005884 <TIM_Base_SetConfig+0x14c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d017      	beq.n	80057e2 <TIM_Base_SetConfig+0xaa>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a34      	ldr	r2, [pc, #208]	; (8005888 <TIM_Base_SetConfig+0x150>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <TIM_Base_SetConfig+0xaa>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a33      	ldr	r2, [pc, #204]	; (800588c <TIM_Base_SetConfig+0x154>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00f      	beq.n	80057e2 <TIM_Base_SetConfig+0xaa>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a33      	ldr	r2, [pc, #204]	; (8005894 <TIM_Base_SetConfig+0x15c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00b      	beq.n	80057e2 <TIM_Base_SetConfig+0xaa>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a32      	ldr	r2, [pc, #200]	; (8005898 <TIM_Base_SetConfig+0x160>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d007      	beq.n	80057e2 <TIM_Base_SetConfig+0xaa>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a31      	ldr	r2, [pc, #196]	; (800589c <TIM_Base_SetConfig+0x164>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_Base_SetConfig+0xaa>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2c      	ldr	r2, [pc, #176]	; (8005890 <TIM_Base_SetConfig+0x158>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d108      	bne.n	80057f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a18      	ldr	r2, [pc, #96]	; (800587c <TIM_Base_SetConfig+0x144>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <TIM_Base_SetConfig+0x110>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a1a      	ldr	r2, [pc, #104]	; (800588c <TIM_Base_SetConfig+0x154>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00f      	beq.n	8005848 <TIM_Base_SetConfig+0x110>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1a      	ldr	r2, [pc, #104]	; (8005894 <TIM_Base_SetConfig+0x15c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00b      	beq.n	8005848 <TIM_Base_SetConfig+0x110>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a19      	ldr	r2, [pc, #100]	; (8005898 <TIM_Base_SetConfig+0x160>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <TIM_Base_SetConfig+0x110>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a18      	ldr	r2, [pc, #96]	; (800589c <TIM_Base_SetConfig+0x164>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0x110>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a13      	ldr	r2, [pc, #76]	; (8005890 <TIM_Base_SetConfig+0x158>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d103      	bne.n	8005850 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d105      	bne.n	800586e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f023 0201 	bic.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]
  }
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40013400 	.word	0x40013400
 8005890:	40015000 	.word	0x40015000
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400
 800589c:	40014800 	.word	0x40014800

080058a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e042      	b.n	80059c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7fc fa31 	bl	8001db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2224      	movs	r2, #36	; 0x24
 800595a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0201 	bic.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fb24 	bl	8005fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f825 	bl	80059cc <UART_SetConfig>
 8005982:	4603      	mov	r3, r0
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e01b      	b.n	80059c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800599a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fba3 	bl	8006108 <UART_CheckIdleState>
 80059c2:	4603      	mov	r3, r0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d0:	b08c      	sub	sp, #48	; 0x30
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	431a      	orrs	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4baa      	ldr	r3, [pc, #680]	; (8005ca4 <UART_SetConfig+0x2d8>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	6812      	ldr	r2, [r2, #0]
 8005a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a04:	430b      	orrs	r3, r1
 8005a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a9f      	ldr	r2, [pc, #636]	; (8005ca8 <UART_SetConfig+0x2dc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d004      	beq.n	8005a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a34:	4313      	orrs	r3, r2
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005a42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	f023 010f 	bic.w	r1, r3, #15
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a90      	ldr	r2, [pc, #576]	; (8005cac <UART_SetConfig+0x2e0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d125      	bne.n	8005abc <UART_SetConfig+0xf0>
 8005a70:	4b8f      	ldr	r3, [pc, #572]	; (8005cb0 <UART_SetConfig+0x2e4>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d81a      	bhi.n	8005ab4 <UART_SetConfig+0xe8>
 8005a7e:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <UART_SetConfig+0xb8>)
 8005a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a84:	08005a95 	.word	0x08005a95
 8005a88:	08005aa5 	.word	0x08005aa5
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005aad 	.word	0x08005aad
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9a:	e116      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa2:	e112      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aaa:	e10e      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005aac:	2308      	movs	r3, #8
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab2:	e10a      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aba:	e106      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a7c      	ldr	r2, [pc, #496]	; (8005cb4 <UART_SetConfig+0x2e8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d138      	bne.n	8005b38 <UART_SetConfig+0x16c>
 8005ac6:	4b7a      	ldr	r3, [pc, #488]	; (8005cb0 <UART_SetConfig+0x2e4>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	f003 030c 	and.w	r3, r3, #12
 8005ad0:	2b0c      	cmp	r3, #12
 8005ad2:	d82d      	bhi.n	8005b30 <UART_SetConfig+0x164>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0x110>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b11 	.word	0x08005b11
 8005ae0:	08005b31 	.word	0x08005b31
 8005ae4:	08005b31 	.word	0x08005b31
 8005ae8:	08005b31 	.word	0x08005b31
 8005aec:	08005b21 	.word	0x08005b21
 8005af0:	08005b31 	.word	0x08005b31
 8005af4:	08005b31 	.word	0x08005b31
 8005af8:	08005b31 	.word	0x08005b31
 8005afc:	08005b19 	.word	0x08005b19
 8005b00:	08005b31 	.word	0x08005b31
 8005b04:	08005b31 	.word	0x08005b31
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b29 	.word	0x08005b29
 8005b10:	2300      	movs	r3, #0
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b16:	e0d8      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1e:	e0d4      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005b20:	2304      	movs	r3, #4
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b26:	e0d0      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2e:	e0cc      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b36:	e0c8      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a5e      	ldr	r2, [pc, #376]	; (8005cb8 <UART_SetConfig+0x2ec>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d125      	bne.n	8005b8e <UART_SetConfig+0x1c2>
 8005b42:	4b5b      	ldr	r3, [pc, #364]	; (8005cb0 <UART_SetConfig+0x2e4>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b4c:	2b30      	cmp	r3, #48	; 0x30
 8005b4e:	d016      	beq.n	8005b7e <UART_SetConfig+0x1b2>
 8005b50:	2b30      	cmp	r3, #48	; 0x30
 8005b52:	d818      	bhi.n	8005b86 <UART_SetConfig+0x1ba>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d00a      	beq.n	8005b6e <UART_SetConfig+0x1a2>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d814      	bhi.n	8005b86 <UART_SetConfig+0x1ba>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <UART_SetConfig+0x19a>
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d008      	beq.n	8005b76 <UART_SetConfig+0x1aa>
 8005b64:	e00f      	b.n	8005b86 <UART_SetConfig+0x1ba>
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b6c:	e0ad      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b74:	e0a9      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005b76:	2304      	movs	r3, #4
 8005b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7c:	e0a5      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005b7e:	2308      	movs	r3, #8
 8005b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b84:	e0a1      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005b86:	2310      	movs	r3, #16
 8005b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8c:	e09d      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a4a      	ldr	r2, [pc, #296]	; (8005cbc <UART_SetConfig+0x2f0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d125      	bne.n	8005be4 <UART_SetConfig+0x218>
 8005b98:	4b45      	ldr	r3, [pc, #276]	; (8005cb0 <UART_SetConfig+0x2e4>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ba4:	d016      	beq.n	8005bd4 <UART_SetConfig+0x208>
 8005ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ba8:	d818      	bhi.n	8005bdc <UART_SetConfig+0x210>
 8005baa:	2b80      	cmp	r3, #128	; 0x80
 8005bac:	d00a      	beq.n	8005bc4 <UART_SetConfig+0x1f8>
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d814      	bhi.n	8005bdc <UART_SetConfig+0x210>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <UART_SetConfig+0x1f0>
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d008      	beq.n	8005bcc <UART_SetConfig+0x200>
 8005bba:	e00f      	b.n	8005bdc <UART_SetConfig+0x210>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bc2:	e082      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bca:	e07e      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd2:	e07a      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bda:	e076      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be2:	e072      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a35      	ldr	r2, [pc, #212]	; (8005cc0 <UART_SetConfig+0x2f4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d12a      	bne.n	8005c44 <UART_SetConfig+0x278>
 8005bee:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <UART_SetConfig+0x2e4>)
 8005bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bfc:	d01a      	beq.n	8005c34 <UART_SetConfig+0x268>
 8005bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c02:	d81b      	bhi.n	8005c3c <UART_SetConfig+0x270>
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c08:	d00c      	beq.n	8005c24 <UART_SetConfig+0x258>
 8005c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0e:	d815      	bhi.n	8005c3c <UART_SetConfig+0x270>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <UART_SetConfig+0x250>
 8005c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c18:	d008      	beq.n	8005c2c <UART_SetConfig+0x260>
 8005c1a:	e00f      	b.n	8005c3c <UART_SetConfig+0x270>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c22:	e052      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005c24:	2302      	movs	r3, #2
 8005c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2a:	e04e      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c32:	e04a      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3a:	e046      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c42:	e042      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <UART_SetConfig+0x2dc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d13a      	bne.n	8005cc4 <UART_SetConfig+0x2f8>
 8005c4e:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <UART_SetConfig+0x2e4>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c5c:	d01a      	beq.n	8005c94 <UART_SetConfig+0x2c8>
 8005c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c62:	d81b      	bhi.n	8005c9c <UART_SetConfig+0x2d0>
 8005c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c68:	d00c      	beq.n	8005c84 <UART_SetConfig+0x2b8>
 8005c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c6e:	d815      	bhi.n	8005c9c <UART_SetConfig+0x2d0>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <UART_SetConfig+0x2b0>
 8005c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c78:	d008      	beq.n	8005c8c <UART_SetConfig+0x2c0>
 8005c7a:	e00f      	b.n	8005c9c <UART_SetConfig+0x2d0>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c82:	e022      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005c84:	2302      	movs	r3, #2
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8a:	e01e      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c92:	e01a      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9a:	e016      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca2:	e012      	b.n	8005cca <UART_SetConfig+0x2fe>
 8005ca4:	cfff69f3 	.word	0xcfff69f3
 8005ca8:	40008000 	.word	0x40008000
 8005cac:	40013800 	.word	0x40013800
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	40004400 	.word	0x40004400
 8005cb8:	40004800 	.word	0x40004800
 8005cbc:	40004c00 	.word	0x40004c00
 8005cc0:	40005000 	.word	0x40005000
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4aae      	ldr	r2, [pc, #696]	; (8005f88 <UART_SetConfig+0x5bc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	f040 8097 	bne.w	8005e04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d823      	bhi.n	8005d26 <UART_SetConfig+0x35a>
 8005cde:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <UART_SetConfig+0x318>)
 8005ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d27 	.word	0x08005d27
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d27 	.word	0x08005d27
 8005cf4:	08005d17 	.word	0x08005d17
 8005cf8:	08005d27 	.word	0x08005d27
 8005cfc:	08005d27 	.word	0x08005d27
 8005d00:	08005d27 	.word	0x08005d27
 8005d04:	08005d1f 	.word	0x08005d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d08:	f7fe fefe 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8005d0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d0e:	e010      	b.n	8005d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d10:	4b9e      	ldr	r3, [pc, #632]	; (8005f8c <UART_SetConfig+0x5c0>)
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d14:	e00d      	b.n	8005d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d16:	f7fe fe8b 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 8005d1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d1c:	e009      	b.n	8005d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d24:	e005      	b.n	8005d32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8130 	beq.w	8005f9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	4a94      	ldr	r2, [pc, #592]	; (8005f90 <UART_SetConfig+0x5c4>)
 8005d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d44:	461a      	mov	r2, r3
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d305      	bcc.n	8005d6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d903      	bls.n	8005d72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d70:	e113      	b.n	8005f9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	2200      	movs	r2, #0
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	60fa      	str	r2, [r7, #12]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	4a84      	ldr	r2, [pc, #528]	; (8005f90 <UART_SetConfig+0x5c4>)
 8005d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2200      	movs	r2, #0
 8005d88:	603b      	str	r3, [r7, #0]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d94:	f7fa fa44 	bl	8000220 <__aeabi_uldivmod>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4619      	mov	r1, r3
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	020b      	lsls	r3, r1, #8
 8005daa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dae:	0202      	lsls	r2, r0, #8
 8005db0:	6979      	ldr	r1, [r7, #20]
 8005db2:	6849      	ldr	r1, [r1, #4]
 8005db4:	0849      	lsrs	r1, r1, #1
 8005db6:	2000      	movs	r0, #0
 8005db8:	460c      	mov	r4, r1
 8005dba:	4605      	mov	r5, r0
 8005dbc:	eb12 0804 	adds.w	r8, r2, r4
 8005dc0:	eb43 0905 	adc.w	r9, r3, r5
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	469a      	mov	sl, r3
 8005dcc:	4693      	mov	fp, r2
 8005dce:	4652      	mov	r2, sl
 8005dd0:	465b      	mov	r3, fp
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	f7fa fa23 	bl	8000220 <__aeabi_uldivmod>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4613      	mov	r3, r2
 8005de0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de8:	d308      	bcc.n	8005dfc <UART_SetConfig+0x430>
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df0:	d204      	bcs.n	8005dfc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6a3a      	ldr	r2, [r7, #32]
 8005df8:	60da      	str	r2, [r3, #12]
 8005dfa:	e0ce      	b.n	8005f9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e02:	e0ca      	b.n	8005f9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e0c:	d166      	bne.n	8005edc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005e0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d827      	bhi.n	8005e66 <UART_SetConfig+0x49a>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0x450>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e41 	.word	0x08005e41
 8005e20:	08005e49 	.word	0x08005e49
 8005e24:	08005e51 	.word	0x08005e51
 8005e28:	08005e67 	.word	0x08005e67
 8005e2c:	08005e57 	.word	0x08005e57
 8005e30:	08005e67 	.word	0x08005e67
 8005e34:	08005e67 	.word	0x08005e67
 8005e38:	08005e67 	.word	0x08005e67
 8005e3c:	08005e5f 	.word	0x08005e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e40:	f7fe fe62 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8005e44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e46:	e014      	b.n	8005e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e48:	f7fe fe74 	bl	8004b34 <HAL_RCC_GetPCLK2Freq>
 8005e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e4e:	e010      	b.n	8005e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e50:	4b4e      	ldr	r3, [pc, #312]	; (8005f8c <UART_SetConfig+0x5c0>)
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e54:	e00d      	b.n	8005e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e56:	f7fe fdeb 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 8005e5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e5c:	e009      	b.n	8005e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e64:	e005      	b.n	8005e72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8090 	beq.w	8005f9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	4a44      	ldr	r2, [pc, #272]	; (8005f90 <UART_SetConfig+0x5c4>)
 8005e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e84:	461a      	mov	r2, r3
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e8c:	005a      	lsls	r2, r3, #1
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	441a      	add	r2, r3
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	2b0f      	cmp	r3, #15
 8005ea4:	d916      	bls.n	8005ed4 <UART_SetConfig+0x508>
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eac:	d212      	bcs.n	8005ed4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f023 030f 	bic.w	r3, r3, #15
 8005eb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	8bfb      	ldrh	r3, [r7, #30]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	8bfa      	ldrh	r2, [r7, #30]
 8005ed0:	60da      	str	r2, [r3, #12]
 8005ed2:	e062      	b.n	8005f9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005eda:	e05e      	b.n	8005f9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005edc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d828      	bhi.n	8005f36 <UART_SetConfig+0x56a>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0x520>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	08005f37 	.word	0x08005f37
 8005efc:	08005f27 	.word	0x08005f27
 8005f00:	08005f37 	.word	0x08005f37
 8005f04:	08005f37 	.word	0x08005f37
 8005f08:	08005f37 	.word	0x08005f37
 8005f0c:	08005f2f 	.word	0x08005f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f10:	f7fe fdfa 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8005f14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f16:	e014      	b.n	8005f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f18:	f7fe fe0c 	bl	8004b34 <HAL_RCC_GetPCLK2Freq>
 8005f1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f1e:	e010      	b.n	8005f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f20:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <UART_SetConfig+0x5c0>)
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f24:	e00d      	b.n	8005f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f26:	f7fe fd83 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 8005f2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f2c:	e009      	b.n	8005f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f34:	e005      	b.n	8005f42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f40:	bf00      	nop
    }

    if (pclk != 0U)
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d028      	beq.n	8005f9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	4a10      	ldr	r2, [pc, #64]	; (8005f90 <UART_SetConfig+0x5c4>)
 8005f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f52:	461a      	mov	r2, r3
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	085b      	lsrs	r3, r3, #1
 8005f60:	441a      	add	r2, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	2b0f      	cmp	r3, #15
 8005f70:	d910      	bls.n	8005f94 <UART_SetConfig+0x5c8>
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d20c      	bcs.n	8005f94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60da      	str	r2, [r3, #12]
 8005f84:	e009      	b.n	8005f9a <UART_SetConfig+0x5ce>
 8005f86:	bf00      	nop
 8005f88:	40008000 	.word	0x40008000
 8005f8c:	00f42400 	.word	0x00f42400
 8005f90:	0800a120 	.word	0x0800a120
      }
      else
      {
        ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2200      	movs	r2, #0
 8005fae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005fb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3730      	adds	r7, #48	; 0x30
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01a      	beq.n	80060da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060c2:	d10a      	bne.n	80060da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b098      	sub	sp, #96	; 0x60
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006118:	f7fc f83c 	bl	8002194 <HAL_GetTick>
 800611c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b08      	cmp	r3, #8
 800612a:	d12f      	bne.n	800618c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006134:	2200      	movs	r2, #0
 8006136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f88e 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d022      	beq.n	800618c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800615a:	653b      	str	r3, [r7, #80]	; 0x50
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006164:	647b      	str	r3, [r7, #68]	; 0x44
 8006166:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800616a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e6      	bne.n	8006146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e063      	b.n	8006254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b04      	cmp	r3, #4
 8006198:	d149      	bne.n	800622e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800619a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a2:	2200      	movs	r2, #0
 80061a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f857 	bl	800625c <UART_WaitOnFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d03c      	beq.n	800622e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	623b      	str	r3, [r7, #32]
   return(result);
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d2:	633b      	str	r3, [r7, #48]	; 0x30
 80061d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e6      	bne.n	80061b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	e853 3f00 	ldrex	r3, [r3]
 80061f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f023 0301 	bic.w	r3, r3, #1
 80061fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3308      	adds	r3, #8
 8006204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006206:	61fa      	str	r2, [r7, #28]
 8006208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	69b9      	ldr	r1, [r7, #24]
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	617b      	str	r3, [r7, #20]
   return(result);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e5      	bne.n	80061e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e012      	b.n	8006254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2220      	movs	r2, #32
 8006232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3758      	adds	r7, #88	; 0x58
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626c:	e04f      	b.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006274:	d04b      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006276:	f7fb ff8d 	bl	8002194 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <UART_WaitOnFlagUntilTimeout+0x30>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e04e      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d037      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b80      	cmp	r3, #128	; 0x80
 80062a2:	d034      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d031      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d110      	bne.n	80062da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2208      	movs	r2, #8
 80062be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f838 	bl	8006336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2208      	movs	r2, #8
 80062ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e029      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e8:	d111      	bne.n	800630e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f81e 	bl	8006336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e00f      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4013      	ands	r3, r2
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	bf0c      	ite	eq
 800631e:	2301      	moveq	r3, #1
 8006320:	2300      	movne	r3, #0
 8006322:	b2db      	uxtb	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	429a      	cmp	r2, r3
 800632a:	d0a0      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006336:	b480      	push	{r7}
 8006338:	b095      	sub	sp, #84	; 0x54
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635c:	643b      	str	r3, [r7, #64]	; 0x40
 800635e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e6      	bne.n	800633e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3308      	adds	r3, #8
 8006376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	64bb      	str	r3, [r7, #72]	; 0x48
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800639a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e3      	bne.n	8006370 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d118      	bne.n	80063e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f023 0310 	bic.w	r3, r3, #16
 80063c4:	647b      	str	r3, [r7, #68]	; 0x44
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6979      	ldr	r1, [r7, #20]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	613b      	str	r3, [r7, #16]
   return(result);
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e6      	bne.n	80063b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063f6:	bf00      	nop
 80063f8:	3754      	adds	r7, #84	; 0x54
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_UARTEx_DisableFifoMode+0x16>
 8006414:	2302      	movs	r3, #2
 8006416:	e027      	b.n	8006468 <HAL_UARTEx_DisableFifoMode+0x66>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2224      	movs	r2, #36	; 0x24
 8006424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0201 	bic.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006446:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006488:	2302      	movs	r3, #2
 800648a:	e02d      	b.n	80064e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2224      	movs	r2, #36	; 0x24
 8006498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f84f 	bl	800656c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006504:	2302      	movs	r3, #2
 8006506:	e02d      	b.n	8006564 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2224      	movs	r2, #36	; 0x24
 8006514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f811 	bl	800656c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2220      	movs	r2, #32
 8006556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006578:	2b00      	cmp	r3, #0
 800657a:	d108      	bne.n	800658e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800658c:	e031      	b.n	80065f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800658e:	2308      	movs	r3, #8
 8006590:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006592:	2308      	movs	r3, #8
 8006594:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	0e5b      	lsrs	r3, r3, #25
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	0f5b      	lsrs	r3, r3, #29
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	7b3a      	ldrb	r2, [r7, #12]
 80065ba:	4911      	ldr	r1, [pc, #68]	; (8006600 <UARTEx_SetNbDataToProcess+0x94>)
 80065bc:	5c8a      	ldrb	r2, [r1, r2]
 80065be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065c2:	7b3a      	ldrb	r2, [r7, #12]
 80065c4:	490f      	ldr	r1, [pc, #60]	; (8006604 <UARTEx_SetNbDataToProcess+0x98>)
 80065c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	7b7a      	ldrb	r2, [r7, #13]
 80065d8:	4909      	ldr	r1, [pc, #36]	; (8006600 <UARTEx_SetNbDataToProcess+0x94>)
 80065da:	5c8a      	ldrb	r2, [r1, r2]
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065e0:	7b7a      	ldrb	r2, [r7, #13]
 80065e2:	4908      	ldr	r1, [pc, #32]	; (8006604 <UARTEx_SetNbDataToProcess+0x98>)
 80065e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80065f2:	bf00      	nop
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	0800a138 	.word	0x0800a138
 8006604:	0800a140 	.word	0x0800a140

08006608 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e03c      	b.n	8006694 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fb fc3a 	bl	8001ea8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f85b 	bl	8006708 <USART_SetConfig>
 8006652:	4603      	mov	r3, r0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e01b      	b.n	8006694 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800666a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800667a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fb23 	bl	8006cd8 <USART_CheckIdleState>
 8006692:	4603      	mov	r3, r0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80066ac:	e018      	b.n	80066e0 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066b4:	d014      	beq.n	80066e0 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b6:	f7fb fd6d 	bl	8002194 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <USART_WaitOnFlagUntilTimeout+0x30>
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e00f      	b.n	8006700 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69da      	ldr	r2, [r3, #28]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4013      	ands	r3, r2
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	bf0c      	ite	eq
 80066f0:	2301      	moveq	r3, #1
 80066f2:	2300      	movne	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d0d7      	beq.n	80066ae <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8006714:	2300      	movs	r3, #0
 8006716:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b96      	ldr	r3, [pc, #600]	; (8006990 <USART_SetConfig+0x288>)
 8006736:	4013      	ands	r3, r2
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	6979      	ldr	r1, [r7, #20]
 800673e:	430b      	orrs	r3, r1
 8006740:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8006742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006746:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	4313      	orrs	r3, r2
 8006750:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	4313      	orrs	r3, r2
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006776:	f023 0309 	bic.w	r3, r3, #9
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	6979      	ldr	r1, [r7, #20]
 8006780:	430b      	orrs	r3, r1
 8006782:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	f023 010f 	bic.w	r1, r3, #15
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a7d      	ldr	r2, [pc, #500]	; (8006994 <USART_SetConfig+0x28c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d120      	bne.n	80067e6 <USART_SetConfig+0xde>
 80067a4:	4b7c      	ldr	r3, [pc, #496]	; (8006998 <USART_SetConfig+0x290>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d816      	bhi.n	80067e0 <USART_SetConfig+0xd8>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <USART_SetConfig+0xb0>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067c9 	.word	0x080067c9
 80067bc:	080067d5 	.word	0x080067d5
 80067c0:	080067cf 	.word	0x080067cf
 80067c4:	080067db 	.word	0x080067db
 80067c8:	2301      	movs	r3, #1
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e06b      	b.n	80068a6 <USART_SetConfig+0x19e>
 80067ce:	2302      	movs	r3, #2
 80067d0:	77fb      	strb	r3, [r7, #31]
 80067d2:	e068      	b.n	80068a6 <USART_SetConfig+0x19e>
 80067d4:	2304      	movs	r3, #4
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e065      	b.n	80068a6 <USART_SetConfig+0x19e>
 80067da:	2308      	movs	r3, #8
 80067dc:	77fb      	strb	r3, [r7, #31]
 80067de:	e062      	b.n	80068a6 <USART_SetConfig+0x19e>
 80067e0:	2310      	movs	r3, #16
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e05f      	b.n	80068a6 <USART_SetConfig+0x19e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a6c      	ldr	r2, [pc, #432]	; (800699c <USART_SetConfig+0x294>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d132      	bne.n	8006856 <USART_SetConfig+0x14e>
 80067f0:	4b69      	ldr	r3, [pc, #420]	; (8006998 <USART_SetConfig+0x290>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f6:	f003 030c 	and.w	r3, r3, #12
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	d828      	bhi.n	8006850 <USART_SetConfig+0x148>
 80067fe:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <USART_SetConfig+0xfc>)
 8006800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006804:	08006839 	.word	0x08006839
 8006808:	08006851 	.word	0x08006851
 800680c:	08006851 	.word	0x08006851
 8006810:	08006851 	.word	0x08006851
 8006814:	08006845 	.word	0x08006845
 8006818:	08006851 	.word	0x08006851
 800681c:	08006851 	.word	0x08006851
 8006820:	08006851 	.word	0x08006851
 8006824:	0800683f 	.word	0x0800683f
 8006828:	08006851 	.word	0x08006851
 800682c:	08006851 	.word	0x08006851
 8006830:	08006851 	.word	0x08006851
 8006834:	0800684b 	.word	0x0800684b
 8006838:	2300      	movs	r3, #0
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e033      	b.n	80068a6 <USART_SetConfig+0x19e>
 800683e:	2302      	movs	r3, #2
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e030      	b.n	80068a6 <USART_SetConfig+0x19e>
 8006844:	2304      	movs	r3, #4
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e02d      	b.n	80068a6 <USART_SetConfig+0x19e>
 800684a:	2308      	movs	r3, #8
 800684c:	77fb      	strb	r3, [r7, #31]
 800684e:	e02a      	b.n	80068a6 <USART_SetConfig+0x19e>
 8006850:	2310      	movs	r3, #16
 8006852:	77fb      	strb	r3, [r7, #31]
 8006854:	e027      	b.n	80068a6 <USART_SetConfig+0x19e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a51      	ldr	r2, [pc, #324]	; (80069a0 <USART_SetConfig+0x298>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d120      	bne.n	80068a2 <USART_SetConfig+0x19a>
 8006860:	4b4d      	ldr	r3, [pc, #308]	; (8006998 <USART_SetConfig+0x290>)
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006866:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800686a:	2b30      	cmp	r3, #48	; 0x30
 800686c:	d013      	beq.n	8006896 <USART_SetConfig+0x18e>
 800686e:	2b30      	cmp	r3, #48	; 0x30
 8006870:	d814      	bhi.n	800689c <USART_SetConfig+0x194>
 8006872:	2b20      	cmp	r3, #32
 8006874:	d009      	beq.n	800688a <USART_SetConfig+0x182>
 8006876:	2b20      	cmp	r3, #32
 8006878:	d810      	bhi.n	800689c <USART_SetConfig+0x194>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <USART_SetConfig+0x17c>
 800687e:	2b10      	cmp	r3, #16
 8006880:	d006      	beq.n	8006890 <USART_SetConfig+0x188>
 8006882:	e00b      	b.n	800689c <USART_SetConfig+0x194>
 8006884:	2300      	movs	r3, #0
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e00d      	b.n	80068a6 <USART_SetConfig+0x19e>
 800688a:	2302      	movs	r3, #2
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e00a      	b.n	80068a6 <USART_SetConfig+0x19e>
 8006890:	2304      	movs	r3, #4
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e007      	b.n	80068a6 <USART_SetConfig+0x19e>
 8006896:	2308      	movs	r3, #8
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e004      	b.n	80068a6 <USART_SetConfig+0x19e>
 800689c:	2310      	movs	r3, #16
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e001      	b.n	80068a6 <USART_SetConfig+0x19e>
 80068a2:	2310      	movs	r3, #16
 80068a4:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80068a6:	7ffb      	ldrb	r3, [r7, #31]
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	f200 81e2 	bhi.w	8006c72 <USART_SetConfig+0x56a>
 80068ae:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <USART_SetConfig+0x1ac>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068d9 	.word	0x080068d9
 80068b8:	080069a5 	.word	0x080069a5
 80068bc:	08006a5b 	.word	0x08006a5b
 80068c0:	08006c73 	.word	0x08006c73
 80068c4:	08006b0b 	.word	0x08006b0b
 80068c8:	08006c73 	.word	0x08006c73
 80068cc:	08006c73 	.word	0x08006c73
 80068d0:	08006c73 	.word	0x08006c73
 80068d4:	08006bc1 	.word	0x08006bc1
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80068d8:	f7fe f916 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 80068dc:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d044      	beq.n	8006970 <USART_SetConfig+0x268>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d03e      	beq.n	800696c <USART_SetConfig+0x264>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d038      	beq.n	8006968 <USART_SetConfig+0x260>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d032      	beq.n	8006964 <USART_SetConfig+0x25c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	2b04      	cmp	r3, #4
 8006904:	d02c      	beq.n	8006960 <USART_SetConfig+0x258>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	2b05      	cmp	r3, #5
 800690c:	d026      	beq.n	800695c <USART_SetConfig+0x254>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	2b06      	cmp	r3, #6
 8006914:	d020      	beq.n	8006958 <USART_SetConfig+0x250>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	2b07      	cmp	r3, #7
 800691c:	d01a      	beq.n	8006954 <USART_SetConfig+0x24c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	2b08      	cmp	r3, #8
 8006924:	d014      	beq.n	8006950 <USART_SetConfig+0x248>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	2b09      	cmp	r3, #9
 800692c:	d00e      	beq.n	800694c <USART_SetConfig+0x244>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	2b0a      	cmp	r3, #10
 8006934:	d008      	beq.n	8006948 <USART_SetConfig+0x240>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	2b0b      	cmp	r3, #11
 800693c:	d102      	bne.n	8006944 <USART_SetConfig+0x23c>
 800693e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006942:	e016      	b.n	8006972 <USART_SetConfig+0x26a>
 8006944:	2301      	movs	r3, #1
 8006946:	e014      	b.n	8006972 <USART_SetConfig+0x26a>
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	e012      	b.n	8006972 <USART_SetConfig+0x26a>
 800694c:	2340      	movs	r3, #64	; 0x40
 800694e:	e010      	b.n	8006972 <USART_SetConfig+0x26a>
 8006950:	2320      	movs	r3, #32
 8006952:	e00e      	b.n	8006972 <USART_SetConfig+0x26a>
 8006954:	2310      	movs	r3, #16
 8006956:	e00c      	b.n	8006972 <USART_SetConfig+0x26a>
 8006958:	230c      	movs	r3, #12
 800695a:	e00a      	b.n	8006972 <USART_SetConfig+0x26a>
 800695c:	230a      	movs	r3, #10
 800695e:	e008      	b.n	8006972 <USART_SetConfig+0x26a>
 8006960:	2308      	movs	r3, #8
 8006962:	e006      	b.n	8006972 <USART_SetConfig+0x26a>
 8006964:	2306      	movs	r3, #6
 8006966:	e004      	b.n	8006972 <USART_SetConfig+0x26a>
 8006968:	2304      	movs	r3, #4
 800696a:	e002      	b.n	8006972 <USART_SetConfig+0x26a>
 800696c:	2302      	movs	r3, #2
 800696e:	e000      	b.n	8006972 <USART_SetConfig+0x26a>
 8006970:	2301      	movs	r3, #1
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	fbb2 f3f3 	udiv	r3, r2, r3
 8006978:	005a      	lsls	r2, r3, #1
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	441a      	add	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	fbb2 f3f3 	udiv	r3, r2, r3
 800698a:	61bb      	str	r3, [r7, #24]
      break;
 800698c:	e174      	b.n	8006c78 <USART_SetConfig+0x570>
 800698e:	bf00      	nop
 8006990:	cfff69f3 	.word	0xcfff69f3
 8006994:	40013800 	.word	0x40013800
 8006998:	40021000 	.word	0x40021000
 800699c:	40004400 	.word	0x40004400
 80069a0:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80069a4:	f7fe f8c6 	bl	8004b34 <HAL_RCC_GetPCLK2Freq>
 80069a8:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d044      	beq.n	8006a3c <USART_SetConfig+0x334>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d03e      	beq.n	8006a38 <USART_SetConfig+0x330>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d038      	beq.n	8006a34 <USART_SetConfig+0x32c>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d032      	beq.n	8006a30 <USART_SetConfig+0x328>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d02c      	beq.n	8006a2c <USART_SetConfig+0x324>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	2b05      	cmp	r3, #5
 80069d8:	d026      	beq.n	8006a28 <USART_SetConfig+0x320>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	2b06      	cmp	r3, #6
 80069e0:	d020      	beq.n	8006a24 <USART_SetConfig+0x31c>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b07      	cmp	r3, #7
 80069e8:	d01a      	beq.n	8006a20 <USART_SetConfig+0x318>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d014      	beq.n	8006a1c <USART_SetConfig+0x314>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	2b09      	cmp	r3, #9
 80069f8:	d00e      	beq.n	8006a18 <USART_SetConfig+0x310>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2b0a      	cmp	r3, #10
 8006a00:	d008      	beq.n	8006a14 <USART_SetConfig+0x30c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	2b0b      	cmp	r3, #11
 8006a08:	d102      	bne.n	8006a10 <USART_SetConfig+0x308>
 8006a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a0e:	e016      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e014      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a14:	2380      	movs	r3, #128	; 0x80
 8006a16:	e012      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a18:	2340      	movs	r3, #64	; 0x40
 8006a1a:	e010      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a1c:	2320      	movs	r3, #32
 8006a1e:	e00e      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a20:	2310      	movs	r3, #16
 8006a22:	e00c      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a24:	230c      	movs	r3, #12
 8006a26:	e00a      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a28:	230a      	movs	r3, #10
 8006a2a:	e008      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	e006      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a30:	2306      	movs	r3, #6
 8006a32:	e004      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a34:	2304      	movs	r3, #4
 8006a36:	e002      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e000      	b.n	8006a3e <USART_SetConfig+0x336>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a44:	005a      	lsls	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	441a      	add	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a56:	61bb      	str	r3, [r7, #24]
      break;
 8006a58:	e10e      	b.n	8006c78 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d044      	beq.n	8006aec <USART_SetConfig+0x3e4>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d03e      	beq.n	8006ae8 <USART_SetConfig+0x3e0>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d038      	beq.n	8006ae4 <USART_SetConfig+0x3dc>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d032      	beq.n	8006ae0 <USART_SetConfig+0x3d8>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d02c      	beq.n	8006adc <USART_SetConfig+0x3d4>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	d026      	beq.n	8006ad8 <USART_SetConfig+0x3d0>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	2b06      	cmp	r3, #6
 8006a90:	d020      	beq.n	8006ad4 <USART_SetConfig+0x3cc>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	2b07      	cmp	r3, #7
 8006a98:	d01a      	beq.n	8006ad0 <USART_SetConfig+0x3c8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d014      	beq.n	8006acc <USART_SetConfig+0x3c4>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	2b09      	cmp	r3, #9
 8006aa8:	d00e      	beq.n	8006ac8 <USART_SetConfig+0x3c0>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	2b0a      	cmp	r3, #10
 8006ab0:	d008      	beq.n	8006ac4 <USART_SetConfig+0x3bc>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	2b0b      	cmp	r3, #11
 8006ab8:	d102      	bne.n	8006ac0 <USART_SetConfig+0x3b8>
 8006aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006abe:	e016      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e014      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006ac4:	2380      	movs	r3, #128	; 0x80
 8006ac6:	e012      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006ac8:	2340      	movs	r3, #64	; 0x40
 8006aca:	e010      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006acc:	2320      	movs	r3, #32
 8006ace:	e00e      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	e00c      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006ad4:	230c      	movs	r3, #12
 8006ad6:	e00a      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006ad8:	230a      	movs	r3, #10
 8006ada:	e008      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006adc:	2308      	movs	r3, #8
 8006ade:	e006      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006ae0:	2306      	movs	r3, #6
 8006ae2:	e004      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	e002      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e000      	b.n	8006aee <USART_SetConfig+0x3e6>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4a79      	ldr	r2, [pc, #484]	; (8006cd4 <USART_SetConfig+0x5cc>)
 8006af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af4:	005a      	lsls	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	085b      	lsrs	r3, r3, #1
 8006afc:	441a      	add	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b06:	61bb      	str	r3, [r7, #24]
      break;
 8006b08:	e0b6      	b.n	8006c78 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8006b0a:	f7fd ff91 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 8006b0e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d044      	beq.n	8006ba2 <USART_SetConfig+0x49a>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d03e      	beq.n	8006b9e <USART_SetConfig+0x496>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d038      	beq.n	8006b9a <USART_SetConfig+0x492>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d032      	beq.n	8006b96 <USART_SetConfig+0x48e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d02c      	beq.n	8006b92 <USART_SetConfig+0x48a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	2b05      	cmp	r3, #5
 8006b3e:	d026      	beq.n	8006b8e <USART_SetConfig+0x486>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	2b06      	cmp	r3, #6
 8006b46:	d020      	beq.n	8006b8a <USART_SetConfig+0x482>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	2b07      	cmp	r3, #7
 8006b4e:	d01a      	beq.n	8006b86 <USART_SetConfig+0x47e>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d014      	beq.n	8006b82 <USART_SetConfig+0x47a>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	2b09      	cmp	r3, #9
 8006b5e:	d00e      	beq.n	8006b7e <USART_SetConfig+0x476>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	2b0a      	cmp	r3, #10
 8006b66:	d008      	beq.n	8006b7a <USART_SetConfig+0x472>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	2b0b      	cmp	r3, #11
 8006b6e:	d102      	bne.n	8006b76 <USART_SetConfig+0x46e>
 8006b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b74:	e016      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e014      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b7a:	2380      	movs	r3, #128	; 0x80
 8006b7c:	e012      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b7e:	2340      	movs	r3, #64	; 0x40
 8006b80:	e010      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b82:	2320      	movs	r3, #32
 8006b84:	e00e      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b86:	2310      	movs	r3, #16
 8006b88:	e00c      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	e00a      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b8e:	230a      	movs	r3, #10
 8006b90:	e008      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b92:	2308      	movs	r3, #8
 8006b94:	e006      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b96:	2306      	movs	r3, #6
 8006b98:	e004      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b9a:	2304      	movs	r3, #4
 8006b9c:	e002      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e000      	b.n	8006ba4 <USART_SetConfig+0x49c>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006baa:	005a      	lsls	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	441a      	add	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbc:	61bb      	str	r3, [r7, #24]
      break;
 8006bbe:	e05b      	b.n	8006c78 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d044      	beq.n	8006c52 <USART_SetConfig+0x54a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d03e      	beq.n	8006c4e <USART_SetConfig+0x546>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d038      	beq.n	8006c4a <USART_SetConfig+0x542>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d032      	beq.n	8006c46 <USART_SetConfig+0x53e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d02c      	beq.n	8006c42 <USART_SetConfig+0x53a>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	2b05      	cmp	r3, #5
 8006bee:	d026      	beq.n	8006c3e <USART_SetConfig+0x536>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	d020      	beq.n	8006c3a <USART_SetConfig+0x532>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	2b07      	cmp	r3, #7
 8006bfe:	d01a      	beq.n	8006c36 <USART_SetConfig+0x52e>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d014      	beq.n	8006c32 <USART_SetConfig+0x52a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	2b09      	cmp	r3, #9
 8006c0e:	d00e      	beq.n	8006c2e <USART_SetConfig+0x526>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	2b0a      	cmp	r3, #10
 8006c16:	d008      	beq.n	8006c2a <USART_SetConfig+0x522>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	2b0b      	cmp	r3, #11
 8006c1e:	d102      	bne.n	8006c26 <USART_SetConfig+0x51e>
 8006c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c24:	e016      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e014      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c2a:	2380      	movs	r3, #128	; 0x80
 8006c2c:	e012      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c2e:	2340      	movs	r3, #64	; 0x40
 8006c30:	e010      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c32:	2320      	movs	r3, #32
 8006c34:	e00e      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c36:	2310      	movs	r3, #16
 8006c38:	e00c      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	e00a      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c3e:	230a      	movs	r3, #10
 8006c40:	e008      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c42:	2308      	movs	r3, #8
 8006c44:	e006      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c46:	2306      	movs	r3, #6
 8006c48:	e004      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c4a:	2304      	movs	r3, #4
 8006c4c:	e002      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e000      	b.n	8006c54 <USART_SetConfig+0x54c>
 8006c52:	2301      	movs	r3, #1
 8006c54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	005a      	lsls	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6e:	61bb      	str	r3, [r7, #24]
      break;
 8006c70:	e002      	b.n	8006c78 <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	77bb      	strb	r3, [r7, #30]
      break;
 8006c76:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d916      	bls.n	8006cac <USART_SetConfig+0x5a4>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c84:	d212      	bcs.n	8006cac <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f023 030f 	bic.w	r3, r3, #15
 8006c8e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	89fb      	ldrh	r3, [r7, #14]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	89fa      	ldrh	r2, [r7, #14]
 8006ca8:	60da      	str	r2, [r3, #12]
 8006caa:	e001      	b.n	8006cb0 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8006cc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	00f42400 	.word	0x00f42400

08006cd8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ce6:	f7fb fa55 	bl	8002194 <HAL_GetTick>
 8006cea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d10e      	bne.n	8006d18 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff fcc7 	bl	800669c <USART_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e01e      	b.n	8006d56 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d10e      	bne.n	8006d44 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff fcb1 	bl	800669c <USART_WaitOnFlagUntilTimeout>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e008      	b.n	8006d56 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_USARTEx_DisableFifoMode+0x16>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e027      	b.n	8006dc4 <HAL_USARTEx_DisableFifoMode+0x66>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0201 	bic.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006da2:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e02d      	b.n	8006e44 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0201 	bic.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f84f 	bl	8006ec8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e02d      	b.n	8006ec0 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0201 	bic.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f811 	bl	8006ec8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ee4:	e02f      	b.n	8006f46 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ee6:	2308      	movs	r3, #8
 8006ee8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eea:	2308      	movs	r3, #8
 8006eec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8006ef4:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8006f04:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	7b3a      	ldrb	r2, [r7, #12]
 8006f12:	4910      	ldr	r1, [pc, #64]	; (8006f54 <USARTEx_SetNbDataToProcess+0x8c>)
 8006f14:	5c8a      	ldrb	r2, [r1, r2]
 8006f16:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8006f1a:	7b3a      	ldrb	r2, [r7, #12]
 8006f1c:	490e      	ldr	r1, [pc, #56]	; (8006f58 <USARTEx_SetNbDataToProcess+0x90>)
 8006f1e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	7b7a      	ldrb	r2, [r7, #13]
 8006f2e:	4909      	ldr	r1, [pc, #36]	; (8006f54 <USARTEx_SetNbDataToProcess+0x8c>)
 8006f30:	5c8a      	ldrb	r2, [r1, r2]
 8006f32:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8006f36:	7b7a      	ldrb	r2, [r7, #13]
 8006f38:	4907      	ldr	r1, [pc, #28]	; (8006f58 <USARTEx_SetNbDataToProcess+0x90>)
 8006f3a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	0800a148 	.word	0x0800a148
 8006f58:	0800a150 	.word	0x0800a150

08006f5c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8006f60:	4907      	ldr	r1, [pc, #28]	; (8006f80 <MX_FATFS_Init+0x24>)
 8006f62:	4808      	ldr	r0, [pc, #32]	; (8006f84 <MX_FATFS_Init+0x28>)
 8006f64:	f000 f8b6 	bl	80070d4 <FATFS_LinkDriver>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8006f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f72:	e003      	b.n	8006f7c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006f74:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <MX_FATFS_Init+0x2c>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8006f7a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200009f8 	.word	0x200009f8
 8006f84:	20000010 	.word	0x20000010
 8006f88:	200009fc 	.word	0x200009fc

08006f8c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006f96:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <USER_initialize+0x24>)
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006f9c:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <USER_initialize+0x24>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	2000000c 	.word	0x2000000c

08006fb4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006fbe:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <USER_status+0x24>)
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006fc4:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <USER_status+0x24>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	2000000c 	.word	0x2000000c

08006fdc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006fec:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800700a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	603a      	str	r2, [r7, #0]
 8007022:	71fb      	strb	r3, [r7, #7]
 8007024:	460b      	mov	r3, r1
 8007026:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	73fb      	strb	r3, [r7, #15]
    return res;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
	...

0800703c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	4613      	mov	r3, r2
 8007048:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800704a:	2301      	movs	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007052:	4b1f      	ldr	r3, [pc, #124]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 8007054:	7a5b      	ldrb	r3, [r3, #9]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d131      	bne.n	80070c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800705c:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 800705e:	7a5b      	ldrb	r3, [r3, #9]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	4b1a      	ldr	r3, [pc, #104]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 8007066:	2100      	movs	r1, #0
 8007068:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800706a:	4b19      	ldr	r3, [pc, #100]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 800706c:	7a5b      	ldrb	r3, [r3, #9]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	4a17      	ldr	r2, [pc, #92]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800707a:	4b15      	ldr	r3, [pc, #84]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 800707c:	7a5b      	ldrb	r3, [r3, #9]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 8007084:	4413      	add	r3, r2
 8007086:	79fa      	ldrb	r2, [r7, #7]
 8007088:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800708a:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 800708c:	7a5b      	ldrb	r3, [r3, #9]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	b2d1      	uxtb	r1, r2
 8007094:	4a0e      	ldr	r2, [pc, #56]	; (80070d0 <FATFS_LinkDriverEx+0x94>)
 8007096:	7251      	strb	r1, [r2, #9]
 8007098:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800709a:	7dbb      	ldrb	r3, [r7, #22]
 800709c:	3330      	adds	r3, #48	; 0x30
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3301      	adds	r3, #1
 80070a8:	223a      	movs	r2, #58	; 0x3a
 80070aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	3302      	adds	r3, #2
 80070b0:	222f      	movs	r2, #47	; 0x2f
 80070b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	3303      	adds	r3, #3
 80070b8:	2200      	movs	r2, #0
 80070ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20000a00 	.word	0x20000a00

080070d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80070de:	2200      	movs	r2, #0
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff ffaa 	bl	800703c <FATFS_LinkDriverEx>
 80070e8:	4603      	mov	r3, r0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <__NVIC_SetPriority>:
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007104:	2b00      	cmp	r3, #0
 8007106:	db0a      	blt.n	800711e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	b2da      	uxtb	r2, r3
 800710c:	490c      	ldr	r1, [pc, #48]	; (8007140 <__NVIC_SetPriority+0x4c>)
 800710e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007112:	0112      	lsls	r2, r2, #4
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	440b      	add	r3, r1
 8007118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800711c:	e00a      	b.n	8007134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	b2da      	uxtb	r2, r3
 8007122:	4908      	ldr	r1, [pc, #32]	; (8007144 <__NVIC_SetPriority+0x50>)
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	3b04      	subs	r3, #4
 800712c:	0112      	lsls	r2, r2, #4
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	440b      	add	r3, r1
 8007132:	761a      	strb	r2, [r3, #24]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	e000e100 	.word	0xe000e100
 8007144:	e000ed00 	.word	0xe000ed00

08007148 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <SysTick_Handler+0x1c>)
 800714e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007150:	f001 fe20 	bl	8008d94 <xTaskGetSchedulerState>
 8007154:	4603      	mov	r3, r0
 8007156:	2b01      	cmp	r3, #1
 8007158:	d001      	beq.n	800715e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800715a:	f002 fc05 	bl	8009968 <xPortSysTickHandler>
  }
}
 800715e:	bf00      	nop
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	e000e010 	.word	0xe000e010

08007168 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800716c:	2100      	movs	r1, #0
 800716e:	f06f 0004 	mvn.w	r0, #4
 8007172:	f7ff ffbf 	bl	80070f4 <__NVIC_SetPriority>
#endif
}
 8007176:	bf00      	nop
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007182:	f3ef 8305 	mrs	r3, IPSR
 8007186:	603b      	str	r3, [r7, #0]
  return(result);
 8007188:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800718e:	f06f 0305 	mvn.w	r3, #5
 8007192:	607b      	str	r3, [r7, #4]
 8007194:	e00c      	b.n	80071b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007196:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <osKernelInitialize+0x44>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800719e:	4b08      	ldr	r3, [pc, #32]	; (80071c0 <osKernelInitialize+0x44>)
 80071a0:	2201      	movs	r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	607b      	str	r3, [r7, #4]
 80071a8:	e002      	b.n	80071b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071b0:	687b      	ldr	r3, [r7, #4]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000a0c 	.word	0x20000a0c

080071c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ca:	f3ef 8305 	mrs	r3, IPSR
 80071ce:	603b      	str	r3, [r7, #0]
  return(result);
 80071d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <osKernelStart+0x1a>
    stat = osErrorISR;
 80071d6:	f06f 0305 	mvn.w	r3, #5
 80071da:	607b      	str	r3, [r7, #4]
 80071dc:	e010      	b.n	8007200 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071de:	4b0b      	ldr	r3, [pc, #44]	; (800720c <osKernelStart+0x48>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d109      	bne.n	80071fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071e6:	f7ff ffbf 	bl	8007168 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071ea:	4b08      	ldr	r3, [pc, #32]	; (800720c <osKernelStart+0x48>)
 80071ec:	2202      	movs	r2, #2
 80071ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071f0:	f001 f964 	bl	80084bc <vTaskStartScheduler>
      stat = osOK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	607b      	str	r3, [r7, #4]
 80071f8:	e002      	b.n	8007200 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007200:	687b      	ldr	r3, [r7, #4]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000a0c 	.word	0x20000a0c

08007210 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007210:	b580      	push	{r7, lr}
 8007212:	b08e      	sub	sp, #56	; 0x38
 8007214:	af04      	add	r7, sp, #16
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800721c:	2300      	movs	r3, #0
 800721e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007220:	f3ef 8305 	mrs	r3, IPSR
 8007224:	617b      	str	r3, [r7, #20]
  return(result);
 8007226:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007228:	2b00      	cmp	r3, #0
 800722a:	d17e      	bne.n	800732a <osThreadNew+0x11a>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d07b      	beq.n	800732a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007232:	2380      	movs	r3, #128	; 0x80
 8007234:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007236:	2318      	movs	r3, #24
 8007238:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800723e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007242:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d045      	beq.n	80072d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <osThreadNew+0x48>
        name = attr->name;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <osThreadNew+0x6e>
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2b38      	cmp	r3, #56	; 0x38
 8007270:	d805      	bhi.n	800727e <osThreadNew+0x6e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <osThreadNew+0x72>
        return (NULL);
 800727e:	2300      	movs	r3, #0
 8007280:	e054      	b.n	800732c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	089b      	lsrs	r3, r3, #2
 8007290:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00e      	beq.n	80072b8 <osThreadNew+0xa8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	2bbb      	cmp	r3, #187	; 0xbb
 80072a0:	d90a      	bls.n	80072b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d006      	beq.n	80072b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <osThreadNew+0xa8>
        mem = 1;
 80072b2:	2301      	movs	r3, #1
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e010      	b.n	80072da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10c      	bne.n	80072da <osThreadNew+0xca>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d108      	bne.n	80072da <osThreadNew+0xca>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d104      	bne.n	80072da <osThreadNew+0xca>
          mem = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61bb      	str	r3, [r7, #24]
 80072d4:	e001      	b.n	80072da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d110      	bne.n	8007302 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072e8:	9202      	str	r2, [sp, #8]
 80072ea:	9301      	str	r3, [sp, #4]
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6a3a      	ldr	r2, [r7, #32]
 80072f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fe0c 	bl	8007f14 <xTaskCreateStatic>
 80072fc:	4603      	mov	r3, r0
 80072fe:	613b      	str	r3, [r7, #16]
 8007300:	e013      	b.n	800732a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d110      	bne.n	800732a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	b29a      	uxth	r2, r3
 800730c:	f107 0310 	add.w	r3, r7, #16
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fe57 	bl	8007fce <xTaskCreate>
 8007320:	4603      	mov	r3, r0
 8007322:	2b01      	cmp	r3, #1
 8007324:	d001      	beq.n	800732a <osThreadNew+0x11a>
            hTask = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800732a:	693b      	ldr	r3, [r7, #16]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3728      	adds	r7, #40	; 0x28
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800733c:	f3ef 8305 	mrs	r3, IPSR
 8007340:	60bb      	str	r3, [r7, #8]
  return(result);
 8007342:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <osDelay+0x1c>
    stat = osErrorISR;
 8007348:	f06f 0305 	mvn.w	r3, #5
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e007      	b.n	8007360 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <osDelay+0x2c>
      vTaskDelay(ticks);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 f804 	bl	8008368 <vTaskDelay>
    }
  }

  return (stat);
 8007360:	68fb      	ldr	r3, [r7, #12]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4a07      	ldr	r2, [pc, #28]	; (8007398 <vApplicationGetIdleTaskMemory+0x2c>)
 800737c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	4a06      	ldr	r2, [pc, #24]	; (800739c <vApplicationGetIdleTaskMemory+0x30>)
 8007382:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2280      	movs	r2, #128	; 0x80
 8007388:	601a      	str	r2, [r3, #0]
}
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	20000a10 	.word	0x20000a10
 800739c:	20000acc 	.word	0x20000acc

080073a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4a07      	ldr	r2, [pc, #28]	; (80073cc <vApplicationGetTimerTaskMemory+0x2c>)
 80073b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4a06      	ldr	r2, [pc, #24]	; (80073d0 <vApplicationGetTimerTaskMemory+0x30>)
 80073b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073be:	601a      	str	r2, [r3, #0]
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	20000ccc 	.word	0x20000ccc
 80073d0:	20000d88 	.word	0x20000d88

080073d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f103 0208 	add.w	r2, r3, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f103 0208 	add.w	r2, r3, #8
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f103 0208 	add.w	r2, r3, #8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
}
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800748c:	d103      	bne.n	8007496 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	e00c      	b.n	80074b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3308      	adds	r3, #8
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	e002      	b.n	80074a4 <vListInsert+0x2e>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d2f6      	bcs.n	800749e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	601a      	str	r2, [r3, #0]
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6892      	ldr	r2, [r2, #8]
 80074fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6852      	ldr	r2, [r2, #4]
 8007508:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d103      	bne.n	800751c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	1e5a      	subs	r2, r3, #1
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007566:	f002 f96d 	bl	8009844 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	441a      	add	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007596:	3b01      	subs	r3, #1
 8007598:	68f9      	ldr	r1, [r7, #12]
 800759a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	441a      	add	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	22ff      	movs	r2, #255	; 0xff
 80075aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	22ff      	movs	r2, #255	; 0xff
 80075b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d114      	bne.n	80075e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01a      	beq.n	80075fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3310      	adds	r3, #16
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fa11 	bl	80089f0 <xTaskRemoveFromEventList>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d012      	beq.n	80075fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075d4:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <xQueueGenericReset+0xcc>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	e009      	b.n	80075fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3310      	adds	r3, #16
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff fef2 	bl	80073d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3324      	adds	r3, #36	; 0x24
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff feed 	bl	80073d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075fa:	f002 f953 	bl	80098a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075fe:	2301      	movs	r3, #1
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08e      	sub	sp, #56	; 0x38
 8007610:	af02      	add	r7, sp, #8
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <xQueueGenericCreateStatic+0x52>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <xQueueGenericCreateStatic+0x56>
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <xQueueGenericCreateStatic+0x58>
 8007662:	2300      	movs	r3, #0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10a      	bne.n	800767e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	623b      	str	r3, [r7, #32]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <xQueueGenericCreateStatic+0x7e>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <xQueueGenericCreateStatic+0x82>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <xQueueGenericCreateStatic+0x84>
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	61fb      	str	r3, [r7, #28]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076aa:	2350      	movs	r3, #80	; 0x50
 80076ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b50      	cmp	r3, #80	; 0x50
 80076b2:	d00a      	beq.n	80076ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	61bb      	str	r3, [r7, #24]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00d      	beq.n	80076f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	4613      	mov	r3, r2
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	68b9      	ldr	r1, [r7, #8]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f805 	bl	80076fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3730      	adds	r7, #48	; 0x30
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d103      	bne.n	8007718 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	e002      	b.n	800771e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800772a:	2101      	movs	r1, #1
 800772c:	69b8      	ldr	r0, [r7, #24]
 800772e:	f7ff ff05 	bl	800753c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	78fa      	ldrb	r2, [r7, #3]
 8007736:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800773a:	bf00      	nop
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08e      	sub	sp, #56	; 0x38
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007752:	2300      	movs	r3, #0
 8007754:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <xQueueGenericSend+0x32>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d103      	bne.n	8007784 <xQueueGenericSend+0x40>
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <xQueueGenericSend+0x44>
 8007784:	2301      	movs	r3, #1
 8007786:	e000      	b.n	800778a <xQueueGenericSend+0x46>
 8007788:	2300      	movs	r3, #0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10a      	bne.n	80077a4 <xQueueGenericSend+0x60>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d103      	bne.n	80077b2 <xQueueGenericSend+0x6e>
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <xQueueGenericSend+0x72>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <xQueueGenericSend+0x74>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	623b      	str	r3, [r7, #32]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077d2:	f001 fadf 	bl	8008d94 <xTaskGetSchedulerState>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d102      	bne.n	80077e2 <xQueueGenericSend+0x9e>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <xQueueGenericSend+0xa2>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <xQueueGenericSend+0xa4>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xQueueGenericSend+0xbe>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	61fb      	str	r3, [r7, #28]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007802:	f002 f81f 	bl	8009844 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780e:	429a      	cmp	r2, r3
 8007810:	d302      	bcc.n	8007818 <xQueueGenericSend+0xd4>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d129      	bne.n	800786c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800781e:	f000 fa0b 	bl	8007c38 <prvCopyDataToQueue>
 8007822:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d010      	beq.n	800784e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	3324      	adds	r3, #36	; 0x24
 8007830:	4618      	mov	r0, r3
 8007832:	f001 f8dd 	bl	80089f0 <xTaskRemoveFromEventList>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d013      	beq.n	8007864 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800783c:	4b3f      	ldr	r3, [pc, #252]	; (800793c <xQueueGenericSend+0x1f8>)
 800783e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	e00a      	b.n	8007864 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	2b00      	cmp	r3, #0
 8007852:	d007      	beq.n	8007864 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007854:	4b39      	ldr	r3, [pc, #228]	; (800793c <xQueueGenericSend+0x1f8>)
 8007856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007864:	f002 f81e 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 8007868:	2301      	movs	r3, #1
 800786a:	e063      	b.n	8007934 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d103      	bne.n	800787a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007872:	f002 f817 	bl	80098a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007876:	2300      	movs	r3, #0
 8007878:	e05c      	b.n	8007934 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800787a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787c:	2b00      	cmp	r3, #0
 800787e:	d106      	bne.n	800788e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007880:	f107 0314 	add.w	r3, r7, #20
 8007884:	4618      	mov	r0, r3
 8007886:	f001 f917 	bl	8008ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800788a:	2301      	movs	r3, #1
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800788e:	f002 f809 	bl	80098a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007892:	f000 fe83 	bl	800859c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007896:	f001 ffd5 	bl	8009844 <vPortEnterCritical>
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078a0:	b25b      	sxtb	r3, r3
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a6:	d103      	bne.n	80078b0 <xQueueGenericSend+0x16c>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078b6:	b25b      	sxtb	r3, r3
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078bc:	d103      	bne.n	80078c6 <xQueueGenericSend+0x182>
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078c6:	f001 ffed 	bl	80098a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078ca:	1d3a      	adds	r2, r7, #4
 80078cc:	f107 0314 	add.w	r3, r7, #20
 80078d0:	4611      	mov	r1, r2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f001 f906 	bl	8008ae4 <xTaskCheckForTimeOut>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d124      	bne.n	8007928 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078e0:	f000 faa2 	bl	8007e28 <prvIsQueueFull>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d018      	beq.n	800791c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	3310      	adds	r3, #16
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	4611      	mov	r1, r2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 f82c 	bl	8008950 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078fa:	f000 fa2d 	bl	8007d58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078fe:	f000 fe5b 	bl	80085b8 <xTaskResumeAll>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	f47f af7c 	bne.w	8007802 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800790a:	4b0c      	ldr	r3, [pc, #48]	; (800793c <xQueueGenericSend+0x1f8>)
 800790c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	e772      	b.n	8007802 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800791c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800791e:	f000 fa1b 	bl	8007d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007922:	f000 fe49 	bl	80085b8 <xTaskResumeAll>
 8007926:	e76c      	b.n	8007802 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800792a:	f000 fa15 	bl	8007d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800792e:	f000 fe43 	bl	80085b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007932:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007934:	4618      	mov	r0, r3
 8007936:	3738      	adds	r7, #56	; 0x38
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b090      	sub	sp, #64	; 0x40
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d103      	bne.n	800797c <xQueueGenericSendFromISR+0x3c>
 8007974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <xQueueGenericSendFromISR+0x40>
 800797c:	2301      	movs	r3, #1
 800797e:	e000      	b.n	8007982 <xQueueGenericSendFromISR+0x42>
 8007980:	2300      	movs	r3, #0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d103      	bne.n	80079aa <xQueueGenericSendFromISR+0x6a>
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d101      	bne.n	80079ae <xQueueGenericSendFromISR+0x6e>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <xQueueGenericSendFromISR+0x70>
 80079ae:	2300      	movs	r3, #0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	623b      	str	r3, [r7, #32]
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079ca:	f002 f81d 	bl	8009a08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079ce:	f3ef 8211 	mrs	r2, BASEPRI
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	61fa      	str	r2, [r7, #28]
 80079e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d302      	bcc.n	80079fc <xQueueGenericSendFromISR+0xbc>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d12f      	bne.n	8007a5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a12:	f000 f911 	bl	8007c38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a1e:	d112      	bne.n	8007a46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d016      	beq.n	8007a56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	3324      	adds	r3, #36	; 0x24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 ffdf 	bl	80089f0 <xTaskRemoveFromEventList>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00e      	beq.n	8007a56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	e007      	b.n	8007a56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	b25a      	sxtb	r2, r3
 8007a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a56:	2301      	movs	r3, #1
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007a5a:	e001      	b.n	8007a60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a62:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3740      	adds	r7, #64	; 0x40
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08c      	sub	sp, #48	; 0x30
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a84:	2300      	movs	r3, #0
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <xQueueReceive+0x30>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	623b      	str	r3, [r7, #32]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <xQueueReceive+0x3e>
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <xQueueReceive+0x42>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <xQueueReceive+0x44>
 8007aba:	2300      	movs	r3, #0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <xQueueReceive+0x5e>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	61fb      	str	r3, [r7, #28]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ad6:	f001 f95d 	bl	8008d94 <xTaskGetSchedulerState>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d102      	bne.n	8007ae6 <xQueueReceive+0x6e>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <xQueueReceive+0x72>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <xQueueReceive+0x74>
 8007aea:	2300      	movs	r3, #0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <xQueueReceive+0x8e>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	61bb      	str	r3, [r7, #24]
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b06:	f001 fe9d 	bl	8009844 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01f      	beq.n	8007b56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b1a:	f000 f8f7 	bl	8007d0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	1e5a      	subs	r2, r3, #1
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00f      	beq.n	8007b4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	3310      	adds	r3, #16
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 ff5c 	bl	80089f0 <xTaskRemoveFromEventList>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b3e:	4b3d      	ldr	r3, [pc, #244]	; (8007c34 <xQueueReceive+0x1bc>)
 8007b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b4e:	f001 fea9 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e069      	b.n	8007c2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b5c:	f001 fea2 	bl	80098a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b60:	2300      	movs	r3, #0
 8007b62:	e062      	b.n	8007c2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b6a:	f107 0310 	add.w	r3, r7, #16
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 ffa2 	bl	8008ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b74:	2301      	movs	r3, #1
 8007b76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b78:	f001 fe94 	bl	80098a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b7c:	f000 fd0e 	bl	800859c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b80:	f001 fe60 	bl	8009844 <vPortEnterCritical>
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b8a:	b25b      	sxtb	r3, r3
 8007b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b90:	d103      	bne.n	8007b9a <xQueueReceive+0x122>
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba6:	d103      	bne.n	8007bb0 <xQueueReceive+0x138>
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bb0:	f001 fe78 	bl	80098a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bb4:	1d3a      	adds	r2, r7, #4
 8007bb6:	f107 0310 	add.w	r3, r7, #16
 8007bba:	4611      	mov	r1, r2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 ff91 	bl	8008ae4 <xTaskCheckForTimeOut>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d123      	bne.n	8007c10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bca:	f000 f917 	bl	8007dfc <prvIsQueueEmpty>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d017      	beq.n	8007c04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	3324      	adds	r3, #36	; 0x24
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	4611      	mov	r1, r2
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 feb7 	bl	8008950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be4:	f000 f8b8 	bl	8007d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007be8:	f000 fce6 	bl	80085b8 <xTaskResumeAll>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d189      	bne.n	8007b06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007bf2:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <xQueueReceive+0x1bc>)
 8007bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	e780      	b.n	8007b06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c06:	f000 f8a7 	bl	8007d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c0a:	f000 fcd5 	bl	80085b8 <xTaskResumeAll>
 8007c0e:	e77a      	b.n	8007b06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c12:	f000 f8a1 	bl	8007d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c16:	f000 fccf 	bl	80085b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c1c:	f000 f8ee 	bl	8007dfc <prvIsQueueEmpty>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f43f af6f 	beq.w	8007b06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3730      	adds	r7, #48	; 0x30
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	e000ed04 	.word	0xe000ed04

08007c38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10d      	bne.n	8007c72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d14d      	bne.n	8007cfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f001 f8b4 	bl	8008dd0 <xTaskPriorityDisinherit>
 8007c68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	609a      	str	r2, [r3, #8]
 8007c70:	e043      	b.n	8007cfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d119      	bne.n	8007cac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6858      	ldr	r0, [r3, #4]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c80:	461a      	mov	r2, r3
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	f002 f910 	bl	8009ea8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	441a      	add	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d32b      	bcc.n	8007cfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	605a      	str	r2, [r3, #4]
 8007caa:	e026      	b.n	8007cfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	68d8      	ldr	r0, [r3, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	f002 f8f6 	bl	8009ea8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc4:	425b      	negs	r3, r3
 8007cc6:	441a      	add	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d207      	bcs.n	8007ce8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	425b      	negs	r3, r3
 8007ce2:	441a      	add	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d105      	bne.n	8007cfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d02:	697b      	ldr	r3, [r7, #20]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d018      	beq.n	8007d50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	441a      	add	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d303      	bcc.n	8007d40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68d9      	ldr	r1, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6838      	ldr	r0, [r7, #0]
 8007d4c:	f002 f8ac 	bl	8009ea8 <memcpy>
	}
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d60:	f001 fd70 	bl	8009844 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d6c:	e011      	b.n	8007d92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d012      	beq.n	8007d9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3324      	adds	r3, #36	; 0x24
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fe38 	bl	80089f0 <xTaskRemoveFromEventList>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d86:	f000 ff0f 	bl	8008ba8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	dce9      	bgt.n	8007d6e <prvUnlockQueue+0x16>
 8007d9a:	e000      	b.n	8007d9e <prvUnlockQueue+0x46>
					break;
 8007d9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	22ff      	movs	r2, #255	; 0xff
 8007da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007da6:	f001 fd7d 	bl	80098a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007daa:	f001 fd4b 	bl	8009844 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007db4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007db6:	e011      	b.n	8007ddc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d012      	beq.n	8007de6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3310      	adds	r3, #16
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fe13 	bl	80089f0 <xTaskRemoveFromEventList>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007dd0:	f000 feea 	bl	8008ba8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	dce9      	bgt.n	8007db8 <prvUnlockQueue+0x60>
 8007de4:	e000      	b.n	8007de8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007de6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	22ff      	movs	r2, #255	; 0xff
 8007dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007df0:	f001 fd58 	bl	80098a4 <vPortExitCritical>
}
 8007df4:	bf00      	nop
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e04:	f001 fd1e 	bl	8009844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e10:	2301      	movs	r3, #1
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e001      	b.n	8007e1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e1a:	f001 fd43 	bl	80098a4 <vPortExitCritical>

	return xReturn;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e30:	f001 fd08 	bl	8009844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d102      	bne.n	8007e46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e40:	2301      	movs	r3, #1
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e001      	b.n	8007e4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e4a:	f001 fd2b 	bl	80098a4 <vPortExitCritical>

	return xReturn;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	e014      	b.n	8007e92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e68:	4a0f      	ldr	r2, [pc, #60]	; (8007ea8 <vQueueAddToRegistry+0x50>)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10b      	bne.n	8007e8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e74:	490c      	ldr	r1, [pc, #48]	; (8007ea8 <vQueueAddToRegistry+0x50>)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <vQueueAddToRegistry+0x50>)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	4413      	add	r3, r2
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e8a:	e006      	b.n	8007e9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b07      	cmp	r3, #7
 8007e96:	d9e7      	bls.n	8007e68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	20001188 	.word	0x20001188

08007eac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ebc:	f001 fcc2 	bl	8009844 <vPortEnterCritical>
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec6:	b25b      	sxtb	r3, r3
 8007ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ecc:	d103      	bne.n	8007ed6 <vQueueWaitForMessageRestricted+0x2a>
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007edc:	b25b      	sxtb	r3, r3
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ee2:	d103      	bne.n	8007eec <vQueueWaitForMessageRestricted+0x40>
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eec:	f001 fcda 	bl	80098a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d106      	bne.n	8007f06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	3324      	adds	r3, #36	; 0x24
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 fd49 	bl	8008998 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f06:	6978      	ldr	r0, [r7, #20]
 8007f08:	f7ff ff26 	bl	8007d58 <prvUnlockQueue>
	}
 8007f0c:	bf00      	nop
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08e      	sub	sp, #56	; 0x38
 8007f18:	af04      	add	r7, sp, #16
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10a      	bne.n	8007f3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	623b      	str	r3, [r7, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	e7fe      	b.n	8007f3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <xTaskCreateStatic+0x46>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	61fb      	str	r3, [r7, #28]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f5a:	23bc      	movs	r3, #188	; 0xbc
 8007f5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2bbc      	cmp	r3, #188	; 0xbc
 8007f62:	d00a      	beq.n	8007f7a <xTaskCreateStatic+0x66>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	61bb      	str	r3, [r7, #24]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d01e      	beq.n	8007fc0 <xTaskCreateStatic+0xac>
 8007f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01b      	beq.n	8007fc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9303      	str	r3, [sp, #12]
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	9302      	str	r3, [sp, #8]
 8007fa2:	f107 0314 	add.w	r3, r7, #20
 8007fa6:	9301      	str	r3, [sp, #4]
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 f850 	bl	8008058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fba:	f000 f8f3 	bl	80081a4 <prvAddNewTaskToReadyList>
 8007fbe:	e001      	b.n	8007fc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fc4:	697b      	ldr	r3, [r7, #20]
	}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3728      	adds	r7, #40	; 0x28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b08c      	sub	sp, #48	; 0x30
 8007fd2:	af04      	add	r7, sp, #16
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	603b      	str	r3, [r7, #0]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 fd50 	bl	8009a88 <pvPortMalloc>
 8007fe8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00e      	beq.n	800800e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ff0:	20bc      	movs	r0, #188	; 0xbc
 8007ff2:	f001 fd49 	bl	8009a88 <pvPortMalloc>
 8007ff6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	631a      	str	r2, [r3, #48]	; 0x30
 8008004:	e005      	b.n	8008012 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008006:	6978      	ldr	r0, [r7, #20]
 8008008:	f001 fe0a 	bl	8009c20 <vPortFree>
 800800c:	e001      	b.n	8008012 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d017      	beq.n	8008048 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008020:	88fa      	ldrh	r2, [r7, #6]
 8008022:	2300      	movs	r3, #0
 8008024:	9303      	str	r3, [sp, #12]
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	9302      	str	r3, [sp, #8]
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f80e 	bl	8008058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800803c:	69f8      	ldr	r0, [r7, #28]
 800803e:	f000 f8b1 	bl	80081a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008042:	2301      	movs	r3, #1
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	e002      	b.n	800804e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800804c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800804e:	69bb      	ldr	r3, [r7, #24]
	}
 8008050:	4618      	mov	r0, r3
 8008052:	3720      	adds	r7, #32
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	461a      	mov	r2, r3
 8008070:	21a5      	movs	r1, #165	; 0xa5
 8008072:	f001 ff27 	bl	8009ec4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008080:	3b01      	subs	r3, #1
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	f023 0307 	bic.w	r3, r3, #7
 800808e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	617b      	str	r3, [r7, #20]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d01f      	beq.n	80080f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080b6:	2300      	movs	r3, #0
 80080b8:	61fb      	str	r3, [r7, #28]
 80080ba:	e012      	b.n	80080e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	4413      	add	r3, r2
 80080c2:	7819      	ldrb	r1, [r3, #0]
 80080c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	4413      	add	r3, r2
 80080ca:	3334      	adds	r3, #52	; 0x34
 80080cc:	460a      	mov	r2, r1
 80080ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d006      	beq.n	80080ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3301      	adds	r3, #1
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	2b0f      	cmp	r3, #15
 80080e6:	d9e9      	bls.n	80080bc <prvInitialiseNewTask+0x64>
 80080e8:	e000      	b.n	80080ec <prvInitialiseNewTask+0x94>
			{
				break;
 80080ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080f4:	e003      	b.n	80080fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	2b37      	cmp	r3, #55	; 0x37
 8008102:	d901      	bls.n	8008108 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008104:	2337      	movs	r3, #55	; 0x37
 8008106:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800810c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008112:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	2200      	movs	r2, #0
 8008118:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	3304      	adds	r3, #4
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff f978 	bl	8007414 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	3318      	adds	r3, #24
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff f973 	bl	8007414 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008132:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008142:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	2200      	movs	r2, #0
 8008148:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	2200      	movs	r2, #0
 8008150:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	3354      	adds	r3, #84	; 0x54
 8008158:	2260      	movs	r2, #96	; 0x60
 800815a:	2100      	movs	r1, #0
 800815c:	4618      	mov	r0, r3
 800815e:	f001 feb1 	bl	8009ec4 <memset>
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	4a0c      	ldr	r2, [pc, #48]	; (8008198 <prvInitialiseNewTask+0x140>)
 8008166:	659a      	str	r2, [r3, #88]	; 0x58
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	4a0c      	ldr	r2, [pc, #48]	; (800819c <prvInitialiseNewTask+0x144>)
 800816c:	65da      	str	r2, [r3, #92]	; 0x5c
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	4a0b      	ldr	r2, [pc, #44]	; (80081a0 <prvInitialiseNewTask+0x148>)
 8008172:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	68f9      	ldr	r1, [r7, #12]
 8008178:	69b8      	ldr	r0, [r7, #24]
 800817a:	f001 fa39 	bl	80095f0 <pxPortInitialiseStack>
 800817e:	4602      	mov	r2, r0
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800818a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008190:	bf00      	nop
 8008192:	3720      	adds	r7, #32
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	0800a178 	.word	0x0800a178
 800819c:	0800a198 	.word	0x0800a198
 80081a0:	0800a158 	.word	0x0800a158

080081a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081ac:	f001 fb4a 	bl	8009844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081b0:	4b2d      	ldr	r3, [pc, #180]	; (8008268 <prvAddNewTaskToReadyList+0xc4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	4a2c      	ldr	r2, [pc, #176]	; (8008268 <prvAddNewTaskToReadyList+0xc4>)
 80081b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081ba:	4b2c      	ldr	r3, [pc, #176]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d109      	bne.n	80081d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081c2:	4a2a      	ldr	r2, [pc, #168]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081c8:	4b27      	ldr	r3, [pc, #156]	; (8008268 <prvAddNewTaskToReadyList+0xc4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d110      	bne.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081d0:	f000 fd0e 	bl	8008bf0 <prvInitialiseTaskLists>
 80081d4:	e00d      	b.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081d6:	4b26      	ldr	r3, [pc, #152]	; (8008270 <prvAddNewTaskToReadyList+0xcc>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081de:	4b23      	ldr	r3, [pc, #140]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d802      	bhi.n	80081f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081ec:	4a1f      	ldr	r2, [pc, #124]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081f2:	4b20      	ldr	r3, [pc, #128]	; (8008274 <prvAddNewTaskToReadyList+0xd0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3301      	adds	r3, #1
 80081f8:	4a1e      	ldr	r2, [pc, #120]	; (8008274 <prvAddNewTaskToReadyList+0xd0>)
 80081fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081fc:	4b1d      	ldr	r3, [pc, #116]	; (8008274 <prvAddNewTaskToReadyList+0xd0>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <prvAddNewTaskToReadyList+0xd4>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d903      	bls.n	8008218 <prvAddNewTaskToReadyList+0x74>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	4a18      	ldr	r2, [pc, #96]	; (8008278 <prvAddNewTaskToReadyList+0xd4>)
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4a15      	ldr	r2, [pc, #84]	; (800827c <prvAddNewTaskToReadyList+0xd8>)
 8008226:	441a      	add	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3304      	adds	r3, #4
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f7ff f8fd 	bl	800742e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008234:	f001 fb36 	bl	80098a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008238:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <prvAddNewTaskToReadyList+0xcc>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00e      	beq.n	800825e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008240:	4b0a      	ldr	r3, [pc, #40]	; (800826c <prvAddNewTaskToReadyList+0xc8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	429a      	cmp	r2, r3
 800824c:	d207      	bcs.n	800825e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800824e:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <prvAddNewTaskToReadyList+0xdc>)
 8008250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	2000169c 	.word	0x2000169c
 800826c:	200011c8 	.word	0x200011c8
 8008270:	200016a8 	.word	0x200016a8
 8008274:	200016b8 	.word	0x200016b8
 8008278:	200016a4 	.word	0x200016a4
 800827c:	200011cc 	.word	0x200011cc
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800828c:	f001 fada 	bl	8009844 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <vTaskDelete+0x18>
 8008296:	4b2c      	ldr	r3, [pc, #176]	; (8008348 <vTaskDelete+0xc4>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	e000      	b.n	800829e <vTaskDelete+0x1a>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff f91f 	bl	80074e8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d004      	beq.n	80082bc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3318      	adds	r3, #24
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff f916 	bl	80074e8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80082bc:	4b23      	ldr	r3, [pc, #140]	; (800834c <vTaskDelete+0xc8>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	4a22      	ldr	r2, [pc, #136]	; (800834c <vTaskDelete+0xc8>)
 80082c4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80082c6:	4b20      	ldr	r3, [pc, #128]	; (8008348 <vTaskDelete+0xc4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d10b      	bne.n	80082e8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	481e      	ldr	r0, [pc, #120]	; (8008350 <vTaskDelete+0xcc>)
 80082d8:	f7ff f8a9 	bl	800742e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80082dc:	4b1d      	ldr	r3, [pc, #116]	; (8008354 <vTaskDelete+0xd0>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3301      	adds	r3, #1
 80082e2:	4a1c      	ldr	r2, [pc, #112]	; (8008354 <vTaskDelete+0xd0>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	e009      	b.n	80082fc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80082e8:	4b1b      	ldr	r3, [pc, #108]	; (8008358 <vTaskDelete+0xd4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	4a1a      	ldr	r2, [pc, #104]	; (8008358 <vTaskDelete+0xd4>)
 80082f0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fcea 	bl	8008ccc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80082f8:	f000 fd1c 	bl	8008d34 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80082fc:	f001 fad2 	bl	80098a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008300:	4b16      	ldr	r3, [pc, #88]	; (800835c <vTaskDelete+0xd8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01b      	beq.n	8008340 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8008308:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <vTaskDelete+0xc4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	429a      	cmp	r2, r3
 8008310:	d116      	bne.n	8008340 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008312:	4b13      	ldr	r3, [pc, #76]	; (8008360 <vTaskDelete+0xdc>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <vTaskDelete+0xac>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	60bb      	str	r3, [r7, #8]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008330:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <vTaskDelete+0xe0>)
 8008332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008340:	bf00      	nop
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	200011c8 	.word	0x200011c8
 800834c:	200016b8 	.word	0x200016b8
 8008350:	20001670 	.word	0x20001670
 8008354:	20001684 	.word	0x20001684
 8008358:	2000169c 	.word	0x2000169c
 800835c:	200016a8 	.word	0x200016a8
 8008360:	200016c4 	.word	0x200016c4
 8008364:	e000ed04 	.word	0xe000ed04

08008368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d017      	beq.n	80083aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800837a:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <vTaskDelay+0x60>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <vTaskDelay+0x30>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	60bb      	str	r3, [r7, #8]
}
 8008394:	bf00      	nop
 8008396:	e7fe      	b.n	8008396 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008398:	f000 f900 	bl	800859c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fd84 	bl	8008eac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083a4:	f000 f908 	bl	80085b8 <xTaskResumeAll>
 80083a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d107      	bne.n	80083c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80083b0:	4b06      	ldr	r3, [pc, #24]	; (80083cc <vTaskDelay+0x64>)
 80083b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083c0:	bf00      	nop
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	200016c4 	.word	0x200016c4
 80083cc:	e000ed04 	.word	0xe000ed04

080083d0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80083d8:	f001 fa34 	bl	8009844 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <vTaskSuspend+0x18>
 80083e2:	4b30      	ldr	r3, [pc, #192]	; (80084a4 <vTaskSuspend+0xd4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	e000      	b.n	80083ea <vTaskSuspend+0x1a>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff f879 	bl	80074e8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d004      	beq.n	8008408 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3318      	adds	r3, #24
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff f870 	bl	80074e8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3304      	adds	r3, #4
 800840c:	4619      	mov	r1, r3
 800840e:	4826      	ldr	r0, [pc, #152]	; (80084a8 <vTaskSuspend+0xd8>)
 8008410:	f7ff f80d 	bl	800742e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b01      	cmp	r3, #1
 800841e:	d103      	bne.n	8008428 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8008428:	f001 fa3c 	bl	80098a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800842c:	4b1f      	ldr	r3, [pc, #124]	; (80084ac <vTaskSuspend+0xdc>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8008434:	f001 fa06 	bl	8009844 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8008438:	f000 fc7c 	bl	8008d34 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800843c:	f001 fa32 	bl	80098a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008440:	4b18      	ldr	r3, [pc, #96]	; (80084a4 <vTaskSuspend+0xd4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	429a      	cmp	r2, r3
 8008448:	d127      	bne.n	800849a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800844a:	4b18      	ldr	r3, [pc, #96]	; (80084ac <vTaskSuspend+0xdc>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d017      	beq.n	8008482 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008452:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <vTaskSuspend+0xe0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00a      	beq.n	8008470 <vTaskSuspend+0xa0>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	60bb      	str	r3, [r7, #8]
}
 800846c:	bf00      	nop
 800846e:	e7fe      	b.n	800846e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008470:	4b10      	ldr	r3, [pc, #64]	; (80084b4 <vTaskSuspend+0xe4>)
 8008472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008480:	e00b      	b.n	800849a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008482:	4b09      	ldr	r3, [pc, #36]	; (80084a8 <vTaskSuspend+0xd8>)
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <vTaskSuspend+0xe8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d103      	bne.n	8008496 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800848e:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <vTaskSuspend+0xd4>)
 8008490:	2200      	movs	r2, #0
 8008492:	601a      	str	r2, [r3, #0]
	}
 8008494:	e001      	b.n	800849a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8008496:	f000 f9f7 	bl	8008888 <vTaskSwitchContext>
	}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	200011c8 	.word	0x200011c8
 80084a8:	20001688 	.word	0x20001688
 80084ac:	200016a8 	.word	0x200016a8
 80084b0:	200016c4 	.word	0x200016c4
 80084b4:	e000ed04 	.word	0xe000ed04
 80084b8:	2000169c 	.word	0x2000169c

080084bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	; 0x28
 80084c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084ca:	463a      	mov	r2, r7
 80084cc:	1d39      	adds	r1, r7, #4
 80084ce:	f107 0308 	add.w	r3, r7, #8
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe ff4a 	bl	800736c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	9202      	str	r2, [sp, #8]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	2300      	movs	r3, #0
 80084e8:	460a      	mov	r2, r1
 80084ea:	4924      	ldr	r1, [pc, #144]	; (800857c <vTaskStartScheduler+0xc0>)
 80084ec:	4824      	ldr	r0, [pc, #144]	; (8008580 <vTaskStartScheduler+0xc4>)
 80084ee:	f7ff fd11 	bl	8007f14 <xTaskCreateStatic>
 80084f2:	4603      	mov	r3, r0
 80084f4:	4a23      	ldr	r2, [pc, #140]	; (8008584 <vTaskStartScheduler+0xc8>)
 80084f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084f8:	4b22      	ldr	r3, [pc, #136]	; (8008584 <vTaskStartScheduler+0xc8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008500:	2301      	movs	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e001      	b.n	800850a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d102      	bne.n	8008516 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008510:	f000 fd20 	bl	8008f54 <xTimerCreateTimerTask>
 8008514:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d11b      	bne.n	8008554 <vTaskStartScheduler+0x98>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	613b      	str	r3, [r7, #16]
}
 800852e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008530:	4b15      	ldr	r3, [pc, #84]	; (8008588 <vTaskStartScheduler+0xcc>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3354      	adds	r3, #84	; 0x54
 8008536:	4a15      	ldr	r2, [pc, #84]	; (800858c <vTaskStartScheduler+0xd0>)
 8008538:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800853a:	4b15      	ldr	r3, [pc, #84]	; (8008590 <vTaskStartScheduler+0xd4>)
 800853c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008540:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008542:	4b14      	ldr	r3, [pc, #80]	; (8008594 <vTaskStartScheduler+0xd8>)
 8008544:	2201      	movs	r2, #1
 8008546:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008548:	4b13      	ldr	r3, [pc, #76]	; (8008598 <vTaskStartScheduler+0xdc>)
 800854a:	2200      	movs	r2, #0
 800854c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800854e:	f001 f8d7 	bl	8009700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008552:	e00e      	b.n	8008572 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800855a:	d10a      	bne.n	8008572 <vTaskStartScheduler+0xb6>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	60fb      	str	r3, [r7, #12]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <vTaskStartScheduler+0xb4>
}
 8008572:	bf00      	nop
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	0800a0cc 	.word	0x0800a0cc
 8008580:	08008bc1 	.word	0x08008bc1
 8008584:	200016c0 	.word	0x200016c0
 8008588:	200011c8 	.word	0x200011c8
 800858c:	20000028 	.word	0x20000028
 8008590:	200016bc 	.word	0x200016bc
 8008594:	200016a8 	.word	0x200016a8
 8008598:	200016a0 	.word	0x200016a0

0800859c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085a0:	4b04      	ldr	r3, [pc, #16]	; (80085b4 <vTaskSuspendAll+0x18>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3301      	adds	r3, #1
 80085a6:	4a03      	ldr	r2, [pc, #12]	; (80085b4 <vTaskSuspendAll+0x18>)
 80085a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80085aa:	bf00      	nop
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	200016c4 	.word	0x200016c4

080085b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085c6:	4b42      	ldr	r3, [pc, #264]	; (80086d0 <xTaskResumeAll+0x118>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	603b      	str	r3, [r7, #0]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085e4:	f001 f92e 	bl	8009844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085e8:	4b39      	ldr	r3, [pc, #228]	; (80086d0 <xTaskResumeAll+0x118>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	4a38      	ldr	r2, [pc, #224]	; (80086d0 <xTaskResumeAll+0x118>)
 80085f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085f2:	4b37      	ldr	r3, [pc, #220]	; (80086d0 <xTaskResumeAll+0x118>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d162      	bne.n	80086c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085fa:	4b36      	ldr	r3, [pc, #216]	; (80086d4 <xTaskResumeAll+0x11c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d05e      	beq.n	80086c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008602:	e02f      	b.n	8008664 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008604:	4b34      	ldr	r3, [pc, #208]	; (80086d8 <xTaskResumeAll+0x120>)
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3318      	adds	r3, #24
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe ff69 	bl	80074e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3304      	adds	r3, #4
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe ff64 	bl	80074e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008624:	4b2d      	ldr	r3, [pc, #180]	; (80086dc <xTaskResumeAll+0x124>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d903      	bls.n	8008634 <xTaskResumeAll+0x7c>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	4a2a      	ldr	r2, [pc, #168]	; (80086dc <xTaskResumeAll+0x124>)
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4a27      	ldr	r2, [pc, #156]	; (80086e0 <xTaskResumeAll+0x128>)
 8008642:	441a      	add	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3304      	adds	r3, #4
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f7fe feef 	bl	800742e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008654:	4b23      	ldr	r3, [pc, #140]	; (80086e4 <xTaskResumeAll+0x12c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	429a      	cmp	r2, r3
 800865c:	d302      	bcc.n	8008664 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800865e:	4b22      	ldr	r3, [pc, #136]	; (80086e8 <xTaskResumeAll+0x130>)
 8008660:	2201      	movs	r2, #1
 8008662:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008664:	4b1c      	ldr	r3, [pc, #112]	; (80086d8 <xTaskResumeAll+0x120>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1cb      	bne.n	8008604 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008672:	f000 fb5f 	bl	8008d34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008676:	4b1d      	ldr	r3, [pc, #116]	; (80086ec <xTaskResumeAll+0x134>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d010      	beq.n	80086a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008682:	f000 f847 	bl	8008714 <xTaskIncrementTick>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800868c:	4b16      	ldr	r3, [pc, #88]	; (80086e8 <xTaskResumeAll+0x130>)
 800868e:	2201      	movs	r2, #1
 8008690:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	3b01      	subs	r3, #1
 8008696:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1f1      	bne.n	8008682 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800869e:	4b13      	ldr	r3, [pc, #76]	; (80086ec <xTaskResumeAll+0x134>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086a4:	4b10      	ldr	r3, [pc, #64]	; (80086e8 <xTaskResumeAll+0x130>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d009      	beq.n	80086c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086ac:	2301      	movs	r3, #1
 80086ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086b0:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <xTaskResumeAll+0x138>)
 80086b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086c0:	f001 f8f0 	bl	80098a4 <vPortExitCritical>

	return xAlreadyYielded;
 80086c4:	68bb      	ldr	r3, [r7, #8]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	200016c4 	.word	0x200016c4
 80086d4:	2000169c 	.word	0x2000169c
 80086d8:	2000165c 	.word	0x2000165c
 80086dc:	200016a4 	.word	0x200016a4
 80086e0:	200011cc 	.word	0x200011cc
 80086e4:	200011c8 	.word	0x200011c8
 80086e8:	200016b0 	.word	0x200016b0
 80086ec:	200016ac 	.word	0x200016ac
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086fa:	4b05      	ldr	r3, [pc, #20]	; (8008710 <xTaskGetTickCount+0x1c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008700:	687b      	ldr	r3, [r7, #4]
}
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	200016a0 	.word	0x200016a0

08008714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800871a:	2300      	movs	r3, #0
 800871c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800871e:	4b4f      	ldr	r3, [pc, #316]	; (800885c <xTaskIncrementTick+0x148>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	f040 808f 	bne.w	8008846 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008728:	4b4d      	ldr	r3, [pc, #308]	; (8008860 <xTaskIncrementTick+0x14c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3301      	adds	r3, #1
 800872e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008730:	4a4b      	ldr	r2, [pc, #300]	; (8008860 <xTaskIncrementTick+0x14c>)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d120      	bne.n	800877e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800873c:	4b49      	ldr	r3, [pc, #292]	; (8008864 <xTaskIncrementTick+0x150>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <xTaskIncrementTick+0x48>
	__asm volatile
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	603b      	str	r3, [r7, #0]
}
 8008758:	bf00      	nop
 800875a:	e7fe      	b.n	800875a <xTaskIncrementTick+0x46>
 800875c:	4b41      	ldr	r3, [pc, #260]	; (8008864 <xTaskIncrementTick+0x150>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	4b41      	ldr	r3, [pc, #260]	; (8008868 <xTaskIncrementTick+0x154>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a3f      	ldr	r2, [pc, #252]	; (8008864 <xTaskIncrementTick+0x150>)
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	4a3f      	ldr	r2, [pc, #252]	; (8008868 <xTaskIncrementTick+0x154>)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6013      	str	r3, [r2, #0]
 8008770:	4b3e      	ldr	r3, [pc, #248]	; (800886c <xTaskIncrementTick+0x158>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3301      	adds	r3, #1
 8008776:	4a3d      	ldr	r2, [pc, #244]	; (800886c <xTaskIncrementTick+0x158>)
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	f000 fadb 	bl	8008d34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800877e:	4b3c      	ldr	r3, [pc, #240]	; (8008870 <xTaskIncrementTick+0x15c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	429a      	cmp	r2, r3
 8008786:	d349      	bcc.n	800881c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008788:	4b36      	ldr	r3, [pc, #216]	; (8008864 <xTaskIncrementTick+0x150>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d104      	bne.n	800879c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008792:	4b37      	ldr	r3, [pc, #220]	; (8008870 <xTaskIncrementTick+0x15c>)
 8008794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008798:	601a      	str	r2, [r3, #0]
					break;
 800879a:	e03f      	b.n	800881c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800879c:	4b31      	ldr	r3, [pc, #196]	; (8008864 <xTaskIncrementTick+0x150>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d203      	bcs.n	80087bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087b4:	4a2e      	ldr	r2, [pc, #184]	; (8008870 <xTaskIncrementTick+0x15c>)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087ba:	e02f      	b.n	800881c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	3304      	adds	r3, #4
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe fe91 	bl	80074e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d004      	beq.n	80087d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	3318      	adds	r3, #24
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe fe88 	bl	80074e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087dc:	4b25      	ldr	r3, [pc, #148]	; (8008874 <xTaskIncrementTick+0x160>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d903      	bls.n	80087ec <xTaskIncrementTick+0xd8>
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	4a22      	ldr	r2, [pc, #136]	; (8008874 <xTaskIncrementTick+0x160>)
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f0:	4613      	mov	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4a1f      	ldr	r2, [pc, #124]	; (8008878 <xTaskIncrementTick+0x164>)
 80087fa:	441a      	add	r2, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	3304      	adds	r3, #4
 8008800:	4619      	mov	r1, r3
 8008802:	4610      	mov	r0, r2
 8008804:	f7fe fe13 	bl	800742e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880c:	4b1b      	ldr	r3, [pc, #108]	; (800887c <xTaskIncrementTick+0x168>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008812:	429a      	cmp	r2, r3
 8008814:	d3b8      	bcc.n	8008788 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008816:	2301      	movs	r3, #1
 8008818:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800881a:	e7b5      	b.n	8008788 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800881c:	4b17      	ldr	r3, [pc, #92]	; (800887c <xTaskIncrementTick+0x168>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008822:	4915      	ldr	r1, [pc, #84]	; (8008878 <xTaskIncrementTick+0x164>)
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	440b      	add	r3, r1
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d901      	bls.n	8008838 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008834:	2301      	movs	r3, #1
 8008836:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008838:	4b11      	ldr	r3, [pc, #68]	; (8008880 <xTaskIncrementTick+0x16c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d007      	beq.n	8008850 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008840:	2301      	movs	r3, #1
 8008842:	617b      	str	r3, [r7, #20]
 8008844:	e004      	b.n	8008850 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008846:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <xTaskIncrementTick+0x170>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	4a0d      	ldr	r2, [pc, #52]	; (8008884 <xTaskIncrementTick+0x170>)
 800884e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008850:	697b      	ldr	r3, [r7, #20]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	200016c4 	.word	0x200016c4
 8008860:	200016a0 	.word	0x200016a0
 8008864:	20001654 	.word	0x20001654
 8008868:	20001658 	.word	0x20001658
 800886c:	200016b4 	.word	0x200016b4
 8008870:	200016bc 	.word	0x200016bc
 8008874:	200016a4 	.word	0x200016a4
 8008878:	200011cc 	.word	0x200011cc
 800887c:	200011c8 	.word	0x200011c8
 8008880:	200016b0 	.word	0x200016b0
 8008884:	200016ac 	.word	0x200016ac

08008888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800888e:	4b2a      	ldr	r3, [pc, #168]	; (8008938 <vTaskSwitchContext+0xb0>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008896:	4b29      	ldr	r3, [pc, #164]	; (800893c <vTaskSwitchContext+0xb4>)
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800889c:	e046      	b.n	800892c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800889e:	4b27      	ldr	r3, [pc, #156]	; (800893c <vTaskSwitchContext+0xb4>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a4:	4b26      	ldr	r3, [pc, #152]	; (8008940 <vTaskSwitchContext+0xb8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	e010      	b.n	80088ce <vTaskSwitchContext+0x46>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	607b      	str	r3, [r7, #4]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <vTaskSwitchContext+0x3e>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	491d      	ldr	r1, [pc, #116]	; (8008944 <vTaskSwitchContext+0xbc>)
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	440b      	add	r3, r1
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0e4      	beq.n	80088ac <vTaskSwitchContext+0x24>
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4a15      	ldr	r2, [pc, #84]	; (8008944 <vTaskSwitchContext+0xbc>)
 80088ee:	4413      	add	r3, r2
 80088f0:	60bb      	str	r3, [r7, #8]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	605a      	str	r2, [r3, #4]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	3308      	adds	r3, #8
 8008904:	429a      	cmp	r2, r3
 8008906:	d104      	bne.n	8008912 <vTaskSwitchContext+0x8a>
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	605a      	str	r2, [r3, #4]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	4a0b      	ldr	r2, [pc, #44]	; (8008948 <vTaskSwitchContext+0xc0>)
 800891a:	6013      	str	r3, [r2, #0]
 800891c:	4a08      	ldr	r2, [pc, #32]	; (8008940 <vTaskSwitchContext+0xb8>)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008922:	4b09      	ldr	r3, [pc, #36]	; (8008948 <vTaskSwitchContext+0xc0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3354      	adds	r3, #84	; 0x54
 8008928:	4a08      	ldr	r2, [pc, #32]	; (800894c <vTaskSwitchContext+0xc4>)
 800892a:	6013      	str	r3, [r2, #0]
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	200016c4 	.word	0x200016c4
 800893c:	200016b0 	.word	0x200016b0
 8008940:	200016a4 	.word	0x200016a4
 8008944:	200011cc 	.word	0x200011cc
 8008948:	200011c8 	.word	0x200011c8
 800894c:	20000028 	.word	0x20000028

08008950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	60fb      	str	r3, [r7, #12]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008976:	4b07      	ldr	r3, [pc, #28]	; (8008994 <vTaskPlaceOnEventList+0x44>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3318      	adds	r3, #24
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fe fd79 	bl	8007476 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008984:	2101      	movs	r1, #1
 8008986:	6838      	ldr	r0, [r7, #0]
 8008988:	f000 fa90 	bl	8008eac <prvAddCurrentTaskToDelayedList>
}
 800898c:	bf00      	nop
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	200011c8 	.word	0x200011c8

08008998 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	617b      	str	r3, [r7, #20]
}
 80089bc:	bf00      	nop
 80089be:	e7fe      	b.n	80089be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089c0:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <vTaskPlaceOnEventListRestricted+0x54>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3318      	adds	r3, #24
 80089c6:	4619      	mov	r1, r3
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f7fe fd30 	bl	800742e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80089d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	68b8      	ldr	r0, [r7, #8]
 80089de:	f000 fa65 	bl	8008eac <prvAddCurrentTaskToDelayedList>
	}
 80089e2:	bf00      	nop
 80089e4:	3718      	adds	r7, #24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	200011c8 	.word	0x200011c8

080089f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	60fb      	str	r3, [r7, #12]
}
 8008a18:	bf00      	nop
 8008a1a:	e7fe      	b.n	8008a1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	3318      	adds	r3, #24
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe fd61 	bl	80074e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a26:	4b1e      	ldr	r3, [pc, #120]	; (8008aa0 <xTaskRemoveFromEventList+0xb0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d11d      	bne.n	8008a6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe fd58 	bl	80074e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3c:	4b19      	ldr	r3, [pc, #100]	; (8008aa4 <xTaskRemoveFromEventList+0xb4>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d903      	bls.n	8008a4c <xTaskRemoveFromEventList+0x5c>
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	4a16      	ldr	r2, [pc, #88]	; (8008aa4 <xTaskRemoveFromEventList+0xb4>)
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a50:	4613      	mov	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4a13      	ldr	r2, [pc, #76]	; (8008aa8 <xTaskRemoveFromEventList+0xb8>)
 8008a5a:	441a      	add	r2, r3
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4619      	mov	r1, r3
 8008a62:	4610      	mov	r0, r2
 8008a64:	f7fe fce3 	bl	800742e <vListInsertEnd>
 8008a68:	e005      	b.n	8008a76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	3318      	adds	r3, #24
 8008a6e:	4619      	mov	r1, r3
 8008a70:	480e      	ldr	r0, [pc, #56]	; (8008aac <xTaskRemoveFromEventList+0xbc>)
 8008a72:	f7fe fcdc 	bl	800742e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7a:	4b0d      	ldr	r3, [pc, #52]	; (8008ab0 <xTaskRemoveFromEventList+0xc0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d905      	bls.n	8008a90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a84:	2301      	movs	r3, #1
 8008a86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a88:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <xTaskRemoveFromEventList+0xc4>)
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	e001      	b.n	8008a94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a90:	2300      	movs	r3, #0
 8008a92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a94:	697b      	ldr	r3, [r7, #20]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	200016c4 	.word	0x200016c4
 8008aa4:	200016a4 	.word	0x200016a4
 8008aa8:	200011cc 	.word	0x200011cc
 8008aac:	2000165c 	.word	0x2000165c
 8008ab0:	200011c8 	.word	0x200011c8
 8008ab4:	200016b0 	.word	0x200016b0

08008ab8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ac0:	4b06      	ldr	r3, [pc, #24]	; (8008adc <vTaskInternalSetTimeOutState+0x24>)
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ac8:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <vTaskInternalSetTimeOutState+0x28>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	605a      	str	r2, [r3, #4]
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	200016b4 	.word	0x200016b4
 8008ae0:	200016a0 	.word	0x200016a0

08008ae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10a      	bne.n	8008b0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	613b      	str	r3, [r7, #16]
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10a      	bne.n	8008b26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	60fb      	str	r3, [r7, #12]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008b26:	f000 fe8d 	bl	8009844 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b2a:	4b1d      	ldr	r3, [pc, #116]	; (8008ba0 <xTaskCheckForTimeOut+0xbc>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b42:	d102      	bne.n	8008b4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b44:	2300      	movs	r3, #0
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	e023      	b.n	8008b92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	4b15      	ldr	r3, [pc, #84]	; (8008ba4 <xTaskCheckForTimeOut+0xc0>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d007      	beq.n	8008b66 <xTaskCheckForTimeOut+0x82>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d302      	bcc.n	8008b66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	61fb      	str	r3, [r7, #28]
 8008b64:	e015      	b.n	8008b92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d20b      	bcs.n	8008b88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	1ad2      	subs	r2, r2, r3
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff ff9b 	bl	8008ab8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b82:	2300      	movs	r3, #0
 8008b84:	61fb      	str	r3, [r7, #28]
 8008b86:	e004      	b.n	8008b92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b92:	f000 fe87 	bl	80098a4 <vPortExitCritical>

	return xReturn;
 8008b96:	69fb      	ldr	r3, [r7, #28]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3720      	adds	r7, #32
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	200016a0 	.word	0x200016a0
 8008ba4:	200016b4 	.word	0x200016b4

08008ba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008bac:	4b03      	ldr	r3, [pc, #12]	; (8008bbc <vTaskMissedYield+0x14>)
 8008bae:	2201      	movs	r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]
}
 8008bb2:	bf00      	nop
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	200016b0 	.word	0x200016b0

08008bc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bc8:	f000 f852 	bl	8008c70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bcc:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <prvIdleTask+0x28>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d9f9      	bls.n	8008bc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bd4:	4b05      	ldr	r3, [pc, #20]	; (8008bec <prvIdleTask+0x2c>)
 8008bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008be4:	e7f0      	b.n	8008bc8 <prvIdleTask+0x8>
 8008be6:	bf00      	nop
 8008be8:	200011cc 	.word	0x200011cc
 8008bec:	e000ed04 	.word	0xe000ed04

08008bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	607b      	str	r3, [r7, #4]
 8008bfa:	e00c      	b.n	8008c16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4a12      	ldr	r2, [pc, #72]	; (8008c50 <prvInitialiseTaskLists+0x60>)
 8008c08:	4413      	add	r3, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe fbe2 	bl	80073d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3301      	adds	r3, #1
 8008c14:	607b      	str	r3, [r7, #4]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b37      	cmp	r3, #55	; 0x37
 8008c1a:	d9ef      	bls.n	8008bfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c1c:	480d      	ldr	r0, [pc, #52]	; (8008c54 <prvInitialiseTaskLists+0x64>)
 8008c1e:	f7fe fbd9 	bl	80073d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c22:	480d      	ldr	r0, [pc, #52]	; (8008c58 <prvInitialiseTaskLists+0x68>)
 8008c24:	f7fe fbd6 	bl	80073d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c28:	480c      	ldr	r0, [pc, #48]	; (8008c5c <prvInitialiseTaskLists+0x6c>)
 8008c2a:	f7fe fbd3 	bl	80073d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c2e:	480c      	ldr	r0, [pc, #48]	; (8008c60 <prvInitialiseTaskLists+0x70>)
 8008c30:	f7fe fbd0 	bl	80073d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c34:	480b      	ldr	r0, [pc, #44]	; (8008c64 <prvInitialiseTaskLists+0x74>)
 8008c36:	f7fe fbcd 	bl	80073d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <prvInitialiseTaskLists+0x78>)
 8008c3c:	4a05      	ldr	r2, [pc, #20]	; (8008c54 <prvInitialiseTaskLists+0x64>)
 8008c3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c40:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <prvInitialiseTaskLists+0x7c>)
 8008c42:	4a05      	ldr	r2, [pc, #20]	; (8008c58 <prvInitialiseTaskLists+0x68>)
 8008c44:	601a      	str	r2, [r3, #0]
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	200011cc 	.word	0x200011cc
 8008c54:	2000162c 	.word	0x2000162c
 8008c58:	20001640 	.word	0x20001640
 8008c5c:	2000165c 	.word	0x2000165c
 8008c60:	20001670 	.word	0x20001670
 8008c64:	20001688 	.word	0x20001688
 8008c68:	20001654 	.word	0x20001654
 8008c6c:	20001658 	.word	0x20001658

08008c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c76:	e019      	b.n	8008cac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c78:	f000 fde4 	bl	8009844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c7c:	4b10      	ldr	r3, [pc, #64]	; (8008cc0 <prvCheckTasksWaitingTermination+0x50>)
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3304      	adds	r3, #4
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe fc2d 	bl	80074e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	; (8008cc4 <prvCheckTasksWaitingTermination+0x54>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	4a0b      	ldr	r2, [pc, #44]	; (8008cc4 <prvCheckTasksWaitingTermination+0x54>)
 8008c96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c98:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <prvCheckTasksWaitingTermination+0x58>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	4a0a      	ldr	r2, [pc, #40]	; (8008cc8 <prvCheckTasksWaitingTermination+0x58>)
 8008ca0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ca2:	f000 fdff 	bl	80098a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f810 	bl	8008ccc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cac:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <prvCheckTasksWaitingTermination+0x58>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e1      	bne.n	8008c78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20001670 	.word	0x20001670
 8008cc4:	2000169c 	.word	0x2000169c
 8008cc8:	20001684 	.word	0x20001684

08008ccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3354      	adds	r3, #84	; 0x54
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f001 f909 	bl	8009ef0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d108      	bne.n	8008cfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 ff97 	bl	8009c20 <vPortFree>
				vPortFree( pxTCB );
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 ff94 	bl	8009c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cf8:	e018      	b.n	8008d2c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d103      	bne.n	8008d0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 ff8b 	bl	8009c20 <vPortFree>
	}
 8008d0a:	e00f      	b.n	8008d2c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d00a      	beq.n	8008d2c <prvDeleteTCB+0x60>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	60fb      	str	r3, [r7, #12]
}
 8008d28:	bf00      	nop
 8008d2a:	e7fe      	b.n	8008d2a <prvDeleteTCB+0x5e>
	}
 8008d2c:	bf00      	nop
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d3a:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <prvResetNextTaskUnblockTime+0x38>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d104      	bne.n	8008d4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d44:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <prvResetNextTaskUnblockTime+0x3c>)
 8008d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d4c:	e008      	b.n	8008d60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4e:	4b07      	ldr	r3, [pc, #28]	; (8008d6c <prvResetNextTaskUnblockTime+0x38>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4a04      	ldr	r2, [pc, #16]	; (8008d70 <prvResetNextTaskUnblockTime+0x3c>)
 8008d5e:	6013      	str	r3, [r2, #0]
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	20001654 	.word	0x20001654
 8008d70:	200016bc 	.word	0x200016bc

08008d74 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008d7a:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <xTaskGetCurrentTaskHandle+0x1c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008d80:	687b      	ldr	r3, [r7, #4]
	}
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	200011c8 	.word	0x200011c8

08008d94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <xTaskGetSchedulerState+0x34>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d102      	bne.n	8008da8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008da2:	2301      	movs	r3, #1
 8008da4:	607b      	str	r3, [r7, #4]
 8008da6:	e008      	b.n	8008dba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008da8:	4b08      	ldr	r3, [pc, #32]	; (8008dcc <xTaskGetSchedulerState+0x38>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d102      	bne.n	8008db6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008db0:	2302      	movs	r3, #2
 8008db2:	607b      	str	r3, [r7, #4]
 8008db4:	e001      	b.n	8008dba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008db6:	2300      	movs	r3, #0
 8008db8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008dba:	687b      	ldr	r3, [r7, #4]
	}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	200016a8 	.word	0x200016a8
 8008dcc:	200016c4 	.word	0x200016c4

08008dd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d056      	beq.n	8008e94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008de6:	4b2e      	ldr	r3, [pc, #184]	; (8008ea0 <xTaskPriorityDisinherit+0xd0>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d00a      	beq.n	8008e06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60fb      	str	r3, [r7, #12]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10a      	bne.n	8008e24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	60bb      	str	r3, [r7, #8]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e28:	1e5a      	subs	r2, r3, #1
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d02c      	beq.n	8008e94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d128      	bne.n	8008e94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	3304      	adds	r3, #4
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fe fb4e 	bl	80074e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e64:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <xTaskPriorityDisinherit+0xd4>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d903      	bls.n	8008e74 <xTaskPriorityDisinherit+0xa4>
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	4a0c      	ldr	r2, [pc, #48]	; (8008ea4 <xTaskPriorityDisinherit+0xd4>)
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e78:	4613      	mov	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4a09      	ldr	r2, [pc, #36]	; (8008ea8 <xTaskPriorityDisinherit+0xd8>)
 8008e82:	441a      	add	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	f7fe facf 	bl	800742e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e90:	2301      	movs	r3, #1
 8008e92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e94:	697b      	ldr	r3, [r7, #20]
	}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	200011c8 	.word	0x200011c8
 8008ea4:	200016a4 	.word	0x200016a4
 8008ea8:	200011cc 	.word	0x200011cc

08008eac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008eb6:	4b21      	ldr	r3, [pc, #132]	; (8008f3c <prvAddCurrentTaskToDelayedList+0x90>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ebc:	4b20      	ldr	r3, [pc, #128]	; (8008f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fb10 	bl	80074e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ece:	d10a      	bne.n	8008ee6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d007      	beq.n	8008ee6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ed6:	4b1a      	ldr	r3, [pc, #104]	; (8008f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3304      	adds	r3, #4
 8008edc:	4619      	mov	r1, r3
 8008ede:	4819      	ldr	r0, [pc, #100]	; (8008f44 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ee0:	f7fe faa5 	bl	800742e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ee4:	e026      	b.n	8008f34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4413      	add	r3, r2
 8008eec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eee:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d209      	bcs.n	8008f12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008efe:	4b12      	ldr	r3, [pc, #72]	; (8008f48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7fe fab3 	bl	8007476 <vListInsert>
}
 8008f10:	e010      	b.n	8008f34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f12:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	4b0a      	ldr	r3, [pc, #40]	; (8008f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7fe faa9 	bl	8007476 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f24:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d202      	bcs.n	8008f34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f2e:	4a08      	ldr	r2, [pc, #32]	; (8008f50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	6013      	str	r3, [r2, #0]
}
 8008f34:	bf00      	nop
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	200016a0 	.word	0x200016a0
 8008f40:	200011c8 	.word	0x200011c8
 8008f44:	20001688 	.word	0x20001688
 8008f48:	20001658 	.word	0x20001658
 8008f4c:	20001654 	.word	0x20001654
 8008f50:	200016bc 	.word	0x200016bc

08008f54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08a      	sub	sp, #40	; 0x28
 8008f58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f5e:	f000 fb07 	bl	8009570 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f62:	4b1c      	ldr	r3, [pc, #112]	; (8008fd4 <xTimerCreateTimerTask+0x80>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d021      	beq.n	8008fae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f72:	1d3a      	adds	r2, r7, #4
 8008f74:	f107 0108 	add.w	r1, r7, #8
 8008f78:	f107 030c 	add.w	r3, r7, #12
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe fa0f 	bl	80073a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f82:	6879      	ldr	r1, [r7, #4]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	9202      	str	r2, [sp, #8]
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	2300      	movs	r3, #0
 8008f92:	460a      	mov	r2, r1
 8008f94:	4910      	ldr	r1, [pc, #64]	; (8008fd8 <xTimerCreateTimerTask+0x84>)
 8008f96:	4811      	ldr	r0, [pc, #68]	; (8008fdc <xTimerCreateTimerTask+0x88>)
 8008f98:	f7fe ffbc 	bl	8007f14 <xTaskCreateStatic>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	4a10      	ldr	r2, [pc, #64]	; (8008fe0 <xTimerCreateTimerTask+0x8c>)
 8008fa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <xTimerCreateTimerTask+0x8c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008faa:	2301      	movs	r3, #1
 8008fac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10a      	bne.n	8008fca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb8:	f383 8811 	msr	BASEPRI, r3
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f3bf 8f4f 	dsb	sy
 8008fc4:	613b      	str	r3, [r7, #16]
}
 8008fc6:	bf00      	nop
 8008fc8:	e7fe      	b.n	8008fc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008fca:	697b      	ldr	r3, [r7, #20]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3718      	adds	r7, #24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	200016f8 	.word	0x200016f8
 8008fd8:	0800a0d4 	.word	0x0800a0d4
 8008fdc:	08009119 	.word	0x08009119
 8008fe0:	200016fc 	.word	0x200016fc

08008fe4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08a      	sub	sp, #40	; 0x28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	623b      	str	r3, [r7, #32]
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009012:	4b1a      	ldr	r3, [pc, #104]	; (800907c <xTimerGenericCommand+0x98>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d02a      	beq.n	8009070 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b05      	cmp	r3, #5
 800902a:	dc18      	bgt.n	800905e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800902c:	f7ff feb2 	bl	8008d94 <xTaskGetSchedulerState>
 8009030:	4603      	mov	r3, r0
 8009032:	2b02      	cmp	r3, #2
 8009034:	d109      	bne.n	800904a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009036:	4b11      	ldr	r3, [pc, #68]	; (800907c <xTimerGenericCommand+0x98>)
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	f107 0110 	add.w	r1, r7, #16
 800903e:	2300      	movs	r3, #0
 8009040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009042:	f7fe fb7f 	bl	8007744 <xQueueGenericSend>
 8009046:	6278      	str	r0, [r7, #36]	; 0x24
 8009048:	e012      	b.n	8009070 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800904a:	4b0c      	ldr	r3, [pc, #48]	; (800907c <xTimerGenericCommand+0x98>)
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	f107 0110 	add.w	r1, r7, #16
 8009052:	2300      	movs	r3, #0
 8009054:	2200      	movs	r2, #0
 8009056:	f7fe fb75 	bl	8007744 <xQueueGenericSend>
 800905a:	6278      	str	r0, [r7, #36]	; 0x24
 800905c:	e008      	b.n	8009070 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800905e:	4b07      	ldr	r3, [pc, #28]	; (800907c <xTimerGenericCommand+0x98>)
 8009060:	6818      	ldr	r0, [r3, #0]
 8009062:	f107 0110 	add.w	r1, r7, #16
 8009066:	2300      	movs	r3, #0
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	f7fe fc69 	bl	8007940 <xQueueGenericSendFromISR>
 800906e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009072:	4618      	mov	r0, r3
 8009074:	3728      	adds	r7, #40	; 0x28
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	200016f8 	.word	0x200016f8

08009080 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af02      	add	r7, sp, #8
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800908a:	4b22      	ldr	r3, [pc, #136]	; (8009114 <prvProcessExpiredTimer+0x94>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	3304      	adds	r3, #4
 8009098:	4618      	mov	r0, r3
 800909a:	f7fe fa25 	bl	80074e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d022      	beq.n	80090f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	699a      	ldr	r2, [r3, #24]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	18d1      	adds	r1, r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	6978      	ldr	r0, [r7, #20]
 80090ba:	f000 f8d1 	bl	8009260 <prvInsertTimerInActiveList>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d01f      	beq.n	8009104 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090c4:	2300      	movs	r3, #0
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	2300      	movs	r3, #0
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	2100      	movs	r1, #0
 80090ce:	6978      	ldr	r0, [r7, #20]
 80090d0:	f7ff ff88 	bl	8008fe4 <xTimerGenericCommand>
 80090d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d113      	bne.n	8009104 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	60fb      	str	r3, [r7, #12]
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090f8:	f023 0301 	bic.w	r3, r3, #1
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	6978      	ldr	r0, [r7, #20]
 800910a:	4798      	blx	r3
}
 800910c:	bf00      	nop
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	200016f0 	.word	0x200016f0

08009118 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009120:	f107 0308 	add.w	r3, r7, #8
 8009124:	4618      	mov	r0, r3
 8009126:	f000 f857 	bl	80091d8 <prvGetNextExpireTime>
 800912a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	4619      	mov	r1, r3
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 f803 	bl	800913c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009136:	f000 f8d5 	bl	80092e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800913a:	e7f1      	b.n	8009120 <prvTimerTask+0x8>

0800913c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009146:	f7ff fa29 	bl	800859c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800914a:	f107 0308 	add.w	r3, r7, #8
 800914e:	4618      	mov	r0, r3
 8009150:	f000 f866 	bl	8009220 <prvSampleTimeNow>
 8009154:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d130      	bne.n	80091be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10a      	bne.n	8009178 <prvProcessTimerOrBlockTask+0x3c>
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	429a      	cmp	r2, r3
 8009168:	d806      	bhi.n	8009178 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800916a:	f7ff fa25 	bl	80085b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800916e:	68f9      	ldr	r1, [r7, #12]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff ff85 	bl	8009080 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009176:	e024      	b.n	80091c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d008      	beq.n	8009190 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800917e:	4b13      	ldr	r3, [pc, #76]	; (80091cc <prvProcessTimerOrBlockTask+0x90>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <prvProcessTimerOrBlockTask+0x50>
 8009188:	2301      	movs	r3, #1
 800918a:	e000      	b.n	800918e <prvProcessTimerOrBlockTask+0x52>
 800918c:	2300      	movs	r3, #0
 800918e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009190:	4b0f      	ldr	r3, [pc, #60]	; (80091d0 <prvProcessTimerOrBlockTask+0x94>)
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	4619      	mov	r1, r3
 800919e:	f7fe fe85 	bl	8007eac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091a2:	f7ff fa09 	bl	80085b8 <xTaskResumeAll>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10a      	bne.n	80091c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091ac:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <prvProcessTimerOrBlockTask+0x98>)
 80091ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	f3bf 8f6f 	isb	sy
}
 80091bc:	e001      	b.n	80091c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091be:	f7ff f9fb 	bl	80085b8 <xTaskResumeAll>
}
 80091c2:	bf00      	nop
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200016f4 	.word	0x200016f4
 80091d0:	200016f8 	.word	0x200016f8
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091e0:	4b0e      	ldr	r3, [pc, #56]	; (800921c <prvGetNextExpireTime+0x44>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <prvGetNextExpireTime+0x16>
 80091ea:	2201      	movs	r2, #1
 80091ec:	e000      	b.n	80091f0 <prvGetNextExpireTime+0x18>
 80091ee:	2200      	movs	r2, #0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d105      	bne.n	8009208 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091fc:	4b07      	ldr	r3, [pc, #28]	; (800921c <prvGetNextExpireTime+0x44>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	e001      	b.n	800920c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800920c:	68fb      	ldr	r3, [r7, #12]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	200016f0 	.word	0x200016f0

08009220 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009228:	f7ff fa64 	bl	80086f4 <xTaskGetTickCount>
 800922c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800922e:	4b0b      	ldr	r3, [pc, #44]	; (800925c <prvSampleTimeNow+0x3c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	429a      	cmp	r2, r3
 8009236:	d205      	bcs.n	8009244 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009238:	f000 f936 	bl	80094a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	e002      	b.n	800924a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800924a:	4a04      	ldr	r2, [pc, #16]	; (800925c <prvSampleTimeNow+0x3c>)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009250:	68fb      	ldr	r3, [r7, #12]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20001700 	.word	0x20001700

08009260 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800926e:	2300      	movs	r3, #0
 8009270:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	429a      	cmp	r2, r3
 8009284:	d812      	bhi.n	80092ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	1ad2      	subs	r2, r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	429a      	cmp	r2, r3
 8009292:	d302      	bcc.n	800929a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009294:	2301      	movs	r3, #1
 8009296:	617b      	str	r3, [r7, #20]
 8009298:	e01b      	b.n	80092d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800929a:	4b10      	ldr	r3, [pc, #64]	; (80092dc <prvInsertTimerInActiveList+0x7c>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3304      	adds	r3, #4
 80092a2:	4619      	mov	r1, r3
 80092a4:	4610      	mov	r0, r2
 80092a6:	f7fe f8e6 	bl	8007476 <vListInsert>
 80092aa:	e012      	b.n	80092d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d206      	bcs.n	80092c2 <prvInsertTimerInActiveList+0x62>
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d302      	bcc.n	80092c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092bc:	2301      	movs	r3, #1
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	e007      	b.n	80092d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092c2:	4b07      	ldr	r3, [pc, #28]	; (80092e0 <prvInsertTimerInActiveList+0x80>)
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3304      	adds	r3, #4
 80092ca:	4619      	mov	r1, r3
 80092cc:	4610      	mov	r0, r2
 80092ce:	f7fe f8d2 	bl	8007476 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092d2:	697b      	ldr	r3, [r7, #20]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	200016f4 	.word	0x200016f4
 80092e0:	200016f0 	.word	0x200016f0

080092e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b08e      	sub	sp, #56	; 0x38
 80092e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092ea:	e0ca      	b.n	8009482 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	da18      	bge.n	8009324 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	3304      	adds	r3, #4
 80092f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10a      	bne.n	8009314 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	61fb      	str	r3, [r7, #28]
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931a:	6850      	ldr	r0, [r2, #4]
 800931c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931e:	6892      	ldr	r2, [r2, #8]
 8009320:	4611      	mov	r1, r2
 8009322:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	f2c0 80aa 	blt.w	8009480 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d004      	beq.n	8009342 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	3304      	adds	r3, #4
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe f8d3 	bl	80074e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009342:	463b      	mov	r3, r7
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff ff6b 	bl	8009220 <prvSampleTimeNow>
 800934a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b09      	cmp	r3, #9
 8009350:	f200 8097 	bhi.w	8009482 <prvProcessReceivedCommands+0x19e>
 8009354:	a201      	add	r2, pc, #4	; (adr r2, 800935c <prvProcessReceivedCommands+0x78>)
 8009356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935a:	bf00      	nop
 800935c:	08009385 	.word	0x08009385
 8009360:	08009385 	.word	0x08009385
 8009364:	08009385 	.word	0x08009385
 8009368:	080093f9 	.word	0x080093f9
 800936c:	0800940d 	.word	0x0800940d
 8009370:	08009457 	.word	0x08009457
 8009374:	08009385 	.word	0x08009385
 8009378:	08009385 	.word	0x08009385
 800937c:	080093f9 	.word	0x080093f9
 8009380:	0800940d 	.word	0x0800940d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800938a:	f043 0301 	orr.w	r3, r3, #1
 800938e:	b2da      	uxtb	r2, r3
 8009390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	18d1      	adds	r1, r2, r3
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a4:	f7ff ff5c 	bl	8009260 <prvInsertTimerInActiveList>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d069      	beq.n	8009482 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d05e      	beq.n	8009482 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	441a      	add	r2, r3
 80093cc:	2300      	movs	r3, #0
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	2300      	movs	r3, #0
 80093d2:	2100      	movs	r1, #0
 80093d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093d6:	f7ff fe05 	bl	8008fe4 <xTimerGenericCommand>
 80093da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d14f      	bne.n	8009482 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	61bb      	str	r3, [r7, #24]
}
 80093f4:	bf00      	nop
 80093f6:	e7fe      	b.n	80093f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093fe:	f023 0301 	bic.w	r3, r3, #1
 8009402:	b2da      	uxtb	r2, r3
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800940a:	e03a      	b.n	8009482 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009412:	f043 0301 	orr.w	r3, r3, #1
 8009416:	b2da      	uxtb	r2, r3
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	617b      	str	r3, [r7, #20]
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009444:	699a      	ldr	r2, [r3, #24]
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	18d1      	adds	r1, r2, r3
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009450:	f7ff ff06 	bl	8009260 <prvInsertTimerInActiveList>
					break;
 8009454:	e015      	b.n	8009482 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d103      	bne.n	800946c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009466:	f000 fbdb 	bl	8009c20 <vPortFree>
 800946a:	e00a      	b.n	8009482 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009472:	f023 0301 	bic.w	r3, r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800947e:	e000      	b.n	8009482 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009480:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009482:	4b08      	ldr	r3, [pc, #32]	; (80094a4 <prvProcessReceivedCommands+0x1c0>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	1d39      	adds	r1, r7, #4
 8009488:	2200      	movs	r2, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe faf4 	bl	8007a78 <xQueueReceive>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	f47f af2a 	bne.w	80092ec <prvProcessReceivedCommands+0x8>
	}
}
 8009498:	bf00      	nop
 800949a:	bf00      	nop
 800949c:	3730      	adds	r7, #48	; 0x30
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	200016f8 	.word	0x200016f8

080094a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094ae:	e048      	b.n	8009542 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094b0:	4b2d      	ldr	r3, [pc, #180]	; (8009568 <prvSwitchTimerLists+0xc0>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ba:	4b2b      	ldr	r3, [pc, #172]	; (8009568 <prvSwitchTimerLists+0xc0>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fe f80d 	bl	80074e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d02e      	beq.n	8009542 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4413      	add	r3, r2
 80094ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d90e      	bls.n	8009514 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009502:	4b19      	ldr	r3, [pc, #100]	; (8009568 <prvSwitchTimerLists+0xc0>)
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3304      	adds	r3, #4
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f7fd ffb2 	bl	8007476 <vListInsert>
 8009512:	e016      	b.n	8009542 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009514:	2300      	movs	r3, #0
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	2300      	movs	r3, #0
 800951a:	693a      	ldr	r2, [r7, #16]
 800951c:	2100      	movs	r1, #0
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f7ff fd60 	bl	8008fe4 <xTimerGenericCommand>
 8009524:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	603b      	str	r3, [r7, #0]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009542:	4b09      	ldr	r3, [pc, #36]	; (8009568 <prvSwitchTimerLists+0xc0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1b1      	bne.n	80094b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <prvSwitchTimerLists+0xc0>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009552:	4b06      	ldr	r3, [pc, #24]	; (800956c <prvSwitchTimerLists+0xc4>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a04      	ldr	r2, [pc, #16]	; (8009568 <prvSwitchTimerLists+0xc0>)
 8009558:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800955a:	4a04      	ldr	r2, [pc, #16]	; (800956c <prvSwitchTimerLists+0xc4>)
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	6013      	str	r3, [r2, #0]
}
 8009560:	bf00      	nop
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	200016f0 	.word	0x200016f0
 800956c:	200016f4 	.word	0x200016f4

08009570 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009576:	f000 f965 	bl	8009844 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800957a:	4b15      	ldr	r3, [pc, #84]	; (80095d0 <prvCheckForValidListAndQueue+0x60>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d120      	bne.n	80095c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009582:	4814      	ldr	r0, [pc, #80]	; (80095d4 <prvCheckForValidListAndQueue+0x64>)
 8009584:	f7fd ff26 	bl	80073d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009588:	4813      	ldr	r0, [pc, #76]	; (80095d8 <prvCheckForValidListAndQueue+0x68>)
 800958a:	f7fd ff23 	bl	80073d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800958e:	4b13      	ldr	r3, [pc, #76]	; (80095dc <prvCheckForValidListAndQueue+0x6c>)
 8009590:	4a10      	ldr	r2, [pc, #64]	; (80095d4 <prvCheckForValidListAndQueue+0x64>)
 8009592:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009594:	4b12      	ldr	r3, [pc, #72]	; (80095e0 <prvCheckForValidListAndQueue+0x70>)
 8009596:	4a10      	ldr	r2, [pc, #64]	; (80095d8 <prvCheckForValidListAndQueue+0x68>)
 8009598:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800959a:	2300      	movs	r3, #0
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	4b11      	ldr	r3, [pc, #68]	; (80095e4 <prvCheckForValidListAndQueue+0x74>)
 80095a0:	4a11      	ldr	r2, [pc, #68]	; (80095e8 <prvCheckForValidListAndQueue+0x78>)
 80095a2:	2110      	movs	r1, #16
 80095a4:	200a      	movs	r0, #10
 80095a6:	f7fe f831 	bl	800760c <xQueueGenericCreateStatic>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <prvCheckForValidListAndQueue+0x60>)
 80095ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095b0:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <prvCheckForValidListAndQueue+0x60>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d005      	beq.n	80095c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095b8:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <prvCheckForValidListAndQueue+0x60>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	490b      	ldr	r1, [pc, #44]	; (80095ec <prvCheckForValidListAndQueue+0x7c>)
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe fc4a 	bl	8007e58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095c4:	f000 f96e 	bl	80098a4 <vPortExitCritical>
}
 80095c8:	bf00      	nop
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	200016f8 	.word	0x200016f8
 80095d4:	200016c8 	.word	0x200016c8
 80095d8:	200016dc 	.word	0x200016dc
 80095dc:	200016f0 	.word	0x200016f0
 80095e0:	200016f4 	.word	0x200016f4
 80095e4:	200017a4 	.word	0x200017a4
 80095e8:	20001704 	.word	0x20001704
 80095ec:	0800a0dc 	.word	0x0800a0dc

080095f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3b04      	subs	r3, #4
 8009600:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3b04      	subs	r3, #4
 800960e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f023 0201 	bic.w	r2, r3, #1
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3b04      	subs	r3, #4
 800961e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009620:	4a0c      	ldr	r2, [pc, #48]	; (8009654 <pxPortInitialiseStack+0x64>)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3b14      	subs	r3, #20
 800962a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3b04      	subs	r3, #4
 8009636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f06f 0202 	mvn.w	r2, #2
 800963e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3b20      	subs	r3, #32
 8009644:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009646:	68fb      	ldr	r3, [r7, #12]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	08009659 	.word	0x08009659

08009658 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800965e:	2300      	movs	r3, #0
 8009660:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009662:	4b12      	ldr	r3, [pc, #72]	; (80096ac <prvTaskExitError+0x54>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966a:	d00a      	beq.n	8009682 <prvTaskExitError+0x2a>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	60fb      	str	r3, [r7, #12]
}
 800967e:	bf00      	nop
 8009680:	e7fe      	b.n	8009680 <prvTaskExitError+0x28>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	60bb      	str	r3, [r7, #8]
}
 8009694:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009696:	bf00      	nop
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d0fc      	beq.n	8009698 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800969e:	bf00      	nop
 80096a0:	bf00      	nop
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	20000024 	.word	0x20000024

080096b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096b0:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <pxCurrentTCBConst2>)
 80096b2:	6819      	ldr	r1, [r3, #0]
 80096b4:	6808      	ldr	r0, [r1, #0]
 80096b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ba:	f380 8809 	msr	PSP, r0
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f04f 0000 	mov.w	r0, #0
 80096c6:	f380 8811 	msr	BASEPRI, r0
 80096ca:	4770      	bx	lr
 80096cc:	f3af 8000 	nop.w

080096d0 <pxCurrentTCBConst2>:
 80096d0:	200011c8 	.word	0x200011c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop

080096d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096d8:	4808      	ldr	r0, [pc, #32]	; (80096fc <prvPortStartFirstTask+0x24>)
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	6800      	ldr	r0, [r0, #0]
 80096de:	f380 8808 	msr	MSP, r0
 80096e2:	f04f 0000 	mov.w	r0, #0
 80096e6:	f380 8814 	msr	CONTROL, r0
 80096ea:	b662      	cpsie	i
 80096ec:	b661      	cpsie	f
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	df00      	svc	0
 80096f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096fa:	bf00      	nop
 80096fc:	e000ed08 	.word	0xe000ed08

08009700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009706:	4b46      	ldr	r3, [pc, #280]	; (8009820 <xPortStartScheduler+0x120>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a46      	ldr	r2, [pc, #280]	; (8009824 <xPortStartScheduler+0x124>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d10a      	bne.n	8009726 <xPortStartScheduler+0x26>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	613b      	str	r3, [r7, #16]
}
 8009722:	bf00      	nop
 8009724:	e7fe      	b.n	8009724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009726:	4b3e      	ldr	r3, [pc, #248]	; (8009820 <xPortStartScheduler+0x120>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a3f      	ldr	r2, [pc, #252]	; (8009828 <xPortStartScheduler+0x128>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d10a      	bne.n	8009746 <xPortStartScheduler+0x46>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	60fb      	str	r3, [r7, #12]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009746:	4b39      	ldr	r3, [pc, #228]	; (800982c <xPortStartScheduler+0x12c>)
 8009748:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	b2db      	uxtb	r3, r3
 8009750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	22ff      	movs	r2, #255	; 0xff
 8009756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009768:	b2da      	uxtb	r2, r3
 800976a:	4b31      	ldr	r3, [pc, #196]	; (8009830 <xPortStartScheduler+0x130>)
 800976c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800976e:	4b31      	ldr	r3, [pc, #196]	; (8009834 <xPortStartScheduler+0x134>)
 8009770:	2207      	movs	r2, #7
 8009772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009774:	e009      	b.n	800978a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009776:	4b2f      	ldr	r3, [pc, #188]	; (8009834 <xPortStartScheduler+0x134>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3b01      	subs	r3, #1
 800977c:	4a2d      	ldr	r2, [pc, #180]	; (8009834 <xPortStartScheduler+0x134>)
 800977e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	b2db      	uxtb	r3, r3
 8009788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009792:	2b80      	cmp	r3, #128	; 0x80
 8009794:	d0ef      	beq.n	8009776 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009796:	4b27      	ldr	r3, [pc, #156]	; (8009834 <xPortStartScheduler+0x134>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f1c3 0307 	rsb	r3, r3, #7
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d00a      	beq.n	80097b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	60bb      	str	r3, [r7, #8]
}
 80097b4:	bf00      	nop
 80097b6:	e7fe      	b.n	80097b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097b8:	4b1e      	ldr	r3, [pc, #120]	; (8009834 <xPortStartScheduler+0x134>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	021b      	lsls	r3, r3, #8
 80097be:	4a1d      	ldr	r2, [pc, #116]	; (8009834 <xPortStartScheduler+0x134>)
 80097c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097c2:	4b1c      	ldr	r3, [pc, #112]	; (8009834 <xPortStartScheduler+0x134>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ca:	4a1a      	ldr	r2, [pc, #104]	; (8009834 <xPortStartScheduler+0x134>)
 80097cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097d6:	4b18      	ldr	r3, [pc, #96]	; (8009838 <xPortStartScheduler+0x138>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a17      	ldr	r2, [pc, #92]	; (8009838 <xPortStartScheduler+0x138>)
 80097dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097e2:	4b15      	ldr	r3, [pc, #84]	; (8009838 <xPortStartScheduler+0x138>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a14      	ldr	r2, [pc, #80]	; (8009838 <xPortStartScheduler+0x138>)
 80097e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097ee:	f000 f8dd 	bl	80099ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097f2:	4b12      	ldr	r3, [pc, #72]	; (800983c <xPortStartScheduler+0x13c>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097f8:	f000 f8fc 	bl	80099f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097fc:	4b10      	ldr	r3, [pc, #64]	; (8009840 <xPortStartScheduler+0x140>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a0f      	ldr	r2, [pc, #60]	; (8009840 <xPortStartScheduler+0x140>)
 8009802:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009806:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009808:	f7ff ff66 	bl	80096d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800980c:	f7ff f83c 	bl	8008888 <vTaskSwitchContext>
	prvTaskExitError();
 8009810:	f7ff ff22 	bl	8009658 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	e000ed00 	.word	0xe000ed00
 8009824:	410fc271 	.word	0x410fc271
 8009828:	410fc270 	.word	0x410fc270
 800982c:	e000e400 	.word	0xe000e400
 8009830:	200017f4 	.word	0x200017f4
 8009834:	200017f8 	.word	0x200017f8
 8009838:	e000ed20 	.word	0xe000ed20
 800983c:	20000024 	.word	0x20000024
 8009840:	e000ef34 	.word	0xe000ef34

08009844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	607b      	str	r3, [r7, #4]
}
 800985c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800985e:	4b0f      	ldr	r3, [pc, #60]	; (800989c <vPortEnterCritical+0x58>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	4a0d      	ldr	r2, [pc, #52]	; (800989c <vPortEnterCritical+0x58>)
 8009866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009868:	4b0c      	ldr	r3, [pc, #48]	; (800989c <vPortEnterCritical+0x58>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d10f      	bne.n	8009890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009870:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <vPortEnterCritical+0x5c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <vPortEnterCritical+0x4c>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	603b      	str	r3, [r7, #0]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <vPortEnterCritical+0x4a>
	}
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	20000024 	.word	0x20000024
 80098a0:	e000ed04 	.word	0xe000ed04

080098a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098aa:	4b12      	ldr	r3, [pc, #72]	; (80098f4 <vPortExitCritical+0x50>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <vPortExitCritical+0x24>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	607b      	str	r3, [r7, #4]
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <vPortExitCritical+0x50>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	4a09      	ldr	r2, [pc, #36]	; (80098f4 <vPortExitCritical+0x50>)
 80098d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098d2:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <vPortExitCritical+0x50>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d105      	bne.n	80098e6 <vPortExitCritical+0x42>
 80098da:	2300      	movs	r3, #0
 80098dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	f383 8811 	msr	BASEPRI, r3
}
 80098e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098e6:	bf00      	nop
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20000024 	.word	0x20000024
	...

08009900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009900:	f3ef 8009 	mrs	r0, PSP
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	4b15      	ldr	r3, [pc, #84]	; (8009960 <pxCurrentTCBConst>)
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	f01e 0f10 	tst.w	lr, #16
 8009910:	bf08      	it	eq
 8009912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991a:	6010      	str	r0, [r2, #0]
 800991c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009924:	f380 8811 	msr	BASEPRI, r0
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f7fe ffaa 	bl	8008888 <vTaskSwitchContext>
 8009934:	f04f 0000 	mov.w	r0, #0
 8009938:	f380 8811 	msr	BASEPRI, r0
 800993c:	bc09      	pop	{r0, r3}
 800993e:	6819      	ldr	r1, [r3, #0]
 8009940:	6808      	ldr	r0, [r1, #0]
 8009942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009946:	f01e 0f10 	tst.w	lr, #16
 800994a:	bf08      	it	eq
 800994c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009950:	f380 8809 	msr	PSP, r0
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	f3af 8000 	nop.w

08009960 <pxCurrentTCBConst>:
 8009960:	200011c8 	.word	0x200011c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop

08009968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	607b      	str	r3, [r7, #4]
}
 8009980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009982:	f7fe fec7 	bl	8008714 <xTaskIncrementTick>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <xPortSysTickHandler+0x40>)
 800998e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	f383 8811 	msr	BASEPRI, r3
}
 800999e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	e000ed04 	.word	0xe000ed04

080099ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099b0:	4b0b      	ldr	r3, [pc, #44]	; (80099e0 <vPortSetupTimerInterrupt+0x34>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <vPortSetupTimerInterrupt+0x38>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099bc:	4b0a      	ldr	r3, [pc, #40]	; (80099e8 <vPortSetupTimerInterrupt+0x3c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a0a      	ldr	r2, [pc, #40]	; (80099ec <vPortSetupTimerInterrupt+0x40>)
 80099c2:	fba2 2303 	umull	r2, r3, r2, r3
 80099c6:	099b      	lsrs	r3, r3, #6
 80099c8:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <vPortSetupTimerInterrupt+0x44>)
 80099ca:	3b01      	subs	r3, #1
 80099cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ce:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <vPortSetupTimerInterrupt+0x34>)
 80099d0:	2207      	movs	r2, #7
 80099d2:	601a      	str	r2, [r3, #0]
}
 80099d4:	bf00      	nop
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	e000e010 	.word	0xe000e010
 80099e4:	e000e018 	.word	0xe000e018
 80099e8:	20000000 	.word	0x20000000
 80099ec:	10624dd3 	.word	0x10624dd3
 80099f0:	e000e014 	.word	0xe000e014

080099f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a04 <vPortEnableVFP+0x10>
 80099f8:	6801      	ldr	r1, [r0, #0]
 80099fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099fe:	6001      	str	r1, [r0, #0]
 8009a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a02:	bf00      	nop
 8009a04:	e000ed88 	.word	0xe000ed88

08009a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a0e:	f3ef 8305 	mrs	r3, IPSR
 8009a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b0f      	cmp	r3, #15
 8009a18:	d914      	bls.n	8009a44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a1a:	4a17      	ldr	r2, [pc, #92]	; (8009a78 <vPortValidateInterruptPriority+0x70>)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4413      	add	r3, r2
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a24:	4b15      	ldr	r3, [pc, #84]	; (8009a7c <vPortValidateInterruptPriority+0x74>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	7afa      	ldrb	r2, [r7, #11]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d20a      	bcs.n	8009a44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	607b      	str	r3, [r7, #4]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a44:	4b0e      	ldr	r3, [pc, #56]	; (8009a80 <vPortValidateInterruptPriority+0x78>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a4c:	4b0d      	ldr	r3, [pc, #52]	; (8009a84 <vPortValidateInterruptPriority+0x7c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d90a      	bls.n	8009a6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	603b      	str	r3, [r7, #0]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <vPortValidateInterruptPriority+0x60>
	}
 8009a6a:	bf00      	nop
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	e000e3f0 	.word	0xe000e3f0
 8009a7c:	200017f4 	.word	0x200017f4
 8009a80:	e000ed0c 	.word	0xe000ed0c
 8009a84:	200017f8 	.word	0x200017f8

08009a88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08a      	sub	sp, #40	; 0x28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a90:	2300      	movs	r3, #0
 8009a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a94:	f7fe fd82 	bl	800859c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a98:	4b5b      	ldr	r3, [pc, #364]	; (8009c08 <pvPortMalloc+0x180>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009aa0:	f000 f920 	bl	8009ce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009aa4:	4b59      	ldr	r3, [pc, #356]	; (8009c0c <pvPortMalloc+0x184>)
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4013      	ands	r3, r2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f040 8093 	bne.w	8009bd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d01d      	beq.n	8009af4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ab8:	2208      	movs	r2, #8
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4413      	add	r3, r2
 8009abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d014      	beq.n	8009af4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f023 0307 	bic.w	r3, r3, #7
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f003 0307 	and.w	r3, r3, #7
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00a      	beq.n	8009af4 <pvPortMalloc+0x6c>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	617b      	str	r3, [r7, #20]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d06e      	beq.n	8009bd8 <pvPortMalloc+0x150>
 8009afa:	4b45      	ldr	r3, [pc, #276]	; (8009c10 <pvPortMalloc+0x188>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d869      	bhi.n	8009bd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b04:	4b43      	ldr	r3, [pc, #268]	; (8009c14 <pvPortMalloc+0x18c>)
 8009b06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b08:	4b42      	ldr	r3, [pc, #264]	; (8009c14 <pvPortMalloc+0x18c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b0e:	e004      	b.n	8009b1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d903      	bls.n	8009b2c <pvPortMalloc+0xa4>
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1f1      	bne.n	8009b10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b2c:	4b36      	ldr	r3, [pc, #216]	; (8009c08 <pvPortMalloc+0x180>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d050      	beq.n	8009bd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2208      	movs	r2, #8
 8009b3c:	4413      	add	r3, r2
 8009b3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	2308      	movs	r3, #8
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d91f      	bls.n	8009b98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	f003 0307 	and.w	r3, r3, #7
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <pvPortMalloc+0xf8>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	613b      	str	r3, [r7, #16]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	1ad2      	subs	r2, r2, r3
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b92:	69b8      	ldr	r0, [r7, #24]
 8009b94:	f000 f908 	bl	8009da8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b98:	4b1d      	ldr	r3, [pc, #116]	; (8009c10 <pvPortMalloc+0x188>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	4a1b      	ldr	r2, [pc, #108]	; (8009c10 <pvPortMalloc+0x188>)
 8009ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ba6:	4b1a      	ldr	r3, [pc, #104]	; (8009c10 <pvPortMalloc+0x188>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4b1b      	ldr	r3, [pc, #108]	; (8009c18 <pvPortMalloc+0x190>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d203      	bcs.n	8009bba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bb2:	4b17      	ldr	r3, [pc, #92]	; (8009c10 <pvPortMalloc+0x188>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a18      	ldr	r2, [pc, #96]	; (8009c18 <pvPortMalloc+0x190>)
 8009bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <pvPortMalloc+0x184>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	2200      	movs	r2, #0
 8009bcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bce:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <pvPortMalloc+0x194>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	4a11      	ldr	r2, [pc, #68]	; (8009c1c <pvPortMalloc+0x194>)
 8009bd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bd8:	f7fe fcee 	bl	80085b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00a      	beq.n	8009bfc <pvPortMalloc+0x174>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	60fb      	str	r3, [r7, #12]
}
 8009bf8:	bf00      	nop
 8009bfa:	e7fe      	b.n	8009bfa <pvPortMalloc+0x172>
	return pvReturn;
 8009bfc:	69fb      	ldr	r3, [r7, #28]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3728      	adds	r7, #40	; 0x28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20002404 	.word	0x20002404
 8009c0c:	20002418 	.word	0x20002418
 8009c10:	20002408 	.word	0x20002408
 8009c14:	200023fc 	.word	0x200023fc
 8009c18:	2000240c 	.word	0x2000240c
 8009c1c:	20002410 	.word	0x20002410

08009c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d04d      	beq.n	8009cce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c32:	2308      	movs	r3, #8
 8009c34:	425b      	negs	r3, r3
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	4413      	add	r3, r2
 8009c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	4b24      	ldr	r3, [pc, #144]	; (8009cd8 <vPortFree+0xb8>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <vPortFree+0x44>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	60fb      	str	r3, [r7, #12]
}
 8009c60:	bf00      	nop
 8009c62:	e7fe      	b.n	8009c62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00a      	beq.n	8009c82 <vPortFree+0x62>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	60bb      	str	r3, [r7, #8]
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	4b14      	ldr	r3, [pc, #80]	; (8009cd8 <vPortFree+0xb8>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d01e      	beq.n	8009cce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11a      	bne.n	8009cce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	4b0e      	ldr	r3, [pc, #56]	; (8009cd8 <vPortFree+0xb8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	43db      	mvns	r3, r3
 8009ca2:	401a      	ands	r2, r3
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ca8:	f7fe fc78 	bl	800859c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	4b0a      	ldr	r3, [pc, #40]	; (8009cdc <vPortFree+0xbc>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	4a09      	ldr	r2, [pc, #36]	; (8009cdc <vPortFree+0xbc>)
 8009cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cba:	6938      	ldr	r0, [r7, #16]
 8009cbc:	f000 f874 	bl	8009da8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cc0:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <vPortFree+0xc0>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	4a06      	ldr	r2, [pc, #24]	; (8009ce0 <vPortFree+0xc0>)
 8009cc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cca:	f7fe fc75 	bl	80085b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cce:	bf00      	nop
 8009cd0:	3718      	adds	r7, #24
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20002418 	.word	0x20002418
 8009cdc:	20002408 	.word	0x20002408
 8009ce0:	20002414 	.word	0x20002414

08009ce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009cee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cf0:	4b27      	ldr	r3, [pc, #156]	; (8009d90 <prvHeapInit+0xac>)
 8009cf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00c      	beq.n	8009d18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3307      	adds	r3, #7
 8009d02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 0307 	bic.w	r3, r3, #7
 8009d0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	4a1f      	ldr	r2, [pc, #124]	; (8009d90 <prvHeapInit+0xac>)
 8009d14:	4413      	add	r3, r2
 8009d16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d1c:	4a1d      	ldr	r2, [pc, #116]	; (8009d94 <prvHeapInit+0xb0>)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d22:	4b1c      	ldr	r3, [pc, #112]	; (8009d94 <prvHeapInit+0xb0>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d30:	2208      	movs	r2, #8
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	1a9b      	subs	r3, r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f023 0307 	bic.w	r3, r3, #7
 8009d3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4a15      	ldr	r2, [pc, #84]	; (8009d98 <prvHeapInit+0xb4>)
 8009d44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d46:	4b14      	ldr	r3, [pc, #80]	; (8009d98 <prvHeapInit+0xb4>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d4e:	4b12      	ldr	r3, [pc, #72]	; (8009d98 <prvHeapInit+0xb4>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	1ad2      	subs	r2, r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d64:	4b0c      	ldr	r3, [pc, #48]	; (8009d98 <prvHeapInit+0xb4>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	4a0a      	ldr	r2, [pc, #40]	; (8009d9c <prvHeapInit+0xb8>)
 8009d72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	4a09      	ldr	r2, [pc, #36]	; (8009da0 <prvHeapInit+0xbc>)
 8009d7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d7c:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <prvHeapInit+0xc0>)
 8009d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d82:	601a      	str	r2, [r3, #0]
}
 8009d84:	bf00      	nop
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	200017fc 	.word	0x200017fc
 8009d94:	200023fc 	.word	0x200023fc
 8009d98:	20002404 	.word	0x20002404
 8009d9c:	2000240c 	.word	0x2000240c
 8009da0:	20002408 	.word	0x20002408
 8009da4:	20002418 	.word	0x20002418

08009da8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009db0:	4b28      	ldr	r3, [pc, #160]	; (8009e54 <prvInsertBlockIntoFreeList+0xac>)
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	e002      	b.n	8009dbc <prvInsertBlockIntoFreeList+0x14>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d8f7      	bhi.n	8009db6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d108      	bne.n	8009dea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	441a      	add	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	441a      	add	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d118      	bne.n	8009e30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	4b15      	ldr	r3, [pc, #84]	; (8009e58 <prvInsertBlockIntoFreeList+0xb0>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d00d      	beq.n	8009e26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	441a      	add	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	e008      	b.n	8009e38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e26:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <prvInsertBlockIntoFreeList+0xb0>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	e003      	b.n	8009e38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d002      	beq.n	8009e46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	200023fc 	.word	0x200023fc
 8009e58:	20002404 	.word	0x20002404

08009e5c <__libc_init_array>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	4d0d      	ldr	r5, [pc, #52]	; (8009e94 <__libc_init_array+0x38>)
 8009e60:	4c0d      	ldr	r4, [pc, #52]	; (8009e98 <__libc_init_array+0x3c>)
 8009e62:	1b64      	subs	r4, r4, r5
 8009e64:	10a4      	asrs	r4, r4, #2
 8009e66:	2600      	movs	r6, #0
 8009e68:	42a6      	cmp	r6, r4
 8009e6a:	d109      	bne.n	8009e80 <__libc_init_array+0x24>
 8009e6c:	4d0b      	ldr	r5, [pc, #44]	; (8009e9c <__libc_init_array+0x40>)
 8009e6e:	4c0c      	ldr	r4, [pc, #48]	; (8009ea0 <__libc_init_array+0x44>)
 8009e70:	f000 f8f2 	bl	800a058 <_init>
 8009e74:	1b64      	subs	r4, r4, r5
 8009e76:	10a4      	asrs	r4, r4, #2
 8009e78:	2600      	movs	r6, #0
 8009e7a:	42a6      	cmp	r6, r4
 8009e7c:	d105      	bne.n	8009e8a <__libc_init_array+0x2e>
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e84:	4798      	blx	r3
 8009e86:	3601      	adds	r6, #1
 8009e88:	e7ee      	b.n	8009e68 <__libc_init_array+0xc>
 8009e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e8e:	4798      	blx	r3
 8009e90:	3601      	adds	r6, #1
 8009e92:	e7f2      	b.n	8009e7a <__libc_init_array+0x1e>
 8009e94:	0800a1c0 	.word	0x0800a1c0
 8009e98:	0800a1c0 	.word	0x0800a1c0
 8009e9c:	0800a1c0 	.word	0x0800a1c0
 8009ea0:	0800a1c4 	.word	0x0800a1c4

08009ea4 <__retarget_lock_acquire_recursive>:
 8009ea4:	4770      	bx	lr

08009ea6 <__retarget_lock_release_recursive>:
 8009ea6:	4770      	bx	lr

08009ea8 <memcpy>:
 8009ea8:	440a      	add	r2, r1
 8009eaa:	4291      	cmp	r1, r2
 8009eac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009eb0:	d100      	bne.n	8009eb4 <memcpy+0xc>
 8009eb2:	4770      	bx	lr
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ebe:	4291      	cmp	r1, r2
 8009ec0:	d1f9      	bne.n	8009eb6 <memcpy+0xe>
 8009ec2:	bd10      	pop	{r4, pc}

08009ec4 <memset>:
 8009ec4:	4402      	add	r2, r0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d100      	bne.n	8009ece <memset+0xa>
 8009ecc:	4770      	bx	lr
 8009ece:	f803 1b01 	strb.w	r1, [r3], #1
 8009ed2:	e7f9      	b.n	8009ec8 <memset+0x4>

08009ed4 <cleanup_glue>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	6809      	ldr	r1, [r1, #0]
 8009eda:	4605      	mov	r5, r0
 8009edc:	b109      	cbz	r1, 8009ee2 <cleanup_glue+0xe>
 8009ede:	f7ff fff9 	bl	8009ed4 <cleanup_glue>
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eea:	f000 b869 	b.w	8009fc0 <_free_r>
	...

08009ef0 <_reclaim_reent>:
 8009ef0:	4b2c      	ldr	r3, [pc, #176]	; (8009fa4 <_reclaim_reent+0xb4>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4283      	cmp	r3, r0
 8009ef6:	b570      	push	{r4, r5, r6, lr}
 8009ef8:	4604      	mov	r4, r0
 8009efa:	d051      	beq.n	8009fa0 <_reclaim_reent+0xb0>
 8009efc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009efe:	b143      	cbz	r3, 8009f12 <_reclaim_reent+0x22>
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d14a      	bne.n	8009f9c <_reclaim_reent+0xac>
 8009f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f08:	6819      	ldr	r1, [r3, #0]
 8009f0a:	b111      	cbz	r1, 8009f12 <_reclaim_reent+0x22>
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f000 f857 	bl	8009fc0 <_free_r>
 8009f12:	6961      	ldr	r1, [r4, #20]
 8009f14:	b111      	cbz	r1, 8009f1c <_reclaim_reent+0x2c>
 8009f16:	4620      	mov	r0, r4
 8009f18:	f000 f852 	bl	8009fc0 <_free_r>
 8009f1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f1e:	b111      	cbz	r1, 8009f26 <_reclaim_reent+0x36>
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 f84d 	bl	8009fc0 <_free_r>
 8009f26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f28:	b111      	cbz	r1, 8009f30 <_reclaim_reent+0x40>
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 f848 	bl	8009fc0 <_free_r>
 8009f30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009f32:	b111      	cbz	r1, 8009f3a <_reclaim_reent+0x4a>
 8009f34:	4620      	mov	r0, r4
 8009f36:	f000 f843 	bl	8009fc0 <_free_r>
 8009f3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009f3c:	b111      	cbz	r1, 8009f44 <_reclaim_reent+0x54>
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f000 f83e 	bl	8009fc0 <_free_r>
 8009f44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009f46:	b111      	cbz	r1, 8009f4e <_reclaim_reent+0x5e>
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 f839 	bl	8009fc0 <_free_r>
 8009f4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009f50:	b111      	cbz	r1, 8009f58 <_reclaim_reent+0x68>
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 f834 	bl	8009fc0 <_free_r>
 8009f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f5a:	b111      	cbz	r1, 8009f62 <_reclaim_reent+0x72>
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f000 f82f 	bl	8009fc0 <_free_r>
 8009f62:	69a3      	ldr	r3, [r4, #24]
 8009f64:	b1e3      	cbz	r3, 8009fa0 <_reclaim_reent+0xb0>
 8009f66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f68:	4620      	mov	r0, r4
 8009f6a:	4798      	blx	r3
 8009f6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009f6e:	b1b9      	cbz	r1, 8009fa0 <_reclaim_reent+0xb0>
 8009f70:	4620      	mov	r0, r4
 8009f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f76:	f7ff bfad 	b.w	8009ed4 <cleanup_glue>
 8009f7a:	5949      	ldr	r1, [r1, r5]
 8009f7c:	b941      	cbnz	r1, 8009f90 <_reclaim_reent+0xa0>
 8009f7e:	3504      	adds	r5, #4
 8009f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f82:	2d80      	cmp	r5, #128	; 0x80
 8009f84:	68d9      	ldr	r1, [r3, #12]
 8009f86:	d1f8      	bne.n	8009f7a <_reclaim_reent+0x8a>
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f000 f819 	bl	8009fc0 <_free_r>
 8009f8e:	e7ba      	b.n	8009f06 <_reclaim_reent+0x16>
 8009f90:	680e      	ldr	r6, [r1, #0]
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 f814 	bl	8009fc0 <_free_r>
 8009f98:	4631      	mov	r1, r6
 8009f9a:	e7ef      	b.n	8009f7c <_reclaim_reent+0x8c>
 8009f9c:	2500      	movs	r5, #0
 8009f9e:	e7ef      	b.n	8009f80 <_reclaim_reent+0x90>
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20000028 	.word	0x20000028

08009fa8 <__malloc_lock>:
 8009fa8:	4801      	ldr	r0, [pc, #4]	; (8009fb0 <__malloc_lock+0x8>)
 8009faa:	f7ff bf7b 	b.w	8009ea4 <__retarget_lock_acquire_recursive>
 8009fae:	bf00      	nop
 8009fb0:	2000241c 	.word	0x2000241c

08009fb4 <__malloc_unlock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__malloc_unlock+0x8>)
 8009fb6:	f7ff bf76 	b.w	8009ea6 <__retarget_lock_release_recursive>
 8009fba:	bf00      	nop
 8009fbc:	2000241c 	.word	0x2000241c

08009fc0 <_free_r>:
 8009fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fc2:	2900      	cmp	r1, #0
 8009fc4:	d044      	beq.n	800a050 <_free_r+0x90>
 8009fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fca:	9001      	str	r0, [sp, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f1a1 0404 	sub.w	r4, r1, #4
 8009fd2:	bfb8      	it	lt
 8009fd4:	18e4      	addlt	r4, r4, r3
 8009fd6:	f7ff ffe7 	bl	8009fa8 <__malloc_lock>
 8009fda:	4a1e      	ldr	r2, [pc, #120]	; (800a054 <_free_r+0x94>)
 8009fdc:	9801      	ldr	r0, [sp, #4]
 8009fde:	6813      	ldr	r3, [r2, #0]
 8009fe0:	b933      	cbnz	r3, 8009ff0 <_free_r+0x30>
 8009fe2:	6063      	str	r3, [r4, #4]
 8009fe4:	6014      	str	r4, [r2, #0]
 8009fe6:	b003      	add	sp, #12
 8009fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fec:	f7ff bfe2 	b.w	8009fb4 <__malloc_unlock>
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d908      	bls.n	800a006 <_free_r+0x46>
 8009ff4:	6825      	ldr	r5, [r4, #0]
 8009ff6:	1961      	adds	r1, r4, r5
 8009ff8:	428b      	cmp	r3, r1
 8009ffa:	bf01      	itttt	eq
 8009ffc:	6819      	ldreq	r1, [r3, #0]
 8009ffe:	685b      	ldreq	r3, [r3, #4]
 800a000:	1949      	addeq	r1, r1, r5
 800a002:	6021      	streq	r1, [r4, #0]
 800a004:	e7ed      	b.n	8009fe2 <_free_r+0x22>
 800a006:	461a      	mov	r2, r3
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	b10b      	cbz	r3, 800a010 <_free_r+0x50>
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	d9fa      	bls.n	800a006 <_free_r+0x46>
 800a010:	6811      	ldr	r1, [r2, #0]
 800a012:	1855      	adds	r5, r2, r1
 800a014:	42a5      	cmp	r5, r4
 800a016:	d10b      	bne.n	800a030 <_free_r+0x70>
 800a018:	6824      	ldr	r4, [r4, #0]
 800a01a:	4421      	add	r1, r4
 800a01c:	1854      	adds	r4, r2, r1
 800a01e:	42a3      	cmp	r3, r4
 800a020:	6011      	str	r1, [r2, #0]
 800a022:	d1e0      	bne.n	8009fe6 <_free_r+0x26>
 800a024:	681c      	ldr	r4, [r3, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	6053      	str	r3, [r2, #4]
 800a02a:	4421      	add	r1, r4
 800a02c:	6011      	str	r1, [r2, #0]
 800a02e:	e7da      	b.n	8009fe6 <_free_r+0x26>
 800a030:	d902      	bls.n	800a038 <_free_r+0x78>
 800a032:	230c      	movs	r3, #12
 800a034:	6003      	str	r3, [r0, #0]
 800a036:	e7d6      	b.n	8009fe6 <_free_r+0x26>
 800a038:	6825      	ldr	r5, [r4, #0]
 800a03a:	1961      	adds	r1, r4, r5
 800a03c:	428b      	cmp	r3, r1
 800a03e:	bf04      	itt	eq
 800a040:	6819      	ldreq	r1, [r3, #0]
 800a042:	685b      	ldreq	r3, [r3, #4]
 800a044:	6063      	str	r3, [r4, #4]
 800a046:	bf04      	itt	eq
 800a048:	1949      	addeq	r1, r1, r5
 800a04a:	6021      	streq	r1, [r4, #0]
 800a04c:	6054      	str	r4, [r2, #4]
 800a04e:	e7ca      	b.n	8009fe6 <_free_r+0x26>
 800a050:	b003      	add	sp, #12
 800a052:	bd30      	pop	{r4, r5, pc}
 800a054:	20002420 	.word	0x20002420

0800a058 <_init>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr

0800a064 <_fini>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	bf00      	nop
 800a068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06a:	bc08      	pop	{r3}
 800a06c:	469e      	mov	lr, r3
 800a06e:	4770      	bx	lr
