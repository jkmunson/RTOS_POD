
PLAYER_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram1_low    00004000  20004000  20004000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .sram1_upper  0000c000  20008000  20008000  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .sram2        00000000  20014000  20014000  00044000  2**0
                  CONTENTS
  3 .ccm_sram_all 00000000  20018000  20018000  00044000  2**0
                  CONTENTS
  4 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .text         0001010c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       000002ec  080102ec  080102ec  000202ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080105d8  080105d8  00044000  2**0
                  CONTENTS
  8 .ARM          00000008  080105d8  080105d8  000205d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080105e0  080105e0  00044000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  080105e0  080105e0  000205e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000004  080105e4  080105e4  000205e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000008c  20000000  080105e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00002f04  2000008c  08010674  0003008c  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  20002f90  08010674  00032f90  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00044000  2**0
                  CONTENTS, READONLY
 16 .debug_info   000375b8  00000000  00000000  00044030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000619e  00000000  00000000  0007b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002980  00000000  00000000  00081788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002708  00000000  00000000  00084108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00008b65  00000000  00000000  00086810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00033296  00000000  00000000  0008f375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012daa2  00000000  00000000  000c260b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001f00ad  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000b7b0  00000000  00000000  001f0100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080102d4 	.word	0x080102d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	080102d4 	.word	0x080102d4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <braeden_main>:
#include <FreeRTOS.h>
#include <task.h>

void braeden_main(void *ignore) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 80005dc:	f00d ffce 	bl	800e57c <xTaskGetCurrentTaskHandle>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f00d faf8 	bl	800dbd8 <vTaskSuspend>
	vTaskDelete(NULL);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f00d fa4f 	bl	800da8c <vTaskDelete>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <setSampleRate>:
static uint8_t fileBuffer[BUFSIZE];
static uint8_t dmaBuffer[2][BUFSIZE];
static uint8_t dmaBank = 0;

static void setSampleRate(uint16_t freq)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
  uint16_t period = (80000000 / freq) - 1;
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <setSampleRate+0x90>)
 8000606:	fb92 f3f3 	sdiv	r3, r2, r3
 800060a:	b29b      	uxth	r3, r3
 800060c:	3b01      	subs	r3, #1
 800060e:	81fb      	strh	r3, [r7, #14]

  htim6.Instance = TIM6;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <setSampleRate+0x94>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	2200      	movs	r2, #0
 8000618:	f042 0210 	orr.w	r2, r2, #16
 800061c:	705a      	strb	r2, [r3, #1]
 800061e:	2200      	movs	r2, #0
 8000620:	709a      	strb	r2, [r3, #2]
 8000622:	2200      	movs	r2, #0
 8000624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000628:	70da      	strb	r2, [r3, #3]
  htim6.Init.Prescaler = 0;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <setSampleRate+0x94>)
 800062c:	2200      	movs	r2, #0
 800062e:	711a      	strb	r2, [r3, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	715a      	strb	r2, [r3, #5]
 8000634:	2200      	movs	r2, #0
 8000636:	719a      	strb	r2, [r3, #6]
 8000638:	2200      	movs	r2, #0
 800063a:	71da      	strb	r2, [r3, #7]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <setSampleRate+0x94>)
 800063e:	2200      	movs	r2, #0
 8000640:	721a      	strb	r2, [r3, #8]
 8000642:	2200      	movs	r2, #0
 8000644:	725a      	strb	r2, [r3, #9]
 8000646:	2200      	movs	r2, #0
 8000648:	729a      	strb	r2, [r3, #10]
 800064a:	2200      	movs	r2, #0
 800064c:	72da      	strb	r2, [r3, #11]
  htim6.Init.Period = period;
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	4a0e      	ldr	r2, [pc, #56]	; (800068c <setSampleRate+0x94>)
 8000652:	60d3      	str	r3, [r2, #12]
  htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <setSampleRate+0x94>)
 8000656:	2200      	movs	r2, #0
 8000658:	741a      	strb	r2, [r3, #16]
 800065a:	2200      	movs	r2, #0
 800065c:	745a      	strb	r2, [r3, #17]
 800065e:	2200      	movs	r2, #0
 8000660:	749a      	strb	r2, [r3, #18]
 8000662:	2200      	movs	r2, #0
 8000664:	74da      	strb	r2, [r3, #19]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <setSampleRate+0x94>)
 8000668:	2200      	movs	r2, #0
 800066a:	761a      	strb	r2, [r3, #24]
 800066c:	2200      	movs	r2, #0
 800066e:	765a      	strb	r2, [r3, #25]
 8000670:	2200      	movs	r2, #0
 8000672:	769a      	strb	r2, [r3, #26]
 8000674:	2200      	movs	r2, #0
 8000676:	76da      	strb	r2, [r3, #27]
  HAL_TIM_Base_Init(&htim6);
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <setSampleRate+0x94>)
 800067a:	f006 fadd 	bl	8006c38 <HAL_TIM_Base_Init>
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	04c4b400 	.word	0x04c4b400
 800068c:	20000f3c 	.word	0x20000f3c

08000690 <val2Dac8>:

static inline uint16_t val2Dac8(int32_t v)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint16_t out = v << 3;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	b29b      	uxth	r3, r3
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	81fb      	strh	r3, [r7, #14]
  return out;
 80006a0:	89fb      	ldrh	r3, [r7, #14]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <val2Dac16>:

static inline uint16_t val2Dac16(int32_t v)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  v >>= 4;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	111b      	asrs	r3, r3, #4
 80006ba:	607b      	str	r3, [r7, #4]
  v += 2047;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80006c2:	607b      	str	r3, [r7, #4]
  return v & 0xfff;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006cc:	b29b      	uxth	r3, r3
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <prepareDACBuffer_8Bit>:

static void prepareDACBuffer_8Bit(uint8_t channels, uint16_t numSamples, void *pIn, uint16_t *pOutput)
{
 80006da:	b590      	push	{r4, r7, lr}
 80006dc:	b089      	sub	sp, #36	; 0x24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60ba      	str	r2, [r7, #8]
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4603      	mov	r3, r0
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	460b      	mov	r3, r1
 80006ea:	81bb      	strh	r3, [r7, #12]
  uint8_t *pInput = (uint8_t *)pIn;
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	61fb      	str	r3, [r7, #28]

  for (int i=0; i<numSamples; i++) {
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	e023      	b.n	800073e <prepareDACBuffer_8Bit+0x64>
    int32_t val = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

    for(int j=0; j<channels; j++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	e00a      	b.n	8000716 <prepareDACBuffer_8Bit+0x3c>
      val += *pInput++;
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	61fa      	str	r2, [r7, #28]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	4413      	add	r3, r2
 800070e:	617b      	str	r3, [r7, #20]
    for(int j=0; j<channels; j++) {
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	3301      	adds	r3, #1
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	429a      	cmp	r2, r3
 800071c:	dbf0      	blt.n	8000700 <prepareDACBuffer_8Bit+0x26>
    }
    val /= channels;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	fb92 f3f3 	sdiv	r3, r2, r3
 8000726:	617b      	str	r3, [r7, #20]
    *pOutput++ = val2Dac8(val);
 8000728:	687c      	ldr	r4, [r7, #4]
 800072a:	1ca3      	adds	r3, r4, #2
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f7ff ffae 	bl	8000690 <val2Dac8>
 8000734:	4603      	mov	r3, r0
 8000736:	8023      	strh	r3, [r4, #0]
  for (int i=0; i<numSamples; i++) {
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	3301      	adds	r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	89bb      	ldrh	r3, [r7, #12]
 8000740:	69ba      	ldr	r2, [r7, #24]
 8000742:	429a      	cmp	r2, r3
 8000744:	dbd7      	blt.n	80006f6 <prepareDACBuffer_8Bit+0x1c>
  }
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3724      	adds	r7, #36	; 0x24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <prepareDACBuffer_16Bit>:

static void prepareDACBuffer_16Bit(uint8_t channels, uint16_t numSamples, void *pIn, uint16_t *pOutput)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60ba      	str	r2, [r7, #8]
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4603      	mov	r3, r0
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	460b      	mov	r3, r1
 8000760:	81bb      	strh	r3, [r7, #12]
  int16_t *pInput = (int16_t *)pIn;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	61fb      	str	r3, [r7, #28]

  for (int i=0; i<numSamples; i++) {
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	e024      	b.n	80007b6 <prepareDACBuffer_16Bit+0x66>
    int32_t val = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

    for(int j=0; j<channels; j++) {
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	e00b      	b.n	800078e <prepareDACBuffer_16Bit+0x3e>
      val += *pInput++;
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	1c9a      	adds	r2, r3, #2
 800077a:	61fa      	str	r2, [r7, #28]
 800077c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000780:	461a      	mov	r2, r3
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	4413      	add	r3, r2
 8000786:	617b      	str	r3, [r7, #20]
    for(int j=0; j<channels; j++) {
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	3301      	adds	r3, #1
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	693a      	ldr	r2, [r7, #16]
 8000792:	429a      	cmp	r2, r3
 8000794:	dbef      	blt.n	8000776 <prepareDACBuffer_16Bit+0x26>
    }
    val /= channels;
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	fb92 f3f3 	sdiv	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
    *pOutput++ = val2Dac16(val);
 80007a0:	687c      	ldr	r4, [r7, #4]
 80007a2:	1ca3      	adds	r3, r4, #2
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	6978      	ldr	r0, [r7, #20]
 80007a8:	f7ff ff81 	bl	80006ae <val2Dac16>
 80007ac:	4603      	mov	r3, r0
 80007ae:	8023      	strh	r3, [r4, #0]
  for (int i=0; i<numSamples; i++) {
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	3301      	adds	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	89bb      	ldrh	r3, [r7, #12]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	dbd6      	blt.n	800076c <prepareDACBuffer_16Bit+0x1c>
  }
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	3724      	adds	r7, #36	; 0x24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd90      	pop	{r4, r7, pc}

080007c8 <outputSamples>:

static void outputSamples(FIL *fil, struct Wav_Header *header)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b08d      	sub	sp, #52	; 0x34
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  const uint8_t channels = header->channels;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	8adb      	ldrh	r3, [r3, #22]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  const uint8_t bytesPerSample = header->bitsPerSample / 8;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  funcP prepareData = (header->bitsPerSample == 8)? prepareDACBuffer_8Bit : prepareDACBuffer_16Bit;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	d101      	bne.n	80007f8 <outputSamples+0x30>
 80007f4:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <outputSamples+0x130>)
 80007f6:	e000      	b.n	80007fa <outputSamples+0x32>
 80007f8:	4b40      	ldr	r3, [pc, #256]	; (80008fc <outputSamples+0x134>)
 80007fa:	61fb      	str	r3, [r7, #28]

  flg_dma_done = 1;
 80007fc:	4b40      	ldr	r3, [pc, #256]	; (8000900 <outputSamples+0x138>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
  dmaBank = 0;
 8000802:	4b40      	ldr	r3, [pc, #256]	; (8000904 <outputSamples+0x13c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]

  uint32_t bytes_last = header->dataChunkLength;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080c:	627b      	str	r3, [r7, #36]	; 0x24

  while(0 < bytes_last) {
 800080e:	e061      	b.n	80008d4 <outputSamples+0x10c>

    int blksize = (header->bitsPerSample == 8)? MIN(bytes_last, BUFSIZE / 2) : MIN(bytes_last, BUFSIZE);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000814:	b29b      	uxth	r3, r3
 8000816:	2b08      	cmp	r3, #8
 8000818:	d106      	bne.n	8000828 <outputSamples+0x60>
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000820:	bf28      	it	cs
 8000822:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8000826:	e005      	b.n	8000834 <outputSamples+0x6c>
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800082e:	bf28      	it	cs
 8000830:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8000834:	61bb      	str	r3, [r7, #24]

    UINT bytes_read;
    FRESULT res;

    res = f_read(fil, fileBuffer, blksize, &bytes_read);
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	4932      	ldr	r1, [pc, #200]	; (8000908 <outputSamples+0x140>)
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f00b f849 	bl	800b8d6 <f_read>
 8000844:	4603      	mov	r3, r0
 8000846:	75fb      	strb	r3, [r7, #23]
    if (res != FR_OK || bytes_read == 0)
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d147      	bne.n	80008de <outputSamples+0x116>
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d044      	beq.n	80008de <outputSamples+0x116>
      break;

    uint16_t numSamples = bytes_read / bytesPerSample / channels;
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800085a:	fbb2 f2f3 	udiv	r2, r2, r3
 800085e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	82bb      	strh	r3, [r7, #20]
    int16_t     *pInput = (int16_t *)fileBuffer;
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <outputSamples+0x140>)
 800086a:	613b      	str	r3, [r7, #16]
    uint16_t   *pOutput = (uint16_t *)dmaBuffer[dmaBank];
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <outputSamples+0x13c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	025b      	lsls	r3, r3, #9
 8000872:	4a26      	ldr	r2, [pc, #152]	; (800090c <outputSamples+0x144>)
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]

    prepareData(channels, numSamples, pInput, pOutput);
 8000878:	8ab9      	ldrh	r1, [r7, #20]
 800087a:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 800087e:	69fc      	ldr	r4, [r7, #28]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	47a0      	blx	r4

    // wait for DMA complete
    while(flg_dma_done == 0) {
 8000886:	e000      	b.n	800088a <outputSamples+0xc2>
      __NOP();
 8000888:	bf00      	nop
    while(flg_dma_done == 0) {
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <outputSamples+0x138>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0fa      	beq.n	8000888 <outputSamples+0xc0>
    }

    HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000892:	2100      	movs	r1, #0
 8000894:	481e      	ldr	r0, [pc, #120]	; (8000910 <outputSamples+0x148>)
 8000896:	f003 fe43 	bl	8004520 <HAL_DAC_Stop_DMA>
    flg_dma_done = 0;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <outputSamples+0x138>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dmaBuffer[dmaBank], numSamples, DAC_ALIGN_12B_R);
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <outputSamples+0x13c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	025b      	lsls	r3, r3, #9
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <outputSamples+0x144>)
 80008a8:	441a      	add	r2, r3
 80008aa:	8abb      	ldrh	r3, [r7, #20]
 80008ac:	2100      	movs	r1, #0
 80008ae:	9100      	str	r1, [sp, #0]
 80008b0:	2100      	movs	r1, #0
 80008b2:	4817      	ldr	r0, [pc, #92]	; (8000910 <outputSamples+0x148>)
 80008b4:	f003 fd60 	bl	8004378 <HAL_DAC_Start_DMA>

    dmaBank = !dmaBank;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <outputSamples+0x13c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	bf0c      	ite	eq
 80008c0:	2301      	moveq	r3, #1
 80008c2:	2300      	movne	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <outputSamples+0x13c>)
 80008ca:	701a      	strb	r2, [r3, #0]
    bytes_last -= blksize;
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  while(0 < bytes_last) {
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d19a      	bne.n	8000810 <outputSamples+0x48>
  };

  while(flg_dma_done == 0) {
 80008da:	e000      	b.n	80008de <outputSamples+0x116>
    __NOP();
 80008dc:	bf00      	nop
  while(flg_dma_done == 0) {
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <outputSamples+0x138>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0fa      	beq.n	80008dc <outputSamples+0x114>
  }

  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80008e6:	2100      	movs	r1, #0
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <outputSamples+0x148>)
 80008ea:	f003 fe19 	bl	8004520 <HAL_DAC_Stop_DMA>
}
 80008ee:	bf00      	nop
 80008f0:	372c      	adds	r7, #44	; 0x2c
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	080006db 	.word	0x080006db
 80008fc:	08000751 	.word	0x08000751
 8000900:	200000a8 	.word	0x200000a8
 8000904:	200006ac 	.word	0x200006ac
 8000908:	200000ac 	.word	0x200000ac
 800090c:	200002ac 	.word	0x200002ac
 8000910:	200009ac 	.word	0x200009ac

08000914 <isSupprtedWavFile>:

static uint8_t isSupprtedWavFile(const struct Wav_Header *header)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if (strncmp(header->riff, "RIFF", 4 ) != 0)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2204      	movs	r2, #4
 8000920:	4910      	ldr	r1, [pc, #64]	; (8000964 <isSupprtedWavFile+0x50>)
 8000922:	4618      	mov	r0, r3
 8000924:	f00f f912 	bl	800fb4c <strncmp>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <isSupprtedWavFile+0x1e>
    return 0;
 800092e:	2300      	movs	r3, #0
 8000930:	e013      	b.n	800095a <isSupprtedWavFile+0x46>

  if (header->vfmt != 1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	8a9b      	ldrh	r3, [r3, #20]
 8000936:	b29b      	uxth	r3, r3
 8000938:	2b01      	cmp	r3, #1
 800093a:	d001      	beq.n	8000940 <isSupprtedWavFile+0x2c>
    return 0;
 800093c:	2300      	movs	r3, #0
 800093e:	e00c      	b.n	800095a <isSupprtedWavFile+0x46>

  if (strncmp(header->dataChunkHeader, "data", 4 ) != 0)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3324      	adds	r3, #36	; 0x24
 8000944:	2204      	movs	r2, #4
 8000946:	4908      	ldr	r1, [pc, #32]	; (8000968 <isSupprtedWavFile+0x54>)
 8000948:	4618      	mov	r0, r3
 800094a:	f00f f8ff 	bl	800fb4c <strncmp>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <isSupprtedWavFile+0x44>
    return 0;
 8000954:	2300      	movs	r3, #0
 8000956:	e000      	b.n	800095a <isSupprtedWavFile+0x46>

  return 1;
 8000958:	2301      	movs	r3, #1
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	080102ec 	.word	0x080102ec
 8000968:	080102f4 	.word	0x080102f4

0800096c <playWavFile>:

static void playWavFile(char *filename)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8000972:	af00      	add	r7, sp, #0
 8000974:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000978:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800097c:	6018      	str	r0, [r3, #0]
  FIL fil;
  FRESULT res;
  UINT count = 0;
 800097e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000982:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]

  struct Wav_Header header;

  res = f_open(&fil, filename, FA_READ);
 800098a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800098e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000992:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000996:	2201      	movs	r2, #1
 8000998:	6819      	ldr	r1, [r3, #0]
 800099a:	f00a fdd7 	bl	800b54c <f_open>
 800099e:	4603      	mov	r3, r0
 80009a0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  if (res != FR_OK)
 80009a4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d138      	bne.n	8000a1e <playWavFile+0xb2>
    return;

  res = f_read(&fil, &header, sizeof(struct Wav_Header), &count);
 80009ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009b0:	f107 0108 	add.w	r1, r7, #8
 80009b4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80009b8:	222c      	movs	r2, #44	; 0x2c
 80009ba:	f00a ff8c 	bl	800b8d6 <f_read>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  if (res != FR_OK)
 80009c4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d119      	bne.n	8000a00 <playWavFile+0x94>
    goto done;

  if (!isSupprtedWavFile(&header))
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff9f 	bl	8000914 <isSupprtedWavFile>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d013      	beq.n	8000a04 <playWavFile+0x98>
    goto done;

  setSampleRate(header.sampleFreq);
 80009dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80009e0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe05 	bl	80005f8 <setSampleRate>
  outputSamples(&fil, &header);
 80009ee:	f107 0208 	add.w	r2, r7, #8
 80009f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fee5 	bl	80007c8 <outputSamples>
 80009fe:	e002      	b.n	8000a06 <playWavFile+0x9a>
    goto done;
 8000a00:	bf00      	nop
 8000a02:	e000      	b.n	8000a06 <playWavFile+0x9a>
    goto done;
 8000a04:	bf00      	nop

done :
  res = f_close(&fil);
 8000a06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f00b f95a 	bl	800bcc4 <f_close>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  if (res != FR_OK)
 8000a16:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	e000      	b.n	8000a20 <playWavFile+0xb4>
    return;
 8000a1e:	bf00      	nop
    return;
}
 8000a20:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <bryant_main>:


void bryant_main(void *ignore) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000a34:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8000a38:	6018      	str	r0, [r3, #0]


	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 8000a3a:	f00d fd9f 	bl	800e57c <xTaskGetCurrentTaskHandle>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f00d f8c9 	bl	800dbd8 <vTaskSuspend>
	vTaskDelete(NULL);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f00d f820 	bl	800da8c <vTaskDelete>

	HAL_TIM_Base_Start(&htim6);
 8000a4c:	482c      	ldr	r0, [pc, #176]	; (8000b00 <bryant_main+0xd8>)
 8000a4e:	f006 f957 	bl	8006d00 <HAL_TIM_Base_Start>
	FATFS FatFs;
	FRESULT res;
	DIR dir;
	FILINFO fno;

	res = f_mount(&FatFs, "", 0);
 8000a52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a56:	2200      	movs	r2, #0
 8000a58:	492a      	ldr	r1, [pc, #168]	; (8000b04 <bryant_main+0xdc>)
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00a fd12 	bl	800b484 <f_mount>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	if (res != FR_OK) {while(1);}
 8000a66:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d000      	beq.n	8000a70 <bryant_main+0x48>
 8000a6e:	e7fe      	b.n	8000a6e <bryant_main+0x46>

	res = f_opendir(&dir, "");
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4923      	ldr	r1, [pc, #140]	; (8000b04 <bryant_main+0xdc>)
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00b f953 	bl	800bd22 <f_opendir>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	if (res != FR_OK){while(1);}
 8000a82:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d000      	beq.n	8000a8c <bryant_main+0x64>
 8000a8a:	e7fe      	b.n	8000a8a <bryant_main+0x62>
	while(1) {
	res = f_readdir(&dir, &fno);
 8000a8c:	f107 020c 	add.w	r2, r7, #12
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00b f9e7 	bl	800be6a <f_readdir>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
	if (res != FR_OK || fno.fname[0] == 0)
 8000aa2:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d11c      	bne.n	8000ae4 <bryant_main+0xbc>
 8000aaa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000aae:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000ab2:	7a5b      	ldrb	r3, [r3, #9]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d015      	beq.n	8000ae4 <bryant_main+0xbc>
	  break;

	char *filename = fno.fname;
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	3309      	adds	r3, #9
 8000abe:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288

	if (strstr(filename, ".WAV") != 0) {
 8000ac2:	4911      	ldr	r1, [pc, #68]	; (8000b08 <bryant_main+0xe0>)
 8000ac4:	f8d7 0288 	ldr.w	r0, [r7, #648]	; 0x288
 8000ac8:	f00f f854 	bl	800fb74 <strstr>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <bryant_main+0xb2>
	  playWavFile(filename);
 8000ad2:	f8d7 0288 	ldr.w	r0, [r7, #648]	; 0x288
 8000ad6:	f7ff ff49 	bl	800096c <playWavFile>
	}

	HAL_Delay(1000);
 8000ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ade:	f002 f8e1 	bl	8002ca4 <HAL_Delay>
	while(1) {
 8000ae2:	e7d3      	b.n	8000a8c <bryant_main+0x64>
	}

	res = f_closedir(&dir);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00b f993 	bl	800be14 <f_closedir>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
}
 8000af4:	bf00      	nop
 8000af6:	f507 7724 	add.w	r7, r7, #656	; 0x290
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000f3c 	.word	0x20000f3c
 8000b04:	080102fc 	.word	0x080102fc
 8000b08:	08010300 	.word	0x08010300

08000b0c <update_green_DMA_addr>:
extern UART_HandleTypeDef huart5;
//DAC_DHR12LD

size_t audio_dma_current_index;

void update_green_DMA_addr(TIM_HandleTypeDef *htim){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	audio_dma_current_index = (audio_dma_current_index+4)%AUD_BUFFER_SIZE;
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <update_green_DMA_addr+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	1d19      	adds	r1, r3, #4
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <update_green_DMA_addr+0x68>)
 8000b1c:	fba3 2301 	umull	r2, r3, r3, r1
 8000b20:	0bda      	lsrs	r2, r3, #15
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	039b      	lsls	r3, r3, #14
 8000b2a:	1aca      	subs	r2, r1, r3
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <update_green_DMA_addr+0x64>)
 8000b2e:	601a      	str	r2, [r3, #0]
	const char *tim_msg = "DMA Update started or wrapped\n";
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <update_green_DMA_addr+0x6c>)
 8000b32:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart5,tim_msg,strlen(tim_msg), 0xFFFF);
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff fb73 	bl	8000220 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b42:	68f9      	ldr	r1, [r7, #12]
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <update_green_DMA_addr+0x70>)
 8000b46:	f007 f919 	bl	8007d7c <HAL_UART_Transmit>
	if ((audio_dma_current_index==0))	HAL_UART_Transmit(&huart5,tim_msg,strlen(tim_msg), 0xFFFF);
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <update_green_DMA_addr+0x64>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10a      	bne.n	8000b68 <update_green_DMA_addr+0x5c>
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f7ff fb64 	bl	8000220 <strlen>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <update_green_DMA_addr+0x70>)
 8000b64:	f007 f90a 	bl	8007d7c <HAL_UART_Transmit>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200006b0 	.word	0x200006b0
 8000b74:	aaaaaaab 	.word	0xaaaaaaab
 8000b78:	08010308 	.word	0x08010308
 8000b7c:	20001008 	.word	0x20001008

08000b80 <jeremy_main>:

size_t get_audio_buffer_current_index(void){
	return audio_dma_current_index;
}

void jeremy_main(void *ignore) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b09e      	sub	sp, #120	; 0x78
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	6078      	str	r0, [r7, #4]
	const char *jeremy_main_msg = "Entered Jeremy Main\n";
 8000b88:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <jeremy_main+0x134>)
 8000b8a:	667b      	str	r3, [r7, #100]	; 0x64
	const char *jeremy_main_cb = "Registered timer callback\n";
 8000b8c:	4b4a      	ldr	r3, [pc, #296]	; (8000cb8 <jeremy_main+0x138>)
 8000b8e:	663b      	str	r3, [r7, #96]	; 0x60
	const char *jeremy_main_dma = "Initiated DMA\n";
 8000b90:	4b4a      	ldr	r3, [pc, #296]	; (8000cbc <jeremy_main+0x13c>)
 8000b92:	65fb      	str	r3, [r7, #92]	; 0x5c
	const char *jeremy_main_tim = "Initiated Timer\n";
 8000b94:	4b4a      	ldr	r3, [pc, #296]	; (8000cc0 <jeremy_main+0x140>)
 8000b96:	65bb      	str	r3, [r7, #88]	; 0x58
	char buf[75];

	HAL_UART_Transmit(&huart5,jeremy_main_msg,strlen(jeremy_main_msg), 0xFFFF);
 8000b98:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b9a:	f7ff fb41 	bl	8000220 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ba6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000ba8:	4846      	ldr	r0, [pc, #280]	; (8000cc4 <jeremy_main+0x144>)
 8000baa:	f007 f8e7 	bl	8007d7c <HAL_UART_Transmit>

	HAL_TIM_RegisterCallback(&AUDIO_44_1_KHZ_TIMER, HAL_TIM_PERIOD_ELAPSED_CB_ID, update_green_DMA_addr);
 8000bae:	4a46      	ldr	r2, [pc, #280]	; (8000cc8 <jeremy_main+0x148>)
 8000bb0:	210e      	movs	r1, #14
 8000bb2:	4846      	ldr	r0, [pc, #280]	; (8000ccc <jeremy_main+0x14c>)
 8000bb4:	f006 fc76 	bl	80074a4 <HAL_TIM_RegisterCallback>
	HAL_UART_Transmit(&huart5,jeremy_main_cb,strlen(jeremy_main_cb), 0xFFFF);
 8000bb8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000bba:	f7ff fb31 	bl	8000220 <strlen>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000bc8:	483e      	ldr	r0, [pc, #248]	; (8000cc4 <jeremy_main+0x144>)
 8000bca:	f007 f8d7 	bl	8007d7c <HAL_UART_Transmit>

	HAL_TIM_Base_Start(&AUDIO_44_1_KHZ_TIMER);
 8000bce:	483f      	ldr	r0, [pc, #252]	; (8000ccc <jeremy_main+0x14c>)
 8000bd0:	f006 f896 	bl	8006d00 <HAL_TIM_Base_Start>
	HAL_UART_Transmit(&huart5,jeremy_main_tim,strlen(jeremy_main_tim), 0xFFFF);
 8000bd4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000bd6:	f7ff fb23 	bl	8000220 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000be4:	4837      	ldr	r0, [pc, #220]	; (8000cc4 <jeremy_main+0x144>)
 8000be6:	f007 f8c9 	bl	8007d7c <HAL_UART_Transmit>
	HAL_DAC_Start(&AUD_GREEN_DAC, DAC_CHANNEL_1);
 8000bea:	2100      	movs	r1, #0
 8000bec:	4838      	ldr	r0, [pc, #224]	; (8000cd0 <jeremy_main+0x150>)
 8000bee:	f003 fb57 	bl	80042a0 <HAL_DAC_Start>
	HAL_DAC_Start(&AUD_GREEN_DAC, DAC_CHANNEL_2);
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	4836      	ldr	r0, [pc, #216]	; (8000cd0 <jeremy_main+0x150>)
 8000bf6:	f003 fb53 	bl	80042a0 <HAL_DAC_Start>

	HAL_DAC_Start_DMA(&AUD_GREEN_DAC, DAC_CHANNEL_1, (uint32_t*)audio_buffer, (AUD_BUFFER_SIZE>>2)-1 , DAC_ALIGN_12B_L);
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8000c02:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <jeremy_main+0x154>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4832      	ldr	r0, [pc, #200]	; (8000cd0 <jeremy_main+0x150>)
 8000c08:	f003 fbb6 	bl	8004378 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(&AUD_GREEN_DAC, DAC_CHANNEL_2, (uint32_t*)(audio_buffer+2), (AUD_BUFFER_SIZE>>2)-1 , DAC_ALIGN_12B_L);
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <jeremy_main+0x158>)
 8000c0e:	2304      	movs	r3, #4
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8000c16:	2110      	movs	r1, #16
 8000c18:	482d      	ldr	r0, [pc, #180]	; (8000cd0 <jeremy_main+0x150>)
 8000c1a:	f003 fbad 	bl	8004378 <HAL_DAC_Start_DMA>



	HAL_UART_Transmit(&huart5,jeremy_main_dma,strlen(jeremy_main_dma), 0xFFFF);
 8000c1e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000c20:	f7ff fafe 	bl	8000220 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000c2e:	4825      	ldr	r0, [pc, #148]	; (8000cc4 <jeremy_main+0x144>)
 8000c30:	f007 f8a4 	bl	8007d7c <HAL_UART_Transmit>
	audio_dma_current_index = 0; //Reset the index now, in case it had counted up before we started DMA. its okay to be a ways behind the dma.
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <jeremy_main+0x15c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
	for(int i=0; 1; i++){
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(int j=0; j < 10; j++) {
 8000c3e:	2300      	movs	r3, #0
 8000c40:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c42:	e015      	b.n	8000c70 <jeremy_main+0xf0>
			audio_buffer[audio_dma_current_index++] +=10+10*j;
 8000c44:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <jeremy_main+0x15c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	4924      	ldr	r1, [pc, #144]	; (8000cdc <jeremy_main+0x15c>)
 8000c4c:	600a      	str	r2, [r1, #0]
 8000c4e:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <jeremy_main+0x154>)
 8000c50:	5cd1      	ldrb	r1, [r2, r3]
 8000c52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000c54:	3201      	adds	r2, #1
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	4610      	mov	r0, r2
 8000c5a:	0080      	lsls	r0, r0, #2
 8000c5c:	4402      	add	r2, r0
 8000c5e:	0052      	lsls	r2, r2, #1
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440a      	add	r2, r1
 8000c64:	b2d1      	uxtb	r1, r2
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <jeremy_main+0x154>)
 8000c68:	54d1      	strb	r1, [r2, r3]
		for(int j=0; j < 10; j++) {
 8000c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c72:	2b09      	cmp	r3, #9
 8000c74:	dde6      	ble.n	8000c44 <jeremy_main+0xc4>
		}
		sprintf(buf, "Uptime: %d\nBuf: %i\n\n", i, audio_dma_current_index);
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <jeremy_main+0x15c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f107 000c 	add.w	r0, r7, #12
 8000c7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c80:	4917      	ldr	r1, [pc, #92]	; (8000ce0 <jeremy_main+0x160>)
 8000c82:	f00e ff43 	bl	800fb0c <siprintf>
		HAL_UART_Transmit(&huart5, buf, strlen(buf), 0xFFFF);
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fac8 	bl	8000220 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	f107 010c 	add.w	r1, r7, #12
 8000c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <jeremy_main+0x144>)
 8000c9e:	f007 f86d 	bl	8007d7c <HAL_UART_Transmit>
		vTaskDelay(1000);
 8000ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca6:	f00c ff63 	bl	800db70 <vTaskDelay>
	for(int i=0; 1; i++){
 8000caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cac:	3301      	adds	r3, #1
 8000cae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000cb0:	e7c5      	b.n	8000c3e <jeremy_main+0xbe>
 8000cb2:	bf00      	nop
 8000cb4:	08010328 	.word	0x08010328
 8000cb8:	08010340 	.word	0x08010340
 8000cbc:	0801035c 	.word	0x0801035c
 8000cc0:	0801036c 	.word	0x0801036c
 8000cc4:	20001008 	.word	0x20001008
 8000cc8:	08000b0d 	.word	0x08000b0d
 8000ccc:	20000f3c 	.word	0x20000f3c
 8000cd0:	200009ac 	.word	0x200009ac
 8000cd4:	20008000 	.word	0x20008000
 8000cd8:	20008002 	.word	0x20008002
 8000cdc:	200006b0 	.word	0x200006b0
 8000ce0:	08010380 	.word	0x08010380

08000ce4 <wyatt_main>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "jeremy.h"
//#include "wyatt.h"
void wyatt_main(void *ignore){vTaskDelete(NULL);}; //temporary measure
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	2000      	movs	r0, #0
 8000cee:	f00c fecd 	bl	800da8c <vTaskDelete>
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d02:	f001 ff98 	bl	8002c36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d06:	f000 f8a3 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0a:	f000 ff05 	bl	8001b18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d0e:	f000 fed9 	bl	8001ac4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000d12:	f000 fb0f 	bl	8001334 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000d16:	f000 fb51 	bl	80013bc <MX_DAC2_Init>
  MX_DAC3_Init();
 8000d1a:	f000 fb89 	bl	8001430 <MX_DAC3_Init>
  MX_DAC4_Init();
 8000d1e:	f000 fbcb 	bl	80014b8 <MX_DAC4_Init>
  MX_OPAMP1_Init();
 8000d22:	f000 fc0d 	bl	8001540 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 8000d26:	f000 fc31 	bl	800158c <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 8000d2a:	f000 fc55 	bl	80015d8 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 8000d2e:	f000 fc79 	bl	8001624 <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 8000d32:	f000 fc9d 	bl	8001670 <MX_OPAMP6_Init>
  MX_QUADSPI1_Init();
 8000d36:	f000 fcc1 	bl	80016bc <MX_QUADSPI1_Init>
  MX_SPI2_Init();
 8000d3a:	f000 fce7 	bl	800170c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000d3e:	f000 fd23 	bl	8001788 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000d42:	f000 fd5f 	bl	8001804 <MX_SPI4_Init>
  MX_UART5_Init();
 8000d46:	f000 fe1f 	bl	8001988 <MX_UART5_Init>
  MX_USART3_Init();
 8000d4a:	f000 fe6d 	bl	8001a28 <MX_USART3_Init>
  MX_ADC1_Init();
 8000d4e:	f000 f8cf 	bl	8000ef0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d52:	f000 f945 	bl	8000fe0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d56:	f000 f9a9 	bl	80010ac <MX_ADC3_Init>
  MX_ADC4_Init();
 8000d5a:	f000 fa1f 	bl	800119c <MX_ADC4_Init>
  MX_ADC5_Init();
 8000d5e:	f000 fa83 	bl	8001268 <MX_ADC5_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000d62:	f008 fcd1 	bl	8009708 <MX_FATFS_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <main+0x74>
    Error_Handler();
 8000d6c:	f001 f812 	bl	8001d94 <Error_Handler>
  }
  MX_TIM6_Init();
 8000d70:	f000 fdd4 	bl	800191c <MX_TIM6_Init>
  MX_TIM2_Init();
 8000d74:	f000 fd84 	bl	8001880 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d78:	4821      	ldr	r0, [pc, #132]	; (8000e00 <main+0x104>)
 8000d7a:	f006 f831 	bl	8006de0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d7e:	f00b f99d 	bl	800c0bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d82:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <main+0x108>)
 8000d84:	2100      	movs	r1, #0
 8000d86:	4820      	ldr	r0, [pc, #128]	; (8000e08 <main+0x10c>)
 8000d88:	f00b f9e2 	bl	800c150 <osThreadNew>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <main+0x110>)
 8000d90:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  static StaticTask_t threads[4];
  xTaskCreateStatic(wyatt_main, 	"wyatt_main_thread", 	1024, NULL, 5, (StackType_t *)wyatt_memspace, 	&threads[0]);
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <main+0x114>)
 8000d94:	9302      	str	r3, [sp, #8]
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <main+0x118>)
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da4:	491c      	ldr	r1, [pc, #112]	; (8000e18 <main+0x11c>)
 8000da6:	481d      	ldr	r0, [pc, #116]	; (8000e1c <main+0x120>)
 8000da8:	f00c fcb8 	bl	800d71c <xTaskCreateStatic>
  xTaskCreateStatic(jeremy_main, 	"jeremy_main_thread", 	1024, NULL, 5, (StackType_t *)jeremy_memspace, 	&threads[1]);
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <main+0x124>)
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <main+0x128>)
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	2305      	movs	r3, #5
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2300      	movs	r3, #0
 8000dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbe:	491a      	ldr	r1, [pc, #104]	; (8000e28 <main+0x12c>)
 8000dc0:	481a      	ldr	r0, [pc, #104]	; (8000e2c <main+0x130>)
 8000dc2:	f00c fcab 	bl	800d71c <xTaskCreateStatic>
  xTaskCreateStatic(bryant_main, 	"bryant_main_thread", 	1024, NULL, 5, (StackType_t *)bryant_memspace, 	&threads[2]);
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <main+0x134>)
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <main+0x138>)
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	2305      	movs	r3, #5
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd8:	4917      	ldr	r1, [pc, #92]	; (8000e38 <main+0x13c>)
 8000dda:	4818      	ldr	r0, [pc, #96]	; (8000e3c <main+0x140>)
 8000ddc:	f00c fc9e 	bl	800d71c <xTaskCreateStatic>
  xTaskCreateStatic(braeden_main, 	"braeden_main_thread", 	1024, NULL, 5, (StackType_t *)braeden_memspace, &threads[3]);
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <main+0x144>)
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <main+0x148>)
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	2305      	movs	r3, #5
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2300      	movs	r3, #0
 8000dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df2:	4915      	ldr	r1, [pc, #84]	; (8000e48 <main+0x14c>)
 8000df4:	4815      	ldr	r0, [pc, #84]	; (8000e4c <main+0x150>)
 8000df6:	f00c fc91 	bl	800d71c <xTaskCreateStatic>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dfa:	f00b f983 	bl	800c104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <main+0x102>
 8000e00:	20000e70 	.word	0x20000e70
 8000e04:	08010450 	.word	0x08010450
 8000e08:	08001cd1 	.word	0x08001cd1
 8000e0c:	20001164 	.word	0x20001164
 8000e10:	20001168 	.word	0x20001168
 8000e14:	20004000 	.word	0x20004000
 8000e18:	080103a4 	.word	0x080103a4
 8000e1c:	08000ce5 	.word	0x08000ce5
 8000e20:	20001224 	.word	0x20001224
 8000e24:	20007000 	.word	0x20007000
 8000e28:	080103b8 	.word	0x080103b8
 8000e2c:	08000b81 	.word	0x08000b81
 8000e30:	200012e0 	.word	0x200012e0
 8000e34:	20005000 	.word	0x20005000
 8000e38:	080103cc 	.word	0x080103cc
 8000e3c:	08000a29 	.word	0x08000a29
 8000e40:	2000139c 	.word	0x2000139c
 8000e44:	20006000 	.word	0x20006000
 8000e48:	080103e0 	.word	0x080103e0
 8000e4c:	080005d5 	.word	0x080005d5

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	; 0x50
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	2238      	movs	r2, #56	; 0x38
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f00e fd3e 	bl	800f8e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f004 fbd2 	bl	800561c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e80:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e88:	2340      	movs	r3, #64	; 0x40
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e90:	2303      	movs	r3, #3
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000e98:	2314      	movs	r3, #20
 8000e9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 fdbb 	bl	8005a28 <HAL_RCC_OscConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000eb8:	f000 ff6c 	bl	8001d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 f8b9 	bl	800604c <HAL_RCC_ClockConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ee0:	f000 ff58 	bl	8001d94 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000ee4:	f005 fab8 	bl	8006458 <HAL_RCC_EnableCSS>
}
 8000ee8:	bf00      	nop
 8000eea:	3750      	adds	r7, #80	; 0x50
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2220      	movs	r2, #32
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00e fce9 	bl	800f8e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f38:	2204      	movs	r2, #4
 8000f3a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f78:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f7a:	f002 f88b 	bl	8003094 <HAL_ADC_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f84:	f000 ff06 	bl	8001d94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000f94:	f002 ff38 	bl	8003e08 <HAL_ADCEx_MultiModeConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f9e:	f000 fef9 	bl	8001d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_ADC1_Init+0xec>)
 8000fa4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fae:	237f      	movs	r3, #127	; 0x7f
 8000fb0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_ADC1_Init+0xe8>)
 8000fc0:	f002 fa8a 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fca:	f000 fee3 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3730      	adds	r7, #48	; 0x30
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200006b4 	.word	0x200006b4
 8000fdc:	08600004 	.word	0x08600004

08000fe0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2220      	movs	r2, #32
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00e fc77 	bl	800f8e0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8000ff4:	4a2b      	ldr	r2, [pc, #172]	; (80010a4 <MX_ADC2_Init+0xc4>)
 8000ff6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8000ffa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ffe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_ADC2_Init+0xc0>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_ADC2_Init+0xc0>)
 800101a:	2204      	movs	r2, #4
 800101c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8001020:	2200      	movs	r2, #0
 8001022:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_ADC2_Init+0xc0>)
 800102c:	2201      	movs	r2, #1
 800102e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_ADC2_Init+0xc0>)
 800103a:	2200      	movs	r2, #0
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8001040:	2200      	movs	r2, #0
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_ADC2_Init+0xc0>)
 800104e:	2200      	movs	r2, #0
 8001050:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_ADC2_Init+0xc0>)
 800105c:	f002 f81a 	bl	8003094 <HAL_ADC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001066:	f000 fe95 	bl	8001d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_ADC2_Init+0xc8>)
 800106c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2306      	movs	r3, #6
 8001070:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001076:	237f      	movs	r3, #127	; 0x7f
 8001078:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107a:	2304      	movs	r3, #4
 800107c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_ADC2_Init+0xc0>)
 8001088:	f002 fa26 	bl	80034d8 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001092:	f000 fe7f 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000074c 	.word	0x2000074c
 80010a4:	50000100 	.word	0x50000100
 80010a8:	10c00010 	.word	0x10c00010

080010ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2220      	movs	r2, #32
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00e fc0b 	bl	800f8e0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <MX_ADC3_Init+0xe4>)
 80010cc:	4a31      	ldr	r2, [pc, #196]	; (8001194 <MX_ADC3_Init+0xe8>)
 80010ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <MX_ADC3_Init+0xe4>)
 80010d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010d6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <MX_ADC3_Init+0xe4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010de:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <MX_ADC3_Init+0xe4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <MX_ADC3_Init+0xe4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <MX_ADC3_Init+0xe4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <MX_ADC3_Init+0xe4>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <MX_ADC3_Init+0xe4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <MX_ADC3_Init+0xe4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <MX_ADC3_Init+0xe4>)
 8001104:	2201      	movs	r2, #1
 8001106:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_ADC3_Init+0xe4>)
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_ADC3_Init+0xe4>)
 8001112:	2200      	movs	r2, #0
 8001114:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_ADC3_Init+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_ADC3_Init+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_ADC3_Init+0xe4>)
 8001126:	2200      	movs	r2, #0
 8001128:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_ADC3_Init+0xe4>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001132:	4817      	ldr	r0, [pc, #92]	; (8001190 <MX_ADC3_Init+0xe4>)
 8001134:	f001 ffae 	bl	8003094 <HAL_ADC_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800113e:	f000 fe29 	bl	8001d94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	4810      	ldr	r0, [pc, #64]	; (8001190 <MX_ADC3_Init+0xe4>)
 800114e:	f002 fe5b 	bl	8003e08 <HAL_ADCEx_MultiModeConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001158:	f000 fe1c 	bl	8001d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_ADC3_Init+0xec>)
 800115e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001160:	2306      	movs	r3, #6
 8001162:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001168:	237f      	movs	r3, #127	; 0x7f
 800116a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800116c:	2304      	movs	r3, #4
 800116e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_ADC3_Init+0xe4>)
 800117a:	f002 f9ad 	bl	80034d8 <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001184:	f000 fe06 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3730      	adds	r7, #48	; 0x30
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200007e4 	.word	0x200007e4
 8001194:	50000400 	.word	0x50000400
 8001198:	21800100 	.word	0x21800100

0800119c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2220      	movs	r2, #32
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00e fb99 	bl	800f8e0 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <MX_ADC4_Init+0xc0>)
 80011b0:	4a2b      	ldr	r2, [pc, #172]	; (8001260 <MX_ADC4_Init+0xc4>)
 80011b2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <MX_ADC4_Init+0xc0>)
 80011b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011ba:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <MX_ADC4_Init+0xc0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_ADC4_Init+0xc0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <MX_ADC4_Init+0xc0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_ADC4_Init+0xc0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_ADC4_Init+0xc0>)
 80011d6:	2204      	movs	r2, #4
 80011d8:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_ADC4_Init+0xc0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_ADC4_Init+0xc0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_ADC4_Init+0xc0>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_ADC4_Init+0xc0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_ADC4_Init+0xc0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_ADC4_Init+0xc0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_ADC4_Init+0xc0>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_ADC4_Init+0xc0>)
 800120a:	2200      	movs	r2, #0
 800120c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_ADC4_Init+0xc0>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_ADC4_Init+0xc0>)
 8001218:	f001 ff3c 	bl	8003094 <HAL_ADC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8001222:	f000 fdb7 	bl	8001d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_ADC4_Init+0xc8>)
 8001228:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800122a:	2306      	movs	r3, #6
 800122c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001232:	237f      	movs	r3, #127	; 0x7f
 8001234:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001236:	2304      	movs	r3, #4
 8001238:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800123e:	463b      	mov	r3, r7
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_ADC4_Init+0xc0>)
 8001244:	f002 f948 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 800124e:	f000 fda1 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000087c 	.word	0x2000087c
 8001260:	50000500 	.word	0x50000500
 8001264:	25b00200 	.word	0x25b00200

08001268 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2220      	movs	r2, #32
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f00e fb33 	bl	800f8e0 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800127a:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <MX_ADC5_Init+0xc0>)
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <MX_ADC5_Init+0xc4>)
 800127e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <MX_ADC5_Init+0xc0>)
 8001282:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001286:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <MX_ADC5_Init+0xc0>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <MX_ADC5_Init+0xc0>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <MX_ADC5_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <MX_ADC5_Init+0xc0>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012a2:	2204      	movs	r2, #4
 80012a4:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <MX_ADC5_Init+0xc0>)
 80012e4:	f001 fed6 	bl	8003094 <HAL_ADC_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80012ee:	f000 fd51 	bl	8001d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_ADC5_Init+0xc8>)
 80012f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f6:	2306      	movs	r3, #6
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012fe:	237f      	movs	r3, #127	; 0x7f
 8001300:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001302:	2304      	movs	r3, #4
 8001304:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_ADC5_Init+0xc0>)
 8001310:	f002 f8e2 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 800131a:	f000 fd3b 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000914 	.word	0x20000914
 800132c:	50000600 	.word	0x50000600
 8001330:	08600004 	.word	0x08600004

08001334 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2230      	movs	r2, #48	; 0x30
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f00e facd 	bl	800f8e0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_DAC1_Init+0x80>)
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <MX_DAC1_Init+0x84>)
 800134a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800134c:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_DAC1_Init+0x80>)
 800134e:	f002 ff53 	bl	80041f8 <HAL_DAC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001358:	f000 fd1c 	bl	8001d94 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800135c:	2302      	movs	r3, #2
 800135e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800136c:	231e      	movs	r3, #30
 800136e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <MX_DAC1_Init+0x80>)
 8001388:	f003 f998 	bl	80046bc <HAL_DAC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001392:	f000 fcff 	bl	8001d94 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	2210      	movs	r2, #16
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_DAC1_Init+0x80>)
 800139e:	f003 f98d 	bl	80046bc <HAL_DAC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80013a8:	f000 fcf4 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3730      	adds	r7, #48	; 0x30
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200009ac 	.word	0x200009ac
 80013b8:	50000800 	.word	0x50000800

080013bc <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2230      	movs	r2, #48	; 0x30
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00e fa89 	bl	800f8e0 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_DAC2_Init+0x6c>)
 80013d0:	4a16      	ldr	r2, [pc, #88]	; (800142c <MX_DAC2_Init+0x70>)
 80013d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80013d4:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_DAC2_Init+0x6c>)
 80013d6:	f002 ff0f 	bl	80041f8 <HAL_DAC_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80013e0:	f000 fcd8 	bl	8001d94 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80013e4:	2302      	movs	r3, #2
 80013e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001400:	2301      	movs	r3, #1
 8001402:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_DAC2_Init+0x6c>)
 8001410:	f003 f954 	bl	80046bc <HAL_DAC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800141a:	f000 fcbb 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3730      	adds	r7, #48	; 0x30
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200009e8 	.word	0x200009e8
 800142c:	50000c00 	.word	0x50000c00

08001430 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001436:	463b      	mov	r3, r7
 8001438:	2230      	movs	r2, #48	; 0x30
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f00e fa4f 	bl	800f8e0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_DAC3_Init+0x80>)
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <MX_DAC3_Init+0x84>)
 8001446:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001448:	4819      	ldr	r0, [pc, #100]	; (80014b0 <MX_DAC3_Init+0x80>)
 800144a:	f002 fed5 	bl	80041f8 <HAL_DAC_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001454:	f000 fc9e 	bl	8001d94 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001458:	2302      	movs	r3, #2
 800145a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001470:	2302      	movs	r3, #2
 8001472:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001474:	2302      	movs	r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	4619      	mov	r1, r3
 8001482:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_DAC3_Init+0x80>)
 8001484:	f003 f91a 	bl	80046bc <HAL_DAC_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 800148e:	f000 fc81 	bl	8001d94 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	2210      	movs	r2, #16
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_DAC3_Init+0x80>)
 800149a:	f003 f90f 	bl	80046bc <HAL_DAC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 80014a4:	f000 fc76 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000a24 	.word	0x20000a24
 80014b4:	50001000 	.word	0x50001000

080014b8 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2230      	movs	r2, #48	; 0x30
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00e fa0b 	bl	800f8e0 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_DAC4_Init+0x80>)
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <MX_DAC4_Init+0x84>)
 80014ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 80014d0:	4819      	ldr	r0, [pc, #100]	; (8001538 <MX_DAC4_Init+0x80>)
 80014d2:	f002 fe91 	bl	80041f8 <HAL_DAC_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 80014dc:	f000 fc5a 	bl	8001d94 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80014e0:	2302      	movs	r3, #2
 80014e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80014f8:	2302      	movs	r3, #2
 80014fa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <MX_DAC4_Init+0x80>)
 800150c:	f003 f8d6 	bl	80046bc <HAL_DAC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8001516:	f000 fc3d 	bl	8001d94 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800151a:	463b      	mov	r3, r7
 800151c:	2210      	movs	r2, #16
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_DAC4_Init+0x80>)
 8001522:	f003 f8cb 	bl	80046bc <HAL_DAC_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_DAC4_Init+0x78>
  {
    Error_Handler();
 800152c:	f000 fc32 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3730      	adds	r7, #48	; 0x30
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000a60 	.word	0x20000a60
 800153c:	50001400 	.word	0x50001400

08001540 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_OPAMP1_Init+0x44>)
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <MX_OPAMP1_Init+0x48>)
 8001548:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_OPAMP1_Init+0x44>)
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_OPAMP1_Init+0x44>)
 8001552:	2260      	movs	r2, #96	; 0x60
 8001554:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_OPAMP1_Init+0x44>)
 8001558:	220c      	movs	r2, #12
 800155a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_OPAMP1_Init+0x44>)
 800155e:	2200      	movs	r2, #0
 8001560:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_OPAMP1_Init+0x44>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_OPAMP1_Init+0x44>)
 800156a:	2200      	movs	r2, #0
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_OPAMP1_Init+0x44>)
 8001570:	f003 ff74 	bl	800545c <HAL_OPAMP_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 800157a:	f000 fc0b 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000afc 	.word	0x20000afc
 8001588:	40010300 	.word	0x40010300

0800158c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_OPAMP3_Init+0x44>)
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <MX_OPAMP3_Init+0x48>)
 8001594:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_OPAMP3_Init+0x44>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_OPAMP3_Init+0x44>)
 800159e:	2260      	movs	r2, #96	; 0x60
 80015a0:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_OPAMP3_Init+0x44>)
 80015a4:	220c      	movs	r2, #12
 80015a6:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_OPAMP3_Init+0x44>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_OPAMP3_Init+0x44>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_OPAMP3_Init+0x44>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_OPAMP3_Init+0x44>)
 80015bc:	f003 ff4e 	bl	800545c <HAL_OPAMP_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 80015c6:	f000 fbe5 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000b40 	.word	0x20000b40
 80015d4:	40010308 	.word	0x40010308

080015d8 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_OPAMP4_Init+0x44>)
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <MX_OPAMP4_Init+0x48>)
 80015e0:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_OPAMP4_Init+0x44>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_OPAMP4_Init+0x44>)
 80015ea:	2260      	movs	r2, #96	; 0x60
 80015ec:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_OPAMP4_Init+0x44>)
 80015f0:	220c      	movs	r2, #12
 80015f2:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_OPAMP4_Init+0x44>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_OPAMP4_Init+0x44>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_OPAMP4_Init+0x44>)
 8001602:	2200      	movs	r2, #0
 8001604:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_OPAMP4_Init+0x44>)
 8001608:	f003 ff28 	bl	800545c <HAL_OPAMP_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8001612:	f000 fbbf 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000b84 	.word	0x20000b84
 8001620:	4001030c 	.word	0x4001030c

08001624 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_OPAMP5_Init+0x44>)
 800162a:	4a10      	ldr	r2, [pc, #64]	; (800166c <MX_OPAMP5_Init+0x48>)
 800162c:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_OPAMP5_Init+0x44>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_OPAMP5_Init+0x44>)
 8001636:	2260      	movs	r2, #96	; 0x60
 8001638:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_OPAMP5_Init+0x44>)
 800163c:	220c      	movs	r2, #12
 800163e:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_OPAMP5_Init+0x44>)
 8001642:	2200      	movs	r2, #0
 8001644:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_OPAMP5_Init+0x44>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_OPAMP5_Init+0x44>)
 800164e:	2200      	movs	r2, #0
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_OPAMP5_Init+0x44>)
 8001654:	f003 ff02 	bl	800545c <HAL_OPAMP_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 800165e:	f000 fb99 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000bc8 	.word	0x20000bc8
 800166c:	40010310 	.word	0x40010310

08001670 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_OPAMP6_Init+0x44>)
 8001676:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <MX_OPAMP6_Init+0x48>)
 8001678:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_OPAMP6_Init+0x44>)
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_OPAMP6_Init+0x44>)
 8001682:	2260      	movs	r2, #96	; 0x60
 8001684:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <MX_OPAMP6_Init+0x44>)
 8001688:	220c      	movs	r2, #12
 800168a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_OPAMP6_Init+0x44>)
 800168e:	2200      	movs	r2, #0
 8001690:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <MX_OPAMP6_Init+0x44>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_OPAMP6_Init+0x44>)
 800169a:	2200      	movs	r2, #0
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_OPAMP6_Init+0x44>)
 80016a0:	f003 fedc 	bl	800545c <HAL_OPAMP_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 80016aa:	f000 fb73 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000c0c 	.word	0x20000c0c
 80016b8:	40010314 	.word	0x40010314

080016bc <MX_QUADSPI1_Init>:
  * @brief QUADSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  /* QUADSPI1 parameter configuration*/
  hqspi1.Instance = QUADSPI;
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_QUADSPI1_Init+0x48>)
 80016c2:	4a11      	ldr	r2, [pc, #68]	; (8001708 <MX_QUADSPI1_Init+0x4c>)
 80016c4:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 1;
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_QUADSPI1_Init+0x48>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <MX_QUADSPI1_Init+0x48>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_QUADSPI1_Init+0x48>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 25;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <MX_QUADSPI1_Init+0x48>)
 80016da:	2219      	movs	r2, #25
 80016dc:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_QUADSPI1_Init+0x48>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_3;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <MX_QUADSPI1_Init+0x48>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	619a      	str	r2, [r3, #24]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_QUADSPI1_Init+0x48>)
 80016ec:	2240      	movs	r2, #64	; 0x40
 80016ee:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <MX_QUADSPI1_Init+0x48>)
 80016f2:	f004 f837 	bl	8005764 <HAL_QSPI_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_QUADSPI1_Init+0x44>
  {
    Error_Handler();
 80016fc:	f000 fb4a 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000c50 	.word	0x20000c50
 8001708:	a0001000 	.word	0xa0001000

0800170c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_SPI2_Init+0x74>)
 8001712:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <MX_SPI2_Init+0x78>)
 8001714:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_SPI2_Init+0x74>)
 8001718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800171c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_SPI2_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <MX_SPI2_Init+0x74>)
 8001726:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800172a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_SPI2_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_SPI2_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_SPI2_Init+0x74>)
 800173a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800173e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_SPI2_Init+0x74>)
 8001742:	2208      	movs	r2, #8
 8001744:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_SPI2_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_SPI2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_SPI2_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_SPI2_Init+0x74>)
 800175a:	2207      	movs	r2, #7
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_SPI2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_SPI2_Init+0x74>)
 8001766:	2208      	movs	r2, #8
 8001768:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_SPI2_Init+0x74>)
 800176c:	f005 f932 	bl	80069d4 <HAL_SPI_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001776:	f000 fb0d 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000ccc 	.word	0x20000ccc
 8001784:	40003800 	.word	0x40003800

08001788 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <MX_SPI3_Init+0x74>)
 800178e:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <MX_SPI3_Init+0x78>)
 8001790:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_SPI3_Init+0x74>)
 8001794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001798:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <MX_SPI3_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_SPI3_Init+0x74>)
 80017a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_SPI3_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <MX_SPI3_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_SPI3_Init+0x74>)
 80017b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_SPI3_Init+0x74>)
 80017be:	2208      	movs	r2, #8
 80017c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_SPI3_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_SPI3_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_SPI3_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_SPI3_Init+0x74>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_SPI3_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_SPI3_Init+0x74>)
 80017e2:	2208      	movs	r2, #8
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_SPI3_Init+0x74>)
 80017e8:	f005 f8f4 	bl	80069d4 <HAL_SPI_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f000 facf 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000d58 	.word	0x20000d58
 8001800:	40003c00 	.word	0x40003c00

08001804 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <MX_SPI4_Init+0x74>)
 800180a:	4a1c      	ldr	r2, [pc, #112]	; (800187c <MX_SPI4_Init+0x78>)
 800180c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_SPI4_Init+0x74>)
 8001810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001814:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_SPI4_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_SPI4_Init+0x74>)
 800181e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001822:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_SPI4_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_SPI4_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_SPI4_Init+0x74>)
 8001832:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001836:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_SPI4_Init+0x74>)
 800183a:	2208      	movs	r2, #8
 800183c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_SPI4_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_SPI4_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_SPI4_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_SPI4_Init+0x74>)
 8001852:	2207      	movs	r2, #7
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_SPI4_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_SPI4_Init+0x74>)
 800185e:	2208      	movs	r2, #8
 8001860:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_SPI4_Init+0x74>)
 8001864:	f005 f8b6 	bl	80069d4 <HAL_SPI_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800186e:	f000 fa91 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000de4 	.word	0x20000de4
 800187c:	40013c00 	.word	0x40013c00

08001880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_TIM2_Init+0x98>)
 80018a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_TIM2_Init+0x98>)
 80018a8:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80018ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_TIM2_Init+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <MX_TIM2_Init+0x98>)
 80018b6:	220a      	movs	r2, #10
 80018b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_TIM2_Init+0x98>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <MX_TIM2_Init+0x98>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018c6:	4814      	ldr	r0, [pc, #80]	; (8001918 <MX_TIM2_Init+0x98>)
 80018c8:	f005 f9b6 	bl	8006c38 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018d2:	f000 fa5f 	bl	8001d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_TIM2_Init+0x98>)
 80018e4:	f005 fc6e 	bl	80071c4 <HAL_TIM_ConfigClockSource>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018ee:	f000 fa51 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <MX_TIM2_Init+0x98>)
 8001900:	f006 f8f6 	bl	8007af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800190a:	f000 fa43 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000e70 	.word	0x20000e70

0800191c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_TIM6_Init+0x64>)
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <MX_TIM6_Init+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <MX_TIM6_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_TIM6_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3627;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_TIM6_Init+0x64>)
 8001940:	f640 622b 	movw	r2, #3627	; 0xe2b
 8001944:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_TIM6_Init+0x64>)
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <MX_TIM6_Init+0x64>)
 800194e:	f005 f973 	bl	8006c38 <HAL_TIM_Base_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001958:	f000 fa1c 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800195c:	2320      	movs	r3, #32
 800195e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_TIM6_Init+0x64>)
 800196a:	f006 f8c1 	bl	8007af0 <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001974:	f000 fa0e 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000f3c 	.word	0x20000f3c
 8001984:	40001000 	.word	0x40001000

08001988 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <MX_UART5_Init+0x98>)
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <MX_UART5_Init+0x9c>)
 8001990:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <MX_UART5_Init+0x98>)
 8001994:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001998:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <MX_UART5_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_UART5_Init+0x98>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <MX_UART5_Init+0x98>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_UART5_Init+0x98>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_UART5_Init+0x98>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_UART5_Init+0x98>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_UART5_Init+0x98>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_UART5_Init+0x98>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_UART5_Init+0x98>)
 80019cc:	2208      	movs	r2, #8
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_UART5_Init+0x98>)
 80019d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019d6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80019d8:	4811      	ldr	r0, [pc, #68]	; (8001a20 <MX_UART5_Init+0x98>)
 80019da:	f006 f96f 	bl	8007cbc <HAL_UART_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_UART5_Init+0x60>
  {
    Error_Handler();
 80019e4:	f000 f9d6 	bl	8001d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e8:	2100      	movs	r1, #0
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_UART5_Init+0x98>)
 80019ec:	f007 f876 	bl	8008adc <HAL_UARTEx_SetTxFifoThreshold>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_UART5_Init+0x72>
  {
    Error_Handler();
 80019f6:	f000 f9cd 	bl	8001d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4808      	ldr	r0, [pc, #32]	; (8001a20 <MX_UART5_Init+0x98>)
 80019fe:	f007 f8ab 	bl	8008b58 <HAL_UARTEx_SetRxFifoThreshold>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_UART5_Init+0x84>
  {
    Error_Handler();
 8001a08:	f000 f9c4 	bl	8001d94 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart5) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_UART5_Init+0x98>)
 8001a0e:	f007 f82a 	bl	8008a66 <HAL_UARTEx_EnableFifoMode>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_UART5_Init+0x94>
  {
    Error_Handler();
 8001a18:	f000 f9bc 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20001008 	.word	0x20001008
 8001a24:	40005000 	.word	0x40005000

08001a28 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a2e:	4a23      	ldr	r2, [pc, #140]	; (8001abc <MX_USART3_Init+0x94>)
 8001a30:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a34:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <MX_USART3_Init+0x98>)
 8001a36:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a4c:	220c      	movs	r2, #12
 8001a4e:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001a6e:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a70:	f007 f8fe 	bl	8008c70 <HAL_USART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART3_Init+0x56>
  {
    Error_Handler();
 8001a7a:	f000 f98b 	bl	8001d94 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a82:	f007 fd7b 	bl	800957c <HAL_USARTEx_SetTxFifoThreshold>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_USART3_Init+0x68>
  {
    Error_Handler();
 8001a8c:	f000 f982 	bl	8001d94 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a90:	2100      	movs	r1, #0
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001a94:	f007 fdb0 	bl	80095f8 <HAL_USARTEx_SetRxFifoThreshold>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART3_Init+0x7a>
  {
    Error_Handler();
 8001a9e:	f000 f979 	bl	8001d94 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_USART3_Init+0x90>)
 8001aa4:	f007 fd31 	bl	800950a <HAL_USARTEx_DisableFifoMode>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART3_Init+0x8a>
  {
    Error_Handler();
 8001aae:	f000 f971 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200010d4 	.word	0x200010d4
 8001abc:	40004800 	.word	0x40004800
 8001ac0:	007a1200 	.word	0x007a1200

08001ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <MX_DMA_Init+0x50>)
 8001acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <MX_DMA_Init+0x50>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <MX_DMA_Init+0x50>)
 8001ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_DMA_Init+0x50>)
 8001ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <MX_DMA_Init+0x50>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6493      	str	r3, [r2, #72]	; 0x48
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_DMA_Init+0x50>)
 8001af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2105      	movs	r1, #5
 8001afe:	200b      	movs	r0, #11
 8001b00:	f002 fb52 	bl	80041a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b04:	200b      	movs	r0, #11
 8001b06:	f002 fb69 	bl	80041dc <HAL_NVIC_EnableIRQ>

}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000

08001b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a62      	ldr	r2, [pc, #392]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	4b5d      	ldr	r3, [pc, #372]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a5c      	ldr	r2, [pc, #368]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5e:	4b57      	ldr	r3, [pc, #348]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a56      	ldr	r2, [pc, #344]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b54      	ldr	r3, [pc, #336]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a50      	ldr	r2, [pc, #320]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b82:	4b4e      	ldr	r3, [pc, #312]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a4a      	ldr	r2, [pc, #296]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba6:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	4a44      	ldr	r2, [pc, #272]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001bac:	f043 0320 	orr.w	r3, r3, #32
 8001bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb2:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <MX_GPIO_Init+0x1a4>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_NRST_GPIO_Port, TFT_NRST_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2140      	movs	r1, #64	; 0x40
 8001bc2:	483f      	ldr	r0, [pc, #252]	; (8001cc0 <MX_GPIO_Init+0x1a8>)
 8001bc4:	f003 fc32 	bl	800542c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f44f 7101 	mov.w	r1, #516	; 0x204
 8001bce:	483d      	ldr	r0, [pc, #244]	; (8001cc4 <MX_GPIO_Init+0x1ac>)
 8001bd0:	f003 fc2c 	bl	800542c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f240 210b 	movw	r1, #523	; 0x20b
 8001bda:	483b      	ldr	r0, [pc, #236]	; (8001cc8 <MX_GPIO_Init+0x1b0>)
 8001bdc:	f003 fc26 	bl	800542c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_SPI_DC_GPIO_Port, TFT_SPI_DC_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2101      	movs	r1, #1
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f003 fc20 	bl	800542c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_NRST_Pin */
  GPIO_InitStruct.Pin = TFT_NRST_Pin;
 8001bec:	2340      	movs	r3, #64	; 0x40
 8001bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_NRST_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	482f      	ldr	r0, [pc, #188]	; (8001cc0 <MX_GPIO_Init+0x1a8>)
 8001c04:	f003 fa78 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRIDGE_CLK_Pin */
  GPIO_InitStruct.Pin = BRIDGE_CLK_Pin;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BRIDGE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	482a      	ldr	r0, [pc, #168]	; (8001ccc <MX_GPIO_Init+0x1b4>)
 8001c24:	f003 fa68 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUD_ORANGE_R_OUTPUT_EN_Pin AUD_ORANGE_L_OUTPUT_EN_Pin */
  GPIO_InitStruct.Pin = AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin;
 8001c28:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4820      	ldr	r0, [pc, #128]	; (8001cc4 <MX_GPIO_Init+0x1ac>)
 8001c42:	f003 fa59 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MICRO_SD_CS_Pin AUD_GREEN_L_OUTPUT_EN_Pin AUD_GREEN_R_OUTPUT_EN_Pin ROT_B_Pin */
  GPIO_InitStruct.Pin = MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin;
 8001c46:	f240 230b 	movw	r3, #523	; 0x20b
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481a      	ldr	r0, [pc, #104]	; (8001cc8 <MX_GPIO_Init+0x1b0>)
 8001c60:	f003 fa4a 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_A_Pin ROT_C_Pin */
  GPIO_InitStruct.Pin = ROT_A_Pin|ROT_C_Pin;
 8001c64:	2314      	movs	r3, #20
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <MX_GPIO_Init+0x1b0>)
 8001c78:	f003 fa3e 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_S2_Pin ROT_S1_Pin */
  GPIO_InitStruct.Pin = ROT_S2_Pin|ROT_S1_Pin;
 8001c7c:	2360      	movs	r3, #96	; 0x60
 8001c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <MX_GPIO_Init+0x1b0>)
 8001c90:	f003 fa32 	bl	80050f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_SPI_DC_Pin */
  GPIO_InitStruct.Pin = TFT_SPI_DC_Pin;
 8001c94:	2301      	movs	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_SPI_DC_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cae:	f003 fa23 	bl	80050f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb2:	bf00      	nop
 8001cb4:	3730      	adds	r7, #48	; 0x30
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	48001400 	.word	0x48001400
 8001cc8:	48000800 	.word	0x48000800
 8001ccc:	48000c00 	.word	0x48000c00

08001cd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f00a facb 	bl	800c274 <osDelay>
 8001cde:	e7fb      	b.n	8001cd8 <StartDefaultTask+0x8>

08001ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  if(htim->Instance == TIM2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf0:	d13f      	bne.n	8001d72 <HAL_TIM_PeriodElapsedCallback+0x92>
	  {
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_RESET)
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	4824      	ldr	r0, [pc, #144]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001cf6:	f003 fb81 	bl	80053fc <HAL_GPIO_ReadPin>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11c      	bne.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x5a>
		  {
		   if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET)
 8001d00:	2110      	movs	r1, #16
 8001d02:	4821      	ldr	r0, [pc, #132]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d04:	f003 fb7a 	bl	80053fc <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d131      	bne.n	8001d72 <HAL_TIM_PeriodElapsedCallback+0x92>
		   {
		    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET){};
 8001d0e:	bf00      	nop
 8001d10:	2110      	movs	r1, #16
 8001d12:	481d      	ldr	r0, [pc, #116]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d14:	f003 fb72 	bl	80053fc <HAL_GPIO_ReadPin>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f8      	beq.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x30>
		    counter--;
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d26:	6013      	str	r3, [r2, #0]
		    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_RESET){};
 8001d28:	bf00      	nop
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	4816      	ldr	r0, [pc, #88]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d2e:	f003 fb65 	bl	80053fc <HAL_GPIO_ReadPin>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f8      	beq.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001d38:	e01b      	b.n	8001d72 <HAL_TIM_PeriodElapsedCallback+0x92>
		   }
		  }

		   else {
			   if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET)
 8001d3a:	2110      	movs	r1, #16
 8001d3c:	4812      	ldr	r0, [pc, #72]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d3e:	f003 fb5d 	bl	80053fc <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d114      	bne.n	8001d72 <HAL_TIM_PeriodElapsedCallback+0x92>
			   	  {
		    counter++;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d50:	6013      	str	r3, [r2, #0]
		    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET){};
 8001d52:	bf00      	nop
 8001d54:	2110      	movs	r1, #16
 8001d56:	480c      	ldr	r0, [pc, #48]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d58:	f003 fb50 	bl	80053fc <HAL_GPIO_ReadPin>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f8      	beq.n	8001d54 <HAL_TIM_PeriodElapsedCallback+0x74>
		    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_RESET){};
 8001d62:	bf00      	nop
 8001d64:	2104      	movs	r1, #4
 8001d66:	4808      	ldr	r0, [pc, #32]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d68:	f003 fb48 	bl	80053fc <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f8      	beq.n	8001d64 <HAL_TIM_PeriodElapsedCallback+0x84>
			   	  }
		   }
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_TIM_PeriodElapsedCallback+0xa0>
    HAL_IncTick();
 8001d7c:	f000 ff74 	bl	8002c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	20001160 	.word	0x20001160
 8001d90:	40001400 	.word	0x40001400

08001d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <Error_Handler+0x8>
	...

08001da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_MspInit+0x4c>)
 8001da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001daa:	4a10      	ldr	r2, [pc, #64]	; (8001dec <HAL_MspInit+0x4c>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6613      	str	r3, [r2, #96]	; 0x60
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_MspInit+0x4c>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_MspInit+0x4c>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_MspInit+0x4c>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_MspInit+0x4c>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	210f      	movs	r1, #15
 8001dda:	f06f 0001 	mvn.w	r0, #1
 8001dde:	f002 f9e3 	bl	80041a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000

08001df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0a8      	sub	sp, #160	; 0xa0
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e0c:	2254      	movs	r2, #84	; 0x54
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00d fd65 	bl	800f8e0 <memset>
  if(hadc->Instance==ADC1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e1e:	d141      	bne.n	8001ea4 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fb81 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e3c:	f7ff ffaa 	bl	8001d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e40:	4b84      	ldr	r3, [pc, #528]	; (8002054 <HAL_ADC_MspInit+0x264>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a83      	ldr	r2, [pc, #524]	; (8002054 <HAL_ADC_MspInit+0x264>)
 8001e48:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e4a:	4b82      	ldr	r3, [pc, #520]	; (8002054 <HAL_ADC_MspInit+0x264>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10b      	bne.n	8001e6a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e52:	4b81      	ldr	r3, [pc, #516]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a80      	ldr	r2, [pc, #512]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001e58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b7e      	ldr	r3, [pc, #504]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b7b      	ldr	r3, [pc, #492]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a7a      	ldr	r2, [pc, #488]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b78      	ldr	r3, [pc, #480]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AUD_GRN_MIC_POSTAMP_Pin;
 8001e82:	2302      	movs	r3, #2
 8001e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_GRN_MIC_POSTAMP_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9e:	f003 f92b 	bl	80050f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001ea2:	e165      	b.n	8002170 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a6c      	ldr	r2, [pc, #432]	; (800205c <HAL_ADC_MspInit+0x26c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d141      	bne.n	8001f32 <HAL_ADC_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001eb4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f004 fb3a 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_ADC_MspInit+0xde>
      Error_Handler();
 8001eca:	f7ff ff63 	bl	8001d94 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ece:	4b61      	ldr	r3, [pc, #388]	; (8002054 <HAL_ADC_MspInit+0x264>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	4a5f      	ldr	r2, [pc, #380]	; (8002054 <HAL_ADC_MspInit+0x264>)
 8001ed6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ed8:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <HAL_ADC_MspInit+0x264>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10b      	bne.n	8001ef8 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ee0:	4b5d      	ldr	r3, [pc, #372]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee4:	4a5c      	ldr	r2, [pc, #368]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001ee6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eec:	4b5a      	ldr	r3, [pc, #360]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	4b57      	ldr	r3, [pc, #348]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	4a56      	ldr	r2, [pc, #344]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f04:	4b54      	ldr	r3, [pc, #336]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_S_Pin;
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f16:	2303      	movs	r3, #3
 8001f18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_S_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2c:	f003 f8e4 	bl	80050f8 <HAL_GPIO_Init>
}
 8001f30:	e11e      	b.n	8002170 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC3)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a4a      	ldr	r2, [pc, #296]	; (8002060 <HAL_ADC_MspInit+0x270>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d142      	bne.n	8001fc2 <HAL_ADC_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f40:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001f42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 faf2 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_ADC_MspInit+0x16e>
      Error_Handler();
 8001f5a:	f7ff ff1b 	bl	8001d94 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001f5e:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_ADC_MspInit+0x274>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a3f      	ldr	r2, [pc, #252]	; (8002064 <HAL_ADC_MspInit+0x274>)
 8001f66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001f68:	4b3e      	ldr	r3, [pc, #248]	; (8002064 <HAL_ADC_MspInit+0x274>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10b      	bne.n	8001f88 <HAL_ADC_MspInit+0x198>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f74:	4a38      	ldr	r2, [pc, #224]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f88:	4b33      	ldr	r3, [pc, #204]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	4a32      	ldr	r2, [pc, #200]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001f8e:	f043 0308 	orr.w	r3, r3, #8
 8001f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f94:	4b30      	ldr	r3, [pc, #192]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	623b      	str	r3, [r7, #32]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_R1_Pin;
 8001fa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_R1_GPIO_Port, &GPIO_InitStruct);
 8001fb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	482b      	ldr	r0, [pc, #172]	; (8002068 <HAL_ADC_MspInit+0x278>)
 8001fbc:	f003 f89c 	bl	80050f8 <HAL_GPIO_Init>
}
 8001fc0:	e0d6      	b.n	8002170 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC4)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_ADC_MspInit+0x27c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d151      	bne.n	8002070 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001fd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 faaa 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 8001fea:	f7ff fed3 	bl	8001d94 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_ADC_MspInit+0x274>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <HAL_ADC_MspInit+0x274>)
 8001ff6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_ADC_MspInit+0x274>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d10b      	bne.n	8002018 <HAL_ADC_MspInit+0x228>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002000:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_ADC_MspInit+0x268>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_ADC_MspInit+0x268>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_ADC_MspInit+0x268>)
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_ADC_MspInit+0x268>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_T_Pin;
 8002030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002038:	2303      	movs	r3, #3
 800203a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_T_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002048:	4619      	mov	r1, r3
 800204a:	4807      	ldr	r0, [pc, #28]	; (8002068 <HAL_ADC_MspInit+0x278>)
 800204c:	f003 f854 	bl	80050f8 <HAL_GPIO_Init>
}
 8002050:	e08e      	b.n	8002170 <HAL_ADC_MspInit+0x380>
 8002052:	bf00      	nop
 8002054:	20001458 	.word	0x20001458
 8002058:	40021000 	.word	0x40021000
 800205c:	50000100 	.word	0x50000100
 8002060:	50000400 	.word	0x50000400
 8002064:	2000145c 	.word	0x2000145c
 8002068:	48000c00 	.word	0x48000c00
 800206c:	50000500 	.word	0x50000500
  else if(hadc->Instance==ADC5)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a40      	ldr	r2, [pc, #256]	; (8002178 <HAL_ADC_MspInit+0x388>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d17a      	bne.n	8002170 <HAL_ADC_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800207a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002080:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002088:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800208c:	4618      	mov	r0, r3
 800208e:	f004 fa53 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_ADC_MspInit+0x2ac>
      Error_Handler();
 8002098:	f7ff fe7c 	bl	8001d94 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800209c:	4b37      	ldr	r3, [pc, #220]	; (800217c <HAL_ADC_MspInit+0x38c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	4a36      	ldr	r2, [pc, #216]	; (800217c <HAL_ADC_MspInit+0x38c>)
 80020a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80020a6:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_ADC_MspInit+0x38c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d10b      	bne.n	80020c6 <HAL_ADC_MspInit+0x2d6>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	4a33      	ldr	r2, [pc, #204]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	4a2d      	ldr	r2, [pc, #180]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d2:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020de:	4b28      	ldr	r3, [pc, #160]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	4a27      	ldr	r2, [pc, #156]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a21      	ldr	r2, [pc, #132]	; (8002180 <HAL_ADC_MspInit+0x390>)
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <HAL_ADC_MspInit+0x390>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AUD_ORANGE_S_UNBUFFERED_IN_Pin;
 800210e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002116:	2303      	movs	r3, #3
 8002118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_ORANGE_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002126:	4619      	mov	r1, r3
 8002128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212c:	f002 ffe4 	bl	80050f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_T_UNBUFFERED_IN_Pin|AUD_BLACK_R1_UNBUFFERED_IN_Pin|VOLUME_ANALOG_IN_Pin;
 8002130:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8002134:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002138:	2303      	movs	r3, #3
 800213a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002144:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002148:	4619      	mov	r1, r3
 800214a:	480e      	ldr	r0, [pc, #56]	; (8002184 <HAL_ADC_MspInit+0x394>)
 800214c:	f002 ffd4 	bl	80050f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_S_UNBUFFERED_IN_Pin;
 8002150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002158:	2303      	movs	r3, #3
 800215a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_BLACK_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002168:	4619      	mov	r1, r3
 800216a:	4807      	ldr	r0, [pc, #28]	; (8002188 <HAL_ADC_MspInit+0x398>)
 800216c:	f002 ffc4 	bl	80050f8 <HAL_GPIO_Init>
}
 8002170:	bf00      	nop
 8002172:	37a0      	adds	r7, #160	; 0xa0
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	50000600 	.word	0x50000600
 800217c:	2000145c 	.word	0x2000145c
 8002180:	40021000 	.word	0x40021000
 8002184:	48000c00 	.word	0x48000c00
 8002188:	48001000 	.word	0x48001000

0800218c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a63      	ldr	r2, [pc, #396]	; (8002338 <HAL_DAC_MspInit+0x1ac>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d159      	bne.n	8002262 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	4a62      	ldr	r2, [pc, #392]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ba:	4b60      	ldr	r3, [pc, #384]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c2:	623b      	str	r3, [r7, #32]
 80021c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	4b5d      	ldr	r3, [pc, #372]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	4a5c      	ldr	r2, [pc, #368]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d2:	4b5a      	ldr	r3, [pc, #360]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AUD_GREEN_L_PREAMP_AUDIO_Pin|AUD_GREEN_R_PREAMP_AUDIO_Pin;
 80021de:	2330      	movs	r3, #48	; 0x30
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e2:	2303      	movs	r3, #3
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ee:	4619      	mov	r1, r3
 80021f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f4:	f002 ff80 	bl	80050f8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80021f8:	4b51      	ldr	r3, [pc, #324]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 80021fa:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_DAC_MspInit+0x1b8>)
 80021fc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80021fe:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 8002200:	2206      	movs	r2, #6
 8002202:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002204:	4b4e      	ldr	r3, [pc, #312]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 8002206:	2210      	movs	r2, #16
 8002208:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800220a:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002210:	4b4b      	ldr	r3, [pc, #300]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002216:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 8002218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800221e:	4b48      	ldr	r3, [pc, #288]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 8002220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002224:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002226:	4b46      	ldr	r3, [pc, #280]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 8002228:	2220      	movs	r2, #32
 800222a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800222c:	4b44      	ldr	r3, [pc, #272]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 800222e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002232:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002234:	4842      	ldr	r0, [pc, #264]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 8002236:	f002 fc93 	bl	8004b60 <HAL_DMA_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8002240:	f7ff fda8 	bl	8001d94 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a3e      	ldr	r2, [pc, #248]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	4a3d      	ldr	r2, [pc, #244]	; (8002340 <HAL_DAC_MspInit+0x1b4>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	2105      	movs	r1, #5
 8002254:	2036      	movs	r0, #54	; 0x36
 8002256:	f001 ffa7 	bl	80041a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800225a:	2036      	movs	r0, #54	; 0x36
 800225c:	f001 ffbe 	bl	80041dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8002260:	e065      	b.n	800232e <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a38      	ldr	r2, [pc, #224]	; (8002348 <HAL_DAC_MspInit+0x1bc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d12d      	bne.n	80022c8 <HAL_DAC_MspInit+0x13c>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002270:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 8002272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002284:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 8002286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002288:	4a2c      	ldr	r2, [pc, #176]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002290:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TFT_LED_LVL_Pin;
 800229c:	2340      	movs	r3, #64	; 0x40
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022a0:	2303      	movs	r3, #3
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TFT_LED_LVL_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b2:	f002 ff21 	bl	80050f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	210f      	movs	r1, #15
 80022ba:	2037      	movs	r0, #55	; 0x37
 80022bc:	f001 ff74 	bl	80041a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80022c0:	2037      	movs	r0, #55	; 0x37
 80022c2:	f001 ff8b 	bl	80041dc <HAL_NVIC_EnableIRQ>
}
 80022c6:	e032      	b.n	800232e <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_DAC_MspInit+0x1c0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d114      	bne.n	80022fc <HAL_DAC_MspInit+0x170>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2105      	movs	r1, #5
 80022ee:	2036      	movs	r0, #54	; 0x36
 80022f0:	f001 ff5a 	bl	80041a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022f4:	2036      	movs	r0, #54	; 0x36
 80022f6:	f001 ff71 	bl	80041dc <HAL_NVIC_EnableIRQ>
}
 80022fa:	e018      	b.n	800232e <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC4)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <HAL_DAC_MspInit+0x1c4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d113      	bne.n	800232e <HAL_DAC_MspInit+0x1a2>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a0c      	ldr	r2, [pc, #48]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 800230c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_DAC_MspInit+0x1b0>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	210f      	movs	r1, #15
 8002322:	2037      	movs	r0, #55	; 0x37
 8002324:	f001 ff40 	bl	80041a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002328:	2037      	movs	r0, #55	; 0x37
 800232a:	f001 ff57 	bl	80041dc <HAL_NVIC_EnableIRQ>
}
 800232e:	bf00      	nop
 8002330:	3738      	adds	r7, #56	; 0x38
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	50000800 	.word	0x50000800
 800233c:	40021000 	.word	0x40021000
 8002340:	20000a9c 	.word	0x20000a9c
 8002344:	40020008 	.word	0x40020008
 8002348:	50000c00 	.word	0x50000c00
 800234c:	50001000 	.word	0x50001000
 8002350:	50001400 	.word	0x50001400

08002354 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08c      	sub	sp, #48	; 0x30
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a4d      	ldr	r2, [pc, #308]	; (80024a8 <HAL_OPAMP_MspInit+0x154>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d119      	bne.n	80023aa <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	4b4d      	ldr	r3, [pc, #308]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	4a4c      	ldr	r2, [pc, #304]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002382:	4b4a      	ldr	r3, [pc, #296]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = AUD_ORANGE_L_PREAMP_AUDIO_Pin;
 800238e:	2304      	movs	r3, #4
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_L_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4619      	mov	r1, r3
 80023a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a4:	f002 fea8 	bl	80050f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 80023a8:	e07a      	b.n	80024a0 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_OPAMP_MspInit+0x15c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d118      	bne.n	80023e6 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b4:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 80023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b8:	4a3c      	ldr	r2, [pc, #240]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 80023ba:	f043 0302 	orr.w	r3, r3, #2
 80023be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c0:	4b3a      	ldr	r3, [pc, #232]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 80023c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AUD_ORANGE_PREAMP_AUDIO_Pin;
 80023cc:	2302      	movs	r3, #2
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023d0:	2303      	movs	r3, #3
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	4835      	ldr	r0, [pc, #212]	; (80024b4 <HAL_OPAMP_MspInit+0x160>)
 80023e0:	f002 fe8a 	bl	80050f8 <HAL_GPIO_Init>
}
 80023e4:	e05c      	b.n	80024a0 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP4)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a33      	ldr	r2, [pc, #204]	; (80024b8 <HAL_OPAMP_MspInit+0x164>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d119      	bne.n	8002424 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 80023f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f4:	4a2d      	ldr	r2, [pc, #180]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fc:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800240e:	2303      	movs	r3, #3
 8002410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002416:	f107 031c 	add.w	r3, r7, #28
 800241a:	4619      	mov	r1, r3
 800241c:	4825      	ldr	r0, [pc, #148]	; (80024b4 <HAL_OPAMP_MspInit+0x160>)
 800241e:	f002 fe6b 	bl	80050f8 <HAL_GPIO_Init>
}
 8002422:	e03d      	b.n	80024a0 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP5)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <HAL_OPAMP_MspInit+0x168>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d11a      	bne.n	8002464 <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244c:	2303      	movs	r3, #3
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	4619      	mov	r1, r3
 800245a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245e:	f002 fe4b 	bl	80050f8 <HAL_GPIO_Init>
}
 8002462:	e01d      	b.n	80024a0 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP6)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_OPAMP_MspInit+0x16c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d118      	bne.n	80024a0 <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <HAL_OPAMP_MspInit+0x158>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002486:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800248a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800248c:	2303      	movs	r3, #3
 800248e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	4806      	ldr	r0, [pc, #24]	; (80024b4 <HAL_OPAMP_MspInit+0x160>)
 800249c:	f002 fe2c 	bl	80050f8 <HAL_GPIO_Init>
}
 80024a0:	bf00      	nop
 80024a2:	3730      	adds	r7, #48	; 0x30
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40010300 	.word	0x40010300
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40010308 	.word	0x40010308
 80024b4:	48000400 	.word	0x48000400
 80024b8:	4001030c 	.word	0x4001030c
 80024bc:	40010310 	.word	0x40010310
 80024c0:	40010314 	.word	0x40010314

080024c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b0a0      	sub	sp, #128	; 0x80
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024dc:	f107 0318 	add.w	r3, r7, #24
 80024e0:	2254      	movs	r2, #84	; 0x54
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f00d f9fb 	bl	800f8e0 <memset>
  if(hqspi->Instance==QUADSPI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3c      	ldr	r2, [pc, #240]	; (80025e0 <HAL_QSPI_MspInit+0x11c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d170      	bne.n	80025d6 <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80024f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024fe:	f107 0318 	add.w	r3, r7, #24
 8002502:	4618      	mov	r0, r3
 8002504:	f004 f818 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 800250e:	f7ff fc41 	bl	8001d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002512:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 8002514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002516:	4a33      	ldr	r2, [pc, #204]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6513      	str	r3, [r2, #80]	; 0x50
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 8002520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800252a:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	4a2d      	ldr	r2, [pc, #180]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002542:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 8002548:	f043 0320 	orr.w	r3, r3, #32
 800254c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 8002560:	f043 0310 	orr.w	r3, r3, #16
 8002564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_QSPI_MspInit+0x120>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
    PE15     ------> QUADSPI1_BK1_IO3
    PE11     ------> QUADSPI1_BK1_NCS
    PE14     ------> QUADSPI1_BK1_IO2
    PE13     ------> QUADSPI1_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7
 8002572:	23f8      	movs	r3, #248	; 0xf8
 8002574:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002582:	230a      	movs	r3, #10
 8002584:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002586:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800258a:	4619      	mov	r1, r3
 800258c:	4816      	ldr	r0, [pc, #88]	; (80025e8 <HAL_QSPI_MspInit+0x124>)
 800258e:	f002 fdb3 	bl	80050f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002596:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80025a4:	230a      	movs	r3, #10
 80025a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025ac:	4619      	mov	r1, r3
 80025ae:	480f      	ldr	r0, [pc, #60]	; (80025ec <HAL_QSPI_MspInit+0x128>)
 80025b0:	f002 fda2 	bl	80050f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14
 80025b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025b8:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80025c6:	230a      	movs	r3, #10
 80025c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025ce:	4619      	mov	r1, r3
 80025d0:	4807      	ldr	r0, [pc, #28]	; (80025f0 <HAL_QSPI_MspInit+0x12c>)
 80025d2:	f002 fd91 	bl	80050f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80025d6:	bf00      	nop
 80025d8:	3780      	adds	r7, #128	; 0x80
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	a0001000 	.word	0xa0001000
 80025e4:	40021000 	.word	0x40021000
 80025e8:	48000c00 	.word	0x48000c00
 80025ec:	48001400 	.word	0x48001400
 80025f0:	48001000 	.word	0x48001000

080025f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b090      	sub	sp, #64	; 0x40
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a62      	ldr	r2, [pc, #392]	; (800279c <HAL_SPI_MspInit+0x1a8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d146      	bne.n	80026a4 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002616:	4b62      	ldr	r3, [pc, #392]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	4a61      	ldr	r2, [pc, #388]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6593      	str	r3, [r2, #88]	; 0x58
 8002622:	4b5f      	ldr	r3, [pc, #380]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800262e:	4b5c      	ldr	r3, [pc, #368]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	4a5b      	ldr	r2, [pc, #364]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263a:	4b59      	ldr	r3, [pc, #356]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	4b56      	ldr	r3, [pc, #344]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	4a55      	ldr	r2, [pc, #340]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002652:	4b53      	ldr	r3, [pc, #332]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	6a3b      	ldr	r3, [r7, #32]
    PD15     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800265e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8002670:	2306      	movs	r3, #6
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002678:	4619      	mov	r1, r3
 800267a:	484a      	ldr	r0, [pc, #296]	; (80027a4 <HAL_SPI_MspInit+0x1b0>)
 800267c:	f002 fd3c 	bl	80050f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8002680:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002692:	2305      	movs	r3, #5
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269a:	4619      	mov	r1, r3
 800269c:	4842      	ldr	r0, [pc, #264]	; (80027a8 <HAL_SPI_MspInit+0x1b4>)
 800269e:	f002 fd2b 	bl	80050f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80026a2:	e077      	b.n	8002794 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a40      	ldr	r2, [pc, #256]	; (80027ac <HAL_SPI_MspInit+0x1b8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d145      	bne.n	800273a <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026ae:	4b3c      	ldr	r3, [pc, #240]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	4a3b      	ldr	r2, [pc, #236]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 80026b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b8:	6593      	str	r3, [r2, #88]	; 0x58
 80026ba:	4b39      	ldr	r3, [pc, #228]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	4a35      	ldr	r2, [pc, #212]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d2:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026de:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	4a2f      	ldr	r2, [pc, #188]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ea:	4b2d      	ldr	r3, [pc, #180]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026f6:	2320      	movs	r3, #32
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2300      	movs	r3, #0
 8002704:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002706:	2306      	movs	r3, #6
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800270e:	4619      	mov	r1, r3
 8002710:	4825      	ldr	r0, [pc, #148]	; (80027a8 <HAL_SPI_MspInit+0x1b4>)
 8002712:	f002 fcf1 	bl	80050f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002716:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002728:	2306      	movs	r3, #6
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002730:	4619      	mov	r1, r3
 8002732:	481f      	ldr	r0, [pc, #124]	; (80027b0 <HAL_SPI_MspInit+0x1bc>)
 8002734:	f002 fce0 	bl	80050f8 <HAL_GPIO_Init>
}
 8002738:	e02c      	b.n	8002794 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI4)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_SPI_MspInit+0x1c0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d127      	bne.n	8002794 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 8002746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002748:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 800274a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800274e:	6613      	str	r3, [r2, #96]	; 0x60
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 8002752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 8002762:	f043 0310 	orr.w	r3, r3, #16
 8002766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_SPI_MspInit+0x1ac>)
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_2;
 8002774:	2374      	movs	r3, #116	; 0x74
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002784:	2305      	movs	r3, #5
 8002786:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800278c:	4619      	mov	r1, r3
 800278e:	480a      	ldr	r0, [pc, #40]	; (80027b8 <HAL_SPI_MspInit+0x1c4>)
 8002790:	f002 fcb2 	bl	80050f8 <HAL_GPIO_Init>
}
 8002794:	bf00      	nop
 8002796:	3740      	adds	r7, #64	; 0x40
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40003800 	.word	0x40003800
 80027a0:	40021000 	.word	0x40021000
 80027a4:	48000c00 	.word	0x48000c00
 80027a8:	48000400 	.word	0x48000400
 80027ac:	40003c00 	.word	0x40003c00
 80027b0:	48000800 	.word	0x48000800
 80027b4:	40013c00 	.word	0x40013c00
 80027b8:	48001000 	.word	0x48001000

080027bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <HAL_TIM_Base_MspInit+0x44>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d113      	bne.n	80027f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <HAL_TIM_Base_MspInit+0x48>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <HAL_TIM_Base_MspInit+0x48>)
 80027d4:	f043 0310 	orr.w	r3, r3, #16
 80027d8:	6593      	str	r3, [r2, #88]	; 0x58
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_TIM_Base_MspInit+0x48>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2105      	movs	r1, #5
 80027ea:	2036      	movs	r0, #54	; 0x36
 80027ec:	f001 fcdc 	bl	80041a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027f0:	2036      	movs	r0, #54	; 0x36
 80027f2:	f001 fcf3 	bl	80041dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40001000 	.word	0x40001000
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b0a0      	sub	sp, #128	; 0x80
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	2254      	movs	r2, #84	; 0x54
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f00d f859 	bl	800f8e0 <memset>
  if(huart->Instance==UART5)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2d      	ldr	r2, [pc, #180]	; (80028e8 <HAL_UART_MspInit+0xe0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d153      	bne.n	80028e0 <HAL_UART_MspInit+0xd8>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002838:	2310      	movs	r3, #16
 800283a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 800283c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002842:	f107 0318 	add.w	r3, r7, #24
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fe76 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002852:	f7ff fa9f 	bl	8001d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002856:	4b25      	ldr	r3, [pc, #148]	; (80028ec <HAL_UART_MspInit+0xe4>)
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	4a24      	ldr	r2, [pc, #144]	; (80028ec <HAL_UART_MspInit+0xe4>)
 800285c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002860:	6593      	str	r3, [r2, #88]	; 0x58
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_UART_MspInit+0xe4>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <HAL_UART_MspInit+0xe4>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <HAL_UART_MspInit+0xe4>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_UART_MspInit+0xe4>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_UART_MspInit+0xe4>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HAL_UART_MspInit+0xe4>)
 800288c:	f043 0308 	orr.w	r3, r3, #8
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <HAL_UART_MspInit+0xe4>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800289e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80028b0:	2305      	movs	r3, #5
 80028b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028b8:	4619      	mov	r1, r3
 80028ba:	480d      	ldr	r0, [pc, #52]	; (80028f0 <HAL_UART_MspInit+0xe8>)
 80028bc:	f002 fc1c 	bl	80050f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028c0:	2304      	movs	r3, #4
 80028c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80028d0:	2305      	movs	r3, #5
 80028d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028d8:	4619      	mov	r1, r3
 80028da:	4806      	ldr	r0, [pc, #24]	; (80028f4 <HAL_UART_MspInit+0xec>)
 80028dc:	f002 fc0c 	bl	80050f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80028e0:	bf00      	nop
 80028e2:	3780      	adds	r7, #128	; 0x80
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40005000 	.word	0x40005000
 80028ec:	40021000 	.word	0x40021000
 80028f0:	48000800 	.word	0x48000800
 80028f4:	48000c00 	.word	0x48000c00

080028f8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b0a0      	sub	sp, #128	; 0x80
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002910:	f107 0318 	add.w	r3, r7, #24
 8002914:	2254      	movs	r2, #84	; 0x54
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f00c ffe1 	bl	800f8e0 <memset>
  if(husart->Instance==USART3)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2d      	ldr	r2, [pc, #180]	; (80029d8 <HAL_USART_MspInit+0xe0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d153      	bne.n	80029d0 <HAL_USART_MspInit+0xd8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002928:	2304      	movs	r3, #4
 800292a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002930:	f107 0318 	add.w	r3, r7, #24
 8002934:	4618      	mov	r0, r3
 8002936:	f003 fdff 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8002940:	f7ff fa28 	bl	8001d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_USART_MspInit+0xe4>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	4a24      	ldr	r2, [pc, #144]	; (80029dc <HAL_USART_MspInit+0xe4>)
 800294a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294e:	6593      	str	r3, [r2, #88]	; 0x58
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_USART_MspInit+0xe4>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <HAL_USART_MspInit+0xe4>)
 800295e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002960:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <HAL_USART_MspInit+0xe4>)
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <HAL_USART_MspInit+0xe4>)
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_USART_MspInit+0xe4>)
 8002976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_USART_MspInit+0xe4>)
 800297a:	f043 0308 	orr.w	r3, r3, #8
 800297e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002980:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_USART_MspInit+0xe4>)
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB9     ------> USART3_TX
    PD10     ------> USART3_CK
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800298c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002990:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800299e:	2307      	movs	r3, #7
 80029a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029a6:	4619      	mov	r1, r3
 80029a8:	480d      	ldr	r0, [pc, #52]	; (80029e0 <HAL_USART_MspInit+0xe8>)
 80029aa:	f002 fba5 	bl	80050f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80029ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029c0:	2307      	movs	r3, #7
 80029c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029c8:	4619      	mov	r1, r3
 80029ca:	4806      	ldr	r0, [pc, #24]	; (80029e4 <HAL_USART_MspInit+0xec>)
 80029cc:	f002 fb94 	bl	80050f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029d0:	bf00      	nop
 80029d2:	3780      	adds	r7, #128	; 0x80
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40004800 	.word	0x40004800
 80029dc:	40021000 	.word	0x40021000
 80029e0:	48000400 	.word	0x48000400
 80029e4:	48000c00 	.word	0x48000c00

080029e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08c      	sub	sp, #48	; 0x30
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80029f8:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_InitTick+0xc4>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <HAL_InitTick+0xc4>)
 80029fe:	f043 0320 	orr.w	r3, r3, #32
 8002a02:	6593      	str	r3, [r2, #88]	; 0x58
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_InitTick+0xc4>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a10:	f107 020c 	add.w	r2, r7, #12
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fcea 	bl	80063f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a20:	f003 fcbc 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 8002a24:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <HAL_InitTick+0xc8>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	3b01      	subs	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_InitTick+0xcc>)
 8002a36:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <HAL_InitTick+0xd0>)
 8002a38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_InitTick+0xcc>)
 8002a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a40:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_InitTick+0xcc>)
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_InitTick+0xcc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_InitTick+0xcc>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8002a54:	4817      	ldr	r0, [pc, #92]	; (8002ab4 <HAL_InitTick+0xcc>)
 8002a56:	f004 f8ef 	bl	8006c38 <HAL_TIM_Base_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d11b      	bne.n	8002aa0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002a68:	4812      	ldr	r0, [pc, #72]	; (8002ab4 <HAL_InitTick+0xcc>)
 8002a6a:	f004 f9b9 	bl	8006de0 <HAL_TIM_Base_Start_IT>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002a74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d111      	bne.n	8002aa0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002a7c:	2037      	movs	r0, #55	; 0x37
 8002a7e:	f001 fbad 	bl	80041dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b0f      	cmp	r3, #15
 8002a86:	d808      	bhi.n	8002a9a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	2037      	movs	r0, #55	; 0x37
 8002a8e:	f001 fb8b 	bl	80041a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <HAL_InitTick+0xd4>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e002      	b.n	8002aa0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3730      	adds	r7, #48	; 0x30
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	431bde83 	.word	0x431bde83
 8002ab4:	20001460 	.word	0x20001460
 8002ab8:	40001400 	.word	0x40001400
 8002abc:	20000004 	.word	0x20000004

08002ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002ac4:	f003 fcd8 	bl	8006478 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <NMI_Handler+0x8>

08002aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ace:	e7fe      	b.n	8002ace <HardFault_Handler+0x4>

08002ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <MemManage_Handler+0x4>

08002ad6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ada:	e7fe      	b.n	8002ada <BusFault_Handler+0x4>

08002adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <UsageFault_Handler+0x4>

08002ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <DMA1_Channel1_IRQHandler+0x10>)
 8002af6:	f002 f9af 	bl	8004e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000a9c 	.word	0x20000a9c

08002b04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b08:	4805      	ldr	r0, [pc, #20]	; (8002b20 <TIM6_DAC_IRQHandler+0x1c>)
 8002b0a:	f004 f9e1 	bl	8006ed0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002b0e:	4805      	ldr	r0, [pc, #20]	; (8002b24 <TIM6_DAC_IRQHandler+0x20>)
 8002b10:	f001 fd53 	bl	80045ba <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac3);
 8002b14:	4804      	ldr	r0, [pc, #16]	; (8002b28 <TIM6_DAC_IRQHandler+0x24>)
 8002b16:	f001 fd50 	bl	80045ba <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000f3c 	.word	0x20000f3c
 8002b24:	200009ac 	.word	0x200009ac
 8002b28:	20000a24 	.word	0x20000a24

08002b2c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b30:	4805      	ldr	r0, [pc, #20]	; (8002b48 <TIM7_DAC_IRQHandler+0x1c>)
 8002b32:	f004 f9cd 	bl	8006ed0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 8002b36:	4805      	ldr	r0, [pc, #20]	; (8002b4c <TIM7_DAC_IRQHandler+0x20>)
 8002b38:	f001 fd3f 	bl	80045ba <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac4);
 8002b3c:	4804      	ldr	r0, [pc, #16]	; (8002b50 <TIM7_DAC_IRQHandler+0x24>)
 8002b3e:	f001 fd3c 	bl	80045ba <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20001460 	.word	0x20001460
 8002b4c:	200009e8 	.word	0x200009e8
 8002b50:	20000a60 	.word	0x20000a60

08002b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <_sbrk+0x5c>)
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <_sbrk+0x60>)
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <_sbrk+0x64>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <_sbrk+0x68>)
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d207      	bcs.n	8002b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b84:	f00c fe72 	bl	800f86c <__errno>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b92:	e009      	b.n	8002ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <_sbrk+0x64>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <_sbrk+0x64>)
 8002ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20004000 	.word	0x20004000
 8002bb4:	00000400 	.word	0x00000400
 8002bb8:	2000152c 	.word	0x2000152c
 8002bbc:	20002f90 	.word	0x20002f90

08002bc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <SystemInit+0x20>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <SystemInit+0x20>)
 8002bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002be4:	480d      	ldr	r0, [pc, #52]	; (8002c1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002be6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002be8:	f7ff ffea 	bl	8002bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bec:	480c      	ldr	r0, [pc, #48]	; (8002c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bee:	490d      	ldr	r1, [pc, #52]	; (8002c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <LoopForever+0xe>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bf4:	e002      	b.n	8002bfc <LoopCopyDataInit>

08002bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfa:	3304      	adds	r3, #4

08002bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c00:	d3f9      	bcc.n	8002bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c04:	4c0a      	ldr	r4, [pc, #40]	; (8002c30 <LoopForever+0x16>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c08:	e001      	b.n	8002c0e <LoopFillZerobss>

08002c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c0c:	3204      	adds	r2, #4

08002c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c10:	d3fb      	bcc.n	8002c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c12:	f00c fe31 	bl	800f878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c16:	f7fe f871 	bl	8000cfc <main>

08002c1a <LoopForever>:

LoopForever:
    b LoopForever
 8002c1a:	e7fe      	b.n	8002c1a <LoopForever>
  ldr   r0, =_estack
 8002c1c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c24:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002c28:	080105e8 	.word	0x080105e8
  ldr r2, =_sbss
 8002c2c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002c30:	20002f90 	.word	0x20002f90

08002c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c34:	e7fe      	b.n	8002c34 <ADC1_2_IRQHandler>

08002c36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c40:	2003      	movs	r0, #3
 8002c42:	f001 faa6 	bl	8004192 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c46:	200f      	movs	r0, #15
 8002c48:	f7ff fece 	bl	80029e8 <HAL_InitTick>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	71fb      	strb	r3, [r7, #7]
 8002c56:	e001      	b.n	8002c5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c58:	f7ff f8a2 	bl	8001da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c5c:	79fb      	ldrb	r3, [r7, #7]

}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_IncTick+0x1c>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_IncTick+0x20>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	4a03      	ldr	r2, [pc, #12]	; (8002c84 <HAL_IncTick+0x1c>)
 8002c78:	6013      	str	r3, [r2, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	20001530 	.word	0x20001530
 8002c88:	20000008 	.word	0x20000008

08002c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_GetTick+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20001530 	.word	0x20001530

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff ffee 	bl	8002c8c <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cbc:	d004      	beq.n	8002cc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_Delay+0x40>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cc8:	bf00      	nop
 8002cca:	f7ff ffdf 	bl	8002c8c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d8f7      	bhi.n	8002cca <HAL_Delay+0x26>
  {
  }
}
 8002cda:	bf00      	nop
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000008 	.word	0x20000008

08002ce8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	609a      	str	r2, [r3, #8]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3360      	adds	r3, #96	; 0x60
 8002d62:	461a      	mov	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <LL_ADC_SetOffset+0x44>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	03fff000 	.word	0x03fff000

08002d98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3360      	adds	r3, #96	; 0x60
 8002da6:	461a      	mov	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3360      	adds	r3, #96	; 0x60
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002dee:	bf00      	nop
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b087      	sub	sp, #28
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3360      	adds	r3, #96	; 0x60
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3360      	adds	r3, #96	; 0x60
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	615a      	str	r2, [r3, #20]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3330      	adds	r3, #48	; 0x30
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	4413      	add	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	211f      	movs	r1, #31
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0e9b      	lsrs	r3, r3, #26
 8002ec4:	f003 011f 	and.w	r1, r3, #31
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	0e5b      	lsrs	r3, r3, #25
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	4413      	add	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	0d1b      	lsrs	r3, r3, #20
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2107      	movs	r1, #7
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	401a      	ands	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	0d1b      	lsrs	r3, r3, #20
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f54:	43db      	mvns	r3, r3
 8002f56:	401a      	ands	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0318 	and.w	r3, r3, #24
 8002f5e:	4908      	ldr	r1, [pc, #32]	; (8002f80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f60:	40d9      	lsrs	r1, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	400b      	ands	r3, r1
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	0007ffff 	.word	0x0007ffff

08002f84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6093      	str	r3, [r2, #8]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fbc:	d101      	bne.n	8002fc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fe4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800300c:	d101      	bne.n	8003012 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <LL_ADC_IsEnabled+0x18>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <LL_ADC_IsEnabled+0x1a>
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b04      	cmp	r3, #4
 8003058:	d101      	bne.n	800305e <LL_ADC_REG_IsConversionOngoing+0x18>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b08      	cmp	r3, #8
 800307e:	d101      	bne.n	8003084 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b089      	sub	sp, #36	; 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e1e4      	b.n	8003478 <HAL_ADC_Init+0x3e4>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d133      	bne.n	8003124 <HAL_ADC_Init+0x90>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a68      	ldr	r2, [pc, #416]	; (8003260 <HAL_ADC_Init+0x1cc>)
 80030c0:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a67      	ldr	r2, [pc, #412]	; (8003264 <HAL_ADC_Init+0x1d0>)
 80030c6:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a67      	ldr	r2, [pc, #412]	; (8003268 <HAL_ADC_Init+0x1d4>)
 80030cc:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a66      	ldr	r2, [pc, #408]	; (800326c <HAL_ADC_Init+0x1d8>)
 80030d2:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a66      	ldr	r2, [pc, #408]	; (8003270 <HAL_ADC_Init+0x1dc>)
 80030d8:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a65      	ldr	r2, [pc, #404]	; (8003274 <HAL_ADC_Init+0x1e0>)
 80030de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a64      	ldr	r2, [pc, #400]	; (8003278 <HAL_ADC_Init+0x1e4>)
 80030e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a63      	ldr	r2, [pc, #396]	; (800327c <HAL_ADC_Init+0x1e8>)
 80030ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a62      	ldr	r2, [pc, #392]	; (8003280 <HAL_ADC_Init+0x1ec>)
 80030f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    if (hadc->MspInitCallback == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <HAL_ADC_Init+0x78>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a5f      	ldr	r2, [pc, #380]	; (8003284 <HAL_ADC_Init+0x1f0>)
 8003108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff3d 	bl	8002fa8 <LL_ADC_IsDeepPowerDownEnabled>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <HAL_ADC_Init+0xaa>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff23 	bl	8002f84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff58 	bl	8002ff8 <LL_ADC_IsInternalRegulatorEnabled>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d115      	bne.n	800317a <HAL_ADC_Init+0xe6>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff3c 	bl	8002fd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003158:	4b4b      	ldr	r3, [pc, #300]	; (8003288 <HAL_ADC_Init+0x1f4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	4a4b      	ldr	r2, [pc, #300]	; (800328c <HAL_ADC_Init+0x1f8>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	3301      	adds	r3, #1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800316c:	e002      	b.n	8003174 <HAL_ADC_Init+0xe0>
    {
      wait_loop_index--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3b01      	subs	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f9      	bne.n	800316e <HAL_ADC_Init+0xda>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ff3a 	bl	8002ff8 <LL_ADC_IsInternalRegulatorEnabled>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10d      	bne.n	80031a6 <HAL_ADC_Init+0x112>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	f043 0210 	orr.w	r2, r3, #16
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff4b 	bl	8003046 <LL_ADC_REG_IsConversionOngoing>
 80031b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 8153 	bne.w	8003466 <HAL_ADC_Init+0x3d2>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f040 814f 	bne.w	8003466 <HAL_ADC_Init+0x3d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031d0:	f043 0202 	orr.w	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff1f 	bl	8003020 <LL_ADC_IsEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d164      	bne.n	80032b2 <HAL_ADC_Init+0x21e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f0:	d004      	beq.n	80031fc <HAL_ADC_Init+0x168>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a26      	ldr	r2, [pc, #152]	; (8003290 <HAL_ADC_Init+0x1fc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d10f      	bne.n	800321c <HAL_ADC_Init+0x188>
 80031fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003200:	f7ff ff0e 	bl	8003020 <LL_ADC_IsEnabled>
 8003204:	4604      	mov	r4, r0
 8003206:	4822      	ldr	r0, [pc, #136]	; (8003290 <HAL_ADC_Init+0x1fc>)
 8003208:	f7ff ff0a 	bl	8003020 <LL_ADC_IsEnabled>
 800320c:	4603      	mov	r3, r0
 800320e:	4323      	orrs	r3, r4
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	e012      	b.n	8003242 <HAL_ADC_Init+0x1ae>
 800321c:	481d      	ldr	r0, [pc, #116]	; (8003294 <HAL_ADC_Init+0x200>)
 800321e:	f7ff feff 	bl	8003020 <LL_ADC_IsEnabled>
 8003222:	4604      	mov	r4, r0
 8003224:	481c      	ldr	r0, [pc, #112]	; (8003298 <HAL_ADC_Init+0x204>)
 8003226:	f7ff fefb 	bl	8003020 <LL_ADC_IsEnabled>
 800322a:	4603      	mov	r3, r0
 800322c:	431c      	orrs	r4, r3
 800322e:	481b      	ldr	r0, [pc, #108]	; (800329c <HAL_ADC_Init+0x208>)
 8003230:	f7ff fef6 	bl	8003020 <LL_ADC_IsEnabled>
 8003234:	4603      	mov	r3, r0
 8003236:	4323      	orrs	r3, r4
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d035      	beq.n	80032b2 <HAL_ADC_Init+0x21e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800324e:	d004      	beq.n	800325a <HAL_ADC_Init+0x1c6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_ADC_Init+0x1fc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d124      	bne.n	80032a4 <HAL_ADC_Init+0x210>
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <HAL_ADC_Init+0x20c>)
 800325c:	e023      	b.n	80032a6 <HAL_ADC_Init+0x212>
 800325e:	bf00      	nop
 8003260:	08003489 	.word	0x08003489
 8003264:	0800349d 	.word	0x0800349d
 8003268:	080034b1 	.word	0x080034b1
 800326c:	080034c5 	.word	0x080034c5
 8003270:	08003da5 	.word	0x08003da5
 8003274:	08003db9 	.word	0x08003db9
 8003278:	08003dcd 	.word	0x08003dcd
 800327c:	08003de1 	.word	0x08003de1
 8003280:	08003df5 	.word	0x08003df5
 8003284:	08001df1 	.word	0x08001df1
 8003288:	20000000 	.word	0x20000000
 800328c:	053e2d63 	.word	0x053e2d63
 8003290:	50000100 	.word	0x50000100
 8003294:	50000400 	.word	0x50000400
 8003298:	50000500 	.word	0x50000500
 800329c:	50000600 	.word	0x50000600
 80032a0:	50000300 	.word	0x50000300
 80032a4:	4a76      	ldr	r2, [pc, #472]	; (8003480 <HAL_ADC_Init+0x3ec>)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7ff fd1b 	bl	8002ce8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7f5b      	ldrb	r3, [r3, #29]
 80032b6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032bc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80032c2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80032c8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032d0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d106      	bne.n	80032ee <HAL_ADC_Init+0x25a>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	3b01      	subs	r3, #1
 80032e6:	045b      	lsls	r3, r3, #17
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_ADC_Init+0x276>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <HAL_ADC_Init+0x3f0>)
 8003312:	4013      	ands	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	69b9      	ldr	r1, [r7, #24]
 800331a:	430b      	orrs	r3, r1
 800331c:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fe97 	bl	800306c <LL_ADC_INJ_IsConversionOngoing>
 800333e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d16d      	bne.n	8003422 <HAL_ADC_Init+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d16a      	bne.n	8003422 <HAL_ADC_Init+0x38e>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003350:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003358:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003368:	f023 0302 	bic.w	r3, r3, #2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	69b9      	ldr	r1, [r7, #24]
 8003372:	430b      	orrs	r3, r1
 8003374:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <HAL_ADC_Init+0x31a>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800338c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003396:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800339a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6911      	ldr	r1, [r2, #16]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	430b      	orrs	r3, r1
 80033a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80033ac:	e013      	b.n	80033d6 <HAL_ADC_Init+0x342>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033bc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033d2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d118      	bne.n	8003412 <HAL_ADC_Init+0x37e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033ea:	f023 0304 	bic.w	r3, r3, #4
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033f6:	4311      	orrs	r1, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003402:	430a      	orrs	r2, r1
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	611a      	str	r2, [r3, #16]
 8003410:	e007      	b.n	8003422 <HAL_ADC_Init+0x38e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d10c      	bne.n	8003444 <HAL_ADC_Init+0x3b0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	f023 010f 	bic.w	r1, r3, #15
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	1e5a      	subs	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
 8003442:	e007      	b.n	8003454 <HAL_ADC_Init+0x3c0>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 020f 	bic.w	r2, r2, #15
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	f023 0303 	bic.w	r3, r3, #3
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	65da      	str	r2, [r3, #92]	; 0x5c
 8003464:	e007      	b.n	8003476 <HAL_ADC_Init+0x3e2>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	f043 0210 	orr.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003476:	7ffb      	ldrb	r3, [r7, #31]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3724      	adds	r7, #36	; 0x24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}
 8003480:	50000700 	.word	0x50000700
 8003484:	fff04007 	.word	0xfff04007

08003488 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0b6      	sub	sp, #216	; 0xd8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x24>
 80034f6:	2302      	movs	r3, #2
 80034f8:	f000 bc13 	b.w	8003d22 <HAL_ADC_ConfigChannel+0x84a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fd9c 	bl	8003046 <LL_ADC_REG_IsConversionOngoing>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 83f3 	bne.w	8003cfc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	f7ff fcb2 	bl	8002e8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fd8a 	bl	8003046 <LL_ADC_REG_IsConversionOngoing>
 8003532:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fd96 	bl	800306c <LL_ADC_INJ_IsConversionOngoing>
 8003540:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003544:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003548:	2b00      	cmp	r3, #0
 800354a:	f040 81d9 	bne.w	8003900 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800354e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 81d4 	bne.w	8003900 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003560:	d10f      	bne.n	8003582 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	4619      	mov	r1, r3
 800356e:	f7ff fcb9 	bl	8002ee4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fc73 	bl	8002e66 <LL_ADC_SetSamplingTimeCommonConfig>
 8003580:	e00e      	b.n	80035a0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6819      	ldr	r1, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	461a      	mov	r2, r3
 8003590:	f7ff fca8 	bl	8002ee4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fc63 	bl	8002e66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	08db      	lsrs	r3, r3, #3
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d022      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6919      	ldr	r1, [r3, #16]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035d2:	f7ff fbbd 	bl	8002d50 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6919      	ldr	r1, [r3, #16]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f7ff fc09 	bl	8002dfa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d102      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x126>
 80035f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035fc:	e000      	b.n	8003600 <HAL_ADC_ConfigChannel+0x128>
 80035fe:	2300      	movs	r3, #0
 8003600:	461a      	mov	r2, r3
 8003602:	f7ff fc15 	bl	8002e30 <LL_ADC_SetOffsetSaturation>
 8003606:	e17b      	b.n	8003900 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fbc2 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 8003614:	4603      	mov	r3, r0
 8003616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x15c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fbb7 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 800362a:	4603      	mov	r3, r0
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	f003 021f 	and.w	r2, r3, #31
 8003632:	e01e      	b.n	8003672 <HAL_ADC_ConfigChannel+0x19a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fbac 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 8003640:	4603      	mov	r3, r0
 8003642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003656:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800365a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003662:	2320      	movs	r3, #32
 8003664:	e004      	b.n	8003670 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <HAL_ADC_ConfigChannel+0x1b2>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	0e9b      	lsrs	r3, r3, #26
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	e018      	b.n	80036bc <HAL_ADC_ConfigChannel+0x1e4>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800369e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80036a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80036ae:	2320      	movs	r3, #32
 80036b0:	e004      	b.n	80036bc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80036b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036bc:	429a      	cmp	r2, r3
 80036be:	d106      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2200      	movs	r2, #0
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fb7b 	bl	8002dc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fb5f 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 80036da:	4603      	mov	r3, r0
 80036dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x222>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fb54 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 80036f0:	4603      	mov	r3, r0
 80036f2:	0e9b      	lsrs	r3, r3, #26
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	e01e      	b.n	8003738 <HAL_ADC_ConfigChannel+0x260>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2101      	movs	r1, #1
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fb49 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 8003706:	4603      	mov	r3, r0
 8003708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003718:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800371c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003728:	2320      	movs	r3, #32
 800372a:	e004      	b.n	8003736 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800372c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x278>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	e018      	b.n	8003782 <HAL_ADC_ConfigChannel+0x2aa>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003764:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800376c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003774:	2320      	movs	r3, #32
 8003776:	e004      	b.n	8003782 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003782:	429a      	cmp	r2, r3
 8003784:	d106      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	2101      	movs	r1, #1
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fb18 	bl	8002dc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2102      	movs	r1, #2
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fafc 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x2e8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2102      	movs	r1, #2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff faf1 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 80037b6:	4603      	mov	r3, r0
 80037b8:	0e9b      	lsrs	r3, r3, #26
 80037ba:	f003 021f 	and.w	r2, r3, #31
 80037be:	e01e      	b.n	80037fe <HAL_ADC_ConfigChannel+0x326>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2102      	movs	r1, #2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fae6 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80037de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80037e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80037ee:	2320      	movs	r3, #32
 80037f0:	e004      	b.n	80037fc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80037f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x33e>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	0e9b      	lsrs	r3, r3, #26
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	e016      	b.n	8003844 <HAL_ADC_ConfigChannel+0x36c>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800382a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800382e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003836:	2320      	movs	r3, #32
 8003838:	e004      	b.n	8003844 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800383a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003844:	429a      	cmp	r2, r3
 8003846:	d106      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	2102      	movs	r1, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fab7 	bl	8002dc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2103      	movs	r1, #3
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fa9b 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 8003862:	4603      	mov	r3, r0
 8003864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x3aa>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2103      	movs	r1, #3
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fa90 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 8003878:	4603      	mov	r3, r0
 800387a:	0e9b      	lsrs	r3, r3, #26
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	e017      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x3da>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2103      	movs	r1, #3
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fa85 	bl	8002d98 <LL_ADC_GetOffsetChannel>
 800388e:	4603      	mov	r3, r0
 8003890:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800389a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800389c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800389e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80038a4:	2320      	movs	r3, #32
 80038a6:	e003      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80038a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x3f2>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	0e9b      	lsrs	r3, r3, #26
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	e011      	b.n	80038ee <HAL_ADC_ConfigChannel+0x416>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80038d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80038e2:	2320      	movs	r3, #32
 80038e4:	e003      	b.n	80038ee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d106      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2103      	movs	r1, #3
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fa62 	bl	8002dc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fb8b 	bl	8003020 <LL_ADC_IsEnabled>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	f040 813d 	bne.w	8003b8c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	461a      	mov	r2, r3
 8003920:	f7ff fb0c 	bl	8002f3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4aa2      	ldr	r2, [pc, #648]	; (8003bb4 <HAL_ADC_ConfigChannel+0x6dc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	f040 812e 	bne.w	8003b8c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x480>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0e9b      	lsrs	r3, r3, #26
 8003946:	3301      	adds	r3, #1
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	2b09      	cmp	r3, #9
 800394e:	bf94      	ite	ls
 8003950:	2301      	movls	r3, #1
 8003952:	2300      	movhi	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e019      	b.n	800398c <HAL_ADC_ConfigChannel+0x4b4>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003968:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800396a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003970:	2320      	movs	r3, #32
 8003972:	e003      	b.n	800397c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2b09      	cmp	r3, #9
 8003984:	bf94      	ite	ls
 8003986:	2301      	movls	r3, #1
 8003988:	2300      	movhi	r3, #0
 800398a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800398c:	2b00      	cmp	r3, #0
 800398e:	d079      	beq.n	8003a84 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003998:	2b00      	cmp	r3, #0
 800399a:	d107      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x4d4>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	3301      	adds	r3, #1
 80039a4:	069b      	lsls	r3, r3, #26
 80039a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039aa:	e015      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x500>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b4:	fa93 f3a3 	rbit	r3, r3
 80039b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80039be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80039c4:	2320      	movs	r3, #32
 80039c6:	e003      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80039c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ca:	fab3 f383 	clz	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	3301      	adds	r3, #1
 80039d2:	069b      	lsls	r3, r3, #26
 80039d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x520>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	0e9b      	lsrs	r3, r3, #26
 80039ea:	3301      	adds	r3, #1
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	e017      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x550>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a00:	fa93 f3a3 	rbit	r3, r3
 8003a04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003a10:	2320      	movs	r3, #32
 8003a12:	e003      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	2101      	movs	r1, #1
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	ea42 0103 	orr.w	r1, r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10a      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x576>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0e9b      	lsrs	r3, r3, #26
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f003 021f 	and.w	r2, r3, #31
 8003a44:	4613      	mov	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	051b      	lsls	r3, r3, #20
 8003a4c:	e018      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x5a8>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003a66:	2320      	movs	r3, #32
 8003a68:	e003      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6c:	fab3 f383 	clz	r3, r3
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	f003 021f 	and.w	r2, r3, #31
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a80:	430b      	orrs	r3, r1
 8003a82:	e07e      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x5c8>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	0e9b      	lsrs	r3, r3, #26
 8003a96:	3301      	adds	r3, #1
 8003a98:	069b      	lsls	r3, r3, #26
 8003a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a9e:	e015      	b.n	8003acc <HAL_ADC_ConfigChannel+0x5f4>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003ab8:	2320      	movs	r3, #32
 8003aba:	e003      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	069b      	lsls	r3, r3, #26
 8003ac8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x614>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0e9b      	lsrs	r3, r3, #26
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aea:	e017      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x644>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	fa93 f3a3 	rbit	r3, r3
 8003af8:	61fb      	str	r3, [r7, #28]
  return result;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003b04:	2320      	movs	r3, #32
 8003b06:	e003      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	ea42 0103 	orr.w	r1, r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x670>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0e9b      	lsrs	r3, r3, #26
 8003b32:	3301      	adds	r3, #1
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	4613      	mov	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3b1e      	subs	r3, #30
 8003b40:	051b      	lsls	r3, r3, #20
 8003b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b46:	e01b      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x6a8>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	613b      	str	r3, [r7, #16]
  return result;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003b60:	2320      	movs	r3, #32
 8003b62:	e003      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	fab3 f383 	clz	r3, r3
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f003 021f 	and.w	r2, r3, #31
 8003b72:	4613      	mov	r3, r2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	4413      	add	r3, r2
 8003b78:	3b1e      	subs	r3, #30
 8003b7a:	051b      	lsls	r3, r3, #20
 8003b7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b80:	430b      	orrs	r3, r1
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	6892      	ldr	r2, [r2, #8]
 8003b86:	4619      	mov	r1, r3
 8003b88:	f7ff f9ac 	bl	8002ee4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_ADC_ConfigChannel+0x6e0>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80be 	beq.w	8003d16 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ba2:	d004      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x6d6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <HAL_ADC_ConfigChannel+0x6e4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d10a      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x6ec>
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <HAL_ADC_ConfigChannel+0x6e8>)
 8003bb0:	e009      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x6ee>
 8003bb2:	bf00      	nop
 8003bb4:	407f0000 	.word	0x407f0000
 8003bb8:	80080000 	.word	0x80080000
 8003bbc:	50000100 	.word	0x50000100
 8003bc0:	50000300 	.word	0x50000300
 8003bc4:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_ADC_ConfigChannel+0x854>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f8b4 	bl	8002d34 <LL_ADC_GetCommonPathInternalCh>
 8003bcc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a56      	ldr	r2, [pc, #344]	; (8003d30 <HAL_ADC_ConfigChannel+0x858>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_ADC_ConfigChannel+0x70c>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a55      	ldr	r2, [pc, #340]	; (8003d34 <HAL_ADC_ConfigChannel+0x85c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d13a      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d134      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf8:	d005      	beq.n	8003c06 <HAL_ADC_ConfigChannel+0x72e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a4e      	ldr	r2, [pc, #312]	; (8003d38 <HAL_ADC_ConfigChannel+0x860>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	f040 8085 	bne.w	8003d10 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0e:	d004      	beq.n	8003c1a <HAL_ADC_ConfigChannel+0x742>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a49      	ldr	r2, [pc, #292]	; (8003d3c <HAL_ADC_ConfigChannel+0x864>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d101      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x746>
 8003c1a:	4a49      	ldr	r2, [pc, #292]	; (8003d40 <HAL_ADC_ConfigChannel+0x868>)
 8003c1c:	e000      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x748>
 8003c1e:	4a43      	ldr	r2, [pc, #268]	; (8003d2c <HAL_ADC_ConfigChannel+0x854>)
 8003c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f7ff f86f 	bl	8002d0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c30:	4b44      	ldr	r3, [pc, #272]	; (8003d44 <HAL_ADC_ConfigChannel+0x86c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	4a44      	ldr	r2, [pc, #272]	; (8003d48 <HAL_ADC_ConfigChannel+0x870>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c4a:	e002      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f9      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c58:	e05a      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a3b      	ldr	r2, [pc, #236]	; (8003d4c <HAL_ADC_ConfigChannel+0x874>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d125      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d11f      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a31      	ldr	r2, [pc, #196]	; (8003d3c <HAL_ADC_ConfigChannel+0x864>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d104      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x7ac>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a34      	ldr	r2, [pc, #208]	; (8003d50 <HAL_ADC_ConfigChannel+0x878>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d047      	beq.n	8003d14 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c8c:	d004      	beq.n	8003c98 <HAL_ADC_ConfigChannel+0x7c0>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2a      	ldr	r2, [pc, #168]	; (8003d3c <HAL_ADC_ConfigChannel+0x864>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d101      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x7c4>
 8003c98:	4a29      	ldr	r2, [pc, #164]	; (8003d40 <HAL_ADC_ConfigChannel+0x868>)
 8003c9a:	e000      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x7c6>
 8003c9c:	4a23      	ldr	r2, [pc, #140]	; (8003d2c <HAL_ADC_ConfigChannel+0x854>)
 8003c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f7ff f830 	bl	8002d0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cae:	e031      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a27      	ldr	r2, [pc, #156]	; (8003d54 <HAL_ADC_ConfigChannel+0x87c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d12d      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d127      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <HAL_ADC_ConfigChannel+0x864>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd8:	d004      	beq.n	8003ce4 <HAL_ADC_ConfigChannel+0x80c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <HAL_ADC_ConfigChannel+0x864>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x810>
 8003ce4:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <HAL_ADC_ConfigChannel+0x868>)
 8003ce6:	e000      	b.n	8003cea <HAL_ADC_ConfigChannel+0x812>
 8003ce8:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <HAL_ADC_ConfigChannel+0x854>)
 8003cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f7ff f80a 	bl	8002d0e <LL_ADC_SetCommonPathInternalCh>
 8003cfa:	e00c      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003d0e:	e002      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d10:	bf00      	nop
 8003d12:	e000      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	37d8      	adds	r7, #216	; 0xd8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	50000700 	.word	0x50000700
 8003d30:	c3210000 	.word	0xc3210000
 8003d34:	90c00010 	.word	0x90c00010
 8003d38:	50000600 	.word	0x50000600
 8003d3c:	50000100 	.word	0x50000100
 8003d40:	50000300 	.word	0x50000300
 8003d44:	20000000 	.word	0x20000000
 8003d48:	053e2d63 	.word	0x053e2d63
 8003d4c:	c7520000 	.word	0xc7520000
 8003d50:	50000500 	.word	0x50000500
 8003d54:	cb840000 	.word	0xcb840000

08003d58 <LL_ADC_IsEnabled>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <LL_ADC_IsEnabled+0x18>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <LL_ADC_IsEnabled+0x1a>
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <LL_ADC_REG_IsConversionOngoing>:
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d101      	bne.n	8003d96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b0ad      	sub	sp, #180	; 0xb4
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e0f8      	b.n	8004018 <HAL_ADCEx_MultiModeConfigChannel+0x210>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	66fb      	str	r3, [r7, #108]	; 0x6c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e4a:	d102      	bne.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003e4c:	4b74      	ldr	r3, [pc, #464]	; (8004020 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e009      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a73      	ldr	r2, [pc, #460]	; (8004024 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d102      	bne.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8003e5c:	4b72      	ldr	r3, [pc, #456]	; (8004028 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e001      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0c9      	b.n	8004018 <HAL_ADCEx_MultiModeConfigChannel+0x210>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff ff79 	bl	8003d7e <LL_ADC_REG_IsConversionOngoing>
 8003e8c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff72 	bl	8003d7e <LL_ADC_REG_IsConversionOngoing>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 80aa 	bne.w	8003ff6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 80a5 	bne.w	8003ff6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb4:	d004      	beq.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a59      	ldr	r2, [pc, #356]	; (8004020 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8003ec0:	4b5a      	ldr	r3, [pc, #360]	; (800402c <HAL_ADCEx_MultiModeConfigChannel+0x224>)
 8003ec2:	e000      	b.n	8003ec6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8003ec4:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <HAL_ADCEx_MultiModeConfigChannel+0x228>)
 8003ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d04f      	beq.n	8003f72 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ee6:	035b      	lsls	r3, r3, #13
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ef0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003efa:	d004      	beq.n	8003f06 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a47      	ldr	r2, [pc, #284]	; (8004020 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10f      	bne.n	8003f26 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 8003f06:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f0a:	f7ff ff25 	bl	8003d58 <LL_ADC_IsEnabled>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	4843      	ldr	r0, [pc, #268]	; (8004020 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003f12:	f7ff ff21 	bl	8003d58 <LL_ADC_IsEnabled>
 8003f16:	4603      	mov	r3, r0
 8003f18:	4323      	orrs	r3, r4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bf0c      	ite	eq
 8003f1e:	2301      	moveq	r3, #1
 8003f20:	2300      	movne	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e012      	b.n	8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x144>
 8003f26:	483f      	ldr	r0, [pc, #252]	; (8004024 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8003f28:	f7ff ff16 	bl	8003d58 <LL_ADC_IsEnabled>
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	483e      	ldr	r0, [pc, #248]	; (8004028 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8003f30:	f7ff ff12 	bl	8003d58 <LL_ADC_IsEnabled>
 8003f34:	4603      	mov	r3, r0
 8003f36:	431c      	orrs	r4, r3
 8003f38:	483e      	ldr	r0, [pc, #248]	; (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 8003f3a:	f7ff ff0d 	bl	8003d58 <LL_ADC_IsEnabled>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4323      	orrs	r3, r4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d05c      	beq.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f5a:	f023 030f 	bic.w	r3, r3, #15
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	6811      	ldr	r1, [r2, #0]
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	6892      	ldr	r2, [r2, #8]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f6e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f70:	e04b      	b.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0x202>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f8a:	d004      	beq.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a23      	ldr	r2, [pc, #140]	; (8004020 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10f      	bne.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003f96:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f9a:	f7ff fedd 	bl	8003d58 <LL_ADC_IsEnabled>
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	481f      	ldr	r0, [pc, #124]	; (8004020 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003fa2:	f7ff fed9 	bl	8003d58 <LL_ADC_IsEnabled>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4323      	orrs	r3, r4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e012      	b.n	8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>
 8003fb6:	481b      	ldr	r0, [pc, #108]	; (8004024 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8003fb8:	f7ff fece 	bl	8003d58 <LL_ADC_IsEnabled>
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	481a      	ldr	r0, [pc, #104]	; (8004028 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8003fc0:	f7ff feca 	bl	8003d58 <LL_ADC_IsEnabled>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	431c      	orrs	r4, r3
 8003fc8:	481a      	ldr	r0, [pc, #104]	; (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 8003fca:	f7ff fec5 	bl	8003d58 <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4323      	orrs	r3, r4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2301      	moveq	r3, #1
 8003fd8:	2300      	movne	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d014      	beq.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003fe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003fea:	f023 030f 	bic.w	r3, r3, #15
 8003fee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003ff2:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ff4:	e009      	b.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0x202>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8004008:	e000      	b.n	800400c <HAL_ADCEx_MultiModeConfigChannel+0x204>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800400a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004014:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 8004018:	4618      	mov	r0, r3
 800401a:	37b4      	adds	r7, #180	; 0xb4
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}
 8004020:	50000100 	.word	0x50000100
 8004024:	50000400 	.word	0x50000400
 8004028:	50000500 	.word	0x50000500
 800402c:	50000300 	.word	0x50000300
 8004030:	50000700 	.word	0x50000700
 8004034:	50000600 	.word	0x50000600

08004038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <__NVIC_SetPriorityGrouping+0x44>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004054:	4013      	ands	r3, r2
 8004056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800406a:	4a04      	ldr	r2, [pc, #16]	; (800407c <__NVIC_SetPriorityGrouping+0x44>)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	60d3      	str	r3, [r2, #12]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <__NVIC_GetPriorityGrouping+0x18>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	0a1b      	lsrs	r3, r3, #8
 800408a:	f003 0307 	and.w	r3, r3, #7
}
 800408e:	4618      	mov	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	db0b      	blt.n	80040c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	f003 021f 	and.w	r2, r3, #31
 80040b4:	4907      	ldr	r1, [pc, #28]	; (80040d4 <__NVIC_EnableIRQ+0x38>)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2001      	movs	r0, #1
 80040be:	fa00 f202 	lsl.w	r2, r0, r2
 80040c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000e100 	.word	0xe000e100

080040d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	6039      	str	r1, [r7, #0]
 80040e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	db0a      	blt.n	8004102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	490c      	ldr	r1, [pc, #48]	; (8004124 <__NVIC_SetPriority+0x4c>)
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	0112      	lsls	r2, r2, #4
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	440b      	add	r3, r1
 80040fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004100:	e00a      	b.n	8004118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4908      	ldr	r1, [pc, #32]	; (8004128 <__NVIC_SetPriority+0x50>)
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	3b04      	subs	r3, #4
 8004110:	0112      	lsls	r2, r2, #4
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	440b      	add	r3, r1
 8004116:	761a      	strb	r2, [r3, #24]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000e100 	.word	0xe000e100
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800412c:	b480      	push	{r7}
 800412e:	b089      	sub	sp, #36	; 0x24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f1c3 0307 	rsb	r3, r3, #7
 8004146:	2b04      	cmp	r3, #4
 8004148:	bf28      	it	cs
 800414a:	2304      	movcs	r3, #4
 800414c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3304      	adds	r3, #4
 8004152:	2b06      	cmp	r3, #6
 8004154:	d902      	bls.n	800415c <NVIC_EncodePriority+0x30>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3b03      	subs	r3, #3
 800415a:	e000      	b.n	800415e <NVIC_EncodePriority+0x32>
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43da      	mvns	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	401a      	ands	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004174:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	43d9      	mvns	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	4313      	orrs	r3, r2
         );
}
 8004186:	4618      	mov	r0, r3
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ff4c 	bl	8004038 <__NVIC_SetPriorityGrouping>
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041b6:	f7ff ff63 	bl	8004080 <__NVIC_GetPriorityGrouping>
 80041ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	6978      	ldr	r0, [r7, #20]
 80041c2:	f7ff ffb3 	bl	800412c <NVIC_EncodePriority>
 80041c6:	4602      	mov	r2, r0
 80041c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ff82 	bl	80040d8 <__NVIC_SetPriority>
}
 80041d4:	bf00      	nop
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ff56 	bl	800409c <__NVIC_EnableIRQ>
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e034      	b.n	8004274 <HAL_DAC_Init+0x7c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	791b      	ldrb	r3, [r3, #4]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d125      	bne.n	8004260 <HAL_DAC_Init+0x68>
  {
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the DAC Callback settings */
    hdac->ConvCpltCallbackCh1           = HAL_DAC_ConvCpltCallbackCh1;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a19      	ldr	r2, [pc, #100]	; (800427c <HAL_DAC_Init+0x84>)
 8004218:	615a      	str	r2, [r3, #20]
    hdac->ConvHalfCpltCallbackCh1       = HAL_DAC_ConvHalfCpltCallbackCh1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a18      	ldr	r2, [pc, #96]	; (8004280 <HAL_DAC_Init+0x88>)
 800421e:	619a      	str	r2, [r3, #24]
    hdac->ErrorCallbackCh1              = HAL_DAC_ErrorCallbackCh1;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a18      	ldr	r2, [pc, #96]	; (8004284 <HAL_DAC_Init+0x8c>)
 8004224:	61da      	str	r2, [r3, #28]
    hdac->DMAUnderrunCallbackCh1        = HAL_DAC_DMAUnderrunCallbackCh1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a17      	ldr	r2, [pc, #92]	; (8004288 <HAL_DAC_Init+0x90>)
 800422a:	621a      	str	r2, [r3, #32]

    hdac->ConvCpltCallbackCh2           = HAL_DACEx_ConvCpltCallbackCh2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a17      	ldr	r2, [pc, #92]	; (800428c <HAL_DAC_Init+0x94>)
 8004230:	625a      	str	r2, [r3, #36]	; 0x24
    hdac->ConvHalfCpltCallbackCh2       = HAL_DACEx_ConvHalfCpltCallbackCh2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a16      	ldr	r2, [pc, #88]	; (8004290 <HAL_DAC_Init+0x98>)
 8004236:	629a      	str	r2, [r3, #40]	; 0x28
    hdac->ErrorCallbackCh2              = HAL_DACEx_ErrorCallbackCh2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a16      	ldr	r2, [pc, #88]	; (8004294 <HAL_DAC_Init+0x9c>)
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdac->DMAUnderrunCallbackCh2        = HAL_DACEx_DMAUnderrunCallbackCh2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a15      	ldr	r2, [pc, #84]	; (8004298 <HAL_DAC_Init+0xa0>)
 8004242:	631a      	str	r2, [r3, #48]	; 0x30

    if (hdac->MspInitCallback == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <HAL_DAC_Init+0x5a>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a13      	ldr	r2, [pc, #76]	; (800429c <HAL_DAC_Init+0xa4>)
 8004250:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	0800466b 	.word	0x0800466b
 8004280:	0800467f 	.word	0x0800467f
 8004284:	08004693 	.word	0x08004693
 8004288:	080046a7 	.word	0x080046a7
 800428c:	08004a9f 	.word	0x08004a9f
 8004290:	08004ab3 	.word	0x08004ab3
 8004294:	08004ac7 	.word	0x08004ac7
 8004298:	08004adb 	.word	0x08004adb
 800429c:	0800218d 	.word	0x0800218d

080042a0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e056      	b.n	8004362 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	795b      	ldrb	r3, [r3, #5]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_DAC_Start+0x20>
 80042bc:	2302      	movs	r3, #2
 80042be:	e050      	b.n	8004362 <HAL_DAC_Start+0xc2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042e4:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_DAC_Start+0xd0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	099b      	lsrs	r3, r3, #6
 80042ea:	4a22      	ldr	r2, [pc, #136]	; (8004374 <HAL_DAC_Start+0xd4>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	099b      	lsrs	r3, r3, #6
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80042f6:	e002      	b.n	80042fe <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f9      	bne.n	80042f8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004314:	2b02      	cmp	r3, #2
 8004316:	d11d      	bne.n	8004354 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	e014      	b.n	8004354 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2102      	movs	r1, #2
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	429a      	cmp	r2, r3
 8004342:	d107      	bne.n	8004354 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0202 	orr.w	r2, r2, #2
 8004352:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20000000 	.word	0x20000000
 8004374:	053e2d63 	.word	0x053e2d63

08004378 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0b2      	b.n	80044f6 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	795b      	ldrb	r3, [r3, #5]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_DAC_Start_DMA+0x24>
 8004398:	2302      	movs	r3, #2
 800439a:	e0ac      	b.n	80044f6 <HAL_DAC_Start_DMA+0x17e>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2202      	movs	r2, #2
 80043a6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d129      	bne.n	8004402 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	4a53      	ldr	r2, [pc, #332]	; (8004500 <HAL_DAC_Start_DMA+0x188>)
 80043b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	4a52      	ldr	r2, [pc, #328]	; (8004504 <HAL_DAC_Start_DMA+0x18c>)
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4a51      	ldr	r2, [pc, #324]	; (8004508 <HAL_DAC_Start_DMA+0x190>)
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043d4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_DAC_Start_DMA+0x6c>
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d005      	beq.n	80043ee <HAL_DAC_Start_DMA+0x76>
 80043e2:	e009      	b.n	80043f8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3308      	adds	r3, #8
 80043ea:	61bb      	str	r3, [r7, #24]
        break;
 80043ec:	e033      	b.n	8004456 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	61bb      	str	r3, [r7, #24]
        break;
 80043f6:	e02e      	b.n	8004456 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3310      	adds	r3, #16
 80043fe:	61bb      	str	r3, [r7, #24]
        break;
 8004400:	e029      	b.n	8004456 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	4a41      	ldr	r2, [pc, #260]	; (800450c <HAL_DAC_Start_DMA+0x194>)
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	4a40      	ldr	r2, [pc, #256]	; (8004510 <HAL_DAC_Start_DMA+0x198>)
 8004410:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	4a3f      	ldr	r2, [pc, #252]	; (8004514 <HAL_DAC_Start_DMA+0x19c>)
 8004418:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004428:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_DAC_Start_DMA+0xc0>
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	2b04      	cmp	r3, #4
 8004434:	d005      	beq.n	8004442 <HAL_DAC_Start_DMA+0xca>
 8004436:	e009      	b.n	800444c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	61bb      	str	r3, [r7, #24]
        break;
 8004440:	e009      	b.n	8004456 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3318      	adds	r3, #24
 8004448:	61bb      	str	r3, [r7, #24]
        break;
 800444a:	e004      	b.n	8004456 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	331c      	adds	r3, #28
 8004452:	61bb      	str	r3, [r7, #24]
        break;
 8004454:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d111      	bne.n	8004480 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800446a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6898      	ldr	r0, [r3, #8]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	f000 fc1b 	bl	8004cb0 <HAL_DMA_Start_IT>
 800447a:	4603      	mov	r3, r0
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e010      	b.n	80044a2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800448e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68d8      	ldr	r0, [r3, #12]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	f000 fc09 	bl	8004cb0 <HAL_DMA_Start_IT>
 800449e:	4603      	mov	r3, r0
 80044a0:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80044a8:	7ffb      	ldrb	r3, [r7, #31]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d11c      	bne.n	80044e8 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6819      	ldr	r1, [r3, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2201      	movs	r2, #1
 80044bc:	409a      	lsls	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044c6:	4b14      	ldr	r3, [pc, #80]	; (8004518 <HAL_DAC_Start_DMA+0x1a0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	099b      	lsrs	r3, r3, #6
 80044cc:	4a13      	ldr	r2, [pc, #76]	; (800451c <HAL_DAC_Start_DMA+0x1a4>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	099b      	lsrs	r3, r3, #6
 80044d4:	3301      	adds	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80044d8:	e002      	b.n	80044e0 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	3b01      	subs	r3, #1
 80044de:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f9      	bne.n	80044da <HAL_DAC_Start_DMA+0x162>
 80044e6:	e005      	b.n	80044f4 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f043 0204 	orr.w	r2, r3, #4
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80044f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	08004a2d 	.word	0x08004a2d
 8004504:	08004a51 	.word	0x08004a51
 8004508:	08004a6f 	.word	0x08004a6f
 800450c:	08004aef 	.word	0x08004aef
 8004510:	08004b13 	.word	0x08004b13
 8004514:	08004b31 	.word	0x08004b31
 8004518:	20000000 	.word	0x20000000
 800451c:	053e2d63 	.word	0x053e2d63

08004520 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e03e      	b.n	80045b2 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43da      	mvns	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	400a      	ands	r2, r1
 8004550:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6819      	ldr	r1, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2201      	movs	r2, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43da      	mvns	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	400a      	ands	r2, r1
 800456c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fc14 	bl	8004da6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e00c      	b.n	80045aa <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fc06 	bl	8004da6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80045a8:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01e      	beq.n	800461a <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d019      	beq.n	800461a <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2204      	movs	r2, #4
 80045ea:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004600:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004610:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01e      	beq.n	8004662 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d019      	beq.n	8004662 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2204      	movs	r2, #4
 8004632:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f043 0202 	orr.w	r2, r3, #2
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004648:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004658:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	; 0x28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_DAC_ConfigChannel+0x1c>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e19e      	b.n	8004a1a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	795b      	ldrb	r3, [r3, #5]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_DAC_ConfigChannel+0x2c>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e198      	b.n	8004a1a <HAL_DAC_ConfigChannel+0x35e>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2202      	movs	r2, #2
 80046f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d17a      	bne.n	80047f2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80046fc:	f7fe fac6 	bl	8002c8c <HAL_GetTick>
 8004700:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d13d      	bne.n	8004784 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004708:	e018      	b.n	800473c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800470a:	f7fe fabf 	bl	8002c8c <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d911      	bls.n	800473c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f043 0208 	orr.w	r2, r3, #8
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2203      	movs	r2, #3
 8004736:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e16e      	b.n	8004a1a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1df      	bne.n	800470a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004752:	641a      	str	r2, [r3, #64]	; 0x40
 8004754:	e020      	b.n	8004798 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004756:	f7fe fa99 	bl	8002c8c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d90f      	bls.n	8004784 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	2b00      	cmp	r3, #0
 800476c:	da0a      	bge.n	8004784 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f043 0208 	orr.w	r2, r3, #8
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2203      	movs	r2, #3
 800477e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e14a      	b.n	8004a1a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	2b00      	cmp	r3, #0
 800478c:	dbe3      	blt.n	8004756 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004796:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	ea02 0103 	and.w	r1, r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	409a      	lsls	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	21ff      	movs	r1, #255	; 0xff
 80047d4:	fa01 f303 	lsl.w	r3, r1, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	ea02 0103 	and.w	r1, r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	409a      	lsls	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d11d      	bne.n	8004836 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	221f      	movs	r2, #31
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	4013      	ands	r3, r2
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482a:	4313      	orrs	r3, r2
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2207      	movs	r2, #7
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484e:	4013      	ands	r3, r2
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d102      	bne.n	8004860 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800485a:	2300      	movs	r3, #0
 800485c:	623b      	str	r3, [r7, #32]
 800485e:	e00f      	b.n	8004880 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d102      	bne.n	800486e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004868:	2301      	movs	r3, #1
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	e008      	b.n	8004880 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004876:	2301      	movs	r3, #1
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	e001      	b.n	8004880 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800487c:	2300      	movs	r3, #0
 800487e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	6a3a      	ldr	r2, [r7, #32]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43db      	mvns	r3, r3
 80048a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a2:	4013      	ands	r3, r2
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	791b      	ldrb	r3, [r3, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d102      	bne.n	80048b4 <HAL_DAC_ConfigChannel+0x1f8>
 80048ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048b2:	e000      	b.n	80048b6 <HAL_DAC_ConfigChannel+0x1fa>
 80048b4:	2300      	movs	r3, #0
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	4013      	ands	r3, r2
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	795b      	ldrb	r3, [r3, #5]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d102      	bne.n	80048e0 <HAL_DAC_ConfigChannel+0x224>
 80048da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048de:	e000      	b.n	80048e2 <HAL_DAC_ConfigChannel+0x226>
 80048e0:	2300      	movs	r3, #0
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d114      	bne.n	8004922 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80048f8:	f001 fd44 	bl	8006384 <HAL_RCC_GetHCLKFreq>
 80048fc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4a48      	ldr	r2, [pc, #288]	; (8004a24 <HAL_DAC_ConfigChannel+0x368>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d904      	bls.n	8004910 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
 800490e:	e00f      	b.n	8004930 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4a45      	ldr	r2, [pc, #276]	; (8004a28 <HAL_DAC_ConfigChannel+0x36c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d90a      	bls.n	800492e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
 8004920:	e006      	b.n	8004930 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004928:	4313      	orrs	r3, r2
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
 800492c:	e000      	b.n	8004930 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800492e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493e:	4313      	orrs	r3, r2
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43da      	mvns	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	400a      	ands	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	f640 72fe 	movw	r2, #4094	; 0xffe
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	4013      	ands	r3, r2
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499a:	4313      	orrs	r3, r2
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6819      	ldr	r1, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	22c0      	movs	r2, #192	; 0xc0
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43da      	mvns	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	400a      	ands	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	089b      	lsrs	r3, r3, #2
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	f640 710f 	movw	r1, #3855	; 0xf0f
 80049f0:	fa01 f303 	lsl.w	r3, r1, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	ea02 0103 	and.w	r1, r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	409a      	lsls	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3728      	adds	r7, #40	; 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	09896800 	.word	0x09896800
 8004a28:	04c4b400 	.word	0x04c4b400

08004a2c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	4798      	blx	r3
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	711a      	strb	r2, [r3, #4]
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	4798      	blx	r3
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f043 0204 	orr.w	r2, r3, #4
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	4798      	blx	r3
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	711a      	strb	r2, [r3, #4]
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	4798      	blx	r3
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	711a      	strb	r2, [r3, #4]
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	4798      	blx	r3
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f043 0204 	orr.w	r2, r3, #4
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	4798      	blx	r3
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	711a      	strb	r2, [r3, #4]
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e08d      	b.n	8004c8e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_DMA_Init+0x138>)
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d80f      	bhi.n	8004b9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b45      	ldr	r3, [pc, #276]	; (8004c9c <HAL_DMA_Init+0x13c>)
 8004b86:	4413      	add	r3, r2
 8004b88:	4a45      	ldr	r2, [pc, #276]	; (8004ca0 <HAL_DMA_Init+0x140>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	009a      	lsls	r2, r3, #2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a42      	ldr	r2, [pc, #264]	; (8004ca4 <HAL_DMA_Init+0x144>)
 8004b9a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b9c:	e00e      	b.n	8004bbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4b40      	ldr	r3, [pc, #256]	; (8004ca8 <HAL_DMA_Init+0x148>)
 8004ba6:	4413      	add	r3, r2
 8004ba8:	4a3d      	ldr	r2, [pc, #244]	; (8004ca0 <HAL_DMA_Init+0x140>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	091b      	lsrs	r3, r3, #4
 8004bb0:	009a      	lsls	r2, r3, #2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a3c      	ldr	r2, [pc, #240]	; (8004cac <HAL_DMA_Init+0x14c>)
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fa10 	bl	8005034 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c1c:	d102      	bne.n	8004c24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c38:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <HAL_DMA_Init+0x104>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d80c      	bhi.n	8004c64 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa30 	bl	80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c60:	605a      	str	r2, [r3, #4]
 8004c62:	e008      	b.n	8004c76 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40020407 	.word	0x40020407
 8004c9c:	bffdfff8 	.word	0xbffdfff8
 8004ca0:	cccccccd 	.word	0xcccccccd
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	bffdfbf8 	.word	0xbffdfbf8
 8004cac:	40020400 	.word	0x40020400

08004cb0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_DMA_Start_IT+0x20>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e066      	b.n	8004d9e <HAL_DMA_Start_IT+0xee>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d155      	bne.n	8004d90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0201 	bic.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f954 	bl	8004fb6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 020e 	orr.w	r2, r2, #14
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e00f      	b.n	8004d48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0204 	bic.w	r2, r2, #4
 8004d36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 020a 	orr.w	r2, r2, #10
 8004d46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d007      	beq.n	8004d66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d64:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0201 	orr.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e005      	b.n	8004d9c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d005      	beq.n	8004dca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
 8004dc8:	e037      	b.n	8004e3a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 020e 	bic.w	r2, r2, #14
 8004dd8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f003 021f 	and.w	r2, r3, #31
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2101      	movs	r1, #1
 8004e08:	fa01 f202 	lsl.w	r2, r1, r2
 8004e0c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e16:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e2e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e38:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	2204      	movs	r2, #4
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d026      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x7a>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d021      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d107      	bne.n	8004eac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb0:	f003 021f 	and.w	r2, r3, #31
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	2104      	movs	r1, #4
 8004eba:	fa01 f202 	lsl.w	r2, r1, r2
 8004ebe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d071      	beq.n	8004fac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ed0:	e06c      	b.n	8004fac <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2202      	movs	r2, #2
 8004edc:	409a      	lsls	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d02e      	beq.n	8004f44 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d029      	beq.n	8004f44 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 020a 	bic.w	r2, r2, #10
 8004f0c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	f003 021f 	and.w	r2, r3, #31
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	2102      	movs	r1, #2
 8004f24:	fa01 f202 	lsl.w	r2, r1, r2
 8004f28:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d038      	beq.n	8004fac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f42:	e033      	b.n	8004fac <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02a      	beq.n	8004fae <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d025      	beq.n	8004fae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 020e 	bic.w	r2, r2, #14
 8004f70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f003 021f 	and.w	r2, r3, #31
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	2101      	movs	r1, #1
 8004f80:	fa01 f202 	lsl.w	r2, r1, r2
 8004f84:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
}
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fcc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fde:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	f003 021f 	and.w	r2, r3, #31
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	2101      	movs	r1, #1
 8004fee:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b10      	cmp	r3, #16
 8005002:	d108      	bne.n	8005016 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005014:	e007      	b.n	8005026 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	60da      	str	r2, [r3, #12]
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	4b16      	ldr	r3, [pc, #88]	; (800509c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005044:	429a      	cmp	r2, r3
 8005046:	d802      	bhi.n	800504e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e001      	b.n	8005052 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005050:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	3b08      	subs	r3, #8
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	009a      	lsls	r2, r3, #2
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4413      	add	r3, r2
 8005074:	461a      	mov	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a0b      	ldr	r2, [pc, #44]	; (80050ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800507e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	2201      	movs	r2, #1
 8005088:	409a      	lsls	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40020407 	.word	0x40020407
 80050a0:	40020800 	.word	0x40020800
 80050a4:	40020820 	.word	0x40020820
 80050a8:	cccccccd 	.word	0xcccccccd
 80050ac:	40020880 	.word	0x40020880

080050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	461a      	mov	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050d2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	2201      	movs	r2, #1
 80050de:	409a      	lsls	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	1000823f 	.word	0x1000823f
 80050f4:	40020940 	.word	0x40020940

080050f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005106:	e15a      	b.n	80053be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	2101      	movs	r1, #1
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	fa01 f303 	lsl.w	r3, r1, r3
 8005114:	4013      	ands	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 814c 	beq.w	80053b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	2b01      	cmp	r3, #1
 800512a:	d005      	beq.n	8005138 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005134:	2b02      	cmp	r3, #2
 8005136:	d130      	bne.n	800519a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	2203      	movs	r2, #3
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43db      	mvns	r3, r3
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4013      	ands	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800516e:	2201      	movs	r2, #1
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4013      	ands	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f003 0201 	and.w	r2, r3, #1
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d017      	beq.n	80051d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	2203      	movs	r2, #3
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43db      	mvns	r3, r3
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4013      	ands	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d123      	bne.n	800522a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	08da      	lsrs	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3208      	adds	r2, #8
 80051ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	220f      	movs	r2, #15
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43db      	mvns	r3, r3
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4013      	ands	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	08da      	lsrs	r2, r3, #3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3208      	adds	r2, #8
 8005224:	6939      	ldr	r1, [r7, #16]
 8005226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	2203      	movs	r2, #3
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	43db      	mvns	r3, r3
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4013      	ands	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 0203 	and.w	r2, r3, #3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 80a6 	beq.w	80053b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800526c:	4b5b      	ldr	r3, [pc, #364]	; (80053dc <HAL_GPIO_Init+0x2e4>)
 800526e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005270:	4a5a      	ldr	r2, [pc, #360]	; (80053dc <HAL_GPIO_Init+0x2e4>)
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	6613      	str	r3, [r2, #96]	; 0x60
 8005278:	4b58      	ldr	r3, [pc, #352]	; (80053dc <HAL_GPIO_Init+0x2e4>)
 800527a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	60bb      	str	r3, [r7, #8]
 8005282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005284:	4a56      	ldr	r2, [pc, #344]	; (80053e0 <HAL_GPIO_Init+0x2e8>)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	089b      	lsrs	r3, r3, #2
 800528a:	3302      	adds	r3, #2
 800528c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	220f      	movs	r2, #15
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4013      	ands	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80052ae:	d01f      	beq.n	80052f0 <HAL_GPIO_Init+0x1f8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a4c      	ldr	r2, [pc, #304]	; (80053e4 <HAL_GPIO_Init+0x2ec>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d019      	beq.n	80052ec <HAL_GPIO_Init+0x1f4>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a4b      	ldr	r2, [pc, #300]	; (80053e8 <HAL_GPIO_Init+0x2f0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <HAL_GPIO_Init+0x1f0>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a4a      	ldr	r2, [pc, #296]	; (80053ec <HAL_GPIO_Init+0x2f4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00d      	beq.n	80052e4 <HAL_GPIO_Init+0x1ec>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a49      	ldr	r2, [pc, #292]	; (80053f0 <HAL_GPIO_Init+0x2f8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <HAL_GPIO_Init+0x1e8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a48      	ldr	r2, [pc, #288]	; (80053f4 <HAL_GPIO_Init+0x2fc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d101      	bne.n	80052dc <HAL_GPIO_Init+0x1e4>
 80052d8:	2305      	movs	r3, #5
 80052da:	e00a      	b.n	80052f2 <HAL_GPIO_Init+0x1fa>
 80052dc:	2306      	movs	r3, #6
 80052de:	e008      	b.n	80052f2 <HAL_GPIO_Init+0x1fa>
 80052e0:	2304      	movs	r3, #4
 80052e2:	e006      	b.n	80052f2 <HAL_GPIO_Init+0x1fa>
 80052e4:	2303      	movs	r3, #3
 80052e6:	e004      	b.n	80052f2 <HAL_GPIO_Init+0x1fa>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e002      	b.n	80052f2 <HAL_GPIO_Init+0x1fa>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_GPIO_Init+0x1fa>
 80052f0:	2300      	movs	r3, #0
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	f002 0203 	and.w	r2, r2, #3
 80052f8:	0092      	lsls	r2, r2, #2
 80052fa:	4093      	lsls	r3, r2
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005302:	4937      	ldr	r1, [pc, #220]	; (80053e0 <HAL_GPIO_Init+0x2e8>)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	089b      	lsrs	r3, r3, #2
 8005308:	3302      	adds	r3, #2
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005310:	4b39      	ldr	r3, [pc, #228]	; (80053f8 <HAL_GPIO_Init+0x300>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	43db      	mvns	r3, r3
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4013      	ands	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005334:	4a30      	ldr	r2, [pc, #192]	; (80053f8 <HAL_GPIO_Init+0x300>)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800533a:	4b2f      	ldr	r3, [pc, #188]	; (80053f8 <HAL_GPIO_Init+0x300>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	43db      	mvns	r3, r3
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4013      	ands	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800535e:	4a26      	ldr	r2, [pc, #152]	; (80053f8 <HAL_GPIO_Init+0x300>)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005364:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <HAL_GPIO_Init+0x300>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	43db      	mvns	r3, r3
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4013      	ands	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005388:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <HAL_GPIO_Init+0x300>)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800538e:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <HAL_GPIO_Init+0x300>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	43db      	mvns	r3, r3
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4013      	ands	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80053b2:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <HAL_GPIO_Init+0x300>)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	3301      	adds	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f47f ae9d 	bne.w	8005108 <HAL_GPIO_Init+0x10>
  }
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40010000 	.word	0x40010000
 80053e4:	48000400 	.word	0x48000400
 80053e8:	48000800 	.word	0x48000800
 80053ec:	48000c00 	.word	0x48000c00
 80053f0:	48001000 	.word	0x48001000
 80053f4:	48001400 	.word	0x48001400
 80053f8:	40010400 	.word	0x40010400

080053fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	887b      	ldrh	r3, [r7, #2]
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
 8005418:	e001      	b.n	800541e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800541a:	2300      	movs	r3, #0
 800541c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	807b      	strh	r3, [r7, #2]
 8005438:	4613      	mov	r3, r2
 800543a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800543c:	787b      	ldrb	r3, [r7, #1]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005442:	887a      	ldrh	r2, [r7, #2]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005448:	e002      	b.n	8005450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800544a:	887a      	ldrh	r2, [r7, #2]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0c9      	b.n	8005606 <HAL_OPAMP_Init+0x1aa>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b05      	cmp	r3, #5
 800547c:	d101      	bne.n	8005482 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e0c1      	b.n	8005606 <HAL_OPAMP_Init+0x1aa>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d101      	bne.n	8005492 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0b9      	b.n	8005606 <HAL_OPAMP_Init+0x1aa>
    assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_OPAMP_Init+0x50>
    {
      if (hopamp->MspInitCallback == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <HAL_OPAMP_Init+0x50>
      {
        hopamp->MspInitCallback               = HAL_OPAMP_MspInit;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a59      	ldr	r2, [pc, #356]	; (8005610 <HAL_OPAMP_Init+0x1b4>)
 80054aa:	63da      	str	r2, [r3, #60]	; 0x3c
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ac:	4b59      	ldr	r3, [pc, #356]	; (8005614 <HAL_OPAMP_Init+0x1b8>)
 80054ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b0:	4a58      	ldr	r2, [pc, #352]	; (8005614 <HAL_OPAMP_Init+0x1b8>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6613      	str	r3, [r2, #96]	; 0x60
 80054b8:	4b56      	ldr	r3, [pc, #344]	; (8005614 <HAL_OPAMP_Init+0x1b8>)
 80054ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d103      	bne.n	80054d8 <HAL_OPAMP_Init+0x7c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	4798      	blx	r3

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d003      	beq.n	80054f0 <HAL_OPAMP_Init+0x94>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b60      	cmp	r3, #96	; 0x60
 80054ee:	d133      	bne.n	8005558 <HAL_OPAMP_Init+0xfc>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 0110 	bic.w	r1, r3, #16
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b42      	ldr	r3, [pc, #264]	; (8005618 <HAL_OPAMP_Init+0x1bc>)
 800550e:	4013      	ands	r3, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6851      	ldr	r1, [r2, #4]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6892      	ldr	r2, [r2, #8]
 8005518:	4311      	orrs	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6912      	ldr	r2, [r2, #16]
 800551e:	430a      	orrs	r2, r1
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	7d09      	ldrb	r1, [r1, #20]
 8005524:	2901      	cmp	r1, #1
 8005526:	d102      	bne.n	800552e <HAL_OPAMP_Init+0xd2>
 8005528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800552c:	e000      	b.n	8005530 <HAL_OPAMP_Init+0xd4>
 800552e:	2100      	movs	r1, #0
 8005530:	4311      	orrs	r1, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005536:	4311      	orrs	r1, r2
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800553c:	4311      	orrs	r1, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005542:	04d2      	lsls	r2, r2, #19
 8005544:	4311      	orrs	r1, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800554a:	0612      	lsls	r2, r2, #24
 800554c:	4311      	orrs	r1, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	430b      	orrs	r3, r1
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e035      	b.n	80055c4 <HAL_OPAMP_Init+0x168>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f023 0110 	bic.w	r1, r3, #16
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4b28      	ldr	r3, [pc, #160]	; (8005618 <HAL_OPAMP_Init+0x1bc>)
 8005576:	4013      	ands	r3, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6851      	ldr	r1, [r2, #4]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6892      	ldr	r2, [r2, #8]
 8005580:	4311      	orrs	r1, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68d2      	ldr	r2, [r2, #12]
 8005586:	4311      	orrs	r1, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6912      	ldr	r2, [r2, #16]
 800558c:	430a      	orrs	r2, r1
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	7d09      	ldrb	r1, [r1, #20]
 8005592:	2901      	cmp	r1, #1
 8005594:	d102      	bne.n	800559c <HAL_OPAMP_Init+0x140>
 8005596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800559a:	e000      	b.n	800559e <HAL_OPAMP_Init+0x142>
 800559c:	2100      	movs	r1, #0
 800559e:	4311      	orrs	r1, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80055aa:	4311      	orrs	r1, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055b0:	04d2      	lsls	r2, r2, #19
 80055b2:	4311      	orrs	r1, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055b8:	0612      	lsls	r2, r2, #24
 80055ba:	4311      	orrs	r1, r2
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	db10      	blt.n	80055f0 <HAL_OPAMP_Init+0x194>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d103      	bne.n	8005604 <HAL_OPAMP_Init+0x1a8>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	08002355 	.word	0x08002355
 8005614:	40021000 	.word	0x40021000
 8005618:	e0003e11 	.word	0xe0003e11

0800561c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d141      	bne.n	80056ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800562a:	4b4b      	ldr	r3, [pc, #300]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005636:	d131      	bne.n	800569c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005638:	4b47      	ldr	r3, [pc, #284]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563e:	4a46      	ldr	r2, [pc, #280]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005644:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005648:	4b43      	ldr	r3, [pc, #268]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005650:	4a41      	ldr	r2, [pc, #260]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005656:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005658:	4b40      	ldr	r3, [pc, #256]	; (800575c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2232      	movs	r2, #50	; 0x32
 800565e:	fb02 f303 	mul.w	r3, r2, r3
 8005662:	4a3f      	ldr	r2, [pc, #252]	; (8005760 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005664:	fba2 2303 	umull	r2, r3, r2, r3
 8005668:	0c9b      	lsrs	r3, r3, #18
 800566a:	3301      	adds	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800566e:	e002      	b.n	8005676 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3b01      	subs	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005676:	4b38      	ldr	r3, [pc, #224]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005682:	d102      	bne.n	800568a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f2      	bne.n	8005670 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800568a:	4b33      	ldr	r3, [pc, #204]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005696:	d158      	bne.n	800574a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e057      	b.n	800574c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800569c:	4b2e      	ldr	r3, [pc, #184]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	4a2d      	ldr	r2, [pc, #180]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80056ac:	e04d      	b.n	800574a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b4:	d141      	bne.n	800573a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056b6:	4b28      	ldr	r3, [pc, #160]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c2:	d131      	bne.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056c4:	4b24      	ldr	r3, [pc, #144]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ca:	4a23      	ldr	r2, [pc, #140]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056d4:	4b20      	ldr	r3, [pc, #128]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056dc:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056e4:	4b1d      	ldr	r3, [pc, #116]	; (800575c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2232      	movs	r2, #50	; 0x32
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	4a1c      	ldr	r2, [pc, #112]	; (8005760 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056f0:	fba2 2303 	umull	r2, r3, r2, r3
 80056f4:	0c9b      	lsrs	r3, r3, #18
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056fa:	e002      	b.n	8005702 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b01      	subs	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570e:	d102      	bne.n	8005716 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f2      	bne.n	80056fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005716:	4b10      	ldr	r3, [pc, #64]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005722:	d112      	bne.n	800574a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e011      	b.n	800574c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800572a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800572e:	4a0a      	ldr	r2, [pc, #40]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005738:	e007      	b.n	800574a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800573a:	4b07      	ldr	r3, [pc, #28]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005742:	4a05      	ldr	r2, [pc, #20]	; (8005758 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005744:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005748:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40007000 	.word	0x40007000
 800575c:	20000000 	.word	0x20000000
 8005760:	431bde83 	.word	0x431bde83

08005764 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800576c:	f7fd fa8e 	bl	8002c8c <HAL_GetTick>
 8005770:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e08f      	b.n	800589c <HAL_QSPI_Init+0x138>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d131      	bne.n	80057ec <HAL_QSPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    /* Reset Callback pointers in HAL_QSPI_STATE_RESET only */
    hqspi->ErrorCallback         = HAL_QSPI_ErrorCallback;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a44      	ldr	r2, [pc, #272]	; (80058a4 <HAL_QSPI_Init+0x140>)
 8005794:	64da      	str	r2, [r3, #76]	; 0x4c
    hqspi->AbortCpltCallback     = HAL_QSPI_AbortCpltCallback;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a43      	ldr	r2, [pc, #268]	; (80058a8 <HAL_QSPI_Init+0x144>)
 800579a:	651a      	str	r2, [r3, #80]	; 0x50
    hqspi->FifoThresholdCallback = HAL_QSPI_FifoThresholdCallback;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a43      	ldr	r2, [pc, #268]	; (80058ac <HAL_QSPI_Init+0x148>)
 80057a0:	655a      	str	r2, [r3, #84]	; 0x54
    hqspi->CmdCpltCallback       = HAL_QSPI_CmdCpltCallback;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a42      	ldr	r2, [pc, #264]	; (80058b0 <HAL_QSPI_Init+0x14c>)
 80057a6:	659a      	str	r2, [r3, #88]	; 0x58
    hqspi->RxCpltCallback        = HAL_QSPI_RxCpltCallback;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a42      	ldr	r2, [pc, #264]	; (80058b4 <HAL_QSPI_Init+0x150>)
 80057ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hqspi->TxCpltCallback        = HAL_QSPI_TxCpltCallback;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a41      	ldr	r2, [pc, #260]	; (80058b8 <HAL_QSPI_Init+0x154>)
 80057b2:	661a      	str	r2, [r3, #96]	; 0x60
    hqspi->RxHalfCpltCallback    = HAL_QSPI_RxHalfCpltCallback;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a41      	ldr	r2, [pc, #260]	; (80058bc <HAL_QSPI_Init+0x158>)
 80057b8:	665a      	str	r2, [r3, #100]	; 0x64
    hqspi->TxHalfCpltCallback    = HAL_QSPI_TxHalfCpltCallback;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a40      	ldr	r2, [pc, #256]	; (80058c0 <HAL_QSPI_Init+0x15c>)
 80057be:	669a      	str	r2, [r3, #104]	; 0x68
    hqspi->StatusMatchCallback   = HAL_QSPI_StatusMatchCallback;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a40      	ldr	r2, [pc, #256]	; (80058c4 <HAL_QSPI_Init+0x160>)
 80057c4:	66da      	str	r2, [r3, #108]	; 0x6c
    hqspi->TimeOutCallback       = HAL_QSPI_TimeOutCallback;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a3f      	ldr	r2, [pc, #252]	; (80058c8 <HAL_QSPI_Init+0x164>)
 80057ca:	671a      	str	r2, [r3, #112]	; 0x70

    if(hqspi->MspInitCallback == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <HAL_QSPI_Init+0x76>
    {
      hqspi->MspInitCallback = HAL_QSPI_MspInit;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a3d      	ldr	r2, [pc, #244]	; (80058cc <HAL_QSPI_Init+0x168>)
 80057d8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80057e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f8d8 	bl	800599c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	021a      	lsls	r2, r3, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	2120      	movs	r1, #32
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8d0 	bl	80059b8 <QSPI_WaitFlagStateUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800581c:	7afb      	ldrb	r3, [r7, #11]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d137      	bne.n	8005892 <HAL_QSPI_Init+0x12e>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800582c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6852      	ldr	r2, [r2, #4]
 8005834:	0611      	lsls	r1, r2, #24
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68d2      	ldr	r2, [r2, #12]
 800583a:	4311      	orrs	r1, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	69d2      	ldr	r2, [r2, #28]
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6a12      	ldr	r2, [r2, #32]
 8005846:	4311      	orrs	r1, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	430b      	orrs	r3, r1
 800584e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <HAL_QSPI_Init+0x16c>)
 8005858:	4013      	ands	r3, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6912      	ldr	r2, [r2, #16]
 800585e:	0411      	lsls	r1, r2, #16
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6952      	ldr	r2, [r2, #20]
 8005864:	4311      	orrs	r1, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6992      	ldr	r2, [r2, #24]
 800586a:	4311      	orrs	r1, r2
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	430b      	orrs	r3, r1
 8005872:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800589a:	7afb      	ldrb	r3, [r7, #11]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	080058d5 	.word	0x080058d5
 80058a8:	080058e9 	.word	0x080058e9
 80058ac:	08005961 	.word	0x08005961
 80058b0:	080058fd 	.word	0x080058fd
 80058b4:	08005911 	.word	0x08005911
 80058b8:	08005925 	.word	0x08005925
 80058bc:	08005939 	.word	0x08005939
 80058c0:	0800594d 	.word	0x0800594d
 80058c4:	08005975 	.word	0x08005975
 80058c8:	08005989 	.word	0x08005989
 80058cc:	080024c5 	.word	0x080024c5
 80058d0:	ffe0f8fe 	.word	0xffe0f8fe

080058d4 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_QSPI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_QSPI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	649a      	str	r2, [r3, #72]	; 0x48
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80059c8:	e01a      	b.n	8005a00 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059d0:	d016      	beq.n	8005a00 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d2:	f7fd f95b 	bl	8002c8c <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d302      	bcc.n	80059e8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10b      	bne.n	8005a00 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2204      	movs	r2, #4
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f4:	f043 0201 	orr.w	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e00e      	b.n	8005a1e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	bf14      	ite	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	2300      	moveq	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d1d6      	bne.n	80059ca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e2fe      	b.n	8006038 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d075      	beq.n	8005b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a46:	4b97      	ldr	r3, [pc, #604]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a50:	4b94      	ldr	r3, [pc, #592]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b0c      	cmp	r3, #12
 8005a5e:	d102      	bne.n	8005a66 <HAL_RCC_OscConfig+0x3e>
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d002      	beq.n	8005a6c <HAL_RCC_OscConfig+0x44>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d10b      	bne.n	8005a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6c:	4b8d      	ldr	r3, [pc, #564]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d05b      	beq.n	8005b30 <HAL_RCC_OscConfig+0x108>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d157      	bne.n	8005b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e2d9      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d106      	bne.n	8005a9c <HAL_RCC_OscConfig+0x74>
 8005a8e:	4b85      	ldr	r3, [pc, #532]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a84      	ldr	r2, [pc, #528]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e01d      	b.n	8005ad8 <HAL_RCC_OscConfig+0xb0>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x98>
 8005aa6:	4b7f      	ldr	r3, [pc, #508]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a7e      	ldr	r2, [pc, #504]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b7c      	ldr	r3, [pc, #496]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a7b      	ldr	r2, [pc, #492]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0xb0>
 8005ac0:	4b78      	ldr	r3, [pc, #480]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a77      	ldr	r2, [pc, #476]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	4b75      	ldr	r3, [pc, #468]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a74      	ldr	r2, [pc, #464]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d013      	beq.n	8005b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fd f8d4 	bl	8002c8c <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae8:	f7fd f8d0 	bl	8002c8c <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b64      	cmp	r3, #100	; 0x64
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e29e      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005afa:	4b6a      	ldr	r3, [pc, #424]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0xc0>
 8005b06:	e014      	b.n	8005b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fd f8c0 	bl	8002c8c <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b10:	f7fd f8bc 	bl	8002c8c <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	; 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e28a      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b22:	4b60      	ldr	r3, [pc, #384]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0xe8>
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d075      	beq.n	8005c2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b3e:	4b59      	ldr	r3, [pc, #356]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b48:	4b56      	ldr	r3, [pc, #344]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b0c      	cmp	r3, #12
 8005b56:	d102      	bne.n	8005b5e <HAL_RCC_OscConfig+0x136>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d002      	beq.n	8005b64 <HAL_RCC_OscConfig+0x13c>
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d11f      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b64:	4b4f      	ldr	r3, [pc, #316]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCC_OscConfig+0x154>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e25d      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7c:	4b49      	ldr	r3, [pc, #292]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	4946      	ldr	r1, [pc, #280]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b90:	4b45      	ldr	r3, [pc, #276]	; (8005ca8 <HAL_RCC_OscConfig+0x280>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fc ff27 	bl	80029e8 <HAL_InitTick>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d043      	beq.n	8005c28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e249      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d023      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bac:	4b3d      	ldr	r3, [pc, #244]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a3c      	ldr	r2, [pc, #240]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb8:	f7fd f868 	bl	8002c8c <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bc0:	f7fd f864 	bl	8002c8c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e232      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bd2:	4b34      	ldr	r3, [pc, #208]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bde:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	061b      	lsls	r3, r3, #24
 8005bec:	492d      	ldr	r1, [pc, #180]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	604b      	str	r3, [r1, #4]
 8005bf2:	e01a      	b.n	8005c2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bf4:	4b2b      	ldr	r3, [pc, #172]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fd f844 	bl	8002c8c <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c08:	f7fd f840 	bl	8002c8c <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e20e      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c1a:	4b22      	ldr	r3, [pc, #136]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x1e0>
 8005c26:	e000      	b.n	8005c2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d041      	beq.n	8005cba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01c      	beq.n	8005c78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3e:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c44:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4e:	f7fd f81d 	bl	8002c8c <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c56:	f7fd f819 	bl	8002c8c <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e1e7      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c68:	4b0e      	ldr	r3, [pc, #56]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0ef      	beq.n	8005c56 <HAL_RCC_OscConfig+0x22e>
 8005c76:	e020      	b.n	8005cba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c7e:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <HAL_RCC_OscConfig+0x27c>)
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c88:	f7fd f800 	bl	8002c8c <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c8e:	e00d      	b.n	8005cac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c90:	f7fc fffc 	bl	8002c8c <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d906      	bls.n	8005cac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e1ca      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
 8005ca2:	bf00      	nop
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cac:	4b8c      	ldr	r3, [pc, #560]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1ea      	bne.n	8005c90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80a6 	beq.w	8005e14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ccc:	4b84      	ldr	r3, [pc, #528]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_RCC_OscConfig+0x2b4>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <HAL_RCC_OscConfig+0x2b6>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00d      	beq.n	8005cfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ce2:	4b7f      	ldr	r3, [pc, #508]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce6:	4a7e      	ldr	r2, [pc, #504]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cec:	6593      	str	r3, [r2, #88]	; 0x58
 8005cee:	4b7c      	ldr	r3, [pc, #496]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cfe:	4b79      	ldr	r3, [pc, #484]	; (8005ee4 <HAL_RCC_OscConfig+0x4bc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d118      	bne.n	8005d3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d0a:	4b76      	ldr	r3, [pc, #472]	; (8005ee4 <HAL_RCC_OscConfig+0x4bc>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a75      	ldr	r2, [pc, #468]	; (8005ee4 <HAL_RCC_OscConfig+0x4bc>)
 8005d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d16:	f7fc ffb9 	bl	8002c8c <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1e:	f7fc ffb5 	bl	8002c8c <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e183      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d30:	4b6c      	ldr	r3, [pc, #432]	; (8005ee4 <HAL_RCC_OscConfig+0x4bc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d108      	bne.n	8005d56 <HAL_RCC_OscConfig+0x32e>
 8005d44:	4b66      	ldr	r3, [pc, #408]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4a:	4a65      	ldr	r2, [pc, #404]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005d4c:	f043 0301 	orr.w	r3, r3, #1
 8005d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d54:	e024      	b.n	8005da0 <HAL_RCC_OscConfig+0x378>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b05      	cmp	r3, #5
 8005d5c:	d110      	bne.n	8005d80 <HAL_RCC_OscConfig+0x358>
 8005d5e:	4b60      	ldr	r3, [pc, #384]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d64:	4a5e      	ldr	r2, [pc, #376]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005d66:	f043 0304 	orr.w	r3, r3, #4
 8005d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d6e:	4b5c      	ldr	r3, [pc, #368]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d74:	4a5a      	ldr	r2, [pc, #360]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d7e:	e00f      	b.n	8005da0 <HAL_RCC_OscConfig+0x378>
 8005d80:	4b57      	ldr	r3, [pc, #348]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	4a56      	ldr	r2, [pc, #344]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d90:	4b53      	ldr	r3, [pc, #332]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d96:	4a52      	ldr	r2, [pc, #328]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005d98:	f023 0304 	bic.w	r3, r3, #4
 8005d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d016      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da8:	f7fc ff70 	bl	8002c8c <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dae:	e00a      	b.n	8005dc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db0:	f7fc ff6c 	bl	8002c8c <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e138      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dc6:	4b46      	ldr	r3, [pc, #280]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0ed      	beq.n	8005db0 <HAL_RCC_OscConfig+0x388>
 8005dd4:	e015      	b.n	8005e02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd6:	f7fc ff59 	bl	8002c8c <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ddc:	e00a      	b.n	8005df4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dde:	f7fc ff55 	bl	8002c8c <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e121      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005df4:	4b3a      	ldr	r3, [pc, #232]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1ed      	bne.n	8005dde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e02:	7ffb      	ldrb	r3, [r7, #31]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d105      	bne.n	8005e14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e08:	4b35      	ldr	r3, [pc, #212]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	4a34      	ldr	r2, [pc, #208]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d03c      	beq.n	8005e9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01c      	beq.n	8005e62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e28:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e2e:	4a2c      	ldr	r2, [pc, #176]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fc ff28 	bl	8002c8c <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e40:	f7fc ff24 	bl	8002c8c <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e0f2      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e52:	4b23      	ldr	r3, [pc, #140]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0ef      	beq.n	8005e40 <HAL_RCC_OscConfig+0x418>
 8005e60:	e01b      	b.n	8005e9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e62:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005e6a:	f023 0301 	bic.w	r3, r3, #1
 8005e6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e72:	f7fc ff0b 	bl	8002c8c <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e7a:	f7fc ff07 	bl	8002c8c <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e0d5      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e8c:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1ef      	bne.n	8005e7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80c9 	beq.w	8006036 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ea4:	4b0e      	ldr	r3, [pc, #56]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 030c 	and.w	r3, r3, #12
 8005eac:	2b0c      	cmp	r3, #12
 8005eae:	f000 8083 	beq.w	8005fb8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d15e      	bne.n	8005f78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <HAL_RCC_OscConfig+0x4b8>)
 8005ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec6:	f7fc fee1 	bl	8002c8c <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ecc:	e00c      	b.n	8005ee8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ece:	f7fc fedd 	bl	8002c8c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d905      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e0ab      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ee8:	4b55      	ldr	r3, [pc, #340]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1ec      	bne.n	8005ece <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ef4:	4b52      	ldr	r3, [pc, #328]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	4b52      	ldr	r3, [pc, #328]	; (8006044 <HAL_RCC_OscConfig+0x61c>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6a11      	ldr	r1, [r2, #32]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f04:	3a01      	subs	r2, #1
 8005f06:	0112      	lsls	r2, r2, #4
 8005f08:	4311      	orrs	r1, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005f0e:	0212      	lsls	r2, r2, #8
 8005f10:	4311      	orrs	r1, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f16:	0852      	lsrs	r2, r2, #1
 8005f18:	3a01      	subs	r2, #1
 8005f1a:	0552      	lsls	r2, r2, #21
 8005f1c:	4311      	orrs	r1, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f22:	0852      	lsrs	r2, r2, #1
 8005f24:	3a01      	subs	r2, #1
 8005f26:	0652      	lsls	r2, r2, #25
 8005f28:	4311      	orrs	r1, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f2e:	06d2      	lsls	r2, r2, #27
 8005f30:	430a      	orrs	r2, r1
 8005f32:	4943      	ldr	r1, [pc, #268]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f38:	4b41      	ldr	r3, [pc, #260]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a40      	ldr	r2, [pc, #256]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f44:	4b3e      	ldr	r3, [pc, #248]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4a3d      	ldr	r2, [pc, #244]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fc fe9c 	bl	8002c8c <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fc fe98 	bl	8002c8c <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e066      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f6a:	4b35      	ldr	r3, [pc, #212]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0f0      	beq.n	8005f58 <HAL_RCC_OscConfig+0x530>
 8005f76:	e05e      	b.n	8006036 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f78:	4b31      	ldr	r3, [pc, #196]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a30      	ldr	r2, [pc, #192]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f84:	f7fc fe82 	bl	8002c8c <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8c:	f7fc fe7e 	bl	8002c8c <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e04c      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f9e:	4b28      	ldr	r3, [pc, #160]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f0      	bne.n	8005f8c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005faa:	4b25      	ldr	r3, [pc, #148]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	4924      	ldr	r1, [pc, #144]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005fb0:	4b25      	ldr	r3, [pc, #148]	; (8006048 <HAL_RCC_OscConfig+0x620>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	60cb      	str	r3, [r1, #12]
 8005fb6:	e03e      	b.n	8006036 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e039      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005fc4:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <HAL_RCC_OscConfig+0x618>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f003 0203 	and.w	r2, r3, #3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d12c      	bne.n	8006032 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d123      	bne.n	8006032 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d11b      	bne.n	8006032 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006006:	429a      	cmp	r2, r3
 8006008:	d113      	bne.n	8006032 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	3b01      	subs	r3, #1
 8006018:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800601a:	429a      	cmp	r2, r3
 800601c:	d109      	bne.n	8006032 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	3b01      	subs	r3, #1
 800602c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800602e:	429a      	cmp	r2, r3
 8006030:	d001      	beq.n	8006036 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3720      	adds	r7, #32
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40021000 	.word	0x40021000
 8006044:	019f800c 	.word	0x019f800c
 8006048:	feeefffc 	.word	0xfeeefffc

0800604c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e11e      	b.n	80062a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006064:	4b91      	ldr	r3, [pc, #580]	; (80062ac <HAL_RCC_ClockConfig+0x260>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d910      	bls.n	8006094 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006072:	4b8e      	ldr	r3, [pc, #568]	; (80062ac <HAL_RCC_ClockConfig+0x260>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f023 020f 	bic.w	r2, r3, #15
 800607a:	498c      	ldr	r1, [pc, #560]	; (80062ac <HAL_RCC_ClockConfig+0x260>)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	4313      	orrs	r3, r2
 8006080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006082:	4b8a      	ldr	r3, [pc, #552]	; (80062ac <HAL_RCC_ClockConfig+0x260>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d001      	beq.n	8006094 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e106      	b.n	80062a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d073      	beq.n	8006188 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d129      	bne.n	80060fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060a8:	4b81      	ldr	r3, [pc, #516]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e0f4      	b.n	80062a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80060b8:	f000 f9fa 	bl	80064b0 <RCC_GetSysClockFreqFromPLLSource>
 80060bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4a7c      	ldr	r2, [pc, #496]	; (80062b4 <HAL_RCC_ClockConfig+0x268>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d93f      	bls.n	8006146 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80060c6:	4b7a      	ldr	r3, [pc, #488]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d033      	beq.n	8006146 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d12f      	bne.n	8006146 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060e6:	4b72      	ldr	r3, [pc, #456]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ee:	4a70      	ldr	r2, [pc, #448]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80060f6:	2380      	movs	r3, #128	; 0x80
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	e024      	b.n	8006146 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d107      	bne.n	8006114 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006104:	4b6a      	ldr	r3, [pc, #424]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0c6      	b.n	80062a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006114:	4b66      	ldr	r3, [pc, #408]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0be      	b.n	80062a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006124:	f000 f8ce 	bl	80062c4 <HAL_RCC_GetSysClockFreq>
 8006128:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4a61      	ldr	r2, [pc, #388]	; (80062b4 <HAL_RCC_ClockConfig+0x268>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d909      	bls.n	8006146 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006132:	4b5f      	ldr	r3, [pc, #380]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800613a:	4a5d      	ldr	r2, [pc, #372]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 800613c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006140:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006146:	4b5a      	ldr	r3, [pc, #360]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f023 0203 	bic.w	r2, r3, #3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4957      	ldr	r1, [pc, #348]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 8006154:	4313      	orrs	r3, r2
 8006156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006158:	f7fc fd98 	bl	8002c8c <HAL_GetTick>
 800615c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615e:	e00a      	b.n	8006176 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006160:	f7fc fd94 	bl	8002c8c <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	; 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e095      	b.n	80062a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006176:	4b4e      	ldr	r3, [pc, #312]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 020c 	and.w	r2, r3, #12
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	429a      	cmp	r2, r3
 8006186:	d1eb      	bne.n	8006160 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d023      	beq.n	80061dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061a0:	4b43      	ldr	r3, [pc, #268]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	4a42      	ldr	r2, [pc, #264]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80061a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80061b8:	4b3d      	ldr	r3, [pc, #244]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061c0:	4a3b      	ldr	r2, [pc, #236]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80061c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c8:	4b39      	ldr	r3, [pc, #228]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	4936      	ldr	r1, [pc, #216]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	608b      	str	r3, [r1, #8]
 80061da:	e008      	b.n	80061ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b80      	cmp	r3, #128	; 0x80
 80061e0:	d105      	bne.n	80061ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80061e2:	4b33      	ldr	r3, [pc, #204]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	4a32      	ldr	r2, [pc, #200]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 80061e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061ee:	4b2f      	ldr	r3, [pc, #188]	; (80062ac <HAL_RCC_ClockConfig+0x260>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d21d      	bcs.n	8006238 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fc:	4b2b      	ldr	r3, [pc, #172]	; (80062ac <HAL_RCC_ClockConfig+0x260>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f023 020f 	bic.w	r2, r3, #15
 8006204:	4929      	ldr	r1, [pc, #164]	; (80062ac <HAL_RCC_ClockConfig+0x260>)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	4313      	orrs	r3, r2
 800620a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800620c:	f7fc fd3e 	bl	8002c8c <HAL_GetTick>
 8006210:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006212:	e00a      	b.n	800622a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006214:	f7fc fd3a 	bl	8002c8c <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006222:	4293      	cmp	r3, r2
 8006224:	d901      	bls.n	800622a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e03b      	b.n	80062a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800622a:	4b20      	ldr	r3, [pc, #128]	; (80062ac <HAL_RCC_ClockConfig+0x260>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d1ed      	bne.n	8006214 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006244:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	4917      	ldr	r1, [pc, #92]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 8006252:	4313      	orrs	r3, r2
 8006254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006262:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	490f      	ldr	r1, [pc, #60]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 8006272:	4313      	orrs	r3, r2
 8006274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006276:	f000 f825 	bl	80062c4 <HAL_RCC_GetSysClockFreq>
 800627a:	4602      	mov	r2, r0
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <HAL_RCC_ClockConfig+0x264>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	490c      	ldr	r1, [pc, #48]	; (80062b8 <HAL_RCC_ClockConfig+0x26c>)
 8006288:	5ccb      	ldrb	r3, [r1, r3]
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	fa22 f303 	lsr.w	r3, r2, r3
 8006292:	4a0a      	ldr	r2, [pc, #40]	; (80062bc <HAL_RCC_ClockConfig+0x270>)
 8006294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006296:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <HAL_RCC_ClockConfig+0x274>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7fc fba4 	bl	80029e8 <HAL_InitTick>
 80062a0:	4603      	mov	r3, r0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40022000 	.word	0x40022000
 80062b0:	40021000 	.word	0x40021000
 80062b4:	04c4b400 	.word	0x04c4b400
 80062b8:	08010474 	.word	0x08010474
 80062bc:	20000000 	.word	0x20000000
 80062c0:	20000004 	.word	0x20000004

080062c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80062ca:	4b2c      	ldr	r3, [pc, #176]	; (800637c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 030c 	and.w	r3, r3, #12
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d102      	bne.n	80062dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062d6:	4b2a      	ldr	r3, [pc, #168]	; (8006380 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	e047      	b.n	800636c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80062dc:	4b27      	ldr	r3, [pc, #156]	; (800637c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 030c 	and.w	r3, r3, #12
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d102      	bne.n	80062ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062e8:	4b25      	ldr	r3, [pc, #148]	; (8006380 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	e03e      	b.n	800636c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80062ee:	4b23      	ldr	r3, [pc, #140]	; (800637c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b0c      	cmp	r3, #12
 80062f8:	d136      	bne.n	8006368 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062fa:	4b20      	ldr	r3, [pc, #128]	; (800637c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006304:	4b1d      	ldr	r3, [pc, #116]	; (800637c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	091b      	lsrs	r3, r3, #4
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	3301      	adds	r3, #1
 8006310:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b03      	cmp	r3, #3
 8006316:	d10c      	bne.n	8006332 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006318:	4a19      	ldr	r2, [pc, #100]	; (8006380 <HAL_RCC_GetSysClockFreq+0xbc>)
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006320:	4a16      	ldr	r2, [pc, #88]	; (800637c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006322:	68d2      	ldr	r2, [r2, #12]
 8006324:	0a12      	lsrs	r2, r2, #8
 8006326:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800632a:	fb02 f303 	mul.w	r3, r2, r3
 800632e:	617b      	str	r3, [r7, #20]
      break;
 8006330:	e00c      	b.n	800634c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006332:	4a13      	ldr	r2, [pc, #76]	; (8006380 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	fbb2 f3f3 	udiv	r3, r2, r3
 800633a:	4a10      	ldr	r2, [pc, #64]	; (800637c <HAL_RCC_GetSysClockFreq+0xb8>)
 800633c:	68d2      	ldr	r2, [r2, #12]
 800633e:	0a12      	lsrs	r2, r2, #8
 8006340:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006344:	fb02 f303 	mul.w	r3, r2, r3
 8006348:	617b      	str	r3, [r7, #20]
      break;
 800634a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <HAL_RCC_GetSysClockFreq+0xb8>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	0e5b      	lsrs	r3, r3, #25
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	3301      	adds	r3, #1
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	e001      	b.n	800636c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800636c:	693b      	ldr	r3, [r7, #16]
}
 800636e:	4618      	mov	r0, r3
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40021000 	.word	0x40021000
 8006380:	00f42400 	.word	0x00f42400

08006384 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006388:	4b03      	ldr	r3, [pc, #12]	; (8006398 <HAL_RCC_GetHCLKFreq+0x14>)
 800638a:	681b      	ldr	r3, [r3, #0]
}
 800638c:	4618      	mov	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000000 	.word	0x20000000

0800639c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063a0:	f7ff fff0 	bl	8006384 <HAL_RCC_GetHCLKFreq>
 80063a4:	4602      	mov	r2, r0
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	0a1b      	lsrs	r3, r3, #8
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	4904      	ldr	r1, [pc, #16]	; (80063c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063b2:	5ccb      	ldrb	r3, [r1, r3]
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063bc:	4618      	mov	r0, r3
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40021000 	.word	0x40021000
 80063c4:	08010484 	.word	0x08010484

080063c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063cc:	f7ff ffda 	bl	8006384 <HAL_RCC_GetHCLKFreq>
 80063d0:	4602      	mov	r2, r0
 80063d2:	4b06      	ldr	r3, [pc, #24]	; (80063ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	0adb      	lsrs	r3, r3, #11
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	4904      	ldr	r1, [pc, #16]	; (80063f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063de:	5ccb      	ldrb	r3, [r1, r3]
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40021000 	.word	0x40021000
 80063f0:	08010484 	.word	0x08010484

080063f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	220f      	movs	r2, #15
 8006402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006404:	4b12      	ldr	r3, [pc, #72]	; (8006450 <HAL_RCC_GetClockConfig+0x5c>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0203 	and.w	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <HAL_RCC_GetClockConfig+0x5c>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800641c:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <HAL_RCC_GetClockConfig+0x5c>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <HAL_RCC_GetClockConfig+0x5c>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	08db      	lsrs	r3, r3, #3
 800642e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006436:	4b07      	ldr	r3, [pc, #28]	; (8006454 <HAL_RCC_GetClockConfig+0x60>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 020f 	and.w	r2, r3, #15
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	601a      	str	r2, [r3, #0]
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000
 8006454:	40022000 	.word	0x40022000

08006458 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <HAL_RCC_EnableCSS+0x1c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a04      	ldr	r2, [pc, #16]	; (8006474 <HAL_RCC_EnableCSS+0x1c>)
 8006462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006466:	6013      	str	r3, [r2, #0]
}
 8006468:	bf00      	nop
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40021000 	.word	0x40021000

08006478 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800647c:	4b07      	ldr	r3, [pc, #28]	; (800649c <HAL_RCC_NMI_IRQHandler+0x24>)
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006488:	d105      	bne.n	8006496 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800648a:	f000 f809 	bl	80064a0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800648e:	4b03      	ldr	r3, [pc, #12]	; (800649c <HAL_RCC_NMI_IRQHandler+0x24>)
 8006490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006494:	621a      	str	r2, [r3, #32]
  }
}
 8006496:	bf00      	nop
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40021000 	.word	0x40021000

080064a0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
	...

080064b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064b6:	4b1e      	ldr	r3, [pc, #120]	; (8006530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064c0:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	3301      	adds	r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d10c      	bne.n	80064ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064d4:	4a17      	ldr	r2, [pc, #92]	; (8006534 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064dc:	4a14      	ldr	r2, [pc, #80]	; (8006530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064de:	68d2      	ldr	r2, [r2, #12]
 80064e0:	0a12      	lsrs	r2, r2, #8
 80064e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064e6:	fb02 f303 	mul.w	r3, r2, r3
 80064ea:	617b      	str	r3, [r7, #20]
    break;
 80064ec:	e00c      	b.n	8006508 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064ee:	4a11      	ldr	r2, [pc, #68]	; (8006534 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f6:	4a0e      	ldr	r2, [pc, #56]	; (8006530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064f8:	68d2      	ldr	r2, [r2, #12]
 80064fa:	0a12      	lsrs	r2, r2, #8
 80064fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006500:	fb02 f303 	mul.w	r3, r2, r3
 8006504:	617b      	str	r3, [r7, #20]
    break;
 8006506:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006508:	4b09      	ldr	r3, [pc, #36]	; (8006530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	0e5b      	lsrs	r3, r3, #25
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	3301      	adds	r3, #1
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006522:	687b      	ldr	r3, [r7, #4]
}
 8006524:	4618      	mov	r0, r3
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	40021000 	.word	0x40021000
 8006534:	00f42400 	.word	0x00f42400

08006538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006540:	2300      	movs	r3, #0
 8006542:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006544:	2300      	movs	r3, #0
 8006546:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 8098 	beq.w	8006686 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006556:	2300      	movs	r3, #0
 8006558:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800655a:	4b43      	ldr	r3, [pc, #268]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800655c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10d      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006566:	4b40      	ldr	r3, [pc, #256]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656a:	4a3f      	ldr	r2, [pc, #252]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800656c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006570:	6593      	str	r3, [r2, #88]	; 0x58
 8006572:	4b3d      	ldr	r3, [pc, #244]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800657e:	2301      	movs	r3, #1
 8006580:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006582:	4b3a      	ldr	r3, [pc, #232]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a39      	ldr	r2, [pc, #228]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800658e:	f7fc fb7d 	bl	8002c8c <HAL_GetTick>
 8006592:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006594:	e009      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006596:	f7fc fb79 	bl	8002c8c <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d902      	bls.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	74fb      	strb	r3, [r7, #19]
        break;
 80065a8:	e005      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065aa:	4b30      	ldr	r3, [pc, #192]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0ef      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80065b6:	7cfb      	ldrb	r3, [r7, #19]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d159      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065bc:	4b2a      	ldr	r3, [pc, #168]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01e      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d019      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065d8:	4b23      	ldr	r3, [pc, #140]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065e4:	4b20      	ldr	r3, [pc, #128]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065f4:	4b1c      	ldr	r3, [pc, #112]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fa:	4a1b      	ldr	r2, [pc, #108]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006604:	4a18      	ldr	r2, [pc, #96]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d016      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006616:	f7fc fb39 	bl	8002c8c <HAL_GetTick>
 800661a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800661c:	e00b      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800661e:	f7fc fb35 	bl	8002c8c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	f241 3288 	movw	r2, #5000	; 0x1388
 800662c:	4293      	cmp	r3, r2
 800662e:	d902      	bls.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	74fb      	strb	r3, [r7, #19]
            break;
 8006634:	e006      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0ec      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006644:	7cfb      	ldrb	r3, [r7, #19]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800664c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006658:	4903      	ldr	r1, [pc, #12]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006660:	e008      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	74bb      	strb	r3, [r7, #18]
 8006666:	e005      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006668:	40021000 	.word	0x40021000
 800666c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	7cfb      	ldrb	r3, [r7, #19]
 8006672:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006674:	7c7b      	ldrb	r3, [r7, #17]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d105      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800667a:	4ba7      	ldr	r3, [pc, #668]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667e:	4aa6      	ldr	r2, [pc, #664]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006684:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006692:	4ba1      	ldr	r3, [pc, #644]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006698:	f023 0203 	bic.w	r2, r3, #3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	499d      	ldr	r1, [pc, #628]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00a      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066b4:	4b98      	ldr	r3, [pc, #608]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	f023 020c 	bic.w	r2, r3, #12
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	4995      	ldr	r1, [pc, #596]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066d6:	4b90      	ldr	r3, [pc, #576]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	498c      	ldr	r1, [pc, #560]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066f8:	4b87      	ldr	r3, [pc, #540]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	4984      	ldr	r1, [pc, #528]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800671a:	4b7f      	ldr	r3, [pc, #508]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	497b      	ldr	r1, [pc, #492]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800673c:	4b76      	ldr	r3, [pc, #472]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006742:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	4973      	ldr	r1, [pc, #460]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800675e:	4b6e      	ldr	r3, [pc, #440]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	496a      	ldr	r1, [pc, #424]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006780:	4b65      	ldr	r3, [pc, #404]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006786:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	4962      	ldr	r1, [pc, #392]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067a2:	4b5d      	ldr	r3, [pc, #372]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	4959      	ldr	r1, [pc, #356]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067c4:	4b54      	ldr	r3, [pc, #336]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067ca:	f023 0203 	bic.w	r2, r3, #3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	4951      	ldr	r1, [pc, #324]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067e6:	4b4c      	ldr	r3, [pc, #304]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	4948      	ldr	r1, [pc, #288]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006804:	2b00      	cmp	r3, #0
 8006806:	d015      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006808:	4b43      	ldr	r3, [pc, #268]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	4940      	ldr	r1, [pc, #256]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006818:	4313      	orrs	r3, r2
 800681a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006826:	d105      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006828:	4b3b      	ldr	r3, [pc, #236]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4a3a      	ldr	r2, [pc, #232]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800682e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006832:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800683c:	2b00      	cmp	r3, #0
 800683e:	d015      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006840:	4b35      	ldr	r3, [pc, #212]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006846:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684e:	4932      	ldr	r1, [pc, #200]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800685e:	d105      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006860:	4b2d      	ldr	r3, [pc, #180]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	4a2c      	ldr	r2, [pc, #176]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800686a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d015      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006878:	4b27      	ldr	r3, [pc, #156]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	4924      	ldr	r1, [pc, #144]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006888:	4313      	orrs	r3, r2
 800688a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006896:	d105      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006898:	4b1f      	ldr	r3, [pc, #124]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	4a1e      	ldr	r2, [pc, #120]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800689e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d015      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068b0:	4b19      	ldr	r3, [pc, #100]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068be:	4916      	ldr	r1, [pc, #88]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068ce:	d105      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068d0:	4b11      	ldr	r3, [pc, #68]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	4a10      	ldr	r2, [pc, #64]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d019      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068e8:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	4908      	ldr	r1, [pc, #32]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006906:	d109      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006908:	4b03      	ldr	r3, [pc, #12]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	4a02      	ldr	r2, [pc, #8]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800690e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006912:	60d3      	str	r3, [r2, #12]
 8006914:	e002      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006916:	bf00      	nop
 8006918:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d015      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006928:	4b29      	ldr	r3, [pc, #164]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	4926      	ldr	r1, [pc, #152]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006938:	4313      	orrs	r3, r2
 800693a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006946:	d105      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006948:	4b21      	ldr	r3, [pc, #132]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	4a20      	ldr	r2, [pc, #128]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800694e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006952:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d015      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006960:	4b1b      	ldr	r3, [pc, #108]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006966:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696e:	4918      	ldr	r1, [pc, #96]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006970:	4313      	orrs	r3, r2
 8006972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800697a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697e:	d105      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006980:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4a12      	ldr	r2, [pc, #72]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800698a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d015      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006998:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800699a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800699e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a6:	490a      	ldr	r1, [pc, #40]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069b6:	d105      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80069c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	40021000 	.word	0x40021000

080069d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e0c1      	b.n	8006b6a <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d108      	bne.n	8006a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f6:	d009      	beq.n	8006a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	61da      	str	r2, [r3, #28]
 80069fe:	e005      	b.n	8006a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d12a      	bne.n	8006a74 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a52      	ldr	r2, [pc, #328]	; (8006b74 <HAL_SPI_Init+0x1a0>)
 8006a2a:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a52      	ldr	r2, [pc, #328]	; (8006b78 <HAL_SPI_Init+0x1a4>)
 8006a30:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a51      	ldr	r2, [pc, #324]	; (8006b7c <HAL_SPI_Init+0x1a8>)
 8006a36:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a51      	ldr	r2, [pc, #324]	; (8006b80 <HAL_SPI_Init+0x1ac>)
 8006a3c:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a50      	ldr	r2, [pc, #320]	; (8006b84 <HAL_SPI_Init+0x1b0>)
 8006a42:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a50      	ldr	r2, [pc, #320]	; (8006b88 <HAL_SPI_Init+0x1b4>)
 8006a48:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a4f      	ldr	r2, [pc, #316]	; (8006b8c <HAL_SPI_Init+0x1b8>)
 8006a4e:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a4f      	ldr	r2, [pc, #316]	; (8006b90 <HAL_SPI_Init+0x1bc>)
 8006a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d103      	bne.n	8006a6a <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a4b      	ldr	r2, [pc, #300]	; (8006b94 <HAL_SPI_Init+0x1c0>)
 8006a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a94:	d902      	bls.n	8006a9c <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e002      	b.n	8006aa2 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006aaa:	d007      	beq.n	8006abc <HAL_SPI_Init+0xe8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ab4:	d002      	beq.n	8006abc <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	ea42 0103 	orr.w	r1, r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	0c1b      	lsrs	r3, r3, #16
 8006b18:	f003 0204 	and.w	r2, r3, #4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b38:	ea42 0103 	orr.w	r1, r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	08006b99 	.word	0x08006b99
 8006b78:	08006bad 	.word	0x08006bad
 8006b7c:	08006bc1 	.word	0x08006bc1
 8006b80:	08006bd5 	.word	0x08006bd5
 8006b84:	08006be9 	.word	0x08006be9
 8006b88:	08006bfd 	.word	0x08006bfd
 8006b8c:	08006c11 	.word	0x08006c11
 8006b90:	08006c25 	.word	0x08006c25
 8006b94:	080025f5 	.word	0x080025f5

08006b98 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e054      	b.n	8006cf4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d111      	bne.n	8006c7a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fed0 	bl	8007a04 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <HAL_TIM_Base_Init+0xc4>)
 8006c70:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f000 fd69 	bl	8007764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	080027bd 	.word	0x080027bd

08006d00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d001      	beq.n	8006d18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e04c      	b.n	8006db2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a26      	ldr	r2, [pc, #152]	; (8006dc0 <HAL_TIM_Base_Start+0xc0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d022      	beq.n	8006d70 <HAL_TIM_Base_Start+0x70>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d32:	d01d      	beq.n	8006d70 <HAL_TIM_Base_Start+0x70>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a22      	ldr	r2, [pc, #136]	; (8006dc4 <HAL_TIM_Base_Start+0xc4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_TIM_Base_Start+0x70>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <HAL_TIM_Base_Start+0xc8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <HAL_TIM_Base_Start+0x70>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <HAL_TIM_Base_Start+0xcc>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_TIM_Base_Start+0x70>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1e      	ldr	r2, [pc, #120]	; (8006dd0 <HAL_TIM_Base_Start+0xd0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_TIM_Base_Start+0x70>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1c      	ldr	r2, [pc, #112]	; (8006dd4 <HAL_TIM_Base_Start+0xd4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_TIM_Base_Start+0x70>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1b      	ldr	r2, [pc, #108]	; (8006dd8 <HAL_TIM_Base_Start+0xd8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d115      	bne.n	8006d9c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	4b19      	ldr	r3, [pc, #100]	; (8006ddc <HAL_TIM_Base_Start+0xdc>)
 8006d78:	4013      	ands	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b06      	cmp	r3, #6
 8006d80:	d015      	beq.n	8006dae <HAL_TIM_Base_Start+0xae>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d88:	d011      	beq.n	8006dae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0201 	orr.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d9a:	e008      	b.n	8006dae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	e000      	b.n	8006db0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40012c00 	.word	0x40012c00
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	40000800 	.word	0x40000800
 8006dcc:	40000c00 	.word	0x40000c00
 8006dd0:	40013400 	.word	0x40013400
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40015000 	.word	0x40015000
 8006ddc:	00010007 	.word	0x00010007

08006de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d001      	beq.n	8006df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e054      	b.n	8006ea2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a26      	ldr	r2, [pc, #152]	; (8006eb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d022      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x80>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d01d      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x80>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a22      	ldr	r2, [pc, #136]	; (8006eb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d018      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x80>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a21      	ldr	r2, [pc, #132]	; (8006eb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d013      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x80>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1f      	ldr	r2, [pc, #124]	; (8006ebc <HAL_TIM_Base_Start_IT+0xdc>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00e      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x80>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1e      	ldr	r2, [pc, #120]	; (8006ec0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d009      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x80>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1c      	ldr	r2, [pc, #112]	; (8006ec4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x80>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a1b      	ldr	r2, [pc, #108]	; (8006ec8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d115      	bne.n	8006e8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	4b19      	ldr	r3, [pc, #100]	; (8006ecc <HAL_TIM_Base_Start_IT+0xec>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b06      	cmp	r3, #6
 8006e70:	d015      	beq.n	8006e9e <HAL_TIM_Base_Start_IT+0xbe>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e78:	d011      	beq.n	8006e9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0201 	orr.w	r2, r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e8a:	e008      	b.n	8006e9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0201 	orr.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e000      	b.n	8006ea0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40012c00 	.word	0x40012c00
 8006eb4:	40000400 	.word	0x40000400
 8006eb8:	40000800 	.word	0x40000800
 8006ebc:	40000c00 	.word	0x40000c00
 8006ec0:	40013400 	.word	0x40013400
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40015000 	.word	0x40015000
 8006ecc:	00010007 	.word	0x00010007

08006ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d026      	beq.n	8006f40 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d021      	beq.n	8006f40 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0202 	mvn.w	r2, #2
 8006f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	4798      	blx	r3
 8006f24:	e009      	b.n	8006f3a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 0304 	and.w	r3, r3, #4
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d026      	beq.n	8006f98 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d021      	beq.n	8006f98 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0204 	mvn.w	r2, #4
 8006f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2202      	movs	r2, #2
 8006f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
 8006f7c:	e009      	b.n	8006f92 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d026      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d021      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0208 	mvn.w	r2, #8
 8006fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2204      	movs	r2, #4
 8006fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
 8006fd4:	e009      	b.n	8006fea <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 0310 	and.w	r3, r3, #16
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d026      	beq.n	8007048 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b00      	cmp	r3, #0
 8007002:	d021      	beq.n	8007048 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0210 	mvn.w	r2, #16
 800700c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2208      	movs	r2, #8
 8007012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	4798      	blx	r3
 800702c:	e009      	b.n	8007042 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00e      	beq.n	8007070 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d009      	beq.n	8007070 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0201 	mvn.w	r2, #1
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b00      	cmp	r3, #0
 8007078:	d104      	bne.n	8007084 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00e      	beq.n	80070a2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708a:	2b00      	cmp	r3, #0
 800708c:	d009      	beq.n	80070a2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00e      	beq.n	80070ca <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00e      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f003 0320 	and.w	r3, r3, #32
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00e      	beq.n	800711a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f06f 0220 	mvn.w	r2, #32
 800710e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00e      	beq.n	8007142 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d009      	beq.n	8007142 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00e      	beq.n	800716a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800715e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00e      	beq.n	8007192 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00e      	beq.n	80071ba <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d009      	beq.n	80071ba <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80071ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_TIM_ConfigClockSource+0x1c>
 80071dc:	2302      	movs	r3, #2
 80071de:	e0f6      	b.n	80073ce <HAL_TIM_ConfigClockSource+0x20a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80071fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800720a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a6f      	ldr	r2, [pc, #444]	; (80073d8 <HAL_TIM_ConfigClockSource+0x214>)
 800721a:	4293      	cmp	r3, r2
 800721c:	f000 80c1 	beq.w	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 8007220:	4a6d      	ldr	r2, [pc, #436]	; (80073d8 <HAL_TIM_ConfigClockSource+0x214>)
 8007222:	4293      	cmp	r3, r2
 8007224:	f200 80c6 	bhi.w	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007228:	4a6c      	ldr	r2, [pc, #432]	; (80073dc <HAL_TIM_ConfigClockSource+0x218>)
 800722a:	4293      	cmp	r3, r2
 800722c:	f000 80b9 	beq.w	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 8007230:	4a6a      	ldr	r2, [pc, #424]	; (80073dc <HAL_TIM_ConfigClockSource+0x218>)
 8007232:	4293      	cmp	r3, r2
 8007234:	f200 80be 	bhi.w	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007238:	4a69      	ldr	r2, [pc, #420]	; (80073e0 <HAL_TIM_ConfigClockSource+0x21c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	f000 80b1 	beq.w	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 8007240:	4a67      	ldr	r2, [pc, #412]	; (80073e0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	f200 80b6 	bhi.w	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007248:	4a66      	ldr	r2, [pc, #408]	; (80073e4 <HAL_TIM_ConfigClockSource+0x220>)
 800724a:	4293      	cmp	r3, r2
 800724c:	f000 80a9 	beq.w	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 8007250:	4a64      	ldr	r2, [pc, #400]	; (80073e4 <HAL_TIM_ConfigClockSource+0x220>)
 8007252:	4293      	cmp	r3, r2
 8007254:	f200 80ae 	bhi.w	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007258:	4a63      	ldr	r2, [pc, #396]	; (80073e8 <HAL_TIM_ConfigClockSource+0x224>)
 800725a:	4293      	cmp	r3, r2
 800725c:	f000 80a1 	beq.w	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 8007260:	4a61      	ldr	r2, [pc, #388]	; (80073e8 <HAL_TIM_ConfigClockSource+0x224>)
 8007262:	4293      	cmp	r3, r2
 8007264:	f200 80a6 	bhi.w	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007268:	4a60      	ldr	r2, [pc, #384]	; (80073ec <HAL_TIM_ConfigClockSource+0x228>)
 800726a:	4293      	cmp	r3, r2
 800726c:	f000 8099 	beq.w	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 8007270:	4a5e      	ldr	r2, [pc, #376]	; (80073ec <HAL_TIM_ConfigClockSource+0x228>)
 8007272:	4293      	cmp	r3, r2
 8007274:	f200 809e 	bhi.w	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007278:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800727c:	f000 8091 	beq.w	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 8007280:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007284:	f200 8096 	bhi.w	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800728c:	f000 8089 	beq.w	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 8007290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007294:	f200 808e 	bhi.w	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800729c:	d03e      	beq.n	800731c <HAL_TIM_ConfigClockSource+0x158>
 800729e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072a2:	f200 8087 	bhi.w	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80072a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072aa:	f000 8086 	beq.w	80073ba <HAL_TIM_ConfigClockSource+0x1f6>
 80072ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b2:	d87f      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80072b4:	2b70      	cmp	r3, #112	; 0x70
 80072b6:	d01a      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x12a>
 80072b8:	2b70      	cmp	r3, #112	; 0x70
 80072ba:	d87b      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80072bc:	2b60      	cmp	r3, #96	; 0x60
 80072be:	d050      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x19e>
 80072c0:	2b60      	cmp	r3, #96	; 0x60
 80072c2:	d877      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80072c4:	2b50      	cmp	r3, #80	; 0x50
 80072c6:	d03c      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x17e>
 80072c8:	2b50      	cmp	r3, #80	; 0x50
 80072ca:	d873      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d058      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x1be>
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	d86f      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80072d4:	2b30      	cmp	r3, #48	; 0x30
 80072d6:	d064      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 80072d8:	2b30      	cmp	r3, #48	; 0x30
 80072da:	d86b      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d060      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 80072e0:	2b20      	cmp	r3, #32
 80072e2:	d867      	bhi.n	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d05c      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 80072e8:	2b10      	cmp	r3, #16
 80072ea:	d05a      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x1de>
 80072ec:	e062      	b.n	80073b4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	6899      	ldr	r1, [r3, #8]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f000 fb61 	bl	80079c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	609a      	str	r2, [r3, #8]
      break;
 800731a:	e04f      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6818      	ldr	r0, [r3, #0]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	6899      	ldr	r1, [r3, #8]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f000 fb4a 	bl	80079c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800733e:	609a      	str	r2, [r3, #8]
      break;
 8007340:	e03c      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6859      	ldr	r1, [r3, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	461a      	mov	r2, r3
 8007350:	f000 fabc 	bl	80078cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2150      	movs	r1, #80	; 0x50
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fb15 	bl	800798a <TIM_ITRx_SetConfig>
      break;
 8007360:	e02c      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	6859      	ldr	r1, [r3, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	461a      	mov	r2, r3
 8007370:	f000 fadb 	bl	800792a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2160      	movs	r1, #96	; 0x60
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fb05 	bl	800798a <TIM_ITRx_SetConfig>
      break;
 8007380:	e01c      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6859      	ldr	r1, [r3, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	461a      	mov	r2, r3
 8007390:	f000 fa9c 	bl	80078cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2140      	movs	r1, #64	; 0x40
 800739a:	4618      	mov	r0, r3
 800739c:	f000 faf5 	bl	800798a <TIM_ITRx_SetConfig>
      break;
 80073a0:	e00c      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f000 faec 	bl	800798a <TIM_ITRx_SetConfig>
      break;
 80073b2:	e003      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]
      break;
 80073b8:	e000      	b.n	80073bc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80073ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	00100070 	.word	0x00100070
 80073dc:	00100060 	.word	0x00100060
 80073e0:	00100050 	.word	0x00100050
 80073e4:	00100040 	.word	0x00100040
 80073e8:	00100030 	.word	0x00100030
 80073ec:	00100020 	.word	0x00100020

080073f0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	460b      	mov	r3, r1
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e14a      	b.n	8007756 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	f040 80dd 	bne.w	8007688 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	2b1f      	cmp	r3, #31
 80074d2:	f200 80d6 	bhi.w	8007682 <HAL_TIM_RegisterCallback+0x1de>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <HAL_TIM_RegisterCallback+0x38>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	0800755d 	.word	0x0800755d
 80074e0:	08007565 	.word	0x08007565
 80074e4:	0800756d 	.word	0x0800756d
 80074e8:	08007575 	.word	0x08007575
 80074ec:	0800757d 	.word	0x0800757d
 80074f0:	08007585 	.word	0x08007585
 80074f4:	0800758d 	.word	0x0800758d
 80074f8:	08007595 	.word	0x08007595
 80074fc:	0800759d 	.word	0x0800759d
 8007500:	080075a5 	.word	0x080075a5
 8007504:	080075ad 	.word	0x080075ad
 8007508:	080075b5 	.word	0x080075b5
 800750c:	080075bd 	.word	0x080075bd
 8007510:	080075c5 	.word	0x080075c5
 8007514:	080075cf 	.word	0x080075cf
 8007518:	080075d9 	.word	0x080075d9
 800751c:	080075e3 	.word	0x080075e3
 8007520:	080075ed 	.word	0x080075ed
 8007524:	080075f7 	.word	0x080075f7
 8007528:	08007601 	.word	0x08007601
 800752c:	0800760b 	.word	0x0800760b
 8007530:	08007615 	.word	0x08007615
 8007534:	0800761f 	.word	0x0800761f
 8007538:	08007629 	.word	0x08007629
 800753c:	08007633 	.word	0x08007633
 8007540:	0800763d 	.word	0x0800763d
 8007544:	08007647 	.word	0x08007647
 8007548:	08007651 	.word	0x08007651
 800754c:	0800765b 	.word	0x0800765b
 8007550:	08007665 	.word	0x08007665
 8007554:	0800766f 	.word	0x0800766f
 8007558:	08007679 	.word	0x08007679
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007562:	e0f7      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800756a:	e0f3      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007572:	e0ef      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800757a:	e0eb      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007582:	e0e7      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800758a:	e0e3      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007592:	e0df      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800759a:	e0db      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80075a2:	e0d7      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80075aa:	e0d3      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80075b2:	e0cf      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80075ba:	e0cb      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80075c2:	e0c7      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80075cc:	e0c2      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80075d6:	e0bd      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80075e0:	e0b8      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80075ea:	e0b3      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80075f4:	e0ae      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80075fe:	e0a9      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8007608:	e0a4      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8007612:	e09f      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800761c:	e09a      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8007626:	e095      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8007630:	e090      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800763a:	e08b      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8007644:	e086      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800764e:	e081      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8007658:	e07c      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8007662:	e077      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 800766c:	e072      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8007676:	e06d      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8007680:	e068      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
        break;
 8007686:	e065      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d15d      	bne.n	8007750 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007694:	7afb      	ldrb	r3, [r7, #11]
 8007696:	2b0d      	cmp	r3, #13
 8007698:	d857      	bhi.n	800774a <HAL_TIM_RegisterCallback+0x2a6>
 800769a:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <HAL_TIM_RegisterCallback+0x1fc>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	080076d9 	.word	0x080076d9
 80076a4:	080076e1 	.word	0x080076e1
 80076a8:	080076e9 	.word	0x080076e9
 80076ac:	080076f1 	.word	0x080076f1
 80076b0:	080076f9 	.word	0x080076f9
 80076b4:	08007701 	.word	0x08007701
 80076b8:	08007709 	.word	0x08007709
 80076bc:	08007711 	.word	0x08007711
 80076c0:	08007719 	.word	0x08007719
 80076c4:	08007721 	.word	0x08007721
 80076c8:	08007729 	.word	0x08007729
 80076cc:	08007731 	.word	0x08007731
 80076d0:	08007739 	.word	0x08007739
 80076d4:	08007741 	.word	0x08007741
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80076de:	e039      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80076e6:	e035      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80076ee:	e031      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80076f6:	e02d      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80076fe:	e029      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8007706:	e025      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800770e:	e021      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007716:	e01d      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800771e:	e019      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007726:	e015      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800772e:	e011      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8007736:	e00d      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800773e:	e009      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8007748:	e004      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	75fb      	strb	r3, [r7, #23]
        break;
 800774e:	e001      	b.n	8007754 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
}
 8007756:	4618      	mov	r0, r3
 8007758:	371c      	adds	r7, #28
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop

08007764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a4c      	ldr	r2, [pc, #304]	; (80078a8 <TIM_Base_SetConfig+0x144>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d017      	beq.n	80077ac <TIM_Base_SetConfig+0x48>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007782:	d013      	beq.n	80077ac <TIM_Base_SetConfig+0x48>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a49      	ldr	r2, [pc, #292]	; (80078ac <TIM_Base_SetConfig+0x148>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d00f      	beq.n	80077ac <TIM_Base_SetConfig+0x48>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a48      	ldr	r2, [pc, #288]	; (80078b0 <TIM_Base_SetConfig+0x14c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d00b      	beq.n	80077ac <TIM_Base_SetConfig+0x48>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a47      	ldr	r2, [pc, #284]	; (80078b4 <TIM_Base_SetConfig+0x150>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d007      	beq.n	80077ac <TIM_Base_SetConfig+0x48>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a46      	ldr	r2, [pc, #280]	; (80078b8 <TIM_Base_SetConfig+0x154>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_Base_SetConfig+0x48>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a45      	ldr	r2, [pc, #276]	; (80078bc <TIM_Base_SetConfig+0x158>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d108      	bne.n	80077be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a39      	ldr	r2, [pc, #228]	; (80078a8 <TIM_Base_SetConfig+0x144>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d023      	beq.n	800780e <TIM_Base_SetConfig+0xaa>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077cc:	d01f      	beq.n	800780e <TIM_Base_SetConfig+0xaa>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a36      	ldr	r2, [pc, #216]	; (80078ac <TIM_Base_SetConfig+0x148>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d01b      	beq.n	800780e <TIM_Base_SetConfig+0xaa>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a35      	ldr	r2, [pc, #212]	; (80078b0 <TIM_Base_SetConfig+0x14c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d017      	beq.n	800780e <TIM_Base_SetConfig+0xaa>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a34      	ldr	r2, [pc, #208]	; (80078b4 <TIM_Base_SetConfig+0x150>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d013      	beq.n	800780e <TIM_Base_SetConfig+0xaa>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a33      	ldr	r2, [pc, #204]	; (80078b8 <TIM_Base_SetConfig+0x154>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00f      	beq.n	800780e <TIM_Base_SetConfig+0xaa>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a33      	ldr	r2, [pc, #204]	; (80078c0 <TIM_Base_SetConfig+0x15c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00b      	beq.n	800780e <TIM_Base_SetConfig+0xaa>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a32      	ldr	r2, [pc, #200]	; (80078c4 <TIM_Base_SetConfig+0x160>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d007      	beq.n	800780e <TIM_Base_SetConfig+0xaa>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a31      	ldr	r2, [pc, #196]	; (80078c8 <TIM_Base_SetConfig+0x164>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d003      	beq.n	800780e <TIM_Base_SetConfig+0xaa>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a2c      	ldr	r2, [pc, #176]	; (80078bc <TIM_Base_SetConfig+0x158>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d108      	bne.n	8007820 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a18      	ldr	r2, [pc, #96]	; (80078a8 <TIM_Base_SetConfig+0x144>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d013      	beq.n	8007874 <TIM_Base_SetConfig+0x110>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a1a      	ldr	r2, [pc, #104]	; (80078b8 <TIM_Base_SetConfig+0x154>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00f      	beq.n	8007874 <TIM_Base_SetConfig+0x110>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a1a      	ldr	r2, [pc, #104]	; (80078c0 <TIM_Base_SetConfig+0x15c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00b      	beq.n	8007874 <TIM_Base_SetConfig+0x110>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a19      	ldr	r2, [pc, #100]	; (80078c4 <TIM_Base_SetConfig+0x160>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d007      	beq.n	8007874 <TIM_Base_SetConfig+0x110>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a18      	ldr	r2, [pc, #96]	; (80078c8 <TIM_Base_SetConfig+0x164>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_Base_SetConfig+0x110>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a13      	ldr	r2, [pc, #76]	; (80078bc <TIM_Base_SetConfig+0x158>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d103      	bne.n	800787c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b01      	cmp	r3, #1
 800788c:	d105      	bne.n	800789a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f023 0201 	bic.w	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	611a      	str	r2, [r3, #16]
  }
}
 800789a:	bf00      	nop
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40012c00 	.word	0x40012c00
 80078ac:	40000400 	.word	0x40000400
 80078b0:	40000800 	.word	0x40000800
 80078b4:	40000c00 	.word	0x40000c00
 80078b8:	40013400 	.word	0x40013400
 80078bc:	40015000 	.word	0x40015000
 80078c0:	40014000 	.word	0x40014000
 80078c4:	40014400 	.word	0x40014400
 80078c8:	40014800 	.word	0x40014800

080078cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f023 0201 	bic.w	r2, r3, #1
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f023 030a 	bic.w	r3, r3, #10
 8007908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4313      	orrs	r3, r2
 8007910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800792a:	b480      	push	{r7}
 800792c:	b087      	sub	sp, #28
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	f023 0210 	bic.w	r2, r3, #16
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	031b      	lsls	r3, r3, #12
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	4313      	orrs	r3, r2
 800795e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	621a      	str	r2, [r3, #32]
}
 800797e:	bf00      	nop
 8007980:	371c      	adds	r7, #28
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80079a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f043 0307 	orr.w	r3, r3, #7
 80079b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	609a      	str	r2, [r3, #8]
}
 80079b8:	bf00      	nop
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	021a      	lsls	r2, r3, #8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	431a      	orrs	r2, r3
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	609a      	str	r2, [r3, #8]
}
 80079f8:	bf00      	nop
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a26      	ldr	r2, [pc, #152]	; (8007aa8 <TIM_ResetCallback+0xa4>)
 8007a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a25      	ldr	r2, [pc, #148]	; (8007aac <TIM_ResetCallback+0xa8>)
 8007a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a24      	ldr	r2, [pc, #144]	; (8007ab0 <TIM_ResetCallback+0xac>)
 8007a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a23      	ldr	r2, [pc, #140]	; (8007ab4 <TIM_ResetCallback+0xb0>)
 8007a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a22      	ldr	r2, [pc, #136]	; (8007ab8 <TIM_ResetCallback+0xb4>)
 8007a30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a21      	ldr	r2, [pc, #132]	; (8007abc <TIM_ResetCallback+0xb8>)
 8007a38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a20      	ldr	r2, [pc, #128]	; (8007ac0 <TIM_ResetCallback+0xbc>)
 8007a40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a1f      	ldr	r2, [pc, #124]	; (8007ac4 <TIM_ResetCallback+0xc0>)
 8007a48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a1e      	ldr	r2, [pc, #120]	; (8007ac8 <TIM_ResetCallback+0xc4>)
 8007a50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a1d      	ldr	r2, [pc, #116]	; (8007acc <TIM_ResetCallback+0xc8>)
 8007a58:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ad0 <TIM_ResetCallback+0xcc>)
 8007a60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a1b      	ldr	r2, [pc, #108]	; (8007ad4 <TIM_ResetCallback+0xd0>)
 8007a68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a1a      	ldr	r2, [pc, #104]	; (8007ad8 <TIM_ResetCallback+0xd4>)
 8007a70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a19      	ldr	r2, [pc, #100]	; (8007adc <TIM_ResetCallback+0xd8>)
 8007a78:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a18      	ldr	r2, [pc, #96]	; (8007ae0 <TIM_ResetCallback+0xdc>)
 8007a80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <TIM_ResetCallback+0xe0>)
 8007a88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <TIM_ResetCallback+0xe4>)
 8007a90:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a15      	ldr	r2, [pc, #84]	; (8007aec <TIM_ResetCallback+0xe8>)
 8007a98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	08001ce1 	.word	0x08001ce1
 8007aac:	080073f1 	.word	0x080073f1
 8007ab0:	08007469 	.word	0x08007469
 8007ab4:	0800747d 	.word	0x0800747d
 8007ab8:	08007419 	.word	0x08007419
 8007abc:	0800742d 	.word	0x0800742d
 8007ac0:	08007405 	.word	0x08007405
 8007ac4:	08007441 	.word	0x08007441
 8007ac8:	08007455 	.word	0x08007455
 8007acc:	08007491 	.word	0x08007491
 8007ad0:	08007c1d 	.word	0x08007c1d
 8007ad4:	08007c31 	.word	0x08007c31
 8007ad8:	08007c45 	.word	0x08007c45
 8007adc:	08007c59 	.word	0x08007c59
 8007ae0:	08007c6d 	.word	0x08007c6d
 8007ae4:	08007c81 	.word	0x08007c81
 8007ae8:	08007c95 	.word	0x08007c95
 8007aec:	08007ca9 	.word	0x08007ca9

08007af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e074      	b.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a34      	ldr	r2, [pc, #208]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d009      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a33      	ldr	r2, [pc, #204]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a31      	ldr	r2, [pc, #196]	; (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d108      	bne.n	8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a21      	ldr	r2, [pc, #132]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d022      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b88:	d01d      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d018      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a1d      	ldr	r2, [pc, #116]	; (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d013      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1c      	ldr	r2, [pc, #112]	; (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00e      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a15      	ldr	r2, [pc, #84]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d009      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d004      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a11      	ldr	r2, [pc, #68]	; (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d10c      	bne.n	8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40013400 	.word	0x40013400
 8007c08:	40015000 	.word	0x40015000
 8007c0c:	40000400 	.word	0x40000400
 8007c10:	40000800 	.word	0x40000800
 8007c14:	40000c00 	.word	0x40000c00
 8007c18:	40014000 	.word	0x40014000

08007c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e050      	b.n	8007d70 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d114      	bne.n	8007d02 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f935 	bl	8007f50 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a21      	ldr	r2, [pc, #132]	; (8007d78 <HAL_UART_Init+0xbc>)
 8007cf4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2224      	movs	r2, #36	; 0x24
 8007d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0201 	bic.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fc62 	bl	80085ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f963 	bl	8007ff4 <UART_SetConfig>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e01b      	b.n	8007d70 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0201 	orr.w	r2, r2, #1
 8007d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fce1 	bl	8008730 <UART_CheckIdleState>
 8007d6e:	4603      	mov	r3, r0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	08002809 	.word	0x08002809

08007d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	d17b      	bne.n	8007e8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <HAL_UART_Transmit+0x26>
 8007d9c:	88fb      	ldrh	r3, [r7, #6]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e074      	b.n	8007e90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2221      	movs	r2, #33	; 0x21
 8007db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007db6:	f7fa ff69 	bl	8002c8c <HAL_GetTick>
 8007dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	88fa      	ldrh	r2, [r7, #6]
 8007dc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	88fa      	ldrh	r2, [r7, #6]
 8007dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd4:	d108      	bne.n	8007de8 <HAL_UART_Transmit+0x6c>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d104      	bne.n	8007de8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	e003      	b.n	8007df0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dec:	2300      	movs	r3, #0
 8007dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007df0:	e030      	b.n	8007e54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2180      	movs	r1, #128	; 0x80
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 fd41 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e03d      	b.n	8007e90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10b      	bne.n	8007e32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	61bb      	str	r3, [r7, #24]
 8007e30:	e007      	b.n	8007e42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1c8      	bne.n	8007df2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2200      	movs	r2, #0
 8007e68:	2140      	movs	r1, #64	; 0x40
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 fd0a 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e006      	b.n	8007e90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	e000      	b.n	8007e90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007e8e:	2302      	movs	r3, #2
  }
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3720      	adds	r7, #32
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a1a      	ldr	r2, [pc, #104]	; (8007fc4 <UART_InitCallbacksToDefault+0x74>)
 8007f5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a19      	ldr	r2, [pc, #100]	; (8007fc8 <UART_InitCallbacksToDefault+0x78>)
 8007f64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a18      	ldr	r2, [pc, #96]	; (8007fcc <UART_InitCallbacksToDefault+0x7c>)
 8007f6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a17      	ldr	r2, [pc, #92]	; (8007fd0 <UART_InitCallbacksToDefault+0x80>)
 8007f74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a16      	ldr	r2, [pc, #88]	; (8007fd4 <UART_InitCallbacksToDefault+0x84>)
 8007f7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <UART_InitCallbacksToDefault+0x88>)
 8007f84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a14      	ldr	r2, [pc, #80]	; (8007fdc <UART_InitCallbacksToDefault+0x8c>)
 8007f8c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a13      	ldr	r2, [pc, #76]	; (8007fe0 <UART_InitCallbacksToDefault+0x90>)
 8007f94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a12      	ldr	r2, [pc, #72]	; (8007fe4 <UART_InitCallbacksToDefault+0x94>)
 8007f9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a11      	ldr	r2, [pc, #68]	; (8007fe8 <UART_InitCallbacksToDefault+0x98>)
 8007fa4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a10      	ldr	r2, [pc, #64]	; (8007fec <UART_InitCallbacksToDefault+0x9c>)
 8007fac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a0f      	ldr	r2, [pc, #60]	; (8007ff0 <UART_InitCallbacksToDefault+0xa0>)
 8007fb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	08007ead 	.word	0x08007ead
 8007fc8:	08007e99 	.word	0x08007e99
 8007fcc:	08007ed5 	.word	0x08007ed5
 8007fd0:	08007ec1 	.word	0x08007ec1
 8007fd4:	08007ee9 	.word	0x08007ee9
 8007fd8:	08007efd 	.word	0x08007efd
 8007fdc:	08007f11 	.word	0x08007f11
 8007fe0:	08007f25 	.word	0x08007f25
 8007fe4:	08008a2b 	.word	0x08008a2b
 8007fe8:	08008a3f 	.word	0x08008a3f
 8007fec:	08008a53 	.word	0x08008a53
 8007ff0:	08007f39 	.word	0x08007f39

08007ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ff8:	b08c      	sub	sp, #48	; 0x30
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	431a      	orrs	r2, r3
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	431a      	orrs	r2, r3
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	4313      	orrs	r3, r2
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4baa      	ldr	r3, [pc, #680]	; (80082cc <UART_SetConfig+0x2d8>)
 8008024:	4013      	ands	r3, r2
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	6812      	ldr	r2, [r2, #0]
 800802a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800802c:	430b      	orrs	r3, r1
 800802e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a9f      	ldr	r2, [pc, #636]	; (80082d0 <UART_SetConfig+0x2dc>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d004      	beq.n	8008060 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805c:	4313      	orrs	r3, r2
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800806a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	6812      	ldr	r2, [r2, #0]
 8008072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008074:	430b      	orrs	r3, r1
 8008076:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	f023 010f 	bic.w	r1, r3, #15
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a90      	ldr	r2, [pc, #576]	; (80082d4 <UART_SetConfig+0x2e0>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d125      	bne.n	80080e4 <UART_SetConfig+0xf0>
 8008098:	4b8f      	ldr	r3, [pc, #572]	; (80082d8 <UART_SetConfig+0x2e4>)
 800809a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d81a      	bhi.n	80080dc <UART_SetConfig+0xe8>
 80080a6:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <UART_SetConfig+0xb8>)
 80080a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ac:	080080bd 	.word	0x080080bd
 80080b0:	080080cd 	.word	0x080080cd
 80080b4:	080080c5 	.word	0x080080c5
 80080b8:	080080d5 	.word	0x080080d5
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c2:	e116      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80080c4:	2302      	movs	r3, #2
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ca:	e112      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80080cc:	2304      	movs	r3, #4
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d2:	e10e      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80080d4:	2308      	movs	r3, #8
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080da:	e10a      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80080dc:	2310      	movs	r3, #16
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080e2:	e106      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a7c      	ldr	r2, [pc, #496]	; (80082dc <UART_SetConfig+0x2e8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d138      	bne.n	8008160 <UART_SetConfig+0x16c>
 80080ee:	4b7a      	ldr	r3, [pc, #488]	; (80082d8 <UART_SetConfig+0x2e4>)
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f4:	f003 030c 	and.w	r3, r3, #12
 80080f8:	2b0c      	cmp	r3, #12
 80080fa:	d82d      	bhi.n	8008158 <UART_SetConfig+0x164>
 80080fc:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <UART_SetConfig+0x110>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	08008139 	.word	0x08008139
 8008108:	08008159 	.word	0x08008159
 800810c:	08008159 	.word	0x08008159
 8008110:	08008159 	.word	0x08008159
 8008114:	08008149 	.word	0x08008149
 8008118:	08008159 	.word	0x08008159
 800811c:	08008159 	.word	0x08008159
 8008120:	08008159 	.word	0x08008159
 8008124:	08008141 	.word	0x08008141
 8008128:	08008159 	.word	0x08008159
 800812c:	08008159 	.word	0x08008159
 8008130:	08008159 	.word	0x08008159
 8008134:	08008151 	.word	0x08008151
 8008138:	2300      	movs	r3, #0
 800813a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813e:	e0d8      	b.n	80082f2 <UART_SetConfig+0x2fe>
 8008140:	2302      	movs	r3, #2
 8008142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008146:	e0d4      	b.n	80082f2 <UART_SetConfig+0x2fe>
 8008148:	2304      	movs	r3, #4
 800814a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814e:	e0d0      	b.n	80082f2 <UART_SetConfig+0x2fe>
 8008150:	2308      	movs	r3, #8
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008156:	e0cc      	b.n	80082f2 <UART_SetConfig+0x2fe>
 8008158:	2310      	movs	r3, #16
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800815e:	e0c8      	b.n	80082f2 <UART_SetConfig+0x2fe>
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a5e      	ldr	r2, [pc, #376]	; (80082e0 <UART_SetConfig+0x2ec>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d125      	bne.n	80081b6 <UART_SetConfig+0x1c2>
 800816a:	4b5b      	ldr	r3, [pc, #364]	; (80082d8 <UART_SetConfig+0x2e4>)
 800816c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008170:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008174:	2b30      	cmp	r3, #48	; 0x30
 8008176:	d016      	beq.n	80081a6 <UART_SetConfig+0x1b2>
 8008178:	2b30      	cmp	r3, #48	; 0x30
 800817a:	d818      	bhi.n	80081ae <UART_SetConfig+0x1ba>
 800817c:	2b20      	cmp	r3, #32
 800817e:	d00a      	beq.n	8008196 <UART_SetConfig+0x1a2>
 8008180:	2b20      	cmp	r3, #32
 8008182:	d814      	bhi.n	80081ae <UART_SetConfig+0x1ba>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <UART_SetConfig+0x19a>
 8008188:	2b10      	cmp	r3, #16
 800818a:	d008      	beq.n	800819e <UART_SetConfig+0x1aa>
 800818c:	e00f      	b.n	80081ae <UART_SetConfig+0x1ba>
 800818e:	2300      	movs	r3, #0
 8008190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008194:	e0ad      	b.n	80082f2 <UART_SetConfig+0x2fe>
 8008196:	2302      	movs	r3, #2
 8008198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819c:	e0a9      	b.n	80082f2 <UART_SetConfig+0x2fe>
 800819e:	2304      	movs	r3, #4
 80081a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a4:	e0a5      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80081a6:	2308      	movs	r3, #8
 80081a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ac:	e0a1      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80081ae:	2310      	movs	r3, #16
 80081b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b4:	e09d      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a4a      	ldr	r2, [pc, #296]	; (80082e4 <UART_SetConfig+0x2f0>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d125      	bne.n	800820c <UART_SetConfig+0x218>
 80081c0:	4b45      	ldr	r3, [pc, #276]	; (80082d8 <UART_SetConfig+0x2e4>)
 80081c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081ca:	2bc0      	cmp	r3, #192	; 0xc0
 80081cc:	d016      	beq.n	80081fc <UART_SetConfig+0x208>
 80081ce:	2bc0      	cmp	r3, #192	; 0xc0
 80081d0:	d818      	bhi.n	8008204 <UART_SetConfig+0x210>
 80081d2:	2b80      	cmp	r3, #128	; 0x80
 80081d4:	d00a      	beq.n	80081ec <UART_SetConfig+0x1f8>
 80081d6:	2b80      	cmp	r3, #128	; 0x80
 80081d8:	d814      	bhi.n	8008204 <UART_SetConfig+0x210>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <UART_SetConfig+0x1f0>
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d008      	beq.n	80081f4 <UART_SetConfig+0x200>
 80081e2:	e00f      	b.n	8008204 <UART_SetConfig+0x210>
 80081e4:	2300      	movs	r3, #0
 80081e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ea:	e082      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80081ec:	2302      	movs	r3, #2
 80081ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f2:	e07e      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80081f4:	2304      	movs	r3, #4
 80081f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fa:	e07a      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80081fc:	2308      	movs	r3, #8
 80081fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008202:	e076      	b.n	80082f2 <UART_SetConfig+0x2fe>
 8008204:	2310      	movs	r3, #16
 8008206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820a:	e072      	b.n	80082f2 <UART_SetConfig+0x2fe>
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a35      	ldr	r2, [pc, #212]	; (80082e8 <UART_SetConfig+0x2f4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d12a      	bne.n	800826c <UART_SetConfig+0x278>
 8008216:	4b30      	ldr	r3, [pc, #192]	; (80082d8 <UART_SetConfig+0x2e4>)
 8008218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008224:	d01a      	beq.n	800825c <UART_SetConfig+0x268>
 8008226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800822a:	d81b      	bhi.n	8008264 <UART_SetConfig+0x270>
 800822c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008230:	d00c      	beq.n	800824c <UART_SetConfig+0x258>
 8008232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008236:	d815      	bhi.n	8008264 <UART_SetConfig+0x270>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <UART_SetConfig+0x250>
 800823c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008240:	d008      	beq.n	8008254 <UART_SetConfig+0x260>
 8008242:	e00f      	b.n	8008264 <UART_SetConfig+0x270>
 8008244:	2300      	movs	r3, #0
 8008246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824a:	e052      	b.n	80082f2 <UART_SetConfig+0x2fe>
 800824c:	2302      	movs	r3, #2
 800824e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008252:	e04e      	b.n	80082f2 <UART_SetConfig+0x2fe>
 8008254:	2304      	movs	r3, #4
 8008256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825a:	e04a      	b.n	80082f2 <UART_SetConfig+0x2fe>
 800825c:	2308      	movs	r3, #8
 800825e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008262:	e046      	b.n	80082f2 <UART_SetConfig+0x2fe>
 8008264:	2310      	movs	r3, #16
 8008266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800826a:	e042      	b.n	80082f2 <UART_SetConfig+0x2fe>
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a17      	ldr	r2, [pc, #92]	; (80082d0 <UART_SetConfig+0x2dc>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d13a      	bne.n	80082ec <UART_SetConfig+0x2f8>
 8008276:	4b18      	ldr	r3, [pc, #96]	; (80082d8 <UART_SetConfig+0x2e4>)
 8008278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008280:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008284:	d01a      	beq.n	80082bc <UART_SetConfig+0x2c8>
 8008286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800828a:	d81b      	bhi.n	80082c4 <UART_SetConfig+0x2d0>
 800828c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008290:	d00c      	beq.n	80082ac <UART_SetConfig+0x2b8>
 8008292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008296:	d815      	bhi.n	80082c4 <UART_SetConfig+0x2d0>
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <UART_SetConfig+0x2b0>
 800829c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082a0:	d008      	beq.n	80082b4 <UART_SetConfig+0x2c0>
 80082a2:	e00f      	b.n	80082c4 <UART_SetConfig+0x2d0>
 80082a4:	2300      	movs	r3, #0
 80082a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082aa:	e022      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80082ac:	2302      	movs	r3, #2
 80082ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b2:	e01e      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80082b4:	2304      	movs	r3, #4
 80082b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ba:	e01a      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80082bc:	2308      	movs	r3, #8
 80082be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c2:	e016      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80082c4:	2310      	movs	r3, #16
 80082c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ca:	e012      	b.n	80082f2 <UART_SetConfig+0x2fe>
 80082cc:	cfff69f3 	.word	0xcfff69f3
 80082d0:	40008000 	.word	0x40008000
 80082d4:	40013800 	.word	0x40013800
 80082d8:	40021000 	.word	0x40021000
 80082dc:	40004400 	.word	0x40004400
 80082e0:	40004800 	.word	0x40004800
 80082e4:	40004c00 	.word	0x40004c00
 80082e8:	40005000 	.word	0x40005000
 80082ec:	2310      	movs	r3, #16
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4aae      	ldr	r2, [pc, #696]	; (80085b0 <UART_SetConfig+0x5bc>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	f040 8097 	bne.w	800842c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008302:	2b08      	cmp	r3, #8
 8008304:	d823      	bhi.n	800834e <UART_SetConfig+0x35a>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <UART_SetConfig+0x318>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	08008331 	.word	0x08008331
 8008310:	0800834f 	.word	0x0800834f
 8008314:	08008339 	.word	0x08008339
 8008318:	0800834f 	.word	0x0800834f
 800831c:	0800833f 	.word	0x0800833f
 8008320:	0800834f 	.word	0x0800834f
 8008324:	0800834f 	.word	0x0800834f
 8008328:	0800834f 	.word	0x0800834f
 800832c:	08008347 	.word	0x08008347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008330:	f7fe f834 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 8008334:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008336:	e010      	b.n	800835a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008338:	4b9e      	ldr	r3, [pc, #632]	; (80085b4 <UART_SetConfig+0x5c0>)
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800833c:	e00d      	b.n	800835a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800833e:	f7fd ffc1 	bl	80062c4 <HAL_RCC_GetSysClockFreq>
 8008342:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008344:	e009      	b.n	800835a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800834c:	e005      	b.n	800835a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8130 	beq.w	80085c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	4a94      	ldr	r2, [pc, #592]	; (80085b8 <UART_SetConfig+0x5c4>)
 8008368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800836c:	461a      	mov	r2, r3
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	fbb3 f3f2 	udiv	r3, r3, r2
 8008374:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4413      	add	r3, r2
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	429a      	cmp	r2, r3
 8008384:	d305      	bcc.n	8008392 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	429a      	cmp	r2, r3
 8008390:	d903      	bls.n	800839a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008398:	e113      	b.n	80085c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	2200      	movs	r2, #0
 800839e:	60bb      	str	r3, [r7, #8]
 80083a0:	60fa      	str	r2, [r7, #12]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	4a84      	ldr	r2, [pc, #528]	; (80085b8 <UART_SetConfig+0x5c4>)
 80083a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2200      	movs	r2, #0
 80083b0:	603b      	str	r3, [r7, #0]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083bc:	f7f7 ff88 	bl	80002d0 <__aeabi_uldivmod>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4610      	mov	r0, r2
 80083c6:	4619      	mov	r1, r3
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	f04f 0300 	mov.w	r3, #0
 80083d0:	020b      	lsls	r3, r1, #8
 80083d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80083d6:	0202      	lsls	r2, r0, #8
 80083d8:	6979      	ldr	r1, [r7, #20]
 80083da:	6849      	ldr	r1, [r1, #4]
 80083dc:	0849      	lsrs	r1, r1, #1
 80083de:	2000      	movs	r0, #0
 80083e0:	460c      	mov	r4, r1
 80083e2:	4605      	mov	r5, r0
 80083e4:	eb12 0804 	adds.w	r8, r2, r4
 80083e8:	eb43 0905 	adc.w	r9, r3, r5
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	469a      	mov	sl, r3
 80083f4:	4693      	mov	fp, r2
 80083f6:	4652      	mov	r2, sl
 80083f8:	465b      	mov	r3, fp
 80083fa:	4640      	mov	r0, r8
 80083fc:	4649      	mov	r1, r9
 80083fe:	f7f7 ff67 	bl	80002d0 <__aeabi_uldivmod>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4613      	mov	r3, r2
 8008408:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008410:	d308      	bcc.n	8008424 <UART_SetConfig+0x430>
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008418:	d204      	bcs.n	8008424 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6a3a      	ldr	r2, [r7, #32]
 8008420:	60da      	str	r2, [r3, #12]
 8008422:	e0ce      	b.n	80085c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800842a:	e0ca      	b.n	80085c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008434:	d166      	bne.n	8008504 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800843a:	2b08      	cmp	r3, #8
 800843c:	d827      	bhi.n	800848e <UART_SetConfig+0x49a>
 800843e:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <UART_SetConfig+0x450>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	08008469 	.word	0x08008469
 8008448:	08008471 	.word	0x08008471
 800844c:	08008479 	.word	0x08008479
 8008450:	0800848f 	.word	0x0800848f
 8008454:	0800847f 	.word	0x0800847f
 8008458:	0800848f 	.word	0x0800848f
 800845c:	0800848f 	.word	0x0800848f
 8008460:	0800848f 	.word	0x0800848f
 8008464:	08008487 	.word	0x08008487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008468:	f7fd ff98 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 800846c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800846e:	e014      	b.n	800849a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008470:	f7fd ffaa 	bl	80063c8 <HAL_RCC_GetPCLK2Freq>
 8008474:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008476:	e010      	b.n	800849a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008478:	4b4e      	ldr	r3, [pc, #312]	; (80085b4 <UART_SetConfig+0x5c0>)
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800847c:	e00d      	b.n	800849a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800847e:	f7fd ff21 	bl	80062c4 <HAL_RCC_GetSysClockFreq>
 8008482:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008484:	e009      	b.n	800849a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800848a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800848c:	e005      	b.n	800849a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 8090 	beq.w	80085c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	4a44      	ldr	r2, [pc, #272]	; (80085b8 <UART_SetConfig+0x5c4>)
 80084a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ac:	461a      	mov	r2, r3
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80084b4:	005a      	lsls	r2, r3, #1
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	085b      	lsrs	r3, r3, #1
 80084bc:	441a      	add	r2, r3
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	2b0f      	cmp	r3, #15
 80084cc:	d916      	bls.n	80084fc <UART_SetConfig+0x508>
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084d4:	d212      	bcs.n	80084fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f023 030f 	bic.w	r3, r3, #15
 80084de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	085b      	lsrs	r3, r3, #1
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	8bfb      	ldrh	r3, [r7, #30]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	8bfa      	ldrh	r2, [r7, #30]
 80084f8:	60da      	str	r2, [r3, #12]
 80084fa:	e062      	b.n	80085c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008502:	e05e      	b.n	80085c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008504:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008508:	2b08      	cmp	r3, #8
 800850a:	d828      	bhi.n	800855e <UART_SetConfig+0x56a>
 800850c:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <UART_SetConfig+0x520>)
 800850e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008512:	bf00      	nop
 8008514:	08008539 	.word	0x08008539
 8008518:	08008541 	.word	0x08008541
 800851c:	08008549 	.word	0x08008549
 8008520:	0800855f 	.word	0x0800855f
 8008524:	0800854f 	.word	0x0800854f
 8008528:	0800855f 	.word	0x0800855f
 800852c:	0800855f 	.word	0x0800855f
 8008530:	0800855f 	.word	0x0800855f
 8008534:	08008557 	.word	0x08008557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008538:	f7fd ff30 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 800853c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800853e:	e014      	b.n	800856a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008540:	f7fd ff42 	bl	80063c8 <HAL_RCC_GetPCLK2Freq>
 8008544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008546:	e010      	b.n	800856a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008548:	4b1a      	ldr	r3, [pc, #104]	; (80085b4 <UART_SetConfig+0x5c0>)
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800854c:	e00d      	b.n	800856a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800854e:	f7fd feb9 	bl	80062c4 <HAL_RCC_GetSysClockFreq>
 8008552:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008554:	e009      	b.n	800856a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800855c:	e005      	b.n	800856a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008568:	bf00      	nop
    }

    if (pclk != 0U)
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	2b00      	cmp	r3, #0
 800856e:	d028      	beq.n	80085c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	4a10      	ldr	r2, [pc, #64]	; (80085b8 <UART_SetConfig+0x5c4>)
 8008576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800857a:	461a      	mov	r2, r3
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	085b      	lsrs	r3, r3, #1
 8008588:	441a      	add	r2, r3
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008592:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	2b0f      	cmp	r3, #15
 8008598:	d910      	bls.n	80085bc <UART_SetConfig+0x5c8>
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085a0:	d20c      	bcs.n	80085bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60da      	str	r2, [r3, #12]
 80085ac:	e009      	b.n	80085c2 <UART_SetConfig+0x5ce>
 80085ae:	bf00      	nop
 80085b0:	40008000 	.word	0x40008000
 80085b4:	00f42400 	.word	0x00f42400
 80085b8:	0801048c 	.word	0x0801048c
      }
      else
      {
        ret = HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2200      	movs	r2, #0
 80085d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2200      	movs	r2, #0
 80085dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80085de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3730      	adds	r7, #48	; 0x30
 80085e6:	46bd      	mov	sp, r7
 80085e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080085ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01a      	beq.n	8008702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086ea:	d10a      	bne.n	8008702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	605a      	str	r2, [r3, #4]
  }
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b098      	sub	sp, #96	; 0x60
 8008734:	af02      	add	r7, sp, #8
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008740:	f7fa faa4 	bl	8002c8c <HAL_GetTick>
 8008744:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0308 	and.w	r3, r3, #8
 8008750:	2b08      	cmp	r3, #8
 8008752:	d12f      	bne.n	80087b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800875c:	2200      	movs	r2, #0
 800875e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f88e 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d022      	beq.n	80087b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800877c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008782:	653b      	str	r3, [r7, #80]	; 0x50
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800878c:	647b      	str	r3, [r7, #68]	; 0x44
 800878e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800879a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e6      	bne.n	800876e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e063      	b.n	800887c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0304 	and.w	r3, r3, #4
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d149      	bne.n	8008856 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ca:	2200      	movs	r2, #0
 80087cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f857 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d03c      	beq.n	8008856 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	623b      	str	r3, [r7, #32]
   return(result);
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fa:	633b      	str	r3, [r7, #48]	; 0x30
 80087fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e6      	bne.n	80087dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	60fb      	str	r3, [r7, #12]
   return(result);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f023 0301 	bic.w	r3, r3, #1
 8008824:	64bb      	str	r3, [r7, #72]	; 0x48
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800882e:	61fa      	str	r2, [r7, #28]
 8008830:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	69b9      	ldr	r1, [r7, #24]
 8008834:	69fa      	ldr	r2, [r7, #28]
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	617b      	str	r3, [r7, #20]
   return(result);
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e5      	bne.n	800880e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e012      	b.n	800887c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2220      	movs	r2, #32
 800885a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2220      	movs	r2, #32
 8008862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3758      	adds	r7, #88	; 0x58
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	4613      	mov	r3, r2
 8008892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008894:	e04f      	b.n	8008936 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800889c:	d04b      	beq.n	8008936 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889e:	f7fa f9f5 	bl	8002c8c <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d302      	bcc.n	80088b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e04e      	b.n	8008956 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0304 	and.w	r3, r3, #4
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d037      	beq.n	8008936 <UART_WaitOnFlagUntilTimeout+0xb2>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b80      	cmp	r3, #128	; 0x80
 80088ca:	d034      	beq.n	8008936 <UART_WaitOnFlagUntilTimeout+0xb2>
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d031      	beq.n	8008936 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	f003 0308 	and.w	r3, r3, #8
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d110      	bne.n	8008902 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2208      	movs	r2, #8
 80088e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f838 	bl	800895e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2208      	movs	r2, #8
 80088f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e029      	b.n	8008956 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69db      	ldr	r3, [r3, #28]
 8008908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800890c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008910:	d111      	bne.n	8008936 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800891a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 f81e 	bl	800895e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2220      	movs	r2, #32
 8008926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e00f      	b.n	8008956 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69da      	ldr	r2, [r3, #28]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4013      	ands	r3, r2
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	429a      	cmp	r2, r3
 8008944:	bf0c      	ite	eq
 8008946:	2301      	moveq	r3, #1
 8008948:	2300      	movne	r3, #0
 800894a:	b2db      	uxtb	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	429a      	cmp	r2, r3
 8008952:	d0a0      	beq.n	8008896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800895e:	b480      	push	{r7}
 8008960:	b095      	sub	sp, #84	; 0x54
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800897a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
 8008982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008984:	643b      	str	r3, [r7, #64]	; 0x40
 8008986:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800898a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e6      	bne.n	8008966 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3308      	adds	r3, #8
 800899e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ae:	f023 0301 	bic.w	r3, r3, #1
 80089b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3308      	adds	r3, #8
 80089ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e3      	bne.n	8008998 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d118      	bne.n	8008a0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f023 0310 	bic.w	r3, r3, #16
 80089ec:	647b      	str	r3, [r7, #68]	; 0x44
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6979      	ldr	r1, [r7, #20]
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	613b      	str	r3, [r7, #16]
   return(result);
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e6      	bne.n	80089d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008a1e:	bf00      	nop
 8008a20:	3754      	adds	r7, #84	; 0x54
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a5a:	bf00      	nop
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_UARTEx_EnableFifoMode+0x16>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e02b      	b.n	8008ad4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2224      	movs	r2, #36	; 0x24
 8008a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0201 	bic.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008aaa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008ab2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f889 	bl	8008bd4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e02d      	b.n	8008b50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2224      	movs	r2, #36	; 0x24
 8008b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0201 	bic.w	r2, r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f84f 	bl	8008bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d101      	bne.n	8008b70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	e02d      	b.n	8008bcc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2224      	movs	r2, #36	; 0x24
 8008b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 0201 	bic.w	r2, r2, #1
 8008b96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f811 	bl	8008bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d108      	bne.n	8008bf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bf4:	e031      	b.n	8008c5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bf6:	2308      	movs	r3, #8
 8008bf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	0e5b      	lsrs	r3, r3, #25
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	0f5b      	lsrs	r3, r3, #29
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	7b3a      	ldrb	r2, [r7, #12]
 8008c22:	4911      	ldr	r1, [pc, #68]	; (8008c68 <UARTEx_SetNbDataToProcess+0x94>)
 8008c24:	5c8a      	ldrb	r2, [r1, r2]
 8008c26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c2a:	7b3a      	ldrb	r2, [r7, #12]
 8008c2c:	490f      	ldr	r1, [pc, #60]	; (8008c6c <UARTEx_SetNbDataToProcess+0x98>)
 8008c2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	7b7a      	ldrb	r2, [r7, #13]
 8008c40:	4909      	ldr	r1, [pc, #36]	; (8008c68 <UARTEx_SetNbDataToProcess+0x94>)
 8008c42:	5c8a      	ldrb	r2, [r1, r2]
 8008c44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c48:	7b7a      	ldrb	r2, [r7, #13]
 8008c4a:	4908      	ldr	r1, [pc, #32]	; (8008c6c <UARTEx_SetNbDataToProcess+0x98>)
 8008c4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c5a:	bf00      	nop
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	080104a4 	.word	0x080104a4
 8008c6c:	080104ac 	.word	0x080104ac

08008c70 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e04a      	b.n	8008d18 <HAL_USART_Init+0xa8>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d114      	bne.n	8008cb8 <HAL_USART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    USART_InitCallbacksToDefault(husart);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f88a 	bl	8008db0 <USART_InitCallbacksToDefault>

    if (husart->MspInitCallback == NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d103      	bne.n	8008cae <HAL_USART_Init+0x3e>
    {
      husart->MspInitCallback = HAL_USART_MspInit;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a1d      	ldr	r2, [pc, #116]	; (8008d20 <HAL_USART_Init+0xb0>)
 8008caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 0201 	bic.w	r2, r2, #1
 8008cce:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f8db 	bl	8008e8c <USART_SetConfig>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d101      	bne.n	8008ce0 <HAL_USART_Init+0x70>
  {
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e01b      	b.n	8008d18 <HAL_USART_Init+0xa8>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008cee:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cfe:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f042 0201 	orr.w	r2, r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fba3 	bl	800945c <USART_CheckIdleState>
 8008d16:	4603      	mov	r3, r0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	080028f9 	.word	0x080028f9

08008d24 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <HAL_USART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback can be implemented in the user file.
   */
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <HAL_USART_RxHalfCpltCallback>:
  * @brief Rx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_RxHalfCpltCallback can be implemented in the user file
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_USART_AbortCpltCallback>:
  * @brief  USART Abort Complete callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USART_AbortCpltCallback(USART_HandleTypeDef *husart)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <USART_InitCallbacksToDefault>:
  * @param  husart USART handle.
  * @retval none
  */
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
void USART_InitCallbacksToDefault(USART_HandleTypeDef *husart)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Init the USART Callback settings */
  husart->TxHalfCpltCallback        = HAL_USART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a10      	ldr	r2, [pc, #64]	; (8008dfc <USART_InitCallbacksToDefault+0x4c>)
 8008dbc:	661a      	str	r2, [r3, #96]	; 0x60
  husart->TxCpltCallback            = HAL_USART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a0f      	ldr	r2, [pc, #60]	; (8008e00 <USART_InitCallbacksToDefault+0x50>)
 8008dc2:	665a      	str	r2, [r3, #100]	; 0x64
  husart->RxHalfCpltCallback        = HAL_USART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a0f      	ldr	r2, [pc, #60]	; (8008e04 <USART_InitCallbacksToDefault+0x54>)
 8008dc8:	669a      	str	r2, [r3, #104]	; 0x68
  husart->RxCpltCallback            = HAL_USART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a0e      	ldr	r2, [pc, #56]	; (8008e08 <USART_InitCallbacksToDefault+0x58>)
 8008dce:	66da      	str	r2, [r3, #108]	; 0x6c
  husart->TxRxCpltCallback          = HAL_USART_TxRxCpltCallback;          /* Legacy weak TxRxCpltCallback          */
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a0e      	ldr	r2, [pc, #56]	; (8008e0c <USART_InitCallbacksToDefault+0x5c>)
 8008dd4:	671a      	str	r2, [r3, #112]	; 0x70
  husart->ErrorCallback             = HAL_USART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a0d      	ldr	r2, [pc, #52]	; (8008e10 <USART_InitCallbacksToDefault+0x60>)
 8008dda:	675a      	str	r2, [r3, #116]	; 0x74
  husart->AbortCpltCallback         = HAL_USART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a0d      	ldr	r2, [pc, #52]	; (8008e14 <USART_InitCallbacksToDefault+0x64>)
 8008de0:	679a      	str	r2, [r3, #120]	; 0x78
  husart->RxFifoFullCallback        = HAL_USARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a0c      	ldr	r2, [pc, #48]	; (8008e18 <USART_InitCallbacksToDefault+0x68>)
 8008de6:	67da      	str	r2, [r3, #124]	; 0x7c
  husart->TxFifoEmptyCallback       = HAL_USARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a0c      	ldr	r2, [pc, #48]	; (8008e1c <USART_InitCallbacksToDefault+0x6c>)
 8008dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	08008d39 	.word	0x08008d39
 8008e00:	08008d25 	.word	0x08008d25
 8008e04:	08008d61 	.word	0x08008d61
 8008e08:	08008d4d 	.word	0x08008d4d
 8008e0c:	08008d75 	.word	0x08008d75
 8008e10:	08008d89 	.word	0x08008d89
 8008e14:	08008d9d 	.word	0x08008d9d
 8008e18:	080094e3 	.word	0x080094e3
 8008e1c:	080094f7 	.word	0x080094f7

08008e20 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008e30:	e018      	b.n	8008e64 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e38:	d014      	beq.n	8008e64 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e3a:	f7f9 ff27 	bl	8002c8c <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d302      	bcc.n	8008e50 <USART_WaitOnFlagUntilTimeout+0x30>
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d109      	bne.n	8008e64 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e00f      	b.n	8008e84 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	69da      	ldr	r2, [r3, #28]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	bf0c      	ite	eq
 8008e74:	2301      	moveq	r3, #1
 8008e76:	2300      	movne	r3, #0
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d0d7      	beq.n	8008e32 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	4b96      	ldr	r3, [pc, #600]	; (8009114 <USART_SetConfig+0x288>)
 8008eba:	4013      	ands	r3, r2
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	6979      	ldr	r1, [r7, #20]
 8008ec2:	430b      	orrs	r3, r1
 8008ec4:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8008ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eca:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699a      	ldr	r2, [r3, #24]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008efa:	f023 0309 	bic.w	r3, r3, #9
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	6812      	ldr	r2, [r2, #0]
 8008f02:	6979      	ldr	r1, [r7, #20]
 8008f04:	430b      	orrs	r3, r1
 8008f06:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	f023 010f 	bic.w	r1, r3, #15
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a7d      	ldr	r2, [pc, #500]	; (8009118 <USART_SetConfig+0x28c>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d120      	bne.n	8008f6a <USART_SetConfig+0xde>
 8008f28:	4b7c      	ldr	r3, [pc, #496]	; (800911c <USART_SetConfig+0x290>)
 8008f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2e:	f003 0303 	and.w	r3, r3, #3
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d816      	bhi.n	8008f64 <USART_SetConfig+0xd8>
 8008f36:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <USART_SetConfig+0xb0>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f4d 	.word	0x08008f4d
 8008f40:	08008f59 	.word	0x08008f59
 8008f44:	08008f53 	.word	0x08008f53
 8008f48:	08008f5f 	.word	0x08008f5f
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	77fb      	strb	r3, [r7, #31]
 8008f50:	e06b      	b.n	800902a <USART_SetConfig+0x19e>
 8008f52:	2302      	movs	r3, #2
 8008f54:	77fb      	strb	r3, [r7, #31]
 8008f56:	e068      	b.n	800902a <USART_SetConfig+0x19e>
 8008f58:	2304      	movs	r3, #4
 8008f5a:	77fb      	strb	r3, [r7, #31]
 8008f5c:	e065      	b.n	800902a <USART_SetConfig+0x19e>
 8008f5e:	2308      	movs	r3, #8
 8008f60:	77fb      	strb	r3, [r7, #31]
 8008f62:	e062      	b.n	800902a <USART_SetConfig+0x19e>
 8008f64:	2310      	movs	r3, #16
 8008f66:	77fb      	strb	r3, [r7, #31]
 8008f68:	e05f      	b.n	800902a <USART_SetConfig+0x19e>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a6c      	ldr	r2, [pc, #432]	; (8009120 <USART_SetConfig+0x294>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d132      	bne.n	8008fda <USART_SetConfig+0x14e>
 8008f74:	4b69      	ldr	r3, [pc, #420]	; (800911c <USART_SetConfig+0x290>)
 8008f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7a:	f003 030c 	and.w	r3, r3, #12
 8008f7e:	2b0c      	cmp	r3, #12
 8008f80:	d828      	bhi.n	8008fd4 <USART_SetConfig+0x148>
 8008f82:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <USART_SetConfig+0xfc>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	08008fbd 	.word	0x08008fbd
 8008f8c:	08008fd5 	.word	0x08008fd5
 8008f90:	08008fd5 	.word	0x08008fd5
 8008f94:	08008fd5 	.word	0x08008fd5
 8008f98:	08008fc9 	.word	0x08008fc9
 8008f9c:	08008fd5 	.word	0x08008fd5
 8008fa0:	08008fd5 	.word	0x08008fd5
 8008fa4:	08008fd5 	.word	0x08008fd5
 8008fa8:	08008fc3 	.word	0x08008fc3
 8008fac:	08008fd5 	.word	0x08008fd5
 8008fb0:	08008fd5 	.word	0x08008fd5
 8008fb4:	08008fd5 	.word	0x08008fd5
 8008fb8:	08008fcf 	.word	0x08008fcf
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	77fb      	strb	r3, [r7, #31]
 8008fc0:	e033      	b.n	800902a <USART_SetConfig+0x19e>
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	77fb      	strb	r3, [r7, #31]
 8008fc6:	e030      	b.n	800902a <USART_SetConfig+0x19e>
 8008fc8:	2304      	movs	r3, #4
 8008fca:	77fb      	strb	r3, [r7, #31]
 8008fcc:	e02d      	b.n	800902a <USART_SetConfig+0x19e>
 8008fce:	2308      	movs	r3, #8
 8008fd0:	77fb      	strb	r3, [r7, #31]
 8008fd2:	e02a      	b.n	800902a <USART_SetConfig+0x19e>
 8008fd4:	2310      	movs	r3, #16
 8008fd6:	77fb      	strb	r3, [r7, #31]
 8008fd8:	e027      	b.n	800902a <USART_SetConfig+0x19e>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a51      	ldr	r2, [pc, #324]	; (8009124 <USART_SetConfig+0x298>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d120      	bne.n	8009026 <USART_SetConfig+0x19a>
 8008fe4:	4b4d      	ldr	r3, [pc, #308]	; (800911c <USART_SetConfig+0x290>)
 8008fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008fee:	2b30      	cmp	r3, #48	; 0x30
 8008ff0:	d013      	beq.n	800901a <USART_SetConfig+0x18e>
 8008ff2:	2b30      	cmp	r3, #48	; 0x30
 8008ff4:	d814      	bhi.n	8009020 <USART_SetConfig+0x194>
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d009      	beq.n	800900e <USART_SetConfig+0x182>
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	d810      	bhi.n	8009020 <USART_SetConfig+0x194>
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <USART_SetConfig+0x17c>
 8009002:	2b10      	cmp	r3, #16
 8009004:	d006      	beq.n	8009014 <USART_SetConfig+0x188>
 8009006:	e00b      	b.n	8009020 <USART_SetConfig+0x194>
 8009008:	2300      	movs	r3, #0
 800900a:	77fb      	strb	r3, [r7, #31]
 800900c:	e00d      	b.n	800902a <USART_SetConfig+0x19e>
 800900e:	2302      	movs	r3, #2
 8009010:	77fb      	strb	r3, [r7, #31]
 8009012:	e00a      	b.n	800902a <USART_SetConfig+0x19e>
 8009014:	2304      	movs	r3, #4
 8009016:	77fb      	strb	r3, [r7, #31]
 8009018:	e007      	b.n	800902a <USART_SetConfig+0x19e>
 800901a:	2308      	movs	r3, #8
 800901c:	77fb      	strb	r3, [r7, #31]
 800901e:	e004      	b.n	800902a <USART_SetConfig+0x19e>
 8009020:	2310      	movs	r3, #16
 8009022:	77fb      	strb	r3, [r7, #31]
 8009024:	e001      	b.n	800902a <USART_SetConfig+0x19e>
 8009026:	2310      	movs	r3, #16
 8009028:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800902a:	7ffb      	ldrb	r3, [r7, #31]
 800902c:	2b08      	cmp	r3, #8
 800902e:	f200 81e2 	bhi.w	80093f6 <USART_SetConfig+0x56a>
 8009032:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <USART_SetConfig+0x1ac>)
 8009034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009038:	0800905d 	.word	0x0800905d
 800903c:	08009129 	.word	0x08009129
 8009040:	080091df 	.word	0x080091df
 8009044:	080093f7 	.word	0x080093f7
 8009048:	0800928f 	.word	0x0800928f
 800904c:	080093f7 	.word	0x080093f7
 8009050:	080093f7 	.word	0x080093f7
 8009054:	080093f7 	.word	0x080093f7
 8009058:	08009345 	.word	0x08009345
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800905c:	f7fd f99e 	bl	800639c <HAL_RCC_GetPCLK1Freq>
 8009060:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	2b00      	cmp	r3, #0
 8009068:	d044      	beq.n	80090f4 <USART_SetConfig+0x268>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	2b01      	cmp	r3, #1
 8009070:	d03e      	beq.n	80090f0 <USART_SetConfig+0x264>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	2b02      	cmp	r3, #2
 8009078:	d038      	beq.n	80090ec <USART_SetConfig+0x260>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2b03      	cmp	r3, #3
 8009080:	d032      	beq.n	80090e8 <USART_SetConfig+0x25c>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	2b04      	cmp	r3, #4
 8009088:	d02c      	beq.n	80090e4 <USART_SetConfig+0x258>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	2b05      	cmp	r3, #5
 8009090:	d026      	beq.n	80090e0 <USART_SetConfig+0x254>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	2b06      	cmp	r3, #6
 8009098:	d020      	beq.n	80090dc <USART_SetConfig+0x250>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	2b07      	cmp	r3, #7
 80090a0:	d01a      	beq.n	80090d8 <USART_SetConfig+0x24c>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b08      	cmp	r3, #8
 80090a8:	d014      	beq.n	80090d4 <USART_SetConfig+0x248>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2b09      	cmp	r3, #9
 80090b0:	d00e      	beq.n	80090d0 <USART_SetConfig+0x244>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	2b0a      	cmp	r3, #10
 80090b8:	d008      	beq.n	80090cc <USART_SetConfig+0x240>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	2b0b      	cmp	r3, #11
 80090c0:	d102      	bne.n	80090c8 <USART_SetConfig+0x23c>
 80090c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090c6:	e016      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090c8:	2301      	movs	r3, #1
 80090ca:	e014      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090cc:	2380      	movs	r3, #128	; 0x80
 80090ce:	e012      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090d0:	2340      	movs	r3, #64	; 0x40
 80090d2:	e010      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090d4:	2320      	movs	r3, #32
 80090d6:	e00e      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090d8:	2310      	movs	r3, #16
 80090da:	e00c      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090dc:	230c      	movs	r3, #12
 80090de:	e00a      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090e0:	230a      	movs	r3, #10
 80090e2:	e008      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090e4:	2308      	movs	r3, #8
 80090e6:	e006      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090e8:	2306      	movs	r3, #6
 80090ea:	e004      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090ec:	2304      	movs	r3, #4
 80090ee:	e002      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090f0:	2302      	movs	r3, #2
 80090f2:	e000      	b.n	80090f6 <USART_SetConfig+0x26a>
 80090f4:	2301      	movs	r3, #1
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fc:	005a      	lsls	r2, r3, #1
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	085b      	lsrs	r3, r3, #1
 8009104:	441a      	add	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	fbb2 f3f3 	udiv	r3, r2, r3
 800910e:	61bb      	str	r3, [r7, #24]
      break;
 8009110:	e174      	b.n	80093fc <USART_SetConfig+0x570>
 8009112:	bf00      	nop
 8009114:	cfff69f3 	.word	0xcfff69f3
 8009118:	40013800 	.word	0x40013800
 800911c:	40021000 	.word	0x40021000
 8009120:	40004400 	.word	0x40004400
 8009124:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8009128:	f7fd f94e 	bl	80063c8 <HAL_RCC_GetPCLK2Freq>
 800912c:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b00      	cmp	r3, #0
 8009134:	d044      	beq.n	80091c0 <USART_SetConfig+0x334>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	2b01      	cmp	r3, #1
 800913c:	d03e      	beq.n	80091bc <USART_SetConfig+0x330>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	2b02      	cmp	r3, #2
 8009144:	d038      	beq.n	80091b8 <USART_SetConfig+0x32c>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	2b03      	cmp	r3, #3
 800914c:	d032      	beq.n	80091b4 <USART_SetConfig+0x328>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	2b04      	cmp	r3, #4
 8009154:	d02c      	beq.n	80091b0 <USART_SetConfig+0x324>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	2b05      	cmp	r3, #5
 800915c:	d026      	beq.n	80091ac <USART_SetConfig+0x320>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	2b06      	cmp	r3, #6
 8009164:	d020      	beq.n	80091a8 <USART_SetConfig+0x31c>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	2b07      	cmp	r3, #7
 800916c:	d01a      	beq.n	80091a4 <USART_SetConfig+0x318>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	2b08      	cmp	r3, #8
 8009174:	d014      	beq.n	80091a0 <USART_SetConfig+0x314>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	2b09      	cmp	r3, #9
 800917c:	d00e      	beq.n	800919c <USART_SetConfig+0x310>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	2b0a      	cmp	r3, #10
 8009184:	d008      	beq.n	8009198 <USART_SetConfig+0x30c>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	2b0b      	cmp	r3, #11
 800918c:	d102      	bne.n	8009194 <USART_SetConfig+0x308>
 800918e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009192:	e016      	b.n	80091c2 <USART_SetConfig+0x336>
 8009194:	2301      	movs	r3, #1
 8009196:	e014      	b.n	80091c2 <USART_SetConfig+0x336>
 8009198:	2380      	movs	r3, #128	; 0x80
 800919a:	e012      	b.n	80091c2 <USART_SetConfig+0x336>
 800919c:	2340      	movs	r3, #64	; 0x40
 800919e:	e010      	b.n	80091c2 <USART_SetConfig+0x336>
 80091a0:	2320      	movs	r3, #32
 80091a2:	e00e      	b.n	80091c2 <USART_SetConfig+0x336>
 80091a4:	2310      	movs	r3, #16
 80091a6:	e00c      	b.n	80091c2 <USART_SetConfig+0x336>
 80091a8:	230c      	movs	r3, #12
 80091aa:	e00a      	b.n	80091c2 <USART_SetConfig+0x336>
 80091ac:	230a      	movs	r3, #10
 80091ae:	e008      	b.n	80091c2 <USART_SetConfig+0x336>
 80091b0:	2308      	movs	r3, #8
 80091b2:	e006      	b.n	80091c2 <USART_SetConfig+0x336>
 80091b4:	2306      	movs	r3, #6
 80091b6:	e004      	b.n	80091c2 <USART_SetConfig+0x336>
 80091b8:	2304      	movs	r3, #4
 80091ba:	e002      	b.n	80091c2 <USART_SetConfig+0x336>
 80091bc:	2302      	movs	r3, #2
 80091be:	e000      	b.n	80091c2 <USART_SetConfig+0x336>
 80091c0:	2301      	movs	r3, #1
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c8:	005a      	lsls	r2, r3, #1
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	085b      	lsrs	r3, r3, #1
 80091d0:	441a      	add	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091da:	61bb      	str	r3, [r7, #24]
      break;
 80091dc:	e10e      	b.n	80093fc <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d044      	beq.n	8009270 <USART_SetConfig+0x3e4>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d03e      	beq.n	800926c <USART_SetConfig+0x3e0>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d038      	beq.n	8009268 <USART_SetConfig+0x3dc>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d032      	beq.n	8009264 <USART_SetConfig+0x3d8>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	2b04      	cmp	r3, #4
 8009204:	d02c      	beq.n	8009260 <USART_SetConfig+0x3d4>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	2b05      	cmp	r3, #5
 800920c:	d026      	beq.n	800925c <USART_SetConfig+0x3d0>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	2b06      	cmp	r3, #6
 8009214:	d020      	beq.n	8009258 <USART_SetConfig+0x3cc>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	2b07      	cmp	r3, #7
 800921c:	d01a      	beq.n	8009254 <USART_SetConfig+0x3c8>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	2b08      	cmp	r3, #8
 8009224:	d014      	beq.n	8009250 <USART_SetConfig+0x3c4>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922a:	2b09      	cmp	r3, #9
 800922c:	d00e      	beq.n	800924c <USART_SetConfig+0x3c0>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	2b0a      	cmp	r3, #10
 8009234:	d008      	beq.n	8009248 <USART_SetConfig+0x3bc>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	2b0b      	cmp	r3, #11
 800923c:	d102      	bne.n	8009244 <USART_SetConfig+0x3b8>
 800923e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009242:	e016      	b.n	8009272 <USART_SetConfig+0x3e6>
 8009244:	2301      	movs	r3, #1
 8009246:	e014      	b.n	8009272 <USART_SetConfig+0x3e6>
 8009248:	2380      	movs	r3, #128	; 0x80
 800924a:	e012      	b.n	8009272 <USART_SetConfig+0x3e6>
 800924c:	2340      	movs	r3, #64	; 0x40
 800924e:	e010      	b.n	8009272 <USART_SetConfig+0x3e6>
 8009250:	2320      	movs	r3, #32
 8009252:	e00e      	b.n	8009272 <USART_SetConfig+0x3e6>
 8009254:	2310      	movs	r3, #16
 8009256:	e00c      	b.n	8009272 <USART_SetConfig+0x3e6>
 8009258:	230c      	movs	r3, #12
 800925a:	e00a      	b.n	8009272 <USART_SetConfig+0x3e6>
 800925c:	230a      	movs	r3, #10
 800925e:	e008      	b.n	8009272 <USART_SetConfig+0x3e6>
 8009260:	2308      	movs	r3, #8
 8009262:	e006      	b.n	8009272 <USART_SetConfig+0x3e6>
 8009264:	2306      	movs	r3, #6
 8009266:	e004      	b.n	8009272 <USART_SetConfig+0x3e6>
 8009268:	2304      	movs	r3, #4
 800926a:	e002      	b.n	8009272 <USART_SetConfig+0x3e6>
 800926c:	2302      	movs	r3, #2
 800926e:	e000      	b.n	8009272 <USART_SetConfig+0x3e6>
 8009270:	2301      	movs	r3, #1
 8009272:	4a79      	ldr	r2, [pc, #484]	; (8009458 <USART_SetConfig+0x5cc>)
 8009274:	fbb2 f3f3 	udiv	r3, r2, r3
 8009278:	005a      	lsls	r2, r3, #1
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	085b      	lsrs	r3, r3, #1
 8009280:	441a      	add	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	fbb2 f3f3 	udiv	r3, r2, r3
 800928a:	61bb      	str	r3, [r7, #24]
      break;
 800928c:	e0b6      	b.n	80093fc <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800928e:	f7fd f819 	bl	80062c4 <HAL_RCC_GetSysClockFreq>
 8009292:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	d044      	beq.n	8009326 <USART_SetConfig+0x49a>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d03e      	beq.n	8009322 <USART_SetConfig+0x496>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d038      	beq.n	800931e <USART_SetConfig+0x492>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d032      	beq.n	800931a <USART_SetConfig+0x48e>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	2b04      	cmp	r3, #4
 80092ba:	d02c      	beq.n	8009316 <USART_SetConfig+0x48a>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	2b05      	cmp	r3, #5
 80092c2:	d026      	beq.n	8009312 <USART_SetConfig+0x486>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b06      	cmp	r3, #6
 80092ca:	d020      	beq.n	800930e <USART_SetConfig+0x482>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	2b07      	cmp	r3, #7
 80092d2:	d01a      	beq.n	800930a <USART_SetConfig+0x47e>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d014      	beq.n	8009306 <USART_SetConfig+0x47a>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	2b09      	cmp	r3, #9
 80092e2:	d00e      	beq.n	8009302 <USART_SetConfig+0x476>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	2b0a      	cmp	r3, #10
 80092ea:	d008      	beq.n	80092fe <USART_SetConfig+0x472>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	2b0b      	cmp	r3, #11
 80092f2:	d102      	bne.n	80092fa <USART_SetConfig+0x46e>
 80092f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f8:	e016      	b.n	8009328 <USART_SetConfig+0x49c>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e014      	b.n	8009328 <USART_SetConfig+0x49c>
 80092fe:	2380      	movs	r3, #128	; 0x80
 8009300:	e012      	b.n	8009328 <USART_SetConfig+0x49c>
 8009302:	2340      	movs	r3, #64	; 0x40
 8009304:	e010      	b.n	8009328 <USART_SetConfig+0x49c>
 8009306:	2320      	movs	r3, #32
 8009308:	e00e      	b.n	8009328 <USART_SetConfig+0x49c>
 800930a:	2310      	movs	r3, #16
 800930c:	e00c      	b.n	8009328 <USART_SetConfig+0x49c>
 800930e:	230c      	movs	r3, #12
 8009310:	e00a      	b.n	8009328 <USART_SetConfig+0x49c>
 8009312:	230a      	movs	r3, #10
 8009314:	e008      	b.n	8009328 <USART_SetConfig+0x49c>
 8009316:	2308      	movs	r3, #8
 8009318:	e006      	b.n	8009328 <USART_SetConfig+0x49c>
 800931a:	2306      	movs	r3, #6
 800931c:	e004      	b.n	8009328 <USART_SetConfig+0x49c>
 800931e:	2304      	movs	r3, #4
 8009320:	e002      	b.n	8009328 <USART_SetConfig+0x49c>
 8009322:	2302      	movs	r3, #2
 8009324:	e000      	b.n	8009328 <USART_SetConfig+0x49c>
 8009326:	2301      	movs	r3, #1
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	fbb2 f3f3 	udiv	r3, r2, r3
 800932e:	005a      	lsls	r2, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	085b      	lsrs	r3, r3, #1
 8009336:	441a      	add	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009340:	61bb      	str	r3, [r7, #24]
      break;
 8009342:	e05b      	b.n	80093fc <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	d044      	beq.n	80093d6 <USART_SetConfig+0x54a>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b01      	cmp	r3, #1
 8009352:	d03e      	beq.n	80093d2 <USART_SetConfig+0x546>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	2b02      	cmp	r3, #2
 800935a:	d038      	beq.n	80093ce <USART_SetConfig+0x542>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	2b03      	cmp	r3, #3
 8009362:	d032      	beq.n	80093ca <USART_SetConfig+0x53e>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	2b04      	cmp	r3, #4
 800936a:	d02c      	beq.n	80093c6 <USART_SetConfig+0x53a>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	2b05      	cmp	r3, #5
 8009372:	d026      	beq.n	80093c2 <USART_SetConfig+0x536>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	2b06      	cmp	r3, #6
 800937a:	d020      	beq.n	80093be <USART_SetConfig+0x532>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	2b07      	cmp	r3, #7
 8009382:	d01a      	beq.n	80093ba <USART_SetConfig+0x52e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	2b08      	cmp	r3, #8
 800938a:	d014      	beq.n	80093b6 <USART_SetConfig+0x52a>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009390:	2b09      	cmp	r3, #9
 8009392:	d00e      	beq.n	80093b2 <USART_SetConfig+0x526>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009398:	2b0a      	cmp	r3, #10
 800939a:	d008      	beq.n	80093ae <USART_SetConfig+0x522>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	2b0b      	cmp	r3, #11
 80093a2:	d102      	bne.n	80093aa <USART_SetConfig+0x51e>
 80093a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093a8:	e016      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e014      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093ae:	2380      	movs	r3, #128	; 0x80
 80093b0:	e012      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093b2:	2340      	movs	r3, #64	; 0x40
 80093b4:	e010      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093b6:	2320      	movs	r3, #32
 80093b8:	e00e      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093ba:	2310      	movs	r3, #16
 80093bc:	e00c      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093be:	230c      	movs	r3, #12
 80093c0:	e00a      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093c2:	230a      	movs	r3, #10
 80093c4:	e008      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093c6:	2308      	movs	r3, #8
 80093c8:	e006      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093ca:	2306      	movs	r3, #6
 80093cc:	e004      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093ce:	2304      	movs	r3, #4
 80093d0:	e002      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093d2:	2302      	movs	r3, #2
 80093d4:	e000      	b.n	80093d8 <USART_SetConfig+0x54c>
 80093d6:	2301      	movs	r3, #1
 80093d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80093dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e0:	005a      	lsls	r2, r3, #1
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	085b      	lsrs	r3, r3, #1
 80093e8:	441a      	add	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f2:	61bb      	str	r3, [r7, #24]
      break;
 80093f4:	e002      	b.n	80093fc <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	77bb      	strb	r3, [r7, #30]
      break;
 80093fa:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	2b0f      	cmp	r3, #15
 8009400:	d916      	bls.n	8009430 <USART_SetConfig+0x5a4>
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009408:	d212      	bcs.n	8009430 <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	b29b      	uxth	r3, r3
 800940e:	f023 030f 	bic.w	r3, r3, #15
 8009412:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	b29b      	uxth	r3, r3
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	b29a      	uxth	r2, r3
 8009420:	89fb      	ldrh	r3, [r7, #14]
 8009422:	4313      	orrs	r3, r2
 8009424:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	89fa      	ldrh	r2, [r7, #14]
 800942c:	60da      	str	r2, [r3, #12]
 800942e:	e001      	b.n	8009434 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800944c:	7fbb      	ldrb	r3, [r7, #30]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3720      	adds	r7, #32
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	00f42400 	.word	0x00f42400

0800945c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af02      	add	r7, sp, #8
 8009462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800946a:	f7f9 fc0f 	bl	8002c8c <HAL_GetTick>
 800946e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0308 	and.w	r3, r3, #8
 800947a:	2b08      	cmp	r3, #8
 800947c:	d10e      	bne.n	800949c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800947e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7ff fcc7 	bl	8008e20 <USART_WaitOnFlagUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e01e      	b.n	80094da <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0304 	and.w	r3, r3, #4
 80094a6:	2b04      	cmp	r3, #4
 80094a8:	d10e      	bne.n	80094c8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80094aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff fcb1 	bl	8008e20 <USART_WaitOnFlagUntilTimeout>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e008      	b.n	80094da <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094fe:	bf00      	nop
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800950a:	b480      	push	{r7}
 800950c:	b085      	sub	sp, #20
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009518:	2b01      	cmp	r3, #1
 800951a:	d101      	bne.n	8009520 <HAL_USARTEx_DisableFifoMode+0x16>
 800951c:	2302      	movs	r3, #2
 800951e:	e027      	b.n	8009570 <HAL_USARTEx_DisableFifoMode+0x66>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 0201 	bic.w	r2, r2, #1
 8009546:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800954e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800958c:	2b01      	cmp	r3, #1
 800958e:	d101      	bne.n	8009594 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8009590:	2302      	movs	r3, #2
 8009592:	e02d      	b.n	80095f0 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0201 	bic.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f84f 	bl	8009674 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009608:	2b01      	cmp	r3, #1
 800960a:	d101      	bne.n	8009610 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800960c:	2302      	movs	r3, #2
 800960e:	e02d      	b.n	800966c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 0201 	bic.w	r2, r2, #1
 8009636:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	430a      	orrs	r2, r1
 800964a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f811 	bl	8009674 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009680:	2b00      	cmp	r3, #0
 8009682:	d106      	bne.n	8009692 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009690:	e02f      	b.n	80096f2 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009692:	2308      	movs	r3, #8
 8009694:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009696:	2308      	movs	r3, #8
 8009698:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80096a0:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0307 	and.w	r3, r3, #7
 80096a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80096b0:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	7b3a      	ldrb	r2, [r7, #12]
 80096be:	4910      	ldr	r1, [pc, #64]	; (8009700 <USARTEx_SetNbDataToProcess+0x8c>)
 80096c0:	5c8a      	ldrb	r2, [r1, r2]
 80096c2:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 80096c6:	7b3a      	ldrb	r2, [r7, #12]
 80096c8:	490e      	ldr	r1, [pc, #56]	; (8009704 <USARTEx_SetNbDataToProcess+0x90>)
 80096ca:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	7b7a      	ldrb	r2, [r7, #13]
 80096da:	4909      	ldr	r1, [pc, #36]	; (8009700 <USARTEx_SetNbDataToProcess+0x8c>)
 80096dc:	5c8a      	ldrb	r2, [r1, r2]
 80096de:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80096e2:	7b7a      	ldrb	r2, [r7, #13]
 80096e4:	4907      	ldr	r1, [pc, #28]	; (8009704 <USARTEx_SetNbDataToProcess+0x90>)
 80096e6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80096f2:	bf00      	nop
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	080104b4 	.word	0x080104b4
 8009704:	080104bc 	.word	0x080104bc

08009708 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800970c:	4907      	ldr	r1, [pc, #28]	; (800972c <MX_FATFS_Init+0x24>)
 800970e:	4808      	ldr	r0, [pc, #32]	; (8009730 <MX_FATFS_Init+0x28>)
 8009710:	f002 fc3a 	bl	800bf88 <FATFS_LinkDriver>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800971a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800971e:	e003      	b.n	8009728 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8009720:	4b04      	ldr	r3, [pc, #16]	; (8009734 <MX_FATFS_Init+0x2c>)
 8009722:	2201      	movs	r2, #1
 8009724:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8009726:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8009728:	4618      	mov	r0, r3
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20001534 	.word	0x20001534
 8009730:	20000010 	.word	0x20000010
 8009734:	20001538 	.word	0x20001538

08009738 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800973c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800973e:	4618      	mov	r0, r3
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8009752:	4b06      	ldr	r3, [pc, #24]	; (800976c <USER_initialize+0x24>)
 8009754:	2201      	movs	r2, #1
 8009756:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009758:	4b04      	ldr	r3, [pc, #16]	; (800976c <USER_initialize+0x24>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	2000000c 	.word	0x2000000c

08009770 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800977a:	4b06      	ldr	r3, [pc, #24]	; (8009794 <USER_status+0x24>)
 800977c:	2201      	movs	r2, #1
 800977e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009780:	4b04      	ldr	r3, [pc, #16]	; (8009794 <USER_status+0x24>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009786:	4618      	mov	r0, r3
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	2000000c 	.word	0x2000000c

08009798 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	607a      	str	r2, [r7, #4]
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80097a8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b085      	sub	sp, #20
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	603b      	str	r3, [r7, #0]
 80097c2:	4603      	mov	r3, r0
 80097c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80097c6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	603a      	str	r2, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
 80097e0:	460b      	mov	r3, r1
 80097e2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	73fb      	strb	r3, [r7, #15]
    return res;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
	...

080097f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	4a08      	ldr	r2, [pc, #32]	; (8009828 <disk_status+0x30>)
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	79fa      	ldrb	r2, [r7, #7]
 8009810:	4905      	ldr	r1, [pc, #20]	; (8009828 <disk_status+0x30>)
 8009812:	440a      	add	r2, r1
 8009814:	7a12      	ldrb	r2, [r2, #8]
 8009816:	4610      	mov	r0, r2
 8009818:	4798      	blx	r3
 800981a:	4603      	mov	r3, r0
 800981c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20001564 	.word	0x20001564

0800982c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	4a0d      	ldr	r2, [pc, #52]	; (8009874 <disk_initialize+0x48>)
 800983e:	5cd3      	ldrb	r3, [r2, r3]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d111      	bne.n	8009868 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009844:	79fb      	ldrb	r3, [r7, #7]
 8009846:	4a0b      	ldr	r2, [pc, #44]	; (8009874 <disk_initialize+0x48>)
 8009848:	2101      	movs	r1, #1
 800984a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	4a09      	ldr	r2, [pc, #36]	; (8009874 <disk_initialize+0x48>)
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	79fa      	ldrb	r2, [r7, #7]
 800985a:	4906      	ldr	r1, [pc, #24]	; (8009874 <disk_initialize+0x48>)
 800985c:	440a      	add	r2, r1
 800985e:	7a12      	ldrb	r2, [r2, #8]
 8009860:	4610      	mov	r0, r2
 8009862:	4798      	blx	r3
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009868:	7bfb      	ldrb	r3, [r7, #15]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20001564 	.word	0x20001564

08009878 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009878:	b590      	push	{r4, r7, lr}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	607a      	str	r2, [r7, #4]
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	4a0a      	ldr	r2, [pc, #40]	; (80098b4 <disk_read+0x3c>)
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	689c      	ldr	r4, [r3, #8]
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	4a07      	ldr	r2, [pc, #28]	; (80098b4 <disk_read+0x3c>)
 8009898:	4413      	add	r3, r2
 800989a:	7a18      	ldrb	r0, [r3, #8]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	68b9      	ldr	r1, [r7, #8]
 80098a2:	47a0      	blx	r4
 80098a4:	4603      	mov	r3, r0
 80098a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80098a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd90      	pop	{r4, r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20001564 	.word	0x20001564

080098b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80098b8:	b590      	push	{r4, r7, lr}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60b9      	str	r1, [r7, #8]
 80098c0:	607a      	str	r2, [r7, #4]
 80098c2:	603b      	str	r3, [r7, #0]
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	4a0a      	ldr	r2, [pc, #40]	; (80098f4 <disk_write+0x3c>)
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	68dc      	ldr	r4, [r3, #12]
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	4a07      	ldr	r2, [pc, #28]	; (80098f4 <disk_write+0x3c>)
 80098d8:	4413      	add	r3, r2
 80098da:	7a18      	ldrb	r0, [r3, #8]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	68b9      	ldr	r1, [r7, #8]
 80098e2:	47a0      	blx	r4
 80098e4:	4603      	mov	r3, r0
 80098e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	371c      	adds	r7, #28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd90      	pop	{r4, r7, pc}
 80098f2:	bf00      	nop
 80098f4:	20001564 	.word	0x20001564

080098f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	603a      	str	r2, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
 8009904:	460b      	mov	r3, r1
 8009906:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009908:	79fb      	ldrb	r3, [r7, #7]
 800990a:	4a09      	ldr	r2, [pc, #36]	; (8009930 <disk_ioctl+0x38>)
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	79fa      	ldrb	r2, [r7, #7]
 8009916:	4906      	ldr	r1, [pc, #24]	; (8009930 <disk_ioctl+0x38>)
 8009918:	440a      	add	r2, r1
 800991a:	7a10      	ldrb	r0, [r2, #8]
 800991c:	79b9      	ldrb	r1, [r7, #6]
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	4798      	blx	r3
 8009922:	4603      	mov	r3, r0
 8009924:	73fb      	strb	r3, [r7, #15]
  return res;
 8009926:	7bfb      	ldrb	r3, [r7, #15]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	20001564 	.word	0x20001564

08009934 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3301      	adds	r3, #1
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009944:	89fb      	ldrh	r3, [r7, #14]
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	b21a      	sxth	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	b21b      	sxth	r3, r3
 8009950:	4313      	orrs	r3, r2
 8009952:	b21b      	sxth	r3, r3
 8009954:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009956:	89fb      	ldrh	r3, [r7, #14]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3303      	adds	r3, #3
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	021b      	lsls	r3, r3, #8
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	3202      	adds	r2, #2
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	4313      	orrs	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	021b      	lsls	r3, r3, #8
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	3201      	adds	r2, #1
 800998a:	7812      	ldrb	r2, [r2, #0]
 800998c:	4313      	orrs	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	7812      	ldrb	r2, [r2, #0]
 8009998:	4313      	orrs	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]
	return rv;
 800999c:	68fb      	ldr	r3, [r7, #12]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	887a      	ldrh	r2, [r7, #2]
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	701a      	strb	r2, [r3, #0]
 80099c2:	887b      	ldrh	r3, [r7, #2]
 80099c4:	0a1b      	lsrs	r3, r3, #8
 80099c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	607a      	str	r2, [r7, #4]
 80099ce:	887a      	ldrh	r2, [r7, #2]
 80099d0:	b2d2      	uxtb	r2, r2
 80099d2:	701a      	strb	r2, [r3, #0]
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	1c5a      	adds	r2, r3, #1
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	b2d2      	uxtb	r2, r2
 80099f4:	701a      	strb	r2, [r3, #0]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	0a1b      	lsrs	r3, r3, #8
 80099fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	607a      	str	r2, [r7, #4]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	b2d2      	uxtb	r2, r2
 8009a06:	701a      	strb	r2, [r3, #0]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	0a1b      	lsrs	r3, r3, #8
 8009a0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	0a1b      	lsrs	r3, r3, #8
 8009a1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	607a      	str	r2, [r7, #4]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	b2d2      	uxtb	r2, r2
 8009a2a:	701a      	strb	r2, [r3, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00d      	beq.n	8009a6e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	1c53      	adds	r3, r2, #1
 8009a56:	613b      	str	r3, [r7, #16]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	1c59      	adds	r1, r3, #1
 8009a5c:	6179      	str	r1, [r7, #20]
 8009a5e:	7812      	ldrb	r2, [r2, #0]
 8009a60:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	607b      	str	r3, [r7, #4]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1f1      	bne.n	8009a52 <mem_cpy+0x1a>
	}
}
 8009a6e:	bf00      	nop
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009a7a:	b480      	push	{r7}
 8009a7c:	b087      	sub	sp, #28
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	617a      	str	r2, [r7, #20]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	b2d2      	uxtb	r2, r2
 8009a94:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1f3      	bne.n	8009a8a <mem_set+0x10>
}
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	371c      	adds	r7, #28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009ab0:	b480      	push	{r7}
 8009ab2:	b089      	sub	sp, #36	; 0x24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	61fb      	str	r3, [r7, #28]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	61fa      	str	r2, [r7, #28]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	61ba      	str	r2, [r7, #24]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	1acb      	subs	r3, r1, r3
 8009adc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	607b      	str	r3, [r7, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d002      	beq.n	8009af0 <mem_cmp+0x40>
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0eb      	beq.n	8009ac8 <mem_cmp+0x18>

	return r;
 8009af0:	697b      	ldr	r3, [r7, #20]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3724      	adds	r7, #36	; 0x24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009b08:	e002      	b.n	8009b10 <chk_chr+0x12>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	607b      	str	r3, [r7, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d005      	beq.n	8009b24 <chk_chr+0x26>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d1f2      	bne.n	8009b0a <chk_chr+0xc>
	return *str;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	781b      	ldrb	r3, [r3, #0]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d009      	beq.n	8009b56 <lock_fs+0x22>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f002 fa54 	bl	800bff4 <ff_req_grant>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <lock_fs+0x22>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <lock_fs+0x24>
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00d      	beq.n	8009b8e <unlock_fs+0x2e>
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	2b0c      	cmp	r3, #12
 8009b76:	d00a      	beq.n	8009b8e <unlock_fs+0x2e>
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	2b0b      	cmp	r3, #11
 8009b7c:	d007      	beq.n	8009b8e <unlock_fs+0x2e>
 8009b7e:	78fb      	ldrb	r3, [r7, #3]
 8009b80:	2b0f      	cmp	r3, #15
 8009b82:	d004      	beq.n	8009b8e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f002 fa48 	bl	800c01e <ff_rel_grant>
	}
}
 8009b8e:	bf00      	nop
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60bb      	str	r3, [r7, #8]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	e029      	b.n	8009c00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009bac:	4a27      	ldr	r2, [pc, #156]	; (8009c4c <chk_lock+0xb4>)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	011b      	lsls	r3, r3, #4
 8009bb2:	4413      	add	r3, r2
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d01d      	beq.n	8009bf6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009bba:	4a24      	ldr	r2, [pc, #144]	; (8009c4c <chk_lock+0xb4>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	4413      	add	r3, r2
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d116      	bne.n	8009bfa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009bcc:	4a1f      	ldr	r2, [pc, #124]	; (8009c4c <chk_lock+0xb4>)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	011b      	lsls	r3, r3, #4
 8009bd2:	4413      	add	r3, r2
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d10c      	bne.n	8009bfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009be0:	4a1a      	ldr	r2, [pc, #104]	; (8009c4c <chk_lock+0xb4>)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	011b      	lsls	r3, r3, #4
 8009be6:	4413      	add	r3, r2
 8009be8:	3308      	adds	r3, #8
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d102      	bne.n	8009bfa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009bf4:	e007      	b.n	8009c06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d9d2      	bls.n	8009bac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d109      	bne.n	8009c20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d102      	bne.n	8009c18 <chk_lock+0x80>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d101      	bne.n	8009c1c <chk_lock+0x84>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	e010      	b.n	8009c3e <chk_lock+0xa6>
 8009c1c:	2312      	movs	r3, #18
 8009c1e:	e00e      	b.n	8009c3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d108      	bne.n	8009c38 <chk_lock+0xa0>
 8009c26:	4a09      	ldr	r2, [pc, #36]	; (8009c4c <chk_lock+0xb4>)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	4413      	add	r3, r2
 8009c2e:	330c      	adds	r3, #12
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c36:	d101      	bne.n	8009c3c <chk_lock+0xa4>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	e000      	b.n	8009c3e <chk_lock+0xa6>
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	20001544 	.word	0x20001544

08009c50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c56:	2300      	movs	r3, #0
 8009c58:	607b      	str	r3, [r7, #4]
 8009c5a:	e002      	b.n	8009c62 <enq_lock+0x12>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	607b      	str	r3, [r7, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d806      	bhi.n	8009c76 <enq_lock+0x26>
 8009c68:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <enq_lock+0x40>)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	011b      	lsls	r3, r3, #4
 8009c6e:	4413      	add	r3, r2
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1f2      	bne.n	8009c5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	bf14      	ite	ne
 8009c7c:	2301      	movne	r3, #1
 8009c7e:	2300      	moveq	r3, #0
 8009c80:	b2db      	uxtb	r3, r3
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	20001544 	.word	0x20001544

08009c94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	e01f      	b.n	8009ce4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ca4:	4a41      	ldr	r2, [pc, #260]	; (8009dac <inc_lock+0x118>)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	011b      	lsls	r3, r3, #4
 8009caa:	4413      	add	r3, r2
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d113      	bne.n	8009cde <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009cb6:	4a3d      	ldr	r2, [pc, #244]	; (8009dac <inc_lock+0x118>)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	011b      	lsls	r3, r3, #4
 8009cbc:	4413      	add	r3, r2
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d109      	bne.n	8009cde <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009cca:	4a38      	ldr	r2, [pc, #224]	; (8009dac <inc_lock+0x118>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	011b      	lsls	r3, r3, #4
 8009cd0:	4413      	add	r3, r2
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d006      	beq.n	8009cec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d9dc      	bls.n	8009ca4 <inc_lock+0x10>
 8009cea:	e000      	b.n	8009cee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009cec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d132      	bne.n	8009d5a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	e002      	b.n	8009d00 <inc_lock+0x6c>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	60fb      	str	r3, [r7, #12]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d806      	bhi.n	8009d14 <inc_lock+0x80>
 8009d06:	4a29      	ldr	r2, [pc, #164]	; (8009dac <inc_lock+0x118>)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	011b      	lsls	r3, r3, #4
 8009d0c:	4413      	add	r3, r2
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1f2      	bne.n	8009cfa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d101      	bne.n	8009d1e <inc_lock+0x8a>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	e040      	b.n	8009da0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	4922      	ldr	r1, [pc, #136]	; (8009dac <inc_lock+0x118>)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	011b      	lsls	r3, r3, #4
 8009d28:	440b      	add	r3, r1
 8009d2a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	491e      	ldr	r1, [pc, #120]	; (8009dac <inc_lock+0x118>)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	011b      	lsls	r3, r3, #4
 8009d36:	440b      	add	r3, r1
 8009d38:	3304      	adds	r3, #4
 8009d3a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	695a      	ldr	r2, [r3, #20]
 8009d40:	491a      	ldr	r1, [pc, #104]	; (8009dac <inc_lock+0x118>)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	011b      	lsls	r3, r3, #4
 8009d46:	440b      	add	r3, r1
 8009d48:	3308      	adds	r3, #8
 8009d4a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d4c:	4a17      	ldr	r2, [pc, #92]	; (8009dac <inc_lock+0x118>)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	011b      	lsls	r3, r3, #4
 8009d52:	4413      	add	r3, r2
 8009d54:	330c      	adds	r3, #12
 8009d56:	2200      	movs	r2, #0
 8009d58:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d009      	beq.n	8009d74 <inc_lock+0xe0>
 8009d60:	4a12      	ldr	r2, [pc, #72]	; (8009dac <inc_lock+0x118>)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	011b      	lsls	r3, r3, #4
 8009d66:	4413      	add	r3, r2
 8009d68:	330c      	adds	r3, #12
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <inc_lock+0xe0>
 8009d70:	2300      	movs	r3, #0
 8009d72:	e015      	b.n	8009da0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d108      	bne.n	8009d8c <inc_lock+0xf8>
 8009d7a:	4a0c      	ldr	r2, [pc, #48]	; (8009dac <inc_lock+0x118>)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	011b      	lsls	r3, r3, #4
 8009d80:	4413      	add	r3, r2
 8009d82:	330c      	adds	r3, #12
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	3301      	adds	r3, #1
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	e001      	b.n	8009d90 <inc_lock+0xfc>
 8009d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d90:	4906      	ldr	r1, [pc, #24]	; (8009dac <inc_lock+0x118>)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	011b      	lsls	r3, r3, #4
 8009d96:	440b      	add	r3, r1
 8009d98:	330c      	adds	r3, #12
 8009d9a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3301      	adds	r3, #1
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	20001544 	.word	0x20001544

08009db0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	607b      	str	r3, [r7, #4]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d825      	bhi.n	8009e10 <dec_lock+0x60>
		n = Files[i].ctr;
 8009dc4:	4a17      	ldr	r2, [pc, #92]	; (8009e24 <dec_lock+0x74>)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	011b      	lsls	r3, r3, #4
 8009dca:	4413      	add	r3, r2
 8009dcc:	330c      	adds	r3, #12
 8009dce:	881b      	ldrh	r3, [r3, #0]
 8009dd0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009dd2:	89fb      	ldrh	r3, [r7, #14]
 8009dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dd8:	d101      	bne.n	8009dde <dec_lock+0x2e>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009dde:	89fb      	ldrh	r3, [r7, #14]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d002      	beq.n	8009dea <dec_lock+0x3a>
 8009de4:	89fb      	ldrh	r3, [r7, #14]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009dea:	4a0e      	ldr	r2, [pc, #56]	; (8009e24 <dec_lock+0x74>)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	011b      	lsls	r3, r3, #4
 8009df0:	4413      	add	r3, r2
 8009df2:	330c      	adds	r3, #12
 8009df4:	89fa      	ldrh	r2, [r7, #14]
 8009df6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009df8:	89fb      	ldrh	r3, [r7, #14]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d105      	bne.n	8009e0a <dec_lock+0x5a>
 8009dfe:	4a09      	ldr	r2, [pc, #36]	; (8009e24 <dec_lock+0x74>)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	4413      	add	r3, r2
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	737b      	strb	r3, [r7, #13]
 8009e0e:	e001      	b.n	8009e14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009e10:	2302      	movs	r3, #2
 8009e12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009e14:	7b7b      	ldrb	r3, [r7, #13]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20001544 	.word	0x20001544

08009e28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009e30:	2300      	movs	r3, #0
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	e010      	b.n	8009e58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009e36:	4a0d      	ldr	r2, [pc, #52]	; (8009e6c <clear_lock+0x44>)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	011b      	lsls	r3, r3, #4
 8009e3c:	4413      	add	r3, r2
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d105      	bne.n	8009e52 <clear_lock+0x2a>
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <clear_lock+0x44>)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	4413      	add	r3, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3301      	adds	r3, #1
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d9eb      	bls.n	8009e36 <clear_lock+0xe>
	}
}
 8009e5e:	bf00      	nop
 8009e60:	bf00      	nop
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	20001544 	.word	0x20001544

08009e70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	78db      	ldrb	r3, [r3, #3]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d034      	beq.n	8009eee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	7858      	ldrb	r0, [r3, #1]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e94:	2301      	movs	r3, #1
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	f7ff fd0e 	bl	80098b8 <disk_write>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d002      	beq.n	8009ea8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	73fb      	strb	r3, [r7, #15]
 8009ea6:	e022      	b.n	8009eee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	1ad2      	subs	r2, r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	69db      	ldr	r3, [r3, #28]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d217      	bcs.n	8009eee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	789b      	ldrb	r3, [r3, #2]
 8009ec2:	613b      	str	r3, [r7, #16]
 8009ec4:	e010      	b.n	8009ee8 <sync_window+0x78>
					wsect += fs->fsize;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4413      	add	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	7858      	ldrb	r0, [r3, #1]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009eda:	2301      	movs	r3, #1
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	f7ff fceb 	bl	80098b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	613b      	str	r3, [r7, #16]
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d8eb      	bhi.n	8009ec6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d01b      	beq.n	8009f48 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff ffad 	bl	8009e70 <sync_window>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d113      	bne.n	8009f48 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	7858      	ldrb	r0, [r3, #1]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	f7ff fca3 	bl	8009878 <disk_read>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d004      	beq.n	8009f42 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff ff87 	bl	8009e70 <sync_window>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d158      	bne.n	800a01e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d148      	bne.n	800a006 <sync_fs+0xb2>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	791b      	ldrb	r3, [r3, #4]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d144      	bne.n	800a006 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3334      	adds	r3, #52	; 0x34
 8009f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff fd77 	bl	8009a7a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3334      	adds	r3, #52	; 0x34
 8009f90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f94:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7ff fd06 	bl	80099aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3334      	adds	r3, #52	; 0x34
 8009fa2:	4921      	ldr	r1, [pc, #132]	; (800a028 <sync_fs+0xd4>)
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff fd1b 	bl	80099e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3334      	adds	r3, #52	; 0x34
 8009fae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009fb2:	491e      	ldr	r1, [pc, #120]	; (800a02c <sync_fs+0xd8>)
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7ff fd13 	bl	80099e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	3334      	adds	r3, #52	; 0x34
 8009fbe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f7ff fd09 	bl	80099e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3334      	adds	r3, #52	; 0x34
 8009fd2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4610      	mov	r0, r2
 8009fde:	f7ff fcff 	bl	80099e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	1c5a      	adds	r2, r3, #1
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	7858      	ldrb	r0, [r3, #1]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	f7ff fc5c 	bl	80098b8 <disk_write>
			fs->fsi_flag = 0;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	785b      	ldrb	r3, [r3, #1]
 800a00a:	2200      	movs	r2, #0
 800a00c:	2100      	movs	r1, #0
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fc72 	bl	80098f8 <disk_ioctl>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <sync_fs+0xca>
 800a01a:	2301      	movs	r3, #1
 800a01c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	41615252 	.word	0x41615252
 800a02c:	61417272 	.word	0x61417272

0800a030 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	3b02      	subs	r3, #2
 800a03e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	3b02      	subs	r3, #2
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d301      	bcc.n	800a050 <clust2sect+0x20>
 800a04c:	2300      	movs	r3, #0
 800a04e:	e008      	b.n	800a062 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	895b      	ldrh	r3, [r3, #10]
 800a054:	461a      	mov	r2, r3
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	fb03 f202 	mul.w	r2, r3, r2
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a060:	4413      	add	r3, r2
}
 800a062:	4618      	mov	r0, r3
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b086      	sub	sp, #24
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d904      	bls.n	800a08e <get_fat+0x20>
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d302      	bcc.n	800a094 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a08e:	2301      	movs	r3, #1
 800a090:	617b      	str	r3, [r7, #20]
 800a092:	e08f      	b.n	800a1b4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a098:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d062      	beq.n	800a168 <get_fat+0xfa>
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	dc7c      	bgt.n	800a1a0 <get_fat+0x132>
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d002      	beq.n	800a0b0 <get_fat+0x42>
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d042      	beq.n	800a134 <get_fat+0xc6>
 800a0ae:	e077      	b.n	800a1a0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	085b      	lsrs	r3, r3, #1
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	0a5b      	lsrs	r3, r3, #9
 800a0c6:	4413      	add	r3, r2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6938      	ldr	r0, [r7, #16]
 800a0cc:	f7ff ff14 	bl	8009ef8 <move_window>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d167      	bne.n	800a1a6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	60fa      	str	r2, [r7, #12]
 800a0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	0a5b      	lsrs	r3, r3, #9
 800a0f2:	4413      	add	r3, r2
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6938      	ldr	r0, [r7, #16]
 800a0f8:	f7ff fefe 	bl	8009ef8 <move_window>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d153      	bne.n	800a1aa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	4413      	add	r3, r2
 800a10c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a110:	021b      	lsls	r3, r3, #8
 800a112:	461a      	mov	r2, r3
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	4313      	orrs	r3, r2
 800a118:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <get_fat+0xbc>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	091b      	lsrs	r3, r3, #4
 800a128:	e002      	b.n	800a130 <get_fat+0xc2>
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a130:	617b      	str	r3, [r7, #20]
			break;
 800a132:	e03f      	b.n	800a1b4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	0a1b      	lsrs	r3, r3, #8
 800a13c:	4413      	add	r3, r2
 800a13e:	4619      	mov	r1, r3
 800a140:	6938      	ldr	r0, [r7, #16]
 800a142:	f7ff fed9 	bl	8009ef8 <move_window>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d130      	bne.n	800a1ae <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a15a:	4413      	add	r3, r2
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7ff fbe9 	bl	8009934 <ld_word>
 800a162:	4603      	mov	r3, r0
 800a164:	617b      	str	r3, [r7, #20]
			break;
 800a166:	e025      	b.n	800a1b4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	09db      	lsrs	r3, r3, #7
 800a170:	4413      	add	r3, r2
 800a172:	4619      	mov	r1, r3
 800a174:	6938      	ldr	r0, [r7, #16]
 800a176:	f7ff febf 	bl	8009ef8 <move_window>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d118      	bne.n	800a1b2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a18e:	4413      	add	r3, r2
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff fbe7 	bl	8009964 <ld_dword>
 800a196:	4603      	mov	r3, r0
 800a198:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a19c:	617b      	str	r3, [r7, #20]
			break;
 800a19e:	e009      	b.n	800a1b4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	e006      	b.n	800a1b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1a6:	bf00      	nop
 800a1a8:	e004      	b.n	800a1b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1aa:	bf00      	nop
 800a1ac:	e002      	b.n	800a1b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1ae:	bf00      	nop
 800a1b0:	e000      	b.n	800a1b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a1b2:	bf00      	nop
		}
	}

	return val;
 800a1b4:	697b      	ldr	r3, [r7, #20]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a1be:	b590      	push	{r4, r7, lr}
 800a1c0:	b089      	sub	sp, #36	; 0x24
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	60b9      	str	r1, [r7, #8]
 800a1c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	f240 80d2 	bls.w	800a37a <put_fat+0x1bc>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	f080 80cc 	bcs.w	800a37a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	f000 8096 	beq.w	800a318 <put_fat+0x15a>
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	f300 80cd 	bgt.w	800a38c <put_fat+0x1ce>
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d002      	beq.n	800a1fc <put_fat+0x3e>
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d06e      	beq.n	800a2d8 <put_fat+0x11a>
 800a1fa:	e0c7      	b.n	800a38c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	61bb      	str	r3, [r7, #24]
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	085b      	lsrs	r3, r3, #1
 800a204:	69ba      	ldr	r2, [r7, #24]
 800a206:	4413      	add	r3, r2
 800a208:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	0a5b      	lsrs	r3, r3, #9
 800a212:	4413      	add	r3, r2
 800a214:	4619      	mov	r1, r3
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f7ff fe6e 	bl	8009ef8 <move_window>
 800a21c:	4603      	mov	r3, r0
 800a21e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a220:	7ffb      	ldrb	r3, [r7, #31]
 800a222:	2b00      	cmp	r3, #0
 800a224:	f040 80ab 	bne.w	800a37e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	1c59      	adds	r1, r3, #1
 800a232:	61b9      	str	r1, [r7, #24]
 800a234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a238:	4413      	add	r3, r2
 800a23a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00d      	beq.n	800a262 <put_fat+0xa4>
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b25b      	sxtb	r3, r3
 800a24c:	f003 030f 	and.w	r3, r3, #15
 800a250:	b25a      	sxtb	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	b2db      	uxtb	r3, r3
 800a256:	011b      	lsls	r3, r3, #4
 800a258:	b25b      	sxtb	r3, r3
 800a25a:	4313      	orrs	r3, r2
 800a25c:	b25b      	sxtb	r3, r3
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	e001      	b.n	800a266 <put_fat+0xa8>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	b2db      	uxtb	r3, r3
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2201      	movs	r2, #1
 800a26e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	0a5b      	lsrs	r3, r3, #9
 800a278:	4413      	add	r3, r2
 800a27a:	4619      	mov	r1, r3
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f7ff fe3b 	bl	8009ef8 <move_window>
 800a282:	4603      	mov	r3, r0
 800a284:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a286:	7ffb      	ldrb	r3, [r7, #31]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d17a      	bne.n	800a382 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a298:	4413      	add	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <put_fat+0xf0>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	091b      	lsrs	r3, r3, #4
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	e00e      	b.n	800a2cc <put_fat+0x10e>
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	b25b      	sxtb	r3, r3
 800a2b4:	f023 030f 	bic.w	r3, r3, #15
 800a2b8:	b25a      	sxtb	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	0a1b      	lsrs	r3, r3, #8
 800a2be:	b25b      	sxtb	r3, r3
 800a2c0:	f003 030f 	and.w	r3, r3, #15
 800a2c4:	b25b      	sxtb	r3, r3
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	b25b      	sxtb	r3, r3
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	70da      	strb	r2, [r3, #3]
			break;
 800a2d6:	e059      	b.n	800a38c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	0a1b      	lsrs	r3, r3, #8
 800a2e0:	4413      	add	r3, r2
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff fe07 	bl	8009ef8 <move_window>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2ee:	7ffb      	ldrb	r3, [r7, #31]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d148      	bne.n	800a386 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	005b      	lsls	r3, r3, #1
 800a2fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a302:	4413      	add	r3, r2
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	b292      	uxth	r2, r2
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff fb4d 	bl	80099aa <st_word>
			fs->wflag = 1;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2201      	movs	r2, #1
 800a314:	70da      	strb	r2, [r3, #3]
			break;
 800a316:	e039      	b.n	800a38c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	09db      	lsrs	r3, r3, #7
 800a320:	4413      	add	r3, r2
 800a322:	4619      	mov	r1, r3
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7ff fde7 	bl	8009ef8 <move_window>
 800a32a:	4603      	mov	r3, r0
 800a32c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a32e:	7ffb      	ldrb	r3, [r7, #31]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d12a      	bne.n	800a38a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a348:	4413      	add	r3, r2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7ff fb0a 	bl	8009964 <ld_dword>
 800a350:	4603      	mov	r3, r0
 800a352:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a356:	4323      	orrs	r3, r4
 800a358:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a368:	4413      	add	r3, r2
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7ff fb37 	bl	80099e0 <st_dword>
			fs->wflag = 1;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2201      	movs	r2, #1
 800a376:	70da      	strb	r2, [r3, #3]
			break;
 800a378:	e008      	b.n	800a38c <put_fat+0x1ce>
		}
	}
 800a37a:	bf00      	nop
 800a37c:	e006      	b.n	800a38c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a37e:	bf00      	nop
 800a380:	e004      	b.n	800a38c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a382:	bf00      	nop
 800a384:	e002      	b.n	800a38c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a386:	bf00      	nop
 800a388:	e000      	b.n	800a38c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a38a:	bf00      	nop
	return res;
 800a38c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3724      	adds	r7, #36	; 0x24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd90      	pop	{r4, r7, pc}

0800a396 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b088      	sub	sp, #32
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d904      	bls.n	800a3bc <remove_chain+0x26>
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d301      	bcc.n	800a3c0 <remove_chain+0x2a>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e04b      	b.n	800a458 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00c      	beq.n	800a3e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a3c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	69b8      	ldr	r0, [r7, #24]
 800a3ce:	f7ff fef6 	bl	800a1be <put_fat>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a3d6:	7ffb      	ldrb	r3, [r7, #31]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <remove_chain+0x4a>
 800a3dc:	7ffb      	ldrb	r3, [r7, #31]
 800a3de:	e03b      	b.n	800a458 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f7ff fe43 	bl	800a06e <get_fat>
 800a3e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d031      	beq.n	800a454 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d101      	bne.n	800a3fa <remove_chain+0x64>
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	e02e      	b.n	800a458 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a400:	d101      	bne.n	800a406 <remove_chain+0x70>
 800a402:	2301      	movs	r3, #1
 800a404:	e028      	b.n	800a458 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a406:	2200      	movs	r2, #0
 800a408:	68b9      	ldr	r1, [r7, #8]
 800a40a:	69b8      	ldr	r0, [r7, #24]
 800a40c:	f7ff fed7 	bl	800a1be <put_fat>
 800a410:	4603      	mov	r3, r0
 800a412:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a414:	7ffb      	ldrb	r3, [r7, #31]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <remove_chain+0x88>
 800a41a:	7ffb      	ldrb	r3, [r7, #31]
 800a41c:	e01c      	b.n	800a458 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	695a      	ldr	r2, [r3, #20]
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	3b02      	subs	r3, #2
 800a428:	429a      	cmp	r2, r3
 800a42a:	d20b      	bcs.n	800a444 <remove_chain+0xae>
			fs->free_clst++;
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	791b      	ldrb	r3, [r3, #4]
 800a43a:	f043 0301 	orr.w	r3, r3, #1
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d3c6      	bcc.n	800a3e0 <remove_chain+0x4a>
 800a452:	e000      	b.n	800a456 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a454:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3720      	adds	r7, #32
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10d      	bne.n	800a492 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d004      	beq.n	800a48c <create_chain+0x2c>
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	69ba      	ldr	r2, [r7, #24]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d31b      	bcc.n	800a4c4 <create_chain+0x64>
 800a48c:	2301      	movs	r3, #1
 800a48e:	61bb      	str	r3, [r7, #24]
 800a490:	e018      	b.n	800a4c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7ff fdea 	bl	800a06e <get_fat>
 800a49a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d801      	bhi.n	800a4a6 <create_chain+0x46>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e070      	b.n	800a588 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4ac:	d101      	bne.n	800a4b2 <create_chain+0x52>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	e06a      	b.n	800a588 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d201      	bcs.n	800a4c0 <create_chain+0x60>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	e063      	b.n	800a588 <create_chain+0x128>
		scl = clst;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	69fa      	ldr	r2, [r7, #28]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d307      	bcc.n	800a4e8 <create_chain+0x88>
				ncl = 2;
 800a4d8:	2302      	movs	r3, #2
 800a4da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a4dc:	69fa      	ldr	r2, [r7, #28]
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d901      	bls.n	800a4e8 <create_chain+0x88>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	e04f      	b.n	800a588 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a4e8:	69f9      	ldr	r1, [r7, #28]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff fdbf 	bl	800a06e <get_fat>
 800a4f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00e      	beq.n	800a516 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d003      	beq.n	800a506 <create_chain+0xa6>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a504:	d101      	bne.n	800a50a <create_chain+0xaa>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	e03e      	b.n	800a588 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a50a:	69fa      	ldr	r2, [r7, #28]
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d1da      	bne.n	800a4c8 <create_chain+0x68>
 800a512:	2300      	movs	r3, #0
 800a514:	e038      	b.n	800a588 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a516:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a51c:	69f9      	ldr	r1, [r7, #28]
 800a51e:	6938      	ldr	r0, [r7, #16]
 800a520:	f7ff fe4d 	bl	800a1be <put_fat>
 800a524:	4603      	mov	r3, r0
 800a526:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d109      	bne.n	800a542 <create_chain+0xe2>
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d006      	beq.n	800a542 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	6938      	ldr	r0, [r7, #16]
 800a53a:	f7ff fe40 	bl	800a1be <put_fat>
 800a53e:	4603      	mov	r3, r0
 800a540:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a542:	7dfb      	ldrb	r3, [r7, #23]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d116      	bne.n	800a576 <create_chain+0x116>
		fs->last_clst = ncl;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	69fa      	ldr	r2, [r7, #28]
 800a54c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	695a      	ldr	r2, [r3, #20]
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	3b02      	subs	r3, #2
 800a558:	429a      	cmp	r2, r3
 800a55a:	d804      	bhi.n	800a566 <create_chain+0x106>
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	1e5a      	subs	r2, r3, #1
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	791b      	ldrb	r3, [r3, #4]
 800a56a:	f043 0301 	orr.w	r3, r3, #1
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	711a      	strb	r2, [r3, #4]
 800a574:	e007      	b.n	800a586 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a576:	7dfb      	ldrb	r3, [r7, #23]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d102      	bne.n	800a582 <create_chain+0x122>
 800a57c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a580:	e000      	b.n	800a584 <create_chain+0x124>
 800a582:	2301      	movs	r3, #1
 800a584:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a586:	69fb      	ldr	r3, [r7, #28]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3720      	adds	r7, #32
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	0a5b      	lsrs	r3, r3, #9
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	8952      	ldrh	r2, [r2, #10]
 800a5b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	1d1a      	adds	r2, r3, #4
 800a5ba:	613a      	str	r2, [r7, #16]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <clmt_clust+0x3a>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e010      	b.n	800a5ec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d307      	bcc.n	800a5e2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	617b      	str	r3, [r7, #20]
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5e0:	e7e9      	b.n	800a5b6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a5e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	4413      	add	r3, r2
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	371c      	adds	r7, #28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a60e:	d204      	bcs.n	800a61a <dir_sdi+0x22>
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	f003 031f 	and.w	r3, r3, #31
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <dir_sdi+0x26>
		return FR_INT_ERR;
 800a61a:	2302      	movs	r3, #2
 800a61c:	e063      	b.n	800a6e6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d106      	bne.n	800a63e <dir_sdi+0x46>
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	2b02      	cmp	r3, #2
 800a636:	d902      	bls.n	800a63e <dir_sdi+0x46>
		clst = fs->dirbase;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10c      	bne.n	800a65e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	095b      	lsrs	r3, r3, #5
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	8912      	ldrh	r2, [r2, #8]
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d301      	bcc.n	800a654 <dir_sdi+0x5c>
 800a650:	2302      	movs	r3, #2
 800a652:	e048      	b.n	800a6e6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	61da      	str	r2, [r3, #28]
 800a65c:	e029      	b.n	800a6b2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	895b      	ldrh	r3, [r3, #10]
 800a662:	025b      	lsls	r3, r3, #9
 800a664:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a666:	e019      	b.n	800a69c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6979      	ldr	r1, [r7, #20]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7ff fcfe 	bl	800a06e <get_fat>
 800a672:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a67a:	d101      	bne.n	800a680 <dir_sdi+0x88>
 800a67c:	2301      	movs	r3, #1
 800a67e:	e032      	b.n	800a6e6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d904      	bls.n	800a690 <dir_sdi+0x98>
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d301      	bcc.n	800a694 <dir_sdi+0x9c>
 800a690:	2302      	movs	r3, #2
 800a692:	e028      	b.n	800a6e6 <dir_sdi+0xee>
			ofs -= csz;
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d2e1      	bcs.n	800a668 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a6a4:	6979      	ldr	r1, [r7, #20]
 800a6a6:	6938      	ldr	r0, [r7, #16]
 800a6a8:	f7ff fcc2 	bl	800a030 <clust2sect>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <dir_sdi+0xcc>
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	e010      	b.n	800a6e6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	69da      	ldr	r2, [r3, #28]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	0a5b      	lsrs	r3, r3, #9
 800a6cc:	441a      	add	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6de:	441a      	add	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b086      	sub	sp, #24
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	695b      	ldr	r3, [r3, #20]
 800a702:	3320      	adds	r3, #32
 800a704:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <dir_next+0x28>
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a714:	d301      	bcc.n	800a71a <dir_next+0x2c>
 800a716:	2304      	movs	r3, #4
 800a718:	e0aa      	b.n	800a870 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a720:	2b00      	cmp	r3, #0
 800a722:	f040 8098 	bne.w	800a856 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	69db      	ldr	r3, [r3, #28]
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10b      	bne.n	800a750 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	095b      	lsrs	r3, r3, #5
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	8912      	ldrh	r2, [r2, #8]
 800a740:	4293      	cmp	r3, r2
 800a742:	f0c0 8088 	bcc.w	800a856 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	61da      	str	r2, [r3, #28]
 800a74c:	2304      	movs	r3, #4
 800a74e:	e08f      	b.n	800a870 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	0a5b      	lsrs	r3, r3, #9
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	8952      	ldrh	r2, [r2, #10]
 800a758:	3a01      	subs	r2, #1
 800a75a:	4013      	ands	r3, r2
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d17a      	bne.n	800a856 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	4619      	mov	r1, r3
 800a768:	4610      	mov	r0, r2
 800a76a:	f7ff fc80 	bl	800a06e <get_fat>
 800a76e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d801      	bhi.n	800a77a <dir_next+0x8c>
 800a776:	2302      	movs	r3, #2
 800a778:	e07a      	b.n	800a870 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a780:	d101      	bne.n	800a786 <dir_next+0x98>
 800a782:	2301      	movs	r3, #1
 800a784:	e074      	b.n	800a870 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d358      	bcc.n	800a842 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d104      	bne.n	800a7a0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	61da      	str	r2, [r3, #28]
 800a79c:	2304      	movs	r3, #4
 800a79e:	e067      	b.n	800a870 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f7ff fe59 	bl	800a460 <create_chain>
 800a7ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <dir_next+0xcc>
 800a7b6:	2307      	movs	r3, #7
 800a7b8:	e05a      	b.n	800a870 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d101      	bne.n	800a7c4 <dir_next+0xd6>
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	e055      	b.n	800a870 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ca:	d101      	bne.n	800a7d0 <dir_next+0xe2>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e04f      	b.n	800a870 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7ff fb4d 	bl	8009e70 <sync_window>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <dir_next+0xf2>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e047      	b.n	800a870 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	3334      	adds	r3, #52	; 0x34
 800a7e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7ff f945 	bl	8009a7a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	613b      	str	r3, [r7, #16]
 800a7f4:	6979      	ldr	r1, [r7, #20]
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7ff fc1a 	bl	800a030 <clust2sect>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	631a      	str	r2, [r3, #48]	; 0x30
 800a802:	e012      	b.n	800a82a <dir_next+0x13c>
						fs->wflag = 1;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2201      	movs	r2, #1
 800a808:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f7ff fb30 	bl	8009e70 <sync_window>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <dir_next+0x12c>
 800a816:	2301      	movs	r3, #1
 800a818:	e02a      	b.n	800a870 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	3301      	adds	r3, #1
 800a81e:	613b      	str	r3, [r7, #16]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	631a      	str	r2, [r3, #48]	; 0x30
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	895b      	ldrh	r3, [r3, #10]
 800a82e:	461a      	mov	r2, r3
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	4293      	cmp	r3, r2
 800a834:	d3e6      	bcc.n	800a804 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	1ad2      	subs	r2, r2, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a848:	6979      	ldr	r1, [r7, #20]
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f7ff fbf0 	bl	800a030 <clust2sect>
 800a850:	4602      	mov	r2, r0
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a868:	441a      	add	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a888:	2100      	movs	r1, #0
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7ff feb4 	bl	800a5f8 <dir_sdi>
 800a890:	4603      	mov	r3, r0
 800a892:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d12b      	bne.n	800a8f2 <dir_alloc+0x7a>
		n = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7ff fb27 	bl	8009ef8 <move_window>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a8ae:	7dfb      	ldrb	r3, [r7, #23]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d11d      	bne.n	800a8f0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	2be5      	cmp	r3, #229	; 0xe5
 800a8bc:	d004      	beq.n	800a8c8 <dir_alloc+0x50>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d107      	bne.n	800a8d8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	613b      	str	r3, [r7, #16]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d102      	bne.n	800a8dc <dir_alloc+0x64>
 800a8d6:	e00c      	b.n	800a8f2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a8d8:	2300      	movs	r3, #0
 800a8da:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a8dc:	2101      	movs	r1, #1
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7ff ff05 	bl	800a6ee <dir_next>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d0d7      	beq.n	800a89e <dir_alloc+0x26>
 800a8ee:	e000      	b.n	800a8f2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a8f0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a8f2:	7dfb      	ldrb	r3, [r7, #23]
 800a8f4:	2b04      	cmp	r3, #4
 800a8f6:	d101      	bne.n	800a8fc <dir_alloc+0x84>
 800a8f8:	2307      	movs	r3, #7
 800a8fa:	75fb      	strb	r3, [r7, #23]
	return res;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	331a      	adds	r3, #26
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff f80d 	bl	8009934 <ld_word>
 800a91a:	4603      	mov	r3, r0
 800a91c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	2b03      	cmp	r3, #3
 800a924:	d109      	bne.n	800a93a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	3314      	adds	r3, #20
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff f802 	bl	8009934 <ld_word>
 800a930:	4603      	mov	r3, r0
 800a932:	041b      	lsls	r3, r3, #16
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	4313      	orrs	r3, r2
 800a938:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a93a:	68fb      	ldr	r3, [r7, #12]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	331a      	adds	r3, #26
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	b292      	uxth	r2, r2
 800a958:	4611      	mov	r1, r2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff f825 	bl	80099aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b03      	cmp	r3, #3
 800a966:	d109      	bne.n	800a97c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f103 0214 	add.w	r2, r3, #20
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	0c1b      	lsrs	r3, r3, #16
 800a972:	b29b      	uxth	r3, r3
 800a974:	4619      	mov	r1, r3
 800a976:	4610      	mov	r0, r2
 800a978:	f7ff f817 	bl	80099aa <st_word>
	}
}
 800a97c:	bf00      	nop
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a98e:	2304      	movs	r3, #4
 800a990:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800a998:	e03c      	b.n	800aa14 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6938      	ldr	r0, [r7, #16]
 800a9a2:	f7ff faa9 	bl	8009ef8 <move_window>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d136      	bne.n	800aa1e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a1b      	ldr	r3, [r3, #32]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d102      	bne.n	800a9c4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a9be:	2304      	movs	r3, #4
 800a9c0:	75fb      	strb	r3, [r7, #23]
 800a9c2:	e031      	b.n	800aa28 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	330b      	adds	r3, #11
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9d0:	73bb      	strb	r3, [r7, #14]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	7bba      	ldrb	r2, [r7, #14]
 800a9d6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	2be5      	cmp	r3, #229	; 0xe5
 800a9dc:	d011      	beq.n	800aa02 <dir_read+0x7e>
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e2:	d00e      	beq.n	800aa02 <dir_read+0x7e>
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	2b0f      	cmp	r3, #15
 800a9e8:	d00b      	beq.n	800aa02 <dir_read+0x7e>
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	f023 0320 	bic.w	r3, r3, #32
 800a9f0:	2b08      	cmp	r3, #8
 800a9f2:	bf0c      	ite	eq
 800a9f4:	2301      	moveq	r3, #1
 800a9f6:	2300      	movne	r3, #0
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d00f      	beq.n	800aa22 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800aa02:	2100      	movs	r1, #0
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7ff fe72 	bl	800a6ee <dir_next>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d108      	bne.n	800aa26 <dir_read+0xa2>
	while (dp->sect) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1be      	bne.n	800a99a <dir_read+0x16>
 800aa1c:	e004      	b.n	800aa28 <dir_read+0xa4>
		if (res != FR_OK) break;
 800aa1e:	bf00      	nop
 800aa20:	e002      	b.n	800aa28 <dir_read+0xa4>
				break;
 800aa22:	bf00      	nop
 800aa24:	e000      	b.n	800aa28 <dir_read+0xa4>
		if (res != FR_OK) break;
 800aa26:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <dir_read+0xb0>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	61da      	str	r2, [r3, #28]
	return res;
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b086      	sub	sp, #24
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7ff fdd2 	bl	800a5f8 <dir_sdi>
 800aa54:	4603      	mov	r3, r0
 800aa56:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <dir_find+0x24>
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
 800aa60:	e03e      	b.n	800aae0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	69db      	ldr	r3, [r3, #28]
 800aa66:	4619      	mov	r1, r3
 800aa68:	6938      	ldr	r0, [r7, #16]
 800aa6a:	f7ff fa45 	bl	8009ef8 <move_window>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d12f      	bne.n	800aad8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a1b      	ldr	r3, [r3, #32]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d102      	bne.n	800aa8c <dir_find+0x4e>
 800aa86:	2304      	movs	r3, #4
 800aa88:	75fb      	strb	r3, [r7, #23]
 800aa8a:	e028      	b.n	800aade <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	330b      	adds	r3, #11
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	330b      	adds	r3, #11
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	f003 0308 	and.w	r3, r3, #8
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10a      	bne.n	800aac4 <dir_find+0x86>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a18      	ldr	r0, [r3, #32]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	3324      	adds	r3, #36	; 0x24
 800aab6:	220b      	movs	r2, #11
 800aab8:	4619      	mov	r1, r3
 800aaba:	f7fe fff9 	bl	8009ab0 <mem_cmp>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00b      	beq.n	800aadc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aac4:	2100      	movs	r1, #0
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fe11 	bl	800a6ee <dir_next>
 800aacc:	4603      	mov	r3, r0
 800aace:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d0c5      	beq.n	800aa62 <dir_find+0x24>
 800aad6:	e002      	b.n	800aade <dir_find+0xa0>
		if (res != FR_OK) break;
 800aad8:	bf00      	nop
 800aada:	e000      	b.n	800aade <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aadc:	bf00      	nop

	return res;
 800aade:	7dfb      	ldrb	r3, [r7, #23]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3718      	adds	r7, #24
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff febd 	bl	800a878 <dir_alloc>
 800aafe:	4603      	mov	r3, r0
 800ab00:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11c      	bne.n	800ab42 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	69db      	ldr	r3, [r3, #28]
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	68b8      	ldr	r0, [r7, #8]
 800ab10:	f7ff f9f2 	bl	8009ef8 <move_window>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d111      	bne.n	800ab42 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	2220      	movs	r2, #32
 800ab24:	2100      	movs	r1, #0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe ffa7 	bl	8009a7a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a18      	ldr	r0, [r3, #32]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3324      	adds	r3, #36	; 0x24
 800ab34:	220b      	movs	r2, #11
 800ab36:	4619      	mov	r1, r3
 800ab38:	f7fe ff7e 	bl	8009a38 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	69db      	ldr	r3, [r3, #28]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d04e      	beq.n	800ac02 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	613b      	str	r3, [r7, #16]
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ab6c:	e021      	b.n	800abb2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a1a      	ldr	r2, [r3, #32]
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	1c59      	adds	r1, r3, #1
 800ab76:	6179      	str	r1, [r7, #20]
 800ab78:	4413      	add	r3, r2
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	d100      	bne.n	800ab86 <get_fileinfo+0x3a>
 800ab84:	e015      	b.n	800abb2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	2b05      	cmp	r3, #5
 800ab8a:	d101      	bne.n	800ab90 <get_fileinfo+0x44>
 800ab8c:	23e5      	movs	r3, #229	; 0xe5
 800ab8e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	2b09      	cmp	r3, #9
 800ab94:	d106      	bne.n	800aba4 <get_fileinfo+0x58>
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	613a      	str	r2, [r7, #16]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	4413      	add	r3, r2
 800aba0:	222e      	movs	r2, #46	; 0x2e
 800aba2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	613a      	str	r2, [r7, #16]
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	4413      	add	r3, r2
 800abae:	7bfa      	ldrb	r2, [r7, #15]
 800abb0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b0a      	cmp	r3, #10
 800abb6:	d9da      	bls.n	800ab6e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	4413      	add	r3, r2
 800abbe:	3309      	adds	r3, #9
 800abc0:	2200      	movs	r2, #0
 800abc2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a1b      	ldr	r3, [r3, #32]
 800abc8:	7ada      	ldrb	r2, [r3, #11]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	331c      	adds	r3, #28
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7fe fec5 	bl	8009964 <ld_dword>
 800abda:	4602      	mov	r2, r0
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	3316      	adds	r3, #22
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe febc 	bl	8009964 <ld_dword>
 800abec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	80da      	strh	r2, [r3, #6]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	0c1b      	lsrs	r3, r3, #16
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	809a      	strh	r2, [r3, #4]
 800ac00:	e000      	b.n	800ac04 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ac02:	bf00      	nop
}
 800ac04:	3718      	adds	r7, #24
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
	...

0800ac0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3324      	adds	r3, #36	; 0x24
 800ac20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ac22:	220b      	movs	r2, #11
 800ac24:	2120      	movs	r1, #32
 800ac26:	68b8      	ldr	r0, [r7, #8]
 800ac28:	f7fe ff27 	bl	8009a7a <mem_set>
	si = i = 0; ni = 8;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	613b      	str	r3, [r7, #16]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	61fb      	str	r3, [r7, #28]
 800ac34:	2308      	movs	r3, #8
 800ac36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	61fa      	str	r2, [r7, #28]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac46:	7efb      	ldrb	r3, [r7, #27]
 800ac48:	2b20      	cmp	r3, #32
 800ac4a:	d94e      	bls.n	800acea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ac4c:	7efb      	ldrb	r3, [r7, #27]
 800ac4e:	2b2f      	cmp	r3, #47	; 0x2f
 800ac50:	d006      	beq.n	800ac60 <create_name+0x54>
 800ac52:	7efb      	ldrb	r3, [r7, #27]
 800ac54:	2b5c      	cmp	r3, #92	; 0x5c
 800ac56:	d110      	bne.n	800ac7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ac58:	e002      	b.n	800ac60 <create_name+0x54>
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	61fb      	str	r3, [r7, #28]
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	4413      	add	r3, r2
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b2f      	cmp	r3, #47	; 0x2f
 800ac6a:	d0f6      	beq.n	800ac5a <create_name+0x4e>
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	2b5c      	cmp	r3, #92	; 0x5c
 800ac76:	d0f0      	beq.n	800ac5a <create_name+0x4e>
			break;
 800ac78:	e038      	b.n	800acec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ac7a:	7efb      	ldrb	r3, [r7, #27]
 800ac7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac7e:	d003      	beq.n	800ac88 <create_name+0x7c>
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d30c      	bcc.n	800aca2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b0b      	cmp	r3, #11
 800ac8c:	d002      	beq.n	800ac94 <create_name+0x88>
 800ac8e:	7efb      	ldrb	r3, [r7, #27]
 800ac90:	2b2e      	cmp	r3, #46	; 0x2e
 800ac92:	d001      	beq.n	800ac98 <create_name+0x8c>
 800ac94:	2306      	movs	r3, #6
 800ac96:	e044      	b.n	800ad22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ac98:	2308      	movs	r3, #8
 800ac9a:	613b      	str	r3, [r7, #16]
 800ac9c:	230b      	movs	r3, #11
 800ac9e:	617b      	str	r3, [r7, #20]
			continue;
 800aca0:	e022      	b.n	800ace8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800aca2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	da04      	bge.n	800acb4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800acaa:	7efb      	ldrb	r3, [r7, #27]
 800acac:	3b80      	subs	r3, #128	; 0x80
 800acae:	4a1f      	ldr	r2, [pc, #124]	; (800ad2c <create_name+0x120>)
 800acb0:	5cd3      	ldrb	r3, [r2, r3]
 800acb2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800acb4:	7efb      	ldrb	r3, [r7, #27]
 800acb6:	4619      	mov	r1, r3
 800acb8:	481d      	ldr	r0, [pc, #116]	; (800ad30 <create_name+0x124>)
 800acba:	f7fe ff20 	bl	8009afe <chk_chr>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <create_name+0xbc>
 800acc4:	2306      	movs	r3, #6
 800acc6:	e02c      	b.n	800ad22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800acc8:	7efb      	ldrb	r3, [r7, #27]
 800acca:	2b60      	cmp	r3, #96	; 0x60
 800accc:	d905      	bls.n	800acda <create_name+0xce>
 800acce:	7efb      	ldrb	r3, [r7, #27]
 800acd0:	2b7a      	cmp	r3, #122	; 0x7a
 800acd2:	d802      	bhi.n	800acda <create_name+0xce>
 800acd4:	7efb      	ldrb	r3, [r7, #27]
 800acd6:	3b20      	subs	r3, #32
 800acd8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	1c5a      	adds	r2, r3, #1
 800acde:	613a      	str	r2, [r7, #16]
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	4413      	add	r3, r2
 800ace4:	7efa      	ldrb	r2, [r7, #27]
 800ace6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ace8:	e7a6      	b.n	800ac38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800acea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	441a      	add	r2, r3
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d101      	bne.n	800ad00 <create_name+0xf4>
 800acfc:	2306      	movs	r3, #6
 800acfe:	e010      	b.n	800ad22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2be5      	cmp	r3, #229	; 0xe5
 800ad06:	d102      	bne.n	800ad0e <create_name+0x102>
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	2205      	movs	r2, #5
 800ad0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ad0e:	7efb      	ldrb	r3, [r7, #27]
 800ad10:	2b20      	cmp	r3, #32
 800ad12:	d801      	bhi.n	800ad18 <create_name+0x10c>
 800ad14:	2204      	movs	r2, #4
 800ad16:	e000      	b.n	800ad1a <create_name+0x10e>
 800ad18:	2200      	movs	r2, #0
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	330b      	adds	r3, #11
 800ad1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ad20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3720      	adds	r7, #32
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	080104c4 	.word	0x080104c4
 800ad30:	080103f4 	.word	0x080103f4

0800ad34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ad48:	e002      	b.n	800ad50 <follow_path+0x1c>
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b2f      	cmp	r3, #47	; 0x2f
 800ad56:	d0f8      	beq.n	800ad4a <follow_path+0x16>
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b5c      	cmp	r3, #92	; 0x5c
 800ad5e:	d0f4      	beq.n	800ad4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	2200      	movs	r2, #0
 800ad64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b1f      	cmp	r3, #31
 800ad6c:	d80a      	bhi.n	800ad84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2280      	movs	r2, #128	; 0x80
 800ad72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ad76:	2100      	movs	r1, #0
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff fc3d 	bl	800a5f8 <dir_sdi>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	75fb      	strb	r3, [r7, #23]
 800ad82:	e043      	b.n	800ae0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad84:	463b      	mov	r3, r7
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7ff ff3f 	bl	800ac0c <create_name>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d134      	bne.n	800ae02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff fe50 	bl	800aa3e <dir_find>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ada8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800adaa:	7dfb      	ldrb	r3, [r7, #23]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00a      	beq.n	800adc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	d127      	bne.n	800ae06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800adb6:	7afb      	ldrb	r3, [r7, #11]
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d122      	bne.n	800ae06 <follow_path+0xd2>
 800adc0:	2305      	movs	r3, #5
 800adc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800adc4:	e01f      	b.n	800ae06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800adc6:	7afb      	ldrb	r3, [r7, #11]
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d11c      	bne.n	800ae0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	799b      	ldrb	r3, [r3, #6]
 800add4:	f003 0310 	and.w	r3, r3, #16
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800addc:	2305      	movs	r3, #5
 800adde:	75fb      	strb	r3, [r7, #23]
 800ade0:	e014      	b.n	800ae0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	695b      	ldr	r3, [r3, #20]
 800adec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf0:	4413      	add	r3, r2
 800adf2:	4619      	mov	r1, r3
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7ff fd86 	bl	800a906 <ld_clust>
 800adfa:	4602      	mov	r2, r0
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae00:	e7c0      	b.n	800ad84 <follow_path+0x50>
			if (res != FR_OK) break;
 800ae02:	bf00      	nop
 800ae04:	e002      	b.n	800ae0c <follow_path+0xd8>
				break;
 800ae06:	bf00      	nop
 800ae08:	e000      	b.n	800ae0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae0a:	bf00      	nop
			}
		}
	}

	return res;
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b087      	sub	sp, #28
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ae1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d031      	beq.n	800ae90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	617b      	str	r3, [r7, #20]
 800ae32:	e002      	b.n	800ae3a <get_ldnumber+0x24>
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	3301      	adds	r3, #1
 800ae38:	617b      	str	r3, [r7, #20]
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b20      	cmp	r3, #32
 800ae40:	d903      	bls.n	800ae4a <get_ldnumber+0x34>
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b3a      	cmp	r3, #58	; 0x3a
 800ae48:	d1f4      	bne.n	800ae34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	2b3a      	cmp	r3, #58	; 0x3a
 800ae50:	d11c      	bne.n	800ae8c <get_ldnumber+0x76>
			tp = *path;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	60fa      	str	r2, [r7, #12]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	3b30      	subs	r3, #48	; 0x30
 800ae62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2b09      	cmp	r3, #9
 800ae68:	d80e      	bhi.n	800ae88 <get_ldnumber+0x72>
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d10a      	bne.n	800ae88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d107      	bne.n	800ae88 <get_ldnumber+0x72>
					vol = (int)i;
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	617b      	str	r3, [r7, #20]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	e002      	b.n	800ae92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ae90:	693b      	ldr	r3, [r7, #16]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	371c      	adds	r7, #28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
	...

0800aea0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	70da      	strb	r2, [r3, #3]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aeb6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff f81c 	bl	8009ef8 <move_window>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <check_fs+0x2a>
 800aec6:	2304      	movs	r3, #4
 800aec8:	e038      	b.n	800af3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3334      	adds	r3, #52	; 0x34
 800aece:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe fd2e 	bl	8009934 <ld_word>
 800aed8:	4603      	mov	r3, r0
 800aeda:	461a      	mov	r2, r3
 800aedc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d001      	beq.n	800aee8 <check_fs+0x48>
 800aee4:	2303      	movs	r3, #3
 800aee6:	e029      	b.n	800af3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aeee:	2be9      	cmp	r3, #233	; 0xe9
 800aef0:	d009      	beq.n	800af06 <check_fs+0x66>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aef8:	2beb      	cmp	r3, #235	; 0xeb
 800aefa:	d11e      	bne.n	800af3a <check_fs+0x9a>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800af02:	2b90      	cmp	r3, #144	; 0x90
 800af04:	d119      	bne.n	800af3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3334      	adds	r3, #52	; 0x34
 800af0a:	3336      	adds	r3, #54	; 0x36
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe fd29 	bl	8009964 <ld_dword>
 800af12:	4603      	mov	r3, r0
 800af14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af18:	4a0a      	ldr	r2, [pc, #40]	; (800af44 <check_fs+0xa4>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d101      	bne.n	800af22 <check_fs+0x82>
 800af1e:	2300      	movs	r3, #0
 800af20:	e00c      	b.n	800af3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3334      	adds	r3, #52	; 0x34
 800af26:	3352      	adds	r3, #82	; 0x52
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fe fd1b 	bl	8009964 <ld_dword>
 800af2e:	4603      	mov	r3, r0
 800af30:	4a05      	ldr	r2, [pc, #20]	; (800af48 <check_fs+0xa8>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d101      	bne.n	800af3a <check_fs+0x9a>
 800af36:	2300      	movs	r3, #0
 800af38:	e000      	b.n	800af3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800af3a:	2302      	movs	r3, #2
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	00544146 	.word	0x00544146
 800af48:	33544146 	.word	0x33544146

0800af4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b096      	sub	sp, #88	; 0x58
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	4613      	mov	r3, r2
 800af58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2200      	movs	r2, #0
 800af5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7ff ff58 	bl	800ae16 <get_ldnumber>
 800af66:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800af68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	da01      	bge.n	800af72 <find_volume+0x26>
 800af6e:	230b      	movs	r3, #11
 800af70:	e235      	b.n	800b3de <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af72:	4aa5      	ldr	r2, [pc, #660]	; (800b208 <find_volume+0x2bc>)
 800af74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <find_volume+0x3a>
 800af82:	230c      	movs	r3, #12
 800af84:	e22b      	b.n	800b3de <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800af86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af88:	f7fe fdd4 	bl	8009b34 <lock_fs>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <find_volume+0x4a>
 800af92:	230f      	movs	r3, #15
 800af94:	e223      	b.n	800b3de <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800af9c:	79fb      	ldrb	r3, [r7, #7]
 800af9e:	f023 0301 	bic.w	r3, r3, #1
 800afa2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01a      	beq.n	800afe2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800afac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fe fc21 	bl	80097f8 <disk_status>
 800afb6:	4603      	mov	r3, r0
 800afb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800afbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10c      	bne.n	800afe2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d007      	beq.n	800afde <find_volume+0x92>
 800afce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afd2:	f003 0304 	and.w	r3, r3, #4
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800afda:	230a      	movs	r3, #10
 800afdc:	e1ff      	b.n	800b3de <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800afde:	2300      	movs	r3, #0
 800afe0:	e1fd      	b.n	800b3de <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	2200      	movs	r2, #0
 800afe6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800afe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afea:	b2da      	uxtb	r2, r3
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	785b      	ldrb	r3, [r3, #1]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fe fc19 	bl	800982c <disk_initialize>
 800affa:	4603      	mov	r3, r0
 800affc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b00c:	2303      	movs	r3, #3
 800b00e:	e1e6      	b.n	800b3de <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d007      	beq.n	800b026 <find_volume+0xda>
 800b016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b01a:	f003 0304 	and.w	r3, r3, #4
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b022:	230a      	movs	r3, #10
 800b024:	e1db      	b.n	800b3de <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b02a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b02c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b02e:	f7ff ff37 	bl	800aea0 <check_fs>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d149      	bne.n	800b0d4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b040:	2300      	movs	r3, #0
 800b042:	643b      	str	r3, [r7, #64]	; 0x40
 800b044:	e01e      	b.n	800b084 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b054:	4413      	add	r3, r2
 800b056:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05a:	3304      	adds	r3, #4
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d006      	beq.n	800b070 <find_volume+0x124>
 800b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b064:	3308      	adds	r3, #8
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fc7c 	bl	8009964 <ld_dword>
 800b06c:	4602      	mov	r2, r0
 800b06e:	e000      	b.n	800b072 <find_volume+0x126>
 800b070:	2200      	movs	r2, #0
 800b072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	3358      	adds	r3, #88	; 0x58
 800b078:	443b      	add	r3, r7
 800b07a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b080:	3301      	adds	r3, #1
 800b082:	643b      	str	r3, [r7, #64]	; 0x40
 800b084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b086:	2b03      	cmp	r3, #3
 800b088:	d9dd      	bls.n	800b046 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b08a:	2300      	movs	r3, #0
 800b08c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b08e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <find_volume+0x14e>
 800b094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b096:	3b01      	subs	r3, #1
 800b098:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	3358      	adds	r3, #88	; 0x58
 800b0a0:	443b      	add	r3, r7
 800b0a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b0a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b0a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d005      	beq.n	800b0ba <find_volume+0x16e>
 800b0ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0b2:	f7ff fef5 	bl	800aea0 <check_fs>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	e000      	b.n	800b0bc <find_volume+0x170>
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b0c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d905      	bls.n	800b0d4 <find_volume+0x188>
 800b0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	643b      	str	r3, [r7, #64]	; 0x40
 800b0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d9e2      	bls.n	800b09a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	d101      	bne.n	800b0e0 <find_volume+0x194>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e17e      	b.n	800b3de <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b0e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d901      	bls.n	800b0ec <find_volume+0x1a0>
 800b0e8:	230d      	movs	r3, #13
 800b0ea:	e178      	b.n	800b3de <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	3334      	adds	r3, #52	; 0x34
 800b0f0:	330b      	adds	r3, #11
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fe fc1e 	bl	8009934 <ld_word>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0fe:	d001      	beq.n	800b104 <find_volume+0x1b8>
 800b100:	230d      	movs	r3, #13
 800b102:	e16c      	b.n	800b3de <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	3334      	adds	r3, #52	; 0x34
 800b108:	3316      	adds	r3, #22
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fe fc12 	bl	8009934 <ld_word>
 800b110:	4603      	mov	r3, r0
 800b112:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b116:	2b00      	cmp	r3, #0
 800b118:	d106      	bne.n	800b128 <find_volume+0x1dc>
 800b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11c:	3334      	adds	r3, #52	; 0x34
 800b11e:	3324      	adds	r3, #36	; 0x24
 800b120:	4618      	mov	r0, r3
 800b122:	f7fe fc1f 	bl	8009964 <ld_dword>
 800b126:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b12c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b130:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b136:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	789b      	ldrb	r3, [r3, #2]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d005      	beq.n	800b14c <find_volume+0x200>
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	789b      	ldrb	r3, [r3, #2]
 800b144:	2b02      	cmp	r3, #2
 800b146:	d001      	beq.n	800b14c <find_volume+0x200>
 800b148:	230d      	movs	r3, #13
 800b14a:	e148      	b.n	800b3de <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	789b      	ldrb	r3, [r3, #2]
 800b150:	461a      	mov	r2, r3
 800b152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b154:	fb02 f303 	mul.w	r3, r2, r3
 800b158:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b160:	b29a      	uxth	r2, r3
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b168:	895b      	ldrh	r3, [r3, #10]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d008      	beq.n	800b180 <find_volume+0x234>
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	895b      	ldrh	r3, [r3, #10]
 800b172:	461a      	mov	r2, r3
 800b174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b176:	895b      	ldrh	r3, [r3, #10]
 800b178:	3b01      	subs	r3, #1
 800b17a:	4013      	ands	r3, r2
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <find_volume+0x238>
 800b180:	230d      	movs	r3, #13
 800b182:	e12c      	b.n	800b3de <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b186:	3334      	adds	r3, #52	; 0x34
 800b188:	3311      	adds	r3, #17
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe fbd2 	bl	8009934 <ld_word>
 800b190:	4603      	mov	r3, r0
 800b192:	461a      	mov	r2, r3
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	891b      	ldrh	r3, [r3, #8]
 800b19c:	f003 030f 	and.w	r3, r3, #15
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <find_volume+0x25e>
 800b1a6:	230d      	movs	r3, #13
 800b1a8:	e119      	b.n	800b3de <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	3334      	adds	r3, #52	; 0x34
 800b1ae:	3313      	adds	r3, #19
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fe fbbf 	bl	8009934 <ld_word>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d106      	bne.n	800b1ce <find_volume+0x282>
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c2:	3334      	adds	r3, #52	; 0x34
 800b1c4:	3320      	adds	r3, #32
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fe fbcc 	bl	8009964 <ld_dword>
 800b1cc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	3334      	adds	r3, #52	; 0x34
 800b1d2:	330e      	adds	r3, #14
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fe fbad 	bl	8009934 <ld_word>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b1de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d101      	bne.n	800b1e8 <find_volume+0x29c>
 800b1e4:	230d      	movs	r3, #13
 800b1e6:	e0fa      	b.n	800b3de <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b1e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ec:	4413      	add	r3, r2
 800b1ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1f0:	8912      	ldrh	r2, [r2, #8]
 800b1f2:	0912      	lsrs	r2, r2, #4
 800b1f4:	b292      	uxth	r2, r2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d204      	bcs.n	800b20c <find_volume+0x2c0>
 800b202:	230d      	movs	r3, #13
 800b204:	e0eb      	b.n	800b3de <find_volume+0x492>
 800b206:	bf00      	nop
 800b208:	2000153c 	.word	0x2000153c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b20c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b214:	8952      	ldrh	r2, [r2, #10]
 800b216:	fbb3 f3f2 	udiv	r3, r3, r2
 800b21a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d101      	bne.n	800b226 <find_volume+0x2da>
 800b222:	230d      	movs	r3, #13
 800b224:	e0db      	b.n	800b3de <find_volume+0x492>
		fmt = FS_FAT32;
 800b226:	2303      	movs	r3, #3
 800b228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b232:	4293      	cmp	r3, r2
 800b234:	d802      	bhi.n	800b23c <find_volume+0x2f0>
 800b236:	2302      	movs	r3, #2
 800b238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b242:	4293      	cmp	r3, r2
 800b244:	d802      	bhi.n	800b24c <find_volume+0x300>
 800b246:	2301      	movs	r3, #1
 800b248:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	1c9a      	adds	r2, r3, #2
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b256:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b258:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b25a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b25e:	441a      	add	r2, r3
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b264:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	441a      	add	r2, r3
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b26e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b272:	2b03      	cmp	r3, #3
 800b274:	d11e      	bne.n	800b2b4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	3334      	adds	r3, #52	; 0x34
 800b27a:	332a      	adds	r3, #42	; 0x2a
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe fb59 	bl	8009934 <ld_word>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <find_volume+0x340>
 800b288:	230d      	movs	r3, #13
 800b28a:	e0a8      	b.n	800b3de <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	891b      	ldrh	r3, [r3, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <find_volume+0x34c>
 800b294:	230d      	movs	r3, #13
 800b296:	e0a2      	b.n	800b3de <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	3334      	adds	r3, #52	; 0x34
 800b29c:	332c      	adds	r3, #44	; 0x2c
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe fb60 	bl	8009964 <ld_dword>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	647b      	str	r3, [r7, #68]	; 0x44
 800b2b2:	e01f      	b.n	800b2f4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b6:	891b      	ldrh	r3, [r3, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <find_volume+0x374>
 800b2bc:	230d      	movs	r3, #13
 800b2be:	e08e      	b.n	800b3de <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c6:	441a      	add	r2, r3
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b2cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d103      	bne.n	800b2dc <find_volume+0x390>
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	e00a      	b.n	800b2f2 <find_volume+0x3a6>
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	699a      	ldr	r2, [r3, #24]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	4413      	add	r3, r2
 800b2e6:	085a      	lsrs	r2, r3, #1
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b2f2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	69da      	ldr	r2, [r3, #28]
 800b2f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b2fe:	0a5b      	lsrs	r3, r3, #9
 800b300:	429a      	cmp	r2, r3
 800b302:	d201      	bcs.n	800b308 <find_volume+0x3bc>
 800b304:	230d      	movs	r3, #13
 800b306:	e06a      	b.n	800b3de <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b30e:	615a      	str	r2, [r3, #20]
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	695a      	ldr	r2, [r3, #20]
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	2280      	movs	r2, #128	; 0x80
 800b31c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b31e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b322:	2b03      	cmp	r3, #3
 800b324:	d149      	bne.n	800b3ba <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	3334      	adds	r3, #52	; 0x34
 800b32a:	3330      	adds	r3, #48	; 0x30
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fe fb01 	bl	8009934 <ld_word>
 800b332:	4603      	mov	r3, r0
 800b334:	2b01      	cmp	r3, #1
 800b336:	d140      	bne.n	800b3ba <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b33a:	3301      	adds	r3, #1
 800b33c:	4619      	mov	r1, r3
 800b33e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b340:	f7fe fdda 	bl	8009ef8 <move_window>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d137      	bne.n	800b3ba <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800b34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34c:	2200      	movs	r2, #0
 800b34e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	3334      	adds	r3, #52	; 0x34
 800b354:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fe faeb 	bl	8009934 <ld_word>
 800b35e:	4603      	mov	r3, r0
 800b360:	461a      	mov	r2, r3
 800b362:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b366:	429a      	cmp	r2, r3
 800b368:	d127      	bne.n	800b3ba <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	3334      	adds	r3, #52	; 0x34
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fe faf8 	bl	8009964 <ld_dword>
 800b374:	4603      	mov	r3, r0
 800b376:	4a1c      	ldr	r2, [pc, #112]	; (800b3e8 <find_volume+0x49c>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d11e      	bne.n	800b3ba <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37e:	3334      	adds	r3, #52	; 0x34
 800b380:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b384:	4618      	mov	r0, r3
 800b386:	f7fe faed 	bl	8009964 <ld_dword>
 800b38a:	4603      	mov	r3, r0
 800b38c:	4a17      	ldr	r2, [pc, #92]	; (800b3ec <find_volume+0x4a0>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d113      	bne.n	800b3ba <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b394:	3334      	adds	r3, #52	; 0x34
 800b396:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fe fae2 	bl	8009964 <ld_dword>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a8:	3334      	adds	r3, #52	; 0x34
 800b3aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fe fad8 	bl	8009964 <ld_dword>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b3c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b3c2:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <find_volume+0x4a4>)
 800b3c4:	881b      	ldrh	r3, [r3, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <find_volume+0x4a4>)
 800b3cc:	801a      	strh	r2, [r3, #0]
 800b3ce:	4b08      	ldr	r3, [pc, #32]	; (800b3f0 <find_volume+0x4a4>)
 800b3d0:	881a      	ldrh	r2, [r3, #0]
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b3d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3d8:	f7fe fd26 	bl	8009e28 <clear_lock>
#endif
	return FR_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3758      	adds	r7, #88	; 0x58
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	41615252 	.word	0x41615252
 800b3ec:	61417272 	.word	0x61417272
 800b3f0:	20001540 	.word	0x20001540

0800b3f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b3fe:	2309      	movs	r3, #9
 800b400:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d02e      	beq.n	800b466 <validate+0x72>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d02a      	beq.n	800b466 <validate+0x72>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d025      	beq.n	800b466 <validate+0x72>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	889a      	ldrh	r2, [r3, #4]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	88db      	ldrh	r3, [r3, #6]
 800b424:	429a      	cmp	r2, r3
 800b426:	d11e      	bne.n	800b466 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fe fb81 	bl	8009b34 <lock_fs>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d014      	beq.n	800b462 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	785b      	ldrb	r3, [r3, #1]
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe f9da 	bl	80097f8 <disk_status>
 800b444:	4603      	mov	r3, r0
 800b446:	f003 0301 	and.w	r3, r3, #1
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <validate+0x60>
				res = FR_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]
 800b452:	e008      	b.n	800b466 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2100      	movs	r1, #0
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe fb80 	bl	8009b60 <unlock_fs>
 800b460:	e001      	b.n	800b466 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b462:	230f      	movs	r3, #15
 800b464:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b466:	7bfb      	ldrb	r3, [r7, #15]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d102      	bne.n	800b472 <validate+0x7e>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	e000      	b.n	800b474 <validate+0x80>
 800b472:	2300      	movs	r3, #0
 800b474:	683a      	ldr	r2, [r7, #0]
 800b476:	6013      	str	r3, [r2, #0]
	return res;
 800b478:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
	...

0800b484 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	4613      	mov	r3, r2
 800b490:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b496:	f107 0310 	add.w	r3, r7, #16
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7ff fcbb 	bl	800ae16 <get_ldnumber>
 800b4a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	da01      	bge.n	800b4ac <f_mount+0x28>
 800b4a8:	230b      	movs	r3, #11
 800b4aa:	e048      	b.n	800b53e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b4ac:	4a26      	ldr	r2, [pc, #152]	; (800b548 <f_mount+0xc4>)
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00f      	beq.n	800b4dc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b4bc:	69b8      	ldr	r0, [r7, #24]
 800b4be:	f7fe fcb3 	bl	8009e28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f000 fd88 	bl	800bfdc <ff_del_syncobj>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <f_mount+0x52>
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	e033      	b.n	800b53e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00f      	beq.n	800b502 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	330c      	adds	r3, #12
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	4610      	mov	r0, r2
 800b4f4:	f000 fd57 	bl	800bfa6 <ff_cre_syncobj>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <f_mount+0x7e>
 800b4fe:	2302      	movs	r3, #2
 800b500:	e01d      	b.n	800b53e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	4910      	ldr	r1, [pc, #64]	; (800b548 <f_mount+0xc4>)
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <f_mount+0x94>
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d001      	beq.n	800b51c <f_mount+0x98>
 800b518:	2300      	movs	r3, #0
 800b51a:	e010      	b.n	800b53e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b51c:	f107 010c 	add.w	r1, r7, #12
 800b520:	f107 0308 	add.w	r3, r7, #8
 800b524:	2200      	movs	r2, #0
 800b526:	4618      	mov	r0, r3
 800b528:	f7ff fd10 	bl	800af4c <find_volume>
 800b52c:	4603      	mov	r3, r0
 800b52e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	7dfa      	ldrb	r2, [r7, #23]
 800b534:	4611      	mov	r1, r2
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe fb12 	bl	8009b60 <unlock_fs>
 800b53c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3720      	adds	r7, #32
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	2000153c 	.word	0x2000153c

0800b54c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b098      	sub	sp, #96	; 0x60
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	4613      	mov	r3, r2
 800b558:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d101      	bne.n	800b564 <f_open+0x18>
 800b560:	2309      	movs	r3, #9
 800b562:	e1b4      	b.n	800b8ce <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b564:	79fb      	ldrb	r3, [r7, #7]
 800b566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b56a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b56c:	79fa      	ldrb	r2, [r7, #7]
 800b56e:	f107 0110 	add.w	r1, r7, #16
 800b572:	f107 0308 	add.w	r3, r7, #8
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff fce8 	bl	800af4c <find_volume>
 800b57c:	4603      	mov	r3, r0
 800b57e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b586:	2b00      	cmp	r3, #0
 800b588:	f040 8191 	bne.w	800b8ae <f_open+0x362>
		dj.obj.fs = fs;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	f107 0314 	add.w	r3, r7, #20
 800b596:	4611      	mov	r1, r2
 800b598:	4618      	mov	r0, r3
 800b59a:	f7ff fbcb 	bl	800ad34 <follow_path>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b5a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d11a      	bne.n	800b5e2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b5ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5b0:	b25b      	sxtb	r3, r3
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	da03      	bge.n	800b5be <f_open+0x72>
				res = FR_INVALID_NAME;
 800b5b6:	2306      	movs	r3, #6
 800b5b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5bc:	e011      	b.n	800b5e2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	f023 0301 	bic.w	r3, r3, #1
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	bf14      	ite	ne
 800b5c8:	2301      	movne	r3, #1
 800b5ca:	2300      	moveq	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	f107 0314 	add.w	r3, r7, #20
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fade 	bl	8009b98 <chk_lock>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b5e2:	79fb      	ldrb	r3, [r7, #7]
 800b5e4:	f003 031c 	and.w	r3, r3, #28
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d07f      	beq.n	800b6ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b5ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d017      	beq.n	800b624 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b5f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5f8:	2b04      	cmp	r3, #4
 800b5fa:	d10e      	bne.n	800b61a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b5fc:	f7fe fb28 	bl	8009c50 <enq_lock>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d006      	beq.n	800b614 <f_open+0xc8>
 800b606:	f107 0314 	add.w	r3, r7, #20
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7ff fa6c 	bl	800aae8 <dir_register>
 800b610:	4603      	mov	r3, r0
 800b612:	e000      	b.n	800b616 <f_open+0xca>
 800b614:	2312      	movs	r3, #18
 800b616:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b61a:	79fb      	ldrb	r3, [r7, #7]
 800b61c:	f043 0308 	orr.w	r3, r3, #8
 800b620:	71fb      	strb	r3, [r7, #7]
 800b622:	e010      	b.n	800b646 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b624:	7ebb      	ldrb	r3, [r7, #26]
 800b626:	f003 0311 	and.w	r3, r3, #17
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <f_open+0xea>
					res = FR_DENIED;
 800b62e:	2307      	movs	r3, #7
 800b630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b634:	e007      	b.n	800b646 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	f003 0304 	and.w	r3, r3, #4
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <f_open+0xfa>
 800b640:	2308      	movs	r3, #8
 800b642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d168      	bne.n	800b720 <f_open+0x1d4>
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	f003 0308 	and.w	r3, r3, #8
 800b654:	2b00      	cmp	r3, #0
 800b656:	d063      	beq.n	800b720 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b658:	f7fe f86e 	bl	8009738 <get_fattime>
 800b65c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b660:	330e      	adds	r3, #14
 800b662:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b664:	4618      	mov	r0, r3
 800b666:	f7fe f9bb 	bl	80099e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66c:	3316      	adds	r3, #22
 800b66e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b670:	4618      	mov	r0, r3
 800b672:	f7fe f9b5 	bl	80099e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b678:	330b      	adds	r3, #11
 800b67a:	2220      	movs	r2, #32
 800b67c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b682:	4611      	mov	r1, r2
 800b684:	4618      	mov	r0, r3
 800b686:	f7ff f93e 	bl	800a906 <ld_clust>
 800b68a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b690:	2200      	movs	r2, #0
 800b692:	4618      	mov	r0, r3
 800b694:	f7ff f956 	bl	800a944 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69a:	331c      	adds	r3, #28
 800b69c:	2100      	movs	r1, #0
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe f99e 	bl	80099e0 <st_dword>
					fs->wflag = 1;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d037      	beq.n	800b720 <f_open+0x1d4>
						dw = fs->winsect;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b6b6:	f107 0314 	add.w	r3, r7, #20
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fe fe69 	bl	800a396 <remove_chain>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b6ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d126      	bne.n	800b720 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fe fc0e 	bl	8009ef8 <move_window>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6e6:	3a01      	subs	r2, #1
 800b6e8:	611a      	str	r2, [r3, #16]
 800b6ea:	e019      	b.n	800b720 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b6ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d115      	bne.n	800b720 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b6f4:	7ebb      	ldrb	r3, [r7, #26]
 800b6f6:	f003 0310 	and.w	r3, r3, #16
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d003      	beq.n	800b706 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b6fe:	2304      	movs	r3, #4
 800b700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b704:	e00c      	b.n	800b720 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b706:	79fb      	ldrb	r3, [r7, #7]
 800b708:	f003 0302 	and.w	r3, r3, #2
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d007      	beq.n	800b720 <f_open+0x1d4>
 800b710:	7ebb      	ldrb	r3, [r7, #26]
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	2b00      	cmp	r3, #0
 800b718:	d002      	beq.n	800b720 <f_open+0x1d4>
						res = FR_DENIED;
 800b71a:	2307      	movs	r3, #7
 800b71c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b724:	2b00      	cmp	r3, #0
 800b726:	d128      	bne.n	800b77a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	f003 0308 	and.w	r3, r3, #8
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b738:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	f023 0301 	bic.w	r3, r3, #1
 800b74e:	2b00      	cmp	r3, #0
 800b750:	bf14      	ite	ne
 800b752:	2301      	movne	r3, #1
 800b754:	2300      	moveq	r3, #0
 800b756:	b2db      	uxtb	r3, r3
 800b758:	461a      	mov	r2, r3
 800b75a:	f107 0314 	add.w	r3, r7, #20
 800b75e:	4611      	mov	r1, r2
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fa97 	bl	8009c94 <inc_lock>
 800b766:	4602      	mov	r2, r0
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d102      	bne.n	800b77a <f_open+0x22e>
 800b774:	2302      	movs	r3, #2
 800b776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b77a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f040 8095 	bne.w	800b8ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b788:	4611      	mov	r1, r2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7ff f8bb 	bl	800a906 <ld_clust>
 800b790:	4602      	mov	r2, r0
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b798:	331c      	adds	r3, #28
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fe f8e2 	bl	8009964 <ld_dword>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	88da      	ldrh	r2, [r3, #6]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	79fa      	ldrb	r2, [r7, #7]
 800b7be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	3330      	adds	r3, #48	; 0x30
 800b7d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7da:	2100      	movs	r1, #0
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fe f94c 	bl	8009a7a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b7e2:	79fb      	ldrb	r3, [r7, #7]
 800b7e4:	f003 0320 	and.w	r3, r3, #32
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d060      	beq.n	800b8ae <f_open+0x362>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d05c      	beq.n	800b8ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	68da      	ldr	r2, [r3, #12]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	895b      	ldrh	r3, [r3, #10]
 800b800:	025b      	lsls	r3, r3, #9
 800b802:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	657b      	str	r3, [r7, #84]	; 0x54
 800b810:	e016      	b.n	800b840 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe fc29 	bl	800a06e <get_fat>
 800b81c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b81e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b820:	2b01      	cmp	r3, #1
 800b822:	d802      	bhi.n	800b82a <f_open+0x2de>
 800b824:	2302      	movs	r3, #2
 800b826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b82a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b82c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b830:	d102      	bne.n	800b838 <f_open+0x2ec>
 800b832:	2301      	movs	r3, #1
 800b834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b838:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	657b      	str	r3, [r7, #84]	; 0x54
 800b840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b844:	2b00      	cmp	r3, #0
 800b846:	d103      	bne.n	800b850 <f_open+0x304>
 800b848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b84a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d8e0      	bhi.n	800b812 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b854:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d127      	bne.n	800b8ae <f_open+0x362>
 800b85e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b864:	2b00      	cmp	r3, #0
 800b866:	d022      	beq.n	800b8ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe fbdf 	bl	800a030 <clust2sect>
 800b872:	6478      	str	r0, [r7, #68]	; 0x44
 800b874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b876:	2b00      	cmp	r3, #0
 800b878:	d103      	bne.n	800b882 <f_open+0x336>
						res = FR_INT_ERR;
 800b87a:	2302      	movs	r3, #2
 800b87c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b880:	e015      	b.n	800b8ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b884:	0a5a      	lsrs	r2, r3, #9
 800b886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b888:	441a      	add	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	7858      	ldrb	r0, [r3, #1]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6a1a      	ldr	r2, [r3, #32]
 800b89c:	2301      	movs	r3, #1
 800b89e:	f7fd ffeb 	bl	8009878 <disk_read>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <f_open+0x362>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b8ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <f_open+0x370>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fe f94b 	bl	8009b60 <unlock_fs>
 800b8ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3760      	adds	r7, #96	; 0x60
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b08e      	sub	sp, #56	; 0x38
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	60f8      	str	r0, [r7, #12]
 800b8de:	60b9      	str	r1, [r7, #8]
 800b8e0:	607a      	str	r2, [r7, #4]
 800b8e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f107 0214 	add.w	r2, r7, #20
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff fd7c 	bl	800b3f4 <validate>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b902:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b906:	2b00      	cmp	r3, #0
 800b908:	d107      	bne.n	800b91a <f_read+0x44>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	7d5b      	ldrb	r3, [r3, #21]
 800b90e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b916:	2b00      	cmp	r3, #0
 800b918:	d009      	beq.n	800b92e <f_read+0x58>
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b920:	4611      	mov	r1, r2
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe f91c 	bl	8009b60 <unlock_fs>
 800b928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b92c:	e13d      	b.n	800bbaa <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	7d1b      	ldrb	r3, [r3, #20]
 800b932:	f003 0301 	and.w	r3, r3, #1
 800b936:	2b00      	cmp	r3, #0
 800b938:	d106      	bne.n	800b948 <f_read+0x72>
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	2107      	movs	r1, #7
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fe f90e 	bl	8009b60 <unlock_fs>
 800b944:	2307      	movs	r3, #7
 800b946:	e130      	b.n	800bbaa <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	68da      	ldr	r2, [r3, #12]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	429a      	cmp	r2, r3
 800b95a:	f240 811c 	bls.w	800bb96 <f_read+0x2c0>
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b962:	e118      	b.n	800bb96 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 80e4 	bne.w	800bb3a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	0a5b      	lsrs	r3, r3, #9
 800b978:	697a      	ldr	r2, [r7, #20]
 800b97a:	8952      	ldrh	r2, [r2, #10]
 800b97c:	3a01      	subs	r2, #1
 800b97e:	4013      	ands	r3, r2
 800b980:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d139      	bne.n	800b9fc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d103      	bne.n	800b998 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	633b      	str	r3, [r7, #48]	; 0x30
 800b996:	e013      	b.n	800b9c0 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d007      	beq.n	800b9b0 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f7fe fdf2 	bl	800a590 <clmt_clust>
 800b9ac:	6338      	str	r0, [r7, #48]	; 0x30
 800b9ae:	e007      	b.n	800b9c0 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	69db      	ldr	r3, [r3, #28]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	f7fe fb58 	bl	800a06e <get_fat>
 800b9be:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d809      	bhi.n	800b9da <f_read+0x104>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2202      	movs	r2, #2
 800b9ca:	755a      	strb	r2, [r3, #21]
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	2102      	movs	r1, #2
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fe f8c5 	bl	8009b60 <unlock_fs>
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	e0e7      	b.n	800bbaa <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9e0:	d109      	bne.n	800b9f6 <f_read+0x120>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	755a      	strb	r2, [r3, #21]
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe f8b7 	bl	8009b60 <unlock_fs>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e0d9      	b.n	800bbaa <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9fa:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	69db      	ldr	r3, [r3, #28]
 800ba02:	4619      	mov	r1, r3
 800ba04:	4610      	mov	r0, r2
 800ba06:	f7fe fb13 	bl	800a030 <clust2sect>
 800ba0a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d109      	bne.n	800ba26 <f_read+0x150>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2202      	movs	r2, #2
 800ba16:	755a      	strb	r2, [r3, #21]
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	2102      	movs	r1, #2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fe f89f 	bl	8009b60 <unlock_fs>
 800ba22:	2302      	movs	r3, #2
 800ba24:	e0c1      	b.n	800bbaa <f_read+0x2d4>
			sect += csect;
 800ba26:	69ba      	ldr	r2, [r7, #24]
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	0a5b      	lsrs	r3, r3, #9
 800ba32:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d03e      	beq.n	800bab8 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ba3a:	69fa      	ldr	r2, [r7, #28]
 800ba3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3e:	4413      	add	r3, r2
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	8952      	ldrh	r2, [r2, #10]
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d905      	bls.n	800ba54 <f_read+0x17e>
					cc = fs->csize - csect;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	895b      	ldrh	r3, [r3, #10]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	7858      	ldrb	r0, [r3, #1]
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	69ba      	ldr	r2, [r7, #24]
 800ba5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba5e:	f7fd ff0b 	bl	8009878 <disk_read>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d009      	beq.n	800ba7c <f_read+0x1a6>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	755a      	strb	r2, [r3, #21]
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2101      	movs	r1, #1
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe f874 	bl	8009b60 <unlock_fs>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e096      	b.n	800bbaa <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	7d1b      	ldrb	r3, [r3, #20]
 800ba80:	b25b      	sxtb	r3, r3
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	da14      	bge.n	800bab0 <f_read+0x1da>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6a1a      	ldr	r2, [r3, #32]
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d90d      	bls.n	800bab0 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6a1a      	ldr	r2, [r3, #32]
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	025b      	lsls	r3, r3, #9
 800ba9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baa0:	18d0      	adds	r0, r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	3330      	adds	r3, #48	; 0x30
 800baa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baaa:	4619      	mov	r1, r3
 800baac:	f7fd ffc4 	bl	8009a38 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	025b      	lsls	r3, r3, #9
 800bab4:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bab6:	e05a      	b.n	800bb6e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6a1b      	ldr	r3, [r3, #32]
 800babc:	69ba      	ldr	r2, [r7, #24]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d038      	beq.n	800bb34 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	7d1b      	ldrb	r3, [r3, #20]
 800bac6:	b25b      	sxtb	r3, r3
 800bac8:	2b00      	cmp	r3, #0
 800baca:	da1d      	bge.n	800bb08 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	7858      	ldrb	r0, [r3, #1]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6a1a      	ldr	r2, [r3, #32]
 800bada:	2301      	movs	r3, #1
 800badc:	f7fd feec 	bl	80098b8 <disk_write>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d009      	beq.n	800bafa <f_read+0x224>
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2201      	movs	r2, #1
 800baea:	755a      	strb	r2, [r3, #21]
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2101      	movs	r1, #1
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fe f835 	bl	8009b60 <unlock_fs>
 800baf6:	2301      	movs	r3, #1
 800baf8:	e057      	b.n	800bbaa <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	7d1b      	ldrb	r3, [r3, #20]
 800bafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	7858      	ldrb	r0, [r3, #1]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb12:	2301      	movs	r3, #1
 800bb14:	69ba      	ldr	r2, [r7, #24]
 800bb16:	f7fd feaf 	bl	8009878 <disk_read>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d009      	beq.n	800bb34 <f_read+0x25e>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2201      	movs	r2, #1
 800bb24:	755a      	strb	r2, [r3, #21]
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	2101      	movs	r1, #1
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fe f818 	bl	8009b60 <unlock_fs>
 800bb30:	2301      	movs	r3, #1
 800bb32:	e03a      	b.n	800bbaa <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	69ba      	ldr	r2, [r7, #24]
 800bb38:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb42:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bb46:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bb48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d901      	bls.n	800bb54 <f_read+0x27e>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	699b      	ldr	r3, [r3, #24]
 800bb5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb62:	4413      	add	r3, r2
 800bb64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb66:	4619      	mov	r1, r3
 800bb68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb6a:	f7fd ff65 	bl	8009a38 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bb6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	4413      	add	r3, r2
 800bb74:	627b      	str	r3, [r7, #36]	; 0x24
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	699a      	ldr	r2, [r3, #24]
 800bb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7c:	441a      	add	r2, r3
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	619a      	str	r2, [r3, #24]
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	441a      	add	r2, r3
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	1ad3      	subs	r3, r2, r3
 800bb94:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f47f aee3 	bne.w	800b964 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	2100      	movs	r1, #0
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fd ffdc 	bl	8009b60 <unlock_fs>
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3738      	adds	r7, #56	; 0x38
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b086      	sub	sp, #24
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f107 0208 	add.w	r2, r7, #8
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fc16 	bl	800b3f4 <validate>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d16d      	bne.n	800bcae <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	7d1b      	ldrb	r3, [r3, #20]
 800bbd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d067      	beq.n	800bcae <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	7d1b      	ldrb	r3, [r3, #20]
 800bbe2:	b25b      	sxtb	r3, r3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	da1a      	bge.n	800bc1e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	7858      	ldrb	r0, [r3, #1]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a1a      	ldr	r2, [r3, #32]
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	f7fd fe5e 	bl	80098b8 <disk_write>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d006      	beq.n	800bc10 <f_sync+0x5e>
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	2101      	movs	r1, #1
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fd ffaa 	bl	8009b60 <unlock_fs>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e055      	b.n	800bcbc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	7d1b      	ldrb	r3, [r3, #20]
 800bc14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bc1e:	f7fd fd8b 	bl	8009738 <get_fattime>
 800bc22:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	f7fe f963 	bl	8009ef8 <move_window>
 800bc32:	4603      	mov	r3, r0
 800bc34:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bc36:	7dfb      	ldrb	r3, [r7, #23]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d138      	bne.n	800bcae <f_sync+0xfc>
					dir = fp->dir_ptr;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc40:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	330b      	adds	r3, #11
 800bc46:	781a      	ldrb	r2, [r3, #0]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	330b      	adds	r3, #11
 800bc4c:	f042 0220 	orr.w	r2, r2, #32
 800bc50:	b2d2      	uxtb	r2, r2
 800bc52:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6818      	ldr	r0, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	68f9      	ldr	r1, [r7, #12]
 800bc60:	f7fe fe70 	bl	800a944 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f103 021c 	add.w	r2, r3, #28
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	4610      	mov	r0, r2
 800bc72:	f7fd feb5 	bl	80099e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3316      	adds	r3, #22
 800bc7a:	6939      	ldr	r1, [r7, #16]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fd feaf 	bl	80099e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	3312      	adds	r3, #18
 800bc86:	2100      	movs	r1, #0
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fd fe8e 	bl	80099aa <st_word>
					fs->wflag = 1;
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2201      	movs	r2, #1
 800bc92:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fe f95c 	bl	8009f54 <sync_fs>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	7d1b      	ldrb	r3, [r3, #20]
 800bca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	7dfa      	ldrb	r2, [r7, #23]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fd ff53 	bl	8009b60 <unlock_fs>
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7ff ff70 	bl	800bbb2 <f_sync>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d11d      	bne.n	800bd18 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f107 0208 	add.w	r2, r7, #8
 800bce2:	4611      	mov	r1, r2
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7ff fb85 	bl	800b3f4 <validate>
 800bcea:	4603      	mov	r3, r0
 800bcec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bcee:	7bfb      	ldrb	r3, [r7, #15]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d111      	bne.n	800bd18 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fe f859 	bl	8009db0 <dec_lock>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d102      	bne.n	800bd0e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	2100      	movs	r1, #0
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fd ff24 	bl	8009b60 <unlock_fs>
#endif
		}
	}
	return res;
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b086      	sub	sp, #24
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <f_opendir+0x14>
 800bd32:	2309      	movs	r3, #9
 800bd34:	e06a      	b.n	800be0c <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800bd3a:	f107 010c 	add.w	r1, r7, #12
 800bd3e:	463b      	mov	r3, r7
 800bd40:	2200      	movs	r2, #0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7ff f902 	bl	800af4c <find_volume>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d14f      	bne.n	800bdf2 <f_opendir+0xd0>
		obj->fs = fs;
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f7fe ffe9 	bl	800ad34 <follow_path>
 800bd62:	4603      	mov	r3, r0
 800bd64:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800bd66:	7dfb      	ldrb	r3, [r7, #23]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d13d      	bne.n	800bde8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bd72:	b25b      	sxtb	r3, r3
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	db12      	blt.n	800bd9e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	799b      	ldrb	r3, [r3, #6]
 800bd7c:	f003 0310 	and.w	r3, r3, #16
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00a      	beq.n	800bd9a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	f7fe fdba 	bl	800a906 <ld_clust>
 800bd92:	4602      	mov	r2, r0
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	609a      	str	r2, [r3, #8]
 800bd98:	e001      	b.n	800bd9e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800bd9a:	2305      	movs	r3, #5
 800bd9c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d121      	bne.n	800bde8 <f_opendir+0xc6>
				obj->id = fs->id;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	88da      	ldrh	r2, [r3, #6]
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800bdac:	2100      	movs	r1, #0
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7fe fc22 	bl	800a5f8 <dir_sdi>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d114      	bne.n	800bde8 <f_opendir+0xc6>
					if (obj->sclust) {
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00d      	beq.n	800bde2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7fd ff63 	bl	8009c94 <inc_lock>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d105      	bne.n	800bde8 <f_opendir+0xc6>
 800bddc:	2312      	movs	r3, #18
 800bdde:	75fb      	strb	r3, [r7, #23]
 800bde0:	e002      	b.n	800bde8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	2200      	movs	r2, #0
 800bde6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800bde8:	7dfb      	ldrb	r3, [r7, #23]
 800bdea:	2b04      	cmp	r3, #4
 800bdec:	d101      	bne.n	800bdf2 <f_opendir+0xd0>
 800bdee:	2305      	movs	r3, #5
 800bdf0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <f_opendir+0xdc>
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	7dfa      	ldrb	r2, [r7, #23]
 800be02:	4611      	mov	r1, r2
 800be04:	4618      	mov	r0, r3
 800be06:	f7fd feab 	bl	8009b60 <unlock_fs>
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f107 0208 	add.w	r2, r7, #8
 800be22:	4611      	mov	r1, r2
 800be24:	4618      	mov	r0, r3
 800be26:	f7ff fae5 	bl	800b3f4 <validate>
 800be2a:	4603      	mov	r3, r0
 800be2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d115      	bne.n	800be60 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d006      	beq.n	800be4a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	4618      	mov	r0, r3
 800be42:	f7fd ffb5 	bl	8009db0 <dec_lock>
 800be46:	4603      	mov	r3, r0
 800be48:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d102      	bne.n	800be56 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2100      	movs	r1, #0
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fd fe80 	bl	8009b60 <unlock_fs>
#endif
	}
	return res;
 800be60:	7bfb      	ldrb	r3, [r7, #15]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b084      	sub	sp, #16
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
 800be72:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f107 0208 	add.w	r2, r7, #8
 800be7a:	4611      	mov	r1, r2
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff fab9 	bl	800b3f4 <validate>
 800be82:	4603      	mov	r3, r0
 800be84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800be86:	7bfb      	ldrb	r3, [r7, #15]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d126      	bne.n	800beda <f_readdir+0x70>
		if (!fno) {
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d106      	bne.n	800bea0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800be92:	2100      	movs	r1, #0
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7fe fbaf 	bl	800a5f8 <dir_sdi>
 800be9a:	4603      	mov	r3, r0
 800be9c:	73fb      	strb	r3, [r7, #15]
 800be9e:	e01c      	b.n	800beda <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800bea0:	2100      	movs	r1, #0
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7fe fd6e 	bl	800a984 <dir_read>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	2b04      	cmp	r3, #4
 800beb0:	d101      	bne.n	800beb6 <f_readdir+0x4c>
 800beb2:	2300      	movs	r3, #0
 800beb4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800beb6:	7bfb      	ldrb	r3, [r7, #15]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10e      	bne.n	800beda <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7fe fe44 	bl	800ab4c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800bec4:	2100      	movs	r1, #0
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7fe fc11 	bl	800a6ee <dir_next>
 800becc:	4603      	mov	r3, r0
 800bece:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800bed0:	7bfb      	ldrb	r3, [r7, #15]
 800bed2:	2b04      	cmp	r3, #4
 800bed4:	d101      	bne.n	800beda <f_readdir+0x70>
 800bed6:	2300      	movs	r3, #0
 800bed8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	7bfa      	ldrb	r2, [r7, #15]
 800bede:	4611      	mov	r1, r2
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fd fe3d 	bl	8009b60 <unlock_fs>
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b087      	sub	sp, #28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	4613      	mov	r3, r2
 800befc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800befe:	2301      	movs	r3, #1
 800bf00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bf02:	2300      	movs	r3, #0
 800bf04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bf06:	4b1f      	ldr	r3, [pc, #124]	; (800bf84 <FATFS_LinkDriverEx+0x94>)
 800bf08:	7a5b      	ldrb	r3, [r3, #9]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d131      	bne.n	800bf74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf10:	4b1c      	ldr	r3, [pc, #112]	; (800bf84 <FATFS_LinkDriverEx+0x94>)
 800bf12:	7a5b      	ldrb	r3, [r3, #9]
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	461a      	mov	r2, r3
 800bf18:	4b1a      	ldr	r3, [pc, #104]	; (800bf84 <FATFS_LinkDriverEx+0x94>)
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf1e:	4b19      	ldr	r3, [pc, #100]	; (800bf84 <FATFS_LinkDriverEx+0x94>)
 800bf20:	7a5b      	ldrb	r3, [r3, #9]
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	4a17      	ldr	r2, [pc, #92]	; (800bf84 <FATFS_LinkDriverEx+0x94>)
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf2e:	4b15      	ldr	r3, [pc, #84]	; (800bf84 <FATFS_LinkDriverEx+0x94>)
 800bf30:	7a5b      	ldrb	r3, [r3, #9]
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	461a      	mov	r2, r3
 800bf36:	4b13      	ldr	r3, [pc, #76]	; (800bf84 <FATFS_LinkDriverEx+0x94>)
 800bf38:	4413      	add	r3, r2
 800bf3a:	79fa      	ldrb	r2, [r7, #7]
 800bf3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf3e:	4b11      	ldr	r3, [pc, #68]	; (800bf84 <FATFS_LinkDriverEx+0x94>)
 800bf40:	7a5b      	ldrb	r3, [r3, #9]
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	1c5a      	adds	r2, r3, #1
 800bf46:	b2d1      	uxtb	r1, r2
 800bf48:	4a0e      	ldr	r2, [pc, #56]	; (800bf84 <FATFS_LinkDriverEx+0x94>)
 800bf4a:	7251      	strb	r1, [r2, #9]
 800bf4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf4e:	7dbb      	ldrb	r3, [r7, #22]
 800bf50:	3330      	adds	r3, #48	; 0x30
 800bf52:	b2da      	uxtb	r2, r3
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	223a      	movs	r2, #58	; 0x3a
 800bf5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	3302      	adds	r3, #2
 800bf64:	222f      	movs	r2, #47	; 0x2f
 800bf66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	3303      	adds	r3, #3
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	371c      	adds	r7, #28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	20001564 	.word	0x20001564

0800bf88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf92:	2200      	movs	r2, #0
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7ff ffaa 	bl	800bef0 <FATFS_LinkDriverEx>
 800bf9c:	4603      	mov	r3, r0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	4603      	mov	r3, r0
 800bfae:	6039      	str	r1, [r7, #0]
 800bfb0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	2001      	movs	r0, #1
 800bfb8:	f000 f977 	bl	800c2aa <osSemaphoreNew>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	bf14      	ite	ne
 800bfca:	2301      	movne	r3, #1
 800bfcc:	2300      	moveq	r3, #0
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	60fb      	str	r3, [r7, #12]

    return ret;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fa7f 	bl	800c4e8 <osSemaphoreDelete>
#endif
    return 1;
 800bfea:	2301      	movs	r3, #1
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800c000:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f9d9 	bl	800c3bc <osSemaphoreAcquire>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d101      	bne.n	800c014 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800c010:	2301      	movs	r3, #1
 800c012:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c014:	68fb      	ldr	r3, [r7, #12]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b082      	sub	sp, #8
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fa1a 	bl	800c460 <osSemaphoreRelease>
#endif
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <__NVIC_SetPriority>:
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	4603      	mov	r3, r0
 800c03c:	6039      	str	r1, [r7, #0]
 800c03e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c044:	2b00      	cmp	r3, #0
 800c046:	db0a      	blt.n	800c05e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	b2da      	uxtb	r2, r3
 800c04c:	490c      	ldr	r1, [pc, #48]	; (800c080 <__NVIC_SetPriority+0x4c>)
 800c04e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c052:	0112      	lsls	r2, r2, #4
 800c054:	b2d2      	uxtb	r2, r2
 800c056:	440b      	add	r3, r1
 800c058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c05c:	e00a      	b.n	800c074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	b2da      	uxtb	r2, r3
 800c062:	4908      	ldr	r1, [pc, #32]	; (800c084 <__NVIC_SetPriority+0x50>)
 800c064:	79fb      	ldrb	r3, [r7, #7]
 800c066:	f003 030f 	and.w	r3, r3, #15
 800c06a:	3b04      	subs	r3, #4
 800c06c:	0112      	lsls	r2, r2, #4
 800c06e:	b2d2      	uxtb	r2, r2
 800c070:	440b      	add	r3, r1
 800c072:	761a      	strb	r2, [r3, #24]
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	e000e100 	.word	0xe000e100
 800c084:	e000ed00 	.word	0xe000ed00

0800c088 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c088:	b580      	push	{r7, lr}
 800c08a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c08c:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <SysTick_Handler+0x1c>)
 800c08e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c090:	f002 fa84 	bl	800e59c <xTaskGetSchedulerState>
 800c094:	4603      	mov	r3, r0
 800c096:	2b01      	cmp	r3, #1
 800c098:	d001      	beq.n	800c09e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c09a:	f003 f96d 	bl	800f378 <xPortSysTickHandler>
  }
}
 800c09e:	bf00      	nop
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	e000e010 	.word	0xe000e010

0800c0a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	f06f 0004 	mvn.w	r0, #4
 800c0b2:	f7ff ffbf 	bl	800c034 <__NVIC_SetPriority>
#endif
}
 800c0b6:	bf00      	nop
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0c2:	f3ef 8305 	mrs	r3, IPSR
 800c0c6:	603b      	str	r3, [r7, #0]
  return(result);
 800c0c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d003      	beq.n	800c0d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c0ce:	f06f 0305 	mvn.w	r3, #5
 800c0d2:	607b      	str	r3, [r7, #4]
 800c0d4:	e00c      	b.n	800c0f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c0d6:	4b0a      	ldr	r3, [pc, #40]	; (800c100 <osKernelInitialize+0x44>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d105      	bne.n	800c0ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c0de:	4b08      	ldr	r3, [pc, #32]	; (800c100 <osKernelInitialize+0x44>)
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	607b      	str	r3, [r7, #4]
 800c0e8:	e002      	b.n	800c0f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c0ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c0f0:	687b      	ldr	r3, [r7, #4]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	20001570 	.word	0x20001570

0800c104 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c10a:	f3ef 8305 	mrs	r3, IPSR
 800c10e:	603b      	str	r3, [r7, #0]
  return(result);
 800c110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c116:	f06f 0305 	mvn.w	r3, #5
 800c11a:	607b      	str	r3, [r7, #4]
 800c11c:	e010      	b.n	800c140 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c11e:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <osKernelStart+0x48>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d109      	bne.n	800c13a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c126:	f7ff ffbf 	bl	800c0a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c12a:	4b08      	ldr	r3, [pc, #32]	; (800c14c <osKernelStart+0x48>)
 800c12c:	2202      	movs	r2, #2
 800c12e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c130:	f001 fdc8 	bl	800dcc4 <vTaskStartScheduler>
      stat = osOK;
 800c134:	2300      	movs	r3, #0
 800c136:	607b      	str	r3, [r7, #4]
 800c138:	e002      	b.n	800c140 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c13a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c13e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c140:	687b      	ldr	r3, [r7, #4]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20001570 	.word	0x20001570

0800c150 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c150:	b580      	push	{r7, lr}
 800c152:	b08e      	sub	sp, #56	; 0x38
 800c154:	af04      	add	r7, sp, #16
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c15c:	2300      	movs	r3, #0
 800c15e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c160:	f3ef 8305 	mrs	r3, IPSR
 800c164:	617b      	str	r3, [r7, #20]
  return(result);
 800c166:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d17e      	bne.n	800c26a <osThreadNew+0x11a>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d07b      	beq.n	800c26a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c172:	2380      	movs	r3, #128	; 0x80
 800c174:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c176:	2318      	movs	r3, #24
 800c178:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c17e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c182:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d045      	beq.n	800c216 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <osThreadNew+0x48>
        name = attr->name;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	699b      	ldr	r3, [r3, #24]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d002      	beq.n	800c1a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d008      	beq.n	800c1be <osThreadNew+0x6e>
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	2b38      	cmp	r3, #56	; 0x38
 800c1b0:	d805      	bhi.n	800c1be <osThreadNew+0x6e>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d001      	beq.n	800c1c2 <osThreadNew+0x72>
        return (NULL);
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e054      	b.n	800c26c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	089b      	lsrs	r3, r3, #2
 800c1d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00e      	beq.n	800c1f8 <osThreadNew+0xa8>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	2bbb      	cmp	r3, #187	; 0xbb
 800c1e0:	d90a      	bls.n	800c1f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d006      	beq.n	800c1f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d002      	beq.n	800c1f8 <osThreadNew+0xa8>
        mem = 1;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	61bb      	str	r3, [r7, #24]
 800c1f6:	e010      	b.n	800c21a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10c      	bne.n	800c21a <osThreadNew+0xca>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d108      	bne.n	800c21a <osThreadNew+0xca>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d104      	bne.n	800c21a <osThreadNew+0xca>
          mem = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	61bb      	str	r3, [r7, #24]
 800c214:	e001      	b.n	800c21a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d110      	bne.n	800c242 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c228:	9202      	str	r2, [sp, #8]
 800c22a:	9301      	str	r3, [sp, #4]
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	9300      	str	r3, [sp, #0]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	6a3a      	ldr	r2, [r7, #32]
 800c234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f001 fa70 	bl	800d71c <xTaskCreateStatic>
 800c23c:	4603      	mov	r3, r0
 800c23e:	613b      	str	r3, [r7, #16]
 800c240:	e013      	b.n	800c26a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d110      	bne.n	800c26a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	f107 0310 	add.w	r3, r7, #16
 800c250:	9301      	str	r3, [sp, #4]
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	f001 fabb 	bl	800d7d6 <xTaskCreate>
 800c260:	4603      	mov	r3, r0
 800c262:	2b01      	cmp	r3, #1
 800c264:	d001      	beq.n	800c26a <osThreadNew+0x11a>
            hTask = NULL;
 800c266:	2300      	movs	r3, #0
 800c268:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c26a:	693b      	ldr	r3, [r7, #16]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3728      	adds	r7, #40	; 0x28
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c27c:	f3ef 8305 	mrs	r3, IPSR
 800c280:	60bb      	str	r3, [r7, #8]
  return(result);
 800c282:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <osDelay+0x1c>
    stat = osErrorISR;
 800c288:	f06f 0305 	mvn.w	r3, #5
 800c28c:	60fb      	str	r3, [r7, #12]
 800c28e:	e007      	b.n	800c2a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c290:	2300      	movs	r3, #0
 800c292:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d002      	beq.n	800c2a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f001 fc68 	bl	800db70 <vTaskDelay>
    }
  }

  return (stat);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b08a      	sub	sp, #40	; 0x28
 800c2ae:	af02      	add	r7, sp, #8
 800c2b0:	60f8      	str	r0, [r7, #12]
 800c2b2:	60b9      	str	r1, [r7, #8]
 800c2b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2ba:	f3ef 8305 	mrs	r3, IPSR
 800c2be:	613b      	str	r3, [r7, #16]
  return(result);
 800c2c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d175      	bne.n	800c3b2 <osSemaphoreNew+0x108>
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d072      	beq.n	800c3b2 <osSemaphoreNew+0x108>
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d86e      	bhi.n	800c3b2 <osSemaphoreNew+0x108>
    mem = -1;
 800c2d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d015      	beq.n	800c30c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d006      	beq.n	800c2f6 <osSemaphoreNew+0x4c>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	2b4f      	cmp	r3, #79	; 0x4f
 800c2ee:	d902      	bls.n	800c2f6 <osSemaphoreNew+0x4c>
        mem = 1;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	61bb      	str	r3, [r7, #24]
 800c2f4:	e00c      	b.n	800c310 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d108      	bne.n	800c310 <osSemaphoreNew+0x66>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d104      	bne.n	800c310 <osSemaphoreNew+0x66>
          mem = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	61bb      	str	r3, [r7, #24]
 800c30a:	e001      	b.n	800c310 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c30c:	2300      	movs	r3, #0
 800c30e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c316:	d04c      	beq.n	800c3b2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d128      	bne.n	800c370 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d10a      	bne.n	800c33a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	2203      	movs	r2, #3
 800c32a:	9200      	str	r2, [sp, #0]
 800c32c:	2200      	movs	r2, #0
 800c32e:	2100      	movs	r1, #0
 800c330:	2001      	movs	r0, #1
 800c332:	f000 fa4d 	bl	800c7d0 <xQueueGenericCreateStatic>
 800c336:	61f8      	str	r0, [r7, #28]
 800c338:	e005      	b.n	800c346 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c33a:	2203      	movs	r2, #3
 800c33c:	2100      	movs	r1, #0
 800c33e:	2001      	movs	r0, #1
 800c340:	f000 fabe 	bl	800c8c0 <xQueueGenericCreate>
 800c344:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d022      	beq.n	800c392 <osSemaphoreNew+0xe8>
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d01f      	beq.n	800c392 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c352:	2300      	movs	r3, #0
 800c354:	2200      	movs	r2, #0
 800c356:	2100      	movs	r1, #0
 800c358:	69f8      	ldr	r0, [r7, #28]
 800c35a:	f000 fb79 	bl	800ca50 <xQueueGenericSend>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b01      	cmp	r3, #1
 800c362:	d016      	beq.n	800c392 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c364:	69f8      	ldr	r0, [r7, #28]
 800c366:	f001 f805 	bl	800d374 <vQueueDelete>
            hSemaphore = NULL;
 800c36a:	2300      	movs	r3, #0
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	e010      	b.n	800c392 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d108      	bne.n	800c388 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	461a      	mov	r2, r3
 800c37c:	68b9      	ldr	r1, [r7, #8]
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f000 fafb 	bl	800c97a <xQueueCreateCountingSemaphoreStatic>
 800c384:	61f8      	str	r0, [r7, #28]
 800c386:	e004      	b.n	800c392 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c388:	68b9      	ldr	r1, [r7, #8]
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f000 fb2c 	bl	800c9e8 <xQueueCreateCountingSemaphore>
 800c390:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00c      	beq.n	800c3b2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d003      	beq.n	800c3a6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	617b      	str	r3, [r7, #20]
 800c3a4:	e001      	b.n	800c3aa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c3aa:	6979      	ldr	r1, [r7, #20]
 800c3ac:	69f8      	ldr	r0, [r7, #28]
 800c3ae:	f001 f92d 	bl	800d60c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c3b2:	69fb      	ldr	r3, [r7, #28]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3720      	adds	r7, #32
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d103      	bne.n	800c3dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c3d4:	f06f 0303 	mvn.w	r3, #3
 800c3d8:	617b      	str	r3, [r7, #20]
 800c3da:	e039      	b.n	800c450 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3dc:	f3ef 8305 	mrs	r3, IPSR
 800c3e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d022      	beq.n	800c42e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c3ee:	f06f 0303 	mvn.w	r3, #3
 800c3f2:	617b      	str	r3, [r7, #20]
 800c3f4:	e02c      	b.n	800c450 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c3fa:	f107 0308 	add.w	r3, r7, #8
 800c3fe:	461a      	mov	r2, r3
 800c400:	2100      	movs	r1, #0
 800c402:	6938      	ldr	r0, [r7, #16]
 800c404:	f000 ff36 	bl	800d274 <xQueueReceiveFromISR>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d003      	beq.n	800c416 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c40e:	f06f 0302 	mvn.w	r3, #2
 800c412:	617b      	str	r3, [r7, #20]
 800c414:	e01c      	b.n	800c450 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d019      	beq.n	800c450 <osSemaphoreAcquire+0x94>
 800c41c:	4b0f      	ldr	r3, [pc, #60]	; (800c45c <osSemaphoreAcquire+0xa0>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	e010      	b.n	800c450 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6938      	ldr	r0, [r7, #16]
 800c432:	f000 fe13 	bl	800d05c <xQueueSemaphoreTake>
 800c436:	4603      	mov	r3, r0
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d009      	beq.n	800c450 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c442:	f06f 0301 	mvn.w	r3, #1
 800c446:	617b      	str	r3, [r7, #20]
 800c448:	e002      	b.n	800c450 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c44a:	f06f 0302 	mvn.w	r3, #2
 800c44e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c450:	697b      	ldr	r3, [r7, #20]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3718      	adds	r7, #24
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	e000ed04 	.word	0xe000ed04

0800c460 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d103      	bne.n	800c47e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c476:	f06f 0303 	mvn.w	r3, #3
 800c47a:	617b      	str	r3, [r7, #20]
 800c47c:	e02c      	b.n	800c4d8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c47e:	f3ef 8305 	mrs	r3, IPSR
 800c482:	60fb      	str	r3, [r7, #12]
  return(result);
 800c484:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c486:	2b00      	cmp	r3, #0
 800c488:	d01a      	beq.n	800c4c0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c48e:	f107 0308 	add.w	r3, r7, #8
 800c492:	4619      	mov	r1, r3
 800c494:	6938      	ldr	r0, [r7, #16]
 800c496:	f000 fc74 	bl	800cd82 <xQueueGiveFromISR>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d003      	beq.n	800c4a8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c4a0:	f06f 0302 	mvn.w	r3, #2
 800c4a4:	617b      	str	r3, [r7, #20]
 800c4a6:	e017      	b.n	800c4d8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d014      	beq.n	800c4d8 <osSemaphoreRelease+0x78>
 800c4ae:	4b0d      	ldr	r3, [pc, #52]	; (800c4e4 <osSemaphoreRelease+0x84>)
 800c4b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	e00b      	b.n	800c4d8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	6938      	ldr	r0, [r7, #16]
 800c4c8:	f000 fac2 	bl	800ca50 <xQueueGenericSend>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d002      	beq.n	800c4d8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c4d2:	f06f 0302 	mvn.w	r3, #2
 800c4d6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c4d8:	697b      	ldr	r3, [r7, #20]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3718      	adds	r7, #24
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	e000ed04 	.word	0xe000ed04

0800c4e8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4f4:	f3ef 8305 	mrs	r3, IPSR
 800c4f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d003      	beq.n	800c508 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800c500:	f06f 0305 	mvn.w	r3, #5
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	e00e      	b.n	800c526 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d103      	bne.n	800c516 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800c50e:	f06f 0303 	mvn.w	r3, #3
 800c512:	617b      	str	r3, [r7, #20]
 800c514:	e007      	b.n	800c526 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800c516:	6938      	ldr	r0, [r7, #16]
 800c518:	f001 f8a2 	bl	800d660 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800c51c:	2300      	movs	r3, #0
 800c51e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800c520:	6938      	ldr	r0, [r7, #16]
 800c522:	f000 ff27 	bl	800d374 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800c526:	697b      	ldr	r3, [r7, #20]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3718      	adds	r7, #24
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	4a07      	ldr	r2, [pc, #28]	; (800c55c <vApplicationGetIdleTaskMemory+0x2c>)
 800c540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	4a06      	ldr	r2, [pc, #24]	; (800c560 <vApplicationGetIdleTaskMemory+0x30>)
 800c546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2280      	movs	r2, #128	; 0x80
 800c54c:	601a      	str	r2, [r3, #0]
}
 800c54e:	bf00      	nop
 800c550:	3714      	adds	r7, #20
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	20001574 	.word	0x20001574
 800c560:	20001630 	.word	0x20001630

0800c564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	4a07      	ldr	r2, [pc, #28]	; (800c590 <vApplicationGetTimerTaskMemory+0x2c>)
 800c574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	4a06      	ldr	r2, [pc, #24]	; (800c594 <vApplicationGetTimerTaskMemory+0x30>)
 800c57a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c582:	601a      	str	r2, [r3, #0]
}
 800c584:	bf00      	nop
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	20001830 	.word	0x20001830
 800c594:	200018ec 	.word	0x200018ec

0800c598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f103 0208 	add.w	r2, r3, #8
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f103 0208 	add.w	r2, r3, #8
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f103 0208 	add.w	r2, r3, #8
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5e6:	bf00      	nop
 800c5e8:	370c      	adds	r7, #12
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	b085      	sub	sp, #20
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	689a      	ldr	r2, [r3, #8]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	601a      	str	r2, [r3, #0]
}
 800c62e:	bf00      	nop
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c63a:	b480      	push	{r7}
 800c63c:	b085      	sub	sp, #20
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c650:	d103      	bne.n	800c65a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	e00c      	b.n	800c674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3308      	adds	r3, #8
 800c65e:	60fb      	str	r3, [r7, #12]
 800c660:	e002      	b.n	800c668 <vListInsert+0x2e>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	60fb      	str	r3, [r7, #12]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68ba      	ldr	r2, [r7, #8]
 800c670:	429a      	cmp	r2, r3
 800c672:	d2f6      	bcs.n	800c662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	683a      	ldr	r2, [r7, #0]
 800c68e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	1c5a      	adds	r2, r3, #1
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	601a      	str	r2, [r3, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	6892      	ldr	r2, [r2, #8]
 800c6c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	6852      	ldr	r2, [r2, #4]
 800c6cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d103      	bne.n	800c6e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	689a      	ldr	r2, [r3, #8]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	1e5a      	subs	r2, r3, #1
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d10a      	bne.n	800c72a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c718:	f383 8811 	msr	BASEPRI, r3
 800c71c:	f3bf 8f6f 	isb	sy
 800c720:	f3bf 8f4f 	dsb	sy
 800c724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c726:	bf00      	nop
 800c728:	e7fe      	b.n	800c728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c72a:	f002 fd93 	bl	800f254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c736:	68f9      	ldr	r1, [r7, #12]
 800c738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c73a:	fb01 f303 	mul.w	r3, r1, r3
 800c73e:	441a      	add	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c75a:	3b01      	subs	r3, #1
 800c75c:	68f9      	ldr	r1, [r7, #12]
 800c75e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c760:	fb01 f303 	mul.w	r3, r1, r3
 800c764:	441a      	add	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	22ff      	movs	r2, #255	; 0xff
 800c76e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	22ff      	movs	r2, #255	; 0xff
 800c776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d114      	bne.n	800c7aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d01a      	beq.n	800c7be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	3310      	adds	r3, #16
 800c78c:	4618      	mov	r0, r3
 800c78e:	f001 fd33 	bl	800e1f8 <xTaskRemoveFromEventList>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d012      	beq.n	800c7be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c798:	4b0c      	ldr	r3, [pc, #48]	; (800c7cc <xQueueGenericReset+0xcc>)
 800c79a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c79e:	601a      	str	r2, [r3, #0]
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	e009      	b.n	800c7be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3310      	adds	r3, #16
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7ff fef2 	bl	800c598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	3324      	adds	r3, #36	; 0x24
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff feed 	bl	800c598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c7be:	f002 fd79 	bl	800f2b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c7c2:	2301      	movs	r3, #1
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	e000ed04 	.word	0xe000ed04

0800c7d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08e      	sub	sp, #56	; 0x38
 800c7d4:	af02      	add	r7, sp, #8
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
 800c7dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10a      	bne.n	800c7fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c7f6:	bf00      	nop
 800c7f8:	e7fe      	b.n	800c7f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10a      	bne.n	800c816 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c812:	bf00      	nop
 800c814:	e7fe      	b.n	800c814 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <xQueueGenericCreateStatic+0x52>
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <xQueueGenericCreateStatic+0x56>
 800c822:	2301      	movs	r3, #1
 800c824:	e000      	b.n	800c828 <xQueueGenericCreateStatic+0x58>
 800c826:	2300      	movs	r3, #0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10a      	bne.n	800c842 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	623b      	str	r3, [r7, #32]
}
 800c83e:	bf00      	nop
 800c840:	e7fe      	b.n	800c840 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d102      	bne.n	800c84e <xQueueGenericCreateStatic+0x7e>
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d101      	bne.n	800c852 <xQueueGenericCreateStatic+0x82>
 800c84e:	2301      	movs	r3, #1
 800c850:	e000      	b.n	800c854 <xQueueGenericCreateStatic+0x84>
 800c852:	2300      	movs	r3, #0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10a      	bne.n	800c86e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	61fb      	str	r3, [r7, #28]
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c86e:	2350      	movs	r3, #80	; 0x50
 800c870:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	2b50      	cmp	r3, #80	; 0x50
 800c876:	d00a      	beq.n	800c88e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	61bb      	str	r3, [r7, #24]
}
 800c88a:	bf00      	nop
 800c88c:	e7fe      	b.n	800c88c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c88e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00d      	beq.n	800c8b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	2201      	movs	r2, #1
 800c89e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	68b9      	ldr	r1, [r7, #8]
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f000 f83f 	bl	800c934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3730      	adds	r7, #48	; 0x30
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08a      	sub	sp, #40	; 0x28
 800c8c4:	af02      	add	r7, sp, #8
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <xQueueGenericCreate+0x2a>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	613b      	str	r3, [r7, #16]
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	fb02 f303 	mul.w	r3, r2, r3
 800c8f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	3350      	adds	r3, #80	; 0x50
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f002 fdcd 	bl	800f498 <pvPortMalloc>
 800c8fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d011      	beq.n	800c92a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	3350      	adds	r3, #80	; 0x50
 800c90e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	2200      	movs	r2, #0
 800c914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c918:	79fa      	ldrb	r2, [r7, #7]
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	4613      	mov	r3, r2
 800c920:	697a      	ldr	r2, [r7, #20]
 800c922:	68b9      	ldr	r1, [r7, #8]
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f000 f805 	bl	800c934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c92a:	69bb      	ldr	r3, [r7, #24]
	}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3720      	adds	r7, #32
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d103      	bne.n	800c950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	69ba      	ldr	r2, [r7, #24]
 800c94c:	601a      	str	r2, [r3, #0]
 800c94e:	e002      	b.n	800c956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c962:	2101      	movs	r1, #1
 800c964:	69b8      	ldr	r0, [r7, #24]
 800c966:	f7ff fecb 	bl	800c700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	78fa      	ldrb	r2, [r7, #3]
 800c96e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b08a      	sub	sp, #40	; 0x28
 800c97e:	af02      	add	r7, sp, #8
 800c980:	60f8      	str	r0, [r7, #12]
 800c982:	60b9      	str	r1, [r7, #8]
 800c984:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d10a      	bne.n	800c9a2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c990:	f383 8811 	msr	BASEPRI, r3
 800c994:	f3bf 8f6f 	isb	sy
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	61bb      	str	r3, [r7, #24]
}
 800c99e:	bf00      	nop
 800c9a0:	e7fe      	b.n	800c9a0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d90a      	bls.n	800c9c0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	617b      	str	r3, [r7, #20]
}
 800c9bc:	bf00      	nop
 800c9be:	e7fe      	b.n	800c9be <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f7ff ff00 	bl	800c7d0 <xQueueGenericCreateStatic>
 800c9d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c9de:	69fb      	ldr	r3, [r7, #28]
	}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3720      	adds	r7, #32
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10a      	bne.n	800ca0e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fc:	f383 8811 	msr	BASEPRI, r3
 800ca00:	f3bf 8f6f 	isb	sy
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	613b      	str	r3, [r7, #16]
}
 800ca0a:	bf00      	nop
 800ca0c:	e7fe      	b.n	800ca0c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d90a      	bls.n	800ca2c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ca16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	60fb      	str	r3, [r7, #12]
}
 800ca28:	bf00      	nop
 800ca2a:	e7fe      	b.n	800ca2a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ca2c:	2202      	movs	r2, #2
 800ca2e:	2100      	movs	r1, #0
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7ff ff45 	bl	800c8c0 <xQueueGenericCreate>
 800ca36:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d002      	beq.n	800ca44 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	683a      	ldr	r2, [r7, #0]
 800ca42:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ca44:	697b      	ldr	r3, [r7, #20]
	}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3718      	adds	r7, #24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
	...

0800ca50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08e      	sub	sp, #56	; 0x38
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
 800ca5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10a      	bne.n	800ca82 <xQueueGenericSend+0x32>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca7e:	bf00      	nop
 800ca80:	e7fe      	b.n	800ca80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d103      	bne.n	800ca90 <xQueueGenericSend+0x40>
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d101      	bne.n	800ca94 <xQueueGenericSend+0x44>
 800ca90:	2301      	movs	r3, #1
 800ca92:	e000      	b.n	800ca96 <xQueueGenericSend+0x46>
 800ca94:	2300      	movs	r3, #0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10a      	bne.n	800cab0 <xQueueGenericSend+0x60>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2b02      	cmp	r3, #2
 800cab4:	d103      	bne.n	800cabe <xQueueGenericSend+0x6e>
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d101      	bne.n	800cac2 <xQueueGenericSend+0x72>
 800cabe:	2301      	movs	r3, #1
 800cac0:	e000      	b.n	800cac4 <xQueueGenericSend+0x74>
 800cac2:	2300      	movs	r3, #0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10a      	bne.n	800cade <xQueueGenericSend+0x8e>
	__asm volatile
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	623b      	str	r3, [r7, #32]
}
 800cada:	bf00      	nop
 800cadc:	e7fe      	b.n	800cadc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cade:	f001 fd5d 	bl	800e59c <xTaskGetSchedulerState>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d102      	bne.n	800caee <xQueueGenericSend+0x9e>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d101      	bne.n	800caf2 <xQueueGenericSend+0xa2>
 800caee:	2301      	movs	r3, #1
 800caf0:	e000      	b.n	800caf4 <xQueueGenericSend+0xa4>
 800caf2:	2300      	movs	r3, #0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10a      	bne.n	800cb0e <xQueueGenericSend+0xbe>
	__asm volatile
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	61fb      	str	r3, [r7, #28]
}
 800cb0a:	bf00      	nop
 800cb0c:	e7fe      	b.n	800cb0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb0e:	f002 fba1 	bl	800f254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d302      	bcc.n	800cb24 <xQueueGenericSend+0xd4>
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d129      	bne.n	800cb78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb24:	683a      	ldr	r2, [r7, #0]
 800cb26:	68b9      	ldr	r1, [r7, #8]
 800cb28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb2a:	f000 fc5e 	bl	800d3ea <prvCopyDataToQueue>
 800cb2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d010      	beq.n	800cb5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	3324      	adds	r3, #36	; 0x24
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f001 fb5b 	bl	800e1f8 <xTaskRemoveFromEventList>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d013      	beq.n	800cb70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cb48:	4b3f      	ldr	r3, [pc, #252]	; (800cc48 <xQueueGenericSend+0x1f8>)
 800cb4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	e00a      	b.n	800cb70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d007      	beq.n	800cb70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cb60:	4b39      	ldr	r3, [pc, #228]	; (800cc48 <xQueueGenericSend+0x1f8>)
 800cb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb66:	601a      	str	r2, [r3, #0]
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cb70:	f002 fba0 	bl	800f2b4 <vPortExitCritical>
				return pdPASS;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e063      	b.n	800cc40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d103      	bne.n	800cb86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb7e:	f002 fb99 	bl	800f2b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	e05c      	b.n	800cc40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d106      	bne.n	800cb9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb8c:	f107 0314 	add.w	r3, r7, #20
 800cb90:	4618      	mov	r0, r3
 800cb92:	f001 fb95 	bl	800e2c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb96:	2301      	movs	r3, #1
 800cb98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb9a:	f002 fb8b 	bl	800f2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb9e:	f001 f901 	bl	800dda4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cba2:	f002 fb57 	bl	800f254 <vPortEnterCritical>
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbac:	b25b      	sxtb	r3, r3
 800cbae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbb2:	d103      	bne.n	800cbbc <xQueueGenericSend+0x16c>
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbc2:	b25b      	sxtb	r3, r3
 800cbc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbc8:	d103      	bne.n	800cbd2 <xQueueGenericSend+0x182>
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbd2:	f002 fb6f 	bl	800f2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbd6:	1d3a      	adds	r2, r7, #4
 800cbd8:	f107 0314 	add.w	r3, r7, #20
 800cbdc:	4611      	mov	r1, r2
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f001 fb84 	bl	800e2ec <xTaskCheckForTimeOut>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d124      	bne.n	800cc34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cbea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbec:	f000 fcf5 	bl	800d5da <prvIsQueueFull>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d018      	beq.n	800cc28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	3310      	adds	r3, #16
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f001 faaa 	bl	800e158 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cc04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc06:	f000 fc80 	bl	800d50a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cc0a:	f001 f8d9 	bl	800ddc0 <xTaskResumeAll>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f47f af7c 	bne.w	800cb0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cc16:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <xQueueGenericSend+0x1f8>)
 800cc18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	e772      	b.n	800cb0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cc28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc2a:	f000 fc6e 	bl	800d50a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc2e:	f001 f8c7 	bl	800ddc0 <xTaskResumeAll>
 800cc32:	e76c      	b.n	800cb0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cc34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc36:	f000 fc68 	bl	800d50a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc3a:	f001 f8c1 	bl	800ddc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cc3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3738      	adds	r7, #56	; 0x38
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	e000ed04 	.word	0xe000ed04

0800cc4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b090      	sub	sp, #64	; 0x40
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]
 800cc58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10a      	bne.n	800cc7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc68:	f383 8811 	msr	BASEPRI, r3
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc76:	bf00      	nop
 800cc78:	e7fe      	b.n	800cc78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d103      	bne.n	800cc88 <xQueueGenericSendFromISR+0x3c>
 800cc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d101      	bne.n	800cc8c <xQueueGenericSendFromISR+0x40>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e000      	b.n	800cc8e <xQueueGenericSendFromISR+0x42>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10a      	bne.n	800cca8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cca4:	bf00      	nop
 800cca6:	e7fe      	b.n	800cca6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	d103      	bne.n	800ccb6 <xQueueGenericSendFromISR+0x6a>
 800ccae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d101      	bne.n	800ccba <xQueueGenericSendFromISR+0x6e>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e000      	b.n	800ccbc <xQueueGenericSendFromISR+0x70>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d10a      	bne.n	800ccd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	623b      	str	r3, [r7, #32]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccd6:	f002 fb9f 	bl	800f418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ccda:	f3ef 8211 	mrs	r2, BASEPRI
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	61fa      	str	r2, [r7, #28]
 800ccf0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ccf2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccf4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d302      	bcc.n	800cd08 <xQueueGenericSendFromISR+0xbc>
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d12f      	bne.n	800cd68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd18:	683a      	ldr	r2, [r7, #0]
 800cd1a:	68b9      	ldr	r1, [r7, #8]
 800cd1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd1e:	f000 fb64 	bl	800d3ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cd26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd2a:	d112      	bne.n	800cd52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d016      	beq.n	800cd62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd36:	3324      	adds	r3, #36	; 0x24
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f001 fa5d 	bl	800e1f8 <xTaskRemoveFromEventList>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00e      	beq.n	800cd62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00b      	beq.n	800cd62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	601a      	str	r2, [r3, #0]
 800cd50:	e007      	b.n	800cd62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd56:	3301      	adds	r3, #1
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	b25a      	sxtb	r2, r3
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cd62:	2301      	movs	r3, #1
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cd66:	e001      	b.n	800cd6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3740      	adds	r7, #64	; 0x40
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b08e      	sub	sp, #56	; 0x38
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
 800cd8a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d10a      	bne.n	800cdac <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	623b      	str	r3, [r7, #32]
}
 800cda8:	bf00      	nop
 800cdaa:	e7fe      	b.n	800cdaa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00a      	beq.n	800cdca <xQueueGiveFromISR+0x48>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	61fb      	str	r3, [r7, #28]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d103      	bne.n	800cdda <xQueueGiveFromISR+0x58>
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d101      	bne.n	800cdde <xQueueGiveFromISR+0x5c>
 800cdda:	2301      	movs	r3, #1
 800cddc:	e000      	b.n	800cde0 <xQueueGiveFromISR+0x5e>
 800cdde:	2300      	movs	r3, #0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10a      	bne.n	800cdfa <xQueueGiveFromISR+0x78>
	__asm volatile
 800cde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde8:	f383 8811 	msr	BASEPRI, r3
 800cdec:	f3bf 8f6f 	isb	sy
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	61bb      	str	r3, [r7, #24]
}
 800cdf6:	bf00      	nop
 800cdf8:	e7fe      	b.n	800cdf8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdfa:	f002 fb0d 	bl	800f418 <vPortValidateInterruptPriority>
	__asm volatile
 800cdfe:	f3ef 8211 	mrs	r2, BASEPRI
 800ce02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce06:	f383 8811 	msr	BASEPRI, r3
 800ce0a:	f3bf 8f6f 	isb	sy
 800ce0e:	f3bf 8f4f 	dsb	sy
 800ce12:	617a      	str	r2, [r7, #20]
 800ce14:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ce16:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d22b      	bcs.n	800ce82 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce36:	1c5a      	adds	r2, r3, #1
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce44:	d112      	bne.n	800ce6c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d016      	beq.n	800ce7c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	3324      	adds	r3, #36	; 0x24
 800ce52:	4618      	mov	r0, r3
 800ce54:	f001 f9d0 	bl	800e1f8 <xTaskRemoveFromEventList>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00e      	beq.n	800ce7c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00b      	beq.n	800ce7c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2201      	movs	r2, #1
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	e007      	b.n	800ce7c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce70:	3301      	adds	r3, #1
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	b25a      	sxtb	r2, r3
 800ce76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce80:	e001      	b.n	800ce86 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce82:	2300      	movs	r3, #0
 800ce84:	637b      	str	r3, [r7, #52]	; 0x34
 800ce86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce88:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f383 8811 	msr	BASEPRI, r3
}
 800ce90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3738      	adds	r7, #56	; 0x38
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08c      	sub	sp, #48	; 0x30
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10a      	bne.n	800cecc <xQueueReceive+0x30>
	__asm volatile
 800ceb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceba:	f383 8811 	msr	BASEPRI, r3
 800cebe:	f3bf 8f6f 	isb	sy
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	623b      	str	r3, [r7, #32]
}
 800cec8:	bf00      	nop
 800ceca:	e7fe      	b.n	800ceca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d103      	bne.n	800ceda <xQueueReceive+0x3e>
 800ced2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d101      	bne.n	800cede <xQueueReceive+0x42>
 800ceda:	2301      	movs	r3, #1
 800cedc:	e000      	b.n	800cee0 <xQueueReceive+0x44>
 800cede:	2300      	movs	r3, #0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d10a      	bne.n	800cefa <xQueueReceive+0x5e>
	__asm volatile
 800cee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee8:	f383 8811 	msr	BASEPRI, r3
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f3bf 8f4f 	dsb	sy
 800cef4:	61fb      	str	r3, [r7, #28]
}
 800cef6:	bf00      	nop
 800cef8:	e7fe      	b.n	800cef8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cefa:	f001 fb4f 	bl	800e59c <xTaskGetSchedulerState>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d102      	bne.n	800cf0a <xQueueReceive+0x6e>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d101      	bne.n	800cf0e <xQueueReceive+0x72>
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e000      	b.n	800cf10 <xQueueReceive+0x74>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10a      	bne.n	800cf2a <xQueueReceive+0x8e>
	__asm volatile
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	61bb      	str	r3, [r7, #24]
}
 800cf26:	bf00      	nop
 800cf28:	e7fe      	b.n	800cf28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf2a:	f002 f993 	bl	800f254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d01f      	beq.n	800cf7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf3a:	68b9      	ldr	r1, [r7, #8]
 800cf3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf3e:	f000 fabe 	bl	800d4be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf44:	1e5a      	subs	r2, r3, #1
 800cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00f      	beq.n	800cf72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf54:	3310      	adds	r3, #16
 800cf56:	4618      	mov	r0, r3
 800cf58:	f001 f94e 	bl	800e1f8 <xTaskRemoveFromEventList>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d007      	beq.n	800cf72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf62:	4b3d      	ldr	r3, [pc, #244]	; (800d058 <xQueueReceive+0x1bc>)
 800cf64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf68:	601a      	str	r2, [r3, #0]
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf72:	f002 f99f 	bl	800f2b4 <vPortExitCritical>
				return pdPASS;
 800cf76:	2301      	movs	r3, #1
 800cf78:	e069      	b.n	800d04e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d103      	bne.n	800cf88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf80:	f002 f998 	bl	800f2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf84:	2300      	movs	r3, #0
 800cf86:	e062      	b.n	800d04e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf8e:	f107 0310 	add.w	r3, r7, #16
 800cf92:	4618      	mov	r0, r3
 800cf94:	f001 f994 	bl	800e2c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf9c:	f002 f98a 	bl	800f2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfa0:	f000 ff00 	bl	800dda4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfa4:	f002 f956 	bl	800f254 <vPortEnterCritical>
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfae:	b25b      	sxtb	r3, r3
 800cfb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfb4:	d103      	bne.n	800cfbe <xQueueReceive+0x122>
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfc4:	b25b      	sxtb	r3, r3
 800cfc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfca:	d103      	bne.n	800cfd4 <xQueueReceive+0x138>
 800cfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfd4:	f002 f96e 	bl	800f2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfd8:	1d3a      	adds	r2, r7, #4
 800cfda:	f107 0310 	add.w	r3, r7, #16
 800cfde:	4611      	mov	r1, r2
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f001 f983 	bl	800e2ec <xTaskCheckForTimeOut>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d123      	bne.n	800d034 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfee:	f000 fade 	bl	800d5ae <prvIsQueueEmpty>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d017      	beq.n	800d028 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	3324      	adds	r3, #36	; 0x24
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	4611      	mov	r1, r2
 800d000:	4618      	mov	r0, r3
 800d002:	f001 f8a9 	bl	800e158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d008:	f000 fa7f 	bl	800d50a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d00c:	f000 fed8 	bl	800ddc0 <xTaskResumeAll>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d189      	bne.n	800cf2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d016:	4b10      	ldr	r3, [pc, #64]	; (800d058 <xQueueReceive+0x1bc>)
 800d018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d01c:	601a      	str	r2, [r3, #0]
 800d01e:	f3bf 8f4f 	dsb	sy
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	e780      	b.n	800cf2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d02a:	f000 fa6e 	bl	800d50a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d02e:	f000 fec7 	bl	800ddc0 <xTaskResumeAll>
 800d032:	e77a      	b.n	800cf2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d036:	f000 fa68 	bl	800d50a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d03a:	f000 fec1 	bl	800ddc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d03e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d040:	f000 fab5 	bl	800d5ae <prvIsQueueEmpty>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	f43f af6f 	beq.w	800cf2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d04c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3730      	adds	r7, #48	; 0x30
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	e000ed04 	.word	0xe000ed04

0800d05c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b08e      	sub	sp, #56	; 0x38
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d066:	2300      	movs	r3, #0
 800d068:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d06e:	2300      	movs	r3, #0
 800d070:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	2b00      	cmp	r3, #0
 800d076:	d10a      	bne.n	800d08e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07c:	f383 8811 	msr	BASEPRI, r3
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	623b      	str	r3, [r7, #32]
}
 800d08a:	bf00      	nop
 800d08c:	e7fe      	b.n	800d08c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d092:	2b00      	cmp	r3, #0
 800d094:	d00a      	beq.n	800d0ac <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	61fb      	str	r3, [r7, #28]
}
 800d0a8:	bf00      	nop
 800d0aa:	e7fe      	b.n	800d0aa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0ac:	f001 fa76 	bl	800e59c <xTaskGetSchedulerState>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d102      	bne.n	800d0bc <xQueueSemaphoreTake+0x60>
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <xQueueSemaphoreTake+0x64>
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e000      	b.n	800d0c2 <xQueueSemaphoreTake+0x66>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d10a      	bne.n	800d0dc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ca:	f383 8811 	msr	BASEPRI, r3
 800d0ce:	f3bf 8f6f 	isb	sy
 800d0d2:	f3bf 8f4f 	dsb	sy
 800d0d6:	61bb      	str	r3, [r7, #24]
}
 800d0d8:	bf00      	nop
 800d0da:	e7fe      	b.n	800d0da <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0dc:	f002 f8ba 	bl	800f254 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d024      	beq.n	800d136 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	1e5a      	subs	r2, r3, #1
 800d0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d104      	bne.n	800d106 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0fc:	f001 fbc4 	bl	800e888 <pvTaskIncrementMutexHeldCount>
 800d100:	4602      	mov	r2, r0
 800d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d104:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00f      	beq.n	800d12e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d110:	3310      	adds	r3, #16
 800d112:	4618      	mov	r0, r3
 800d114:	f001 f870 	bl	800e1f8 <xTaskRemoveFromEventList>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d007      	beq.n	800d12e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d11e:	4b54      	ldr	r3, [pc, #336]	; (800d270 <xQueueSemaphoreTake+0x214>)
 800d120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d124:	601a      	str	r2, [r3, #0]
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d12e:	f002 f8c1 	bl	800f2b4 <vPortExitCritical>
				return pdPASS;
 800d132:	2301      	movs	r3, #1
 800d134:	e097      	b.n	800d266 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d111      	bne.n	800d160 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00a      	beq.n	800d158 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d146:	f383 8811 	msr	BASEPRI, r3
 800d14a:	f3bf 8f6f 	isb	sy
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	617b      	str	r3, [r7, #20]
}
 800d154:	bf00      	nop
 800d156:	e7fe      	b.n	800d156 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d158:	f002 f8ac 	bl	800f2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d15c:	2300      	movs	r3, #0
 800d15e:	e082      	b.n	800d266 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d162:	2b00      	cmp	r3, #0
 800d164:	d106      	bne.n	800d174 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d166:	f107 030c 	add.w	r3, r7, #12
 800d16a:	4618      	mov	r0, r3
 800d16c:	f001 f8a8 	bl	800e2c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d170:	2301      	movs	r3, #1
 800d172:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d174:	f002 f89e 	bl	800f2b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d178:	f000 fe14 	bl	800dda4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d17c:	f002 f86a 	bl	800f254 <vPortEnterCritical>
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d186:	b25b      	sxtb	r3, r3
 800d188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d18c:	d103      	bne.n	800d196 <xQueueSemaphoreTake+0x13a>
 800d18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d190:	2200      	movs	r2, #0
 800d192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d19c:	b25b      	sxtb	r3, r3
 800d19e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1a2:	d103      	bne.n	800d1ac <xQueueSemaphoreTake+0x150>
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ac:	f002 f882 	bl	800f2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1b0:	463a      	mov	r2, r7
 800d1b2:	f107 030c 	add.w	r3, r7, #12
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f001 f897 	bl	800e2ec <xTaskCheckForTimeOut>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d132      	bne.n	800d22a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1c6:	f000 f9f2 	bl	800d5ae <prvIsQueueEmpty>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d026      	beq.n	800d21e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d109      	bne.n	800d1ec <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d1d8:	f002 f83c 	bl	800f254 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f001 f9f9 	bl	800e5d8 <xTaskPriorityInherit>
 800d1e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d1e8:	f002 f864 	bl	800f2b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ee:	3324      	adds	r3, #36	; 0x24
 800d1f0:	683a      	ldr	r2, [r7, #0]
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 ffaf 	bl	800e158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1fc:	f000 f985 	bl	800d50a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d200:	f000 fdde 	bl	800ddc0 <xTaskResumeAll>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	f47f af68 	bne.w	800d0dc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d20c:	4b18      	ldr	r3, [pc, #96]	; (800d270 <xQueueSemaphoreTake+0x214>)
 800d20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	e75e      	b.n	800d0dc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d21e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d220:	f000 f973 	bl	800d50a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d224:	f000 fdcc 	bl	800ddc0 <xTaskResumeAll>
 800d228:	e758      	b.n	800d0dc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d22a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d22c:	f000 f96d 	bl	800d50a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d230:	f000 fdc6 	bl	800ddc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d236:	f000 f9ba 	bl	800d5ae <prvIsQueueEmpty>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f43f af4d 	beq.w	800d0dc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00d      	beq.n	800d264 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d248:	f002 f804 	bl	800f254 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d24c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d24e:	f000 f8b4 	bl	800d3ba <prvGetDisinheritPriorityAfterTimeout>
 800d252:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d25a:	4618      	mov	r0, r3
 800d25c:	f001 fa92 	bl	800e784 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d260:	f002 f828 	bl	800f2b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d264:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d266:	4618      	mov	r0, r3
 800d268:	3738      	adds	r7, #56	; 0x38
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	e000ed04 	.word	0xe000ed04

0800d274 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b08e      	sub	sp, #56	; 0x38
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10a      	bne.n	800d2a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	623b      	str	r3, [r7, #32]
}
 800d29c:	bf00      	nop
 800d29e:	e7fe      	b.n	800d29e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d103      	bne.n	800d2ae <xQueueReceiveFromISR+0x3a>
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d101      	bne.n	800d2b2 <xQueueReceiveFromISR+0x3e>
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e000      	b.n	800d2b4 <xQueueReceiveFromISR+0x40>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10a      	bne.n	800d2ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	61fb      	str	r3, [r7, #28]
}
 800d2ca:	bf00      	nop
 800d2cc:	e7fe      	b.n	800d2cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2ce:	f002 f8a3 	bl	800f418 <vPortValidateInterruptPriority>
	__asm volatile
 800d2d2:	f3ef 8211 	mrs	r2, BASEPRI
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	61ba      	str	r2, [r7, #24]
 800d2e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d2ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d02f      	beq.n	800d35a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d304:	68b9      	ldr	r1, [r7, #8]
 800d306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d308:	f000 f8d9 	bl	800d4be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	1e5a      	subs	r2, r3, #1
 800d310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d312:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d314:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d31c:	d112      	bne.n	800d344 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d016      	beq.n	800d354 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	3310      	adds	r3, #16
 800d32a:	4618      	mov	r0, r3
 800d32c:	f000 ff64 	bl	800e1f8 <xTaskRemoveFromEventList>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00e      	beq.n	800d354 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00b      	beq.n	800d354 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	601a      	str	r2, [r3, #0]
 800d342:	e007      	b.n	800d354 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d348:	3301      	adds	r3, #1
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	b25a      	sxtb	r2, r3
 800d34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d354:	2301      	movs	r3, #1
 800d356:	637b      	str	r3, [r7, #52]	; 0x34
 800d358:	e001      	b.n	800d35e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	637b      	str	r3, [r7, #52]	; 0x34
 800d35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d360:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	f383 8811 	msr	BASEPRI, r3
}
 800d368:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3738      	adds	r7, #56	; 0x38
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10a      	bne.n	800d39c <vQueueDelete+0x28>
	__asm volatile
 800d386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	60bb      	str	r3, [r7, #8]
}
 800d398:	bf00      	nop
 800d39a:	e7fe      	b.n	800d39a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f000 f95f 	bl	800d660 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d102      	bne.n	800d3b2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f002 f93f 	bl	800f630 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d3b2:	bf00      	nop
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d3ba:	b480      	push	{r7}
 800d3bc:	b085      	sub	sp, #20
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d006      	beq.n	800d3d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d3d4:	60fb      	str	r3, [r7, #12]
 800d3d6:	e001      	b.n	800d3dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
	}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3714      	adds	r7, #20
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b086      	sub	sp, #24
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10d      	bne.n	800d424 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d14d      	bne.n	800d4ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	4618      	mov	r0, r3
 800d416:	f001 f947 	bl	800e6a8 <xTaskPriorityDisinherit>
 800d41a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2200      	movs	r2, #0
 800d420:	609a      	str	r2, [r3, #8]
 800d422:	e043      	b.n	800d4ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d119      	bne.n	800d45e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6858      	ldr	r0, [r3, #4]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d432:	461a      	mov	r2, r3
 800d434:	68b9      	ldr	r1, [r7, #8]
 800d436:	f002 fa45 	bl	800f8c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	685a      	ldr	r2, [r3, #4]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d442:	441a      	add	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	429a      	cmp	r2, r3
 800d452:	d32b      	bcc.n	800d4ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	605a      	str	r2, [r3, #4]
 800d45c:	e026      	b.n	800d4ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	68d8      	ldr	r0, [r3, #12]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d466:	461a      	mov	r2, r3
 800d468:	68b9      	ldr	r1, [r7, #8]
 800d46a:	f002 fa2b 	bl	800f8c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	68da      	ldr	r2, [r3, #12]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d476:	425b      	negs	r3, r3
 800d478:	441a      	add	r2, r3
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	68da      	ldr	r2, [r3, #12]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	429a      	cmp	r2, r3
 800d488:	d207      	bcs.n	800d49a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	689a      	ldr	r2, [r3, #8]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d492:	425b      	negs	r3, r3
 800d494:	441a      	add	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d105      	bne.n	800d4ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d002      	beq.n	800d4ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	1c5a      	adds	r2, r3, #1
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d4b4:	697b      	ldr	r3, [r7, #20]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b082      	sub	sp, #8
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
 800d4c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d018      	beq.n	800d502 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	68da      	ldr	r2, [r3, #12]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d8:	441a      	add	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68da      	ldr	r2, [r3, #12]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	689b      	ldr	r3, [r3, #8]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d303      	bcc.n	800d4f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	68d9      	ldr	r1, [r3, #12]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	6838      	ldr	r0, [r7, #0]
 800d4fe:	f002 f9e1 	bl	800f8c4 <memcpy>
	}
}
 800d502:	bf00      	nop
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b084      	sub	sp, #16
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d512:	f001 fe9f 	bl	800f254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d51c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d51e:	e011      	b.n	800d544 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d524:	2b00      	cmp	r3, #0
 800d526:	d012      	beq.n	800d54e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	3324      	adds	r3, #36	; 0x24
 800d52c:	4618      	mov	r0, r3
 800d52e:	f000 fe63 	bl	800e1f8 <xTaskRemoveFromEventList>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d538:	f000 ff3a 	bl	800e3b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
 800d53e:	3b01      	subs	r3, #1
 800d540:	b2db      	uxtb	r3, r3
 800d542:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	dce9      	bgt.n	800d520 <prvUnlockQueue+0x16>
 800d54c:	e000      	b.n	800d550 <prvUnlockQueue+0x46>
					break;
 800d54e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	22ff      	movs	r2, #255	; 0xff
 800d554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d558:	f001 feac 	bl	800f2b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d55c:	f001 fe7a 	bl	800f254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d566:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d568:	e011      	b.n	800d58e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d012      	beq.n	800d598 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3310      	adds	r3, #16
 800d576:	4618      	mov	r0, r3
 800d578:	f000 fe3e 	bl	800e1f8 <xTaskRemoveFromEventList>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d582:	f000 ff15 	bl	800e3b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d586:	7bbb      	ldrb	r3, [r7, #14]
 800d588:	3b01      	subs	r3, #1
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d58e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d592:	2b00      	cmp	r3, #0
 800d594:	dce9      	bgt.n	800d56a <prvUnlockQueue+0x60>
 800d596:	e000      	b.n	800d59a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d598:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	22ff      	movs	r2, #255	; 0xff
 800d59e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d5a2:	f001 fe87 	bl	800f2b4 <vPortExitCritical>
}
 800d5a6:	bf00      	nop
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b084      	sub	sp, #16
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5b6:	f001 fe4d 	bl	800f254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d102      	bne.n	800d5c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	60fb      	str	r3, [r7, #12]
 800d5c6:	e001      	b.n	800d5cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5cc:	f001 fe72 	bl	800f2b4 <vPortExitCritical>

	return xReturn;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b084      	sub	sp, #16
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5e2:	f001 fe37 	bl	800f254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d102      	bne.n	800d5f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	60fb      	str	r3, [r7, #12]
 800d5f6:	e001      	b.n	800d5fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5fc:	f001 fe5a 	bl	800f2b4 <vPortExitCritical>

	return xReturn;
 800d600:	68fb      	ldr	r3, [r7, #12]
}
 800d602:	4618      	mov	r0, r3
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
	...

0800d60c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d60c:	b480      	push	{r7}
 800d60e:	b085      	sub	sp, #20
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d616:	2300      	movs	r3, #0
 800d618:	60fb      	str	r3, [r7, #12]
 800d61a:	e014      	b.n	800d646 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d61c:	4a0f      	ldr	r2, [pc, #60]	; (800d65c <vQueueAddToRegistry+0x50>)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10b      	bne.n	800d640 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d628:	490c      	ldr	r1, [pc, #48]	; (800d65c <vQueueAddToRegistry+0x50>)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	683a      	ldr	r2, [r7, #0]
 800d62e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d632:	4a0a      	ldr	r2, [pc, #40]	; (800d65c <vQueueAddToRegistry+0x50>)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	00db      	lsls	r3, r3, #3
 800d638:	4413      	add	r3, r2
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d63e:	e006      	b.n	800d64e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3301      	adds	r3, #1
 800d644:	60fb      	str	r3, [r7, #12]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2b07      	cmp	r3, #7
 800d64a:	d9e7      	bls.n	800d61c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d64c:	bf00      	nop
 800d64e:	bf00      	nop
 800d650:	3714      	adds	r7, #20
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	20001cec 	.word	0x20001cec

0800d660 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d668:	2300      	movs	r3, #0
 800d66a:	60fb      	str	r3, [r7, #12]
 800d66c:	e016      	b.n	800d69c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d66e:	4a10      	ldr	r2, [pc, #64]	; (800d6b0 <vQueueUnregisterQueue+0x50>)
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	4413      	add	r3, r2
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d10b      	bne.n	800d696 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d67e:	4a0c      	ldr	r2, [pc, #48]	; (800d6b0 <vQueueUnregisterQueue+0x50>)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2100      	movs	r1, #0
 800d684:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d688:	4a09      	ldr	r2, [pc, #36]	; (800d6b0 <vQueueUnregisterQueue+0x50>)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	00db      	lsls	r3, r3, #3
 800d68e:	4413      	add	r3, r2
 800d690:	2200      	movs	r2, #0
 800d692:	605a      	str	r2, [r3, #4]
				break;
 800d694:	e006      	b.n	800d6a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	3301      	adds	r3, #1
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2b07      	cmp	r3, #7
 800d6a0:	d9e5      	bls.n	800d66e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d6a2:	bf00      	nop
 800d6a4:	bf00      	nop
 800d6a6:	3714      	adds	r7, #20
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr
 800d6b0:	20001cec 	.word	0x20001cec

0800d6b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b086      	sub	sp, #24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d6c4:	f001 fdc6 	bl	800f254 <vPortEnterCritical>
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6ce:	b25b      	sxtb	r3, r3
 800d6d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6d4:	d103      	bne.n	800d6de <vQueueWaitForMessageRestricted+0x2a>
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6e4:	b25b      	sxtb	r3, r3
 800d6e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6ea:	d103      	bne.n	800d6f4 <vQueueWaitForMessageRestricted+0x40>
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6f4:	f001 fdde 	bl	800f2b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d106      	bne.n	800d70e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	3324      	adds	r3, #36	; 0x24
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	68b9      	ldr	r1, [r7, #8]
 800d708:	4618      	mov	r0, r3
 800d70a:	f000 fd49 	bl	800e1a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d70e:	6978      	ldr	r0, [r7, #20]
 800d710:	f7ff fefb 	bl	800d50a <prvUnlockQueue>
	}
 800d714:	bf00      	nop
 800d716:	3718      	adds	r7, #24
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08e      	sub	sp, #56	; 0x38
 800d720:	af04      	add	r7, sp, #16
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
 800d728:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10a      	bne.n	800d746 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	623b      	str	r3, [r7, #32]
}
 800d742:	bf00      	nop
 800d744:	e7fe      	b.n	800d744 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10a      	bne.n	800d762 <xTaskCreateStatic+0x46>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	61fb      	str	r3, [r7, #28]
}
 800d75e:	bf00      	nop
 800d760:	e7fe      	b.n	800d760 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d762:	23bc      	movs	r3, #188	; 0xbc
 800d764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	2bbc      	cmp	r3, #188	; 0xbc
 800d76a:	d00a      	beq.n	800d782 <xTaskCreateStatic+0x66>
	__asm volatile
 800d76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	61bb      	str	r3, [r7, #24]
}
 800d77e:	bf00      	nop
 800d780:	e7fe      	b.n	800d780 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d786:	2b00      	cmp	r3, #0
 800d788:	d01e      	beq.n	800d7c8 <xTaskCreateStatic+0xac>
 800d78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d01b      	beq.n	800d7c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d798:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	2202      	movs	r2, #2
 800d79e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	9303      	str	r3, [sp, #12]
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a8:	9302      	str	r3, [sp, #8]
 800d7aa:	f107 0314 	add.w	r3, r7, #20
 800d7ae:	9301      	str	r3, [sp, #4]
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b2:	9300      	str	r3, [sp, #0]
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	68b9      	ldr	r1, [r7, #8]
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f000 f850 	bl	800d860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7c2:	f000 f8f3 	bl	800d9ac <prvAddNewTaskToReadyList>
 800d7c6:	e001      	b.n	800d7cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d7cc:	697b      	ldr	r3, [r7, #20]
	}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3728      	adds	r7, #40	; 0x28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b08c      	sub	sp, #48	; 0x30
 800d7da:	af04      	add	r7, sp, #16
 800d7dc:	60f8      	str	r0, [r7, #12]
 800d7de:	60b9      	str	r1, [r7, #8]
 800d7e0:	603b      	str	r3, [r7, #0]
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7e6:	88fb      	ldrh	r3, [r7, #6]
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f001 fe54 	bl	800f498 <pvPortMalloc>
 800d7f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d00e      	beq.n	800d816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7f8:	20bc      	movs	r0, #188	; 0xbc
 800d7fa:	f001 fe4d 	bl	800f498 <pvPortMalloc>
 800d7fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d003      	beq.n	800d80e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	697a      	ldr	r2, [r7, #20]
 800d80a:	631a      	str	r2, [r3, #48]	; 0x30
 800d80c:	e005      	b.n	800d81a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d80e:	6978      	ldr	r0, [r7, #20]
 800d810:	f001 ff0e 	bl	800f630 <vPortFree>
 800d814:	e001      	b.n	800d81a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d816:	2300      	movs	r3, #0
 800d818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d017      	beq.n	800d850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d828:	88fa      	ldrh	r2, [r7, #6]
 800d82a:	2300      	movs	r3, #0
 800d82c:	9303      	str	r3, [sp, #12]
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	9302      	str	r3, [sp, #8]
 800d832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d834:	9301      	str	r3, [sp, #4]
 800d836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	68b9      	ldr	r1, [r7, #8]
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f000 f80e 	bl	800d860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d844:	69f8      	ldr	r0, [r7, #28]
 800d846:	f000 f8b1 	bl	800d9ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d84a:	2301      	movs	r3, #1
 800d84c:	61bb      	str	r3, [r7, #24]
 800d84e:	e002      	b.n	800d856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d856:	69bb      	ldr	r3, [r7, #24]
	}
 800d858:	4618      	mov	r0, r3
 800d85a:	3720      	adds	r7, #32
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b088      	sub	sp, #32
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	461a      	mov	r2, r3
 800d878:	21a5      	movs	r1, #165	; 0xa5
 800d87a:	f002 f831 	bl	800f8e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d888:	3b01      	subs	r3, #1
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	f023 0307 	bic.w	r3, r3, #7
 800d896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	f003 0307 	and.w	r3, r3, #7
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00a      	beq.n	800d8b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a6:	f383 8811 	msr	BASEPRI, r3
 800d8aa:	f3bf 8f6f 	isb	sy
 800d8ae:	f3bf 8f4f 	dsb	sy
 800d8b2:	617b      	str	r3, [r7, #20]
}
 800d8b4:	bf00      	nop
 800d8b6:	e7fe      	b.n	800d8b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d01f      	beq.n	800d8fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8be:	2300      	movs	r3, #0
 800d8c0:	61fb      	str	r3, [r7, #28]
 800d8c2:	e012      	b.n	800d8ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	7819      	ldrb	r1, [r3, #0]
 800d8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	3334      	adds	r3, #52	; 0x34
 800d8d4:	460a      	mov	r2, r1
 800d8d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	4413      	add	r3, r2
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d006      	beq.n	800d8f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	61fb      	str	r3, [r7, #28]
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	2b0f      	cmp	r3, #15
 800d8ee:	d9e9      	bls.n	800d8c4 <prvInitialiseNewTask+0x64>
 800d8f0:	e000      	b.n	800d8f4 <prvInitialiseNewTask+0x94>
			{
				break;
 800d8f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8fc:	e003      	b.n	800d906 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	2b37      	cmp	r3, #55	; 0x37
 800d90a:	d901      	bls.n	800d910 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d90c:	2337      	movs	r3, #55	; 0x37
 800d90e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d914:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d91a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	2200      	movs	r2, #0
 800d920:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d924:	3304      	adds	r3, #4
 800d926:	4618      	mov	r0, r3
 800d928:	f7fe fe56 	bl	800c5d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	3318      	adds	r3, #24
 800d930:	4618      	mov	r0, r3
 800d932:	f7fe fe51 	bl	800c5d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d93a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d94a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94e:	2200      	movs	r2, #0
 800d950:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	2200      	movs	r2, #0
 800d958:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95e:	3354      	adds	r3, #84	; 0x54
 800d960:	2260      	movs	r2, #96	; 0x60
 800d962:	2100      	movs	r1, #0
 800d964:	4618      	mov	r0, r3
 800d966:	f001 ffbb 	bl	800f8e0 <memset>
 800d96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96c:	4a0c      	ldr	r2, [pc, #48]	; (800d9a0 <prvInitialiseNewTask+0x140>)
 800d96e:	659a      	str	r2, [r3, #88]	; 0x58
 800d970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d972:	4a0c      	ldr	r2, [pc, #48]	; (800d9a4 <prvInitialiseNewTask+0x144>)
 800d974:	65da      	str	r2, [r3, #92]	; 0x5c
 800d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d978:	4a0b      	ldr	r2, [pc, #44]	; (800d9a8 <prvInitialiseNewTask+0x148>)
 800d97a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d97c:	683a      	ldr	r2, [r7, #0]
 800d97e:	68f9      	ldr	r1, [r7, #12]
 800d980:	69b8      	ldr	r0, [r7, #24]
 800d982:	f001 fb37 	bl	800eff4 <pxPortInitialiseStack>
 800d986:	4602      	mov	r2, r0
 800d988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d002      	beq.n	800d998 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d996:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d998:	bf00      	nop
 800d99a:	3720      	adds	r7, #32
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	08010564 	.word	0x08010564
 800d9a4:	08010584 	.word	0x08010584
 800d9a8:	08010544 	.word	0x08010544

0800d9ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9b4:	f001 fc4e 	bl	800f254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9b8:	4b2d      	ldr	r3, [pc, #180]	; (800da70 <prvAddNewTaskToReadyList+0xc4>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	4a2c      	ldr	r2, [pc, #176]	; (800da70 <prvAddNewTaskToReadyList+0xc4>)
 800d9c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9c2:	4b2c      	ldr	r3, [pc, #176]	; (800da74 <prvAddNewTaskToReadyList+0xc8>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d109      	bne.n	800d9de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9ca:	4a2a      	ldr	r2, [pc, #168]	; (800da74 <prvAddNewTaskToReadyList+0xc8>)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9d0:	4b27      	ldr	r3, [pc, #156]	; (800da70 <prvAddNewTaskToReadyList+0xc4>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d110      	bne.n	800d9fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9d8:	f000 fd0e 	bl	800e3f8 <prvInitialiseTaskLists>
 800d9dc:	e00d      	b.n	800d9fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d9de:	4b26      	ldr	r3, [pc, #152]	; (800da78 <prvAddNewTaskToReadyList+0xcc>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d109      	bne.n	800d9fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9e6:	4b23      	ldr	r3, [pc, #140]	; (800da74 <prvAddNewTaskToReadyList+0xc8>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d802      	bhi.n	800d9fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9f4:	4a1f      	ldr	r2, [pc, #124]	; (800da74 <prvAddNewTaskToReadyList+0xc8>)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9fa:	4b20      	ldr	r3, [pc, #128]	; (800da7c <prvAddNewTaskToReadyList+0xd0>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	3301      	adds	r3, #1
 800da00:	4a1e      	ldr	r2, [pc, #120]	; (800da7c <prvAddNewTaskToReadyList+0xd0>)
 800da02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800da04:	4b1d      	ldr	r3, [pc, #116]	; (800da7c <prvAddNewTaskToReadyList+0xd0>)
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da10:	4b1b      	ldr	r3, [pc, #108]	; (800da80 <prvAddNewTaskToReadyList+0xd4>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	429a      	cmp	r2, r3
 800da16:	d903      	bls.n	800da20 <prvAddNewTaskToReadyList+0x74>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1c:	4a18      	ldr	r2, [pc, #96]	; (800da80 <prvAddNewTaskToReadyList+0xd4>)
 800da1e:	6013      	str	r3, [r2, #0]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da24:	4613      	mov	r3, r2
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	4413      	add	r3, r2
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	4a15      	ldr	r2, [pc, #84]	; (800da84 <prvAddNewTaskToReadyList+0xd8>)
 800da2e:	441a      	add	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	3304      	adds	r3, #4
 800da34:	4619      	mov	r1, r3
 800da36:	4610      	mov	r0, r2
 800da38:	f7fe fddb 	bl	800c5f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da3c:	f001 fc3a 	bl	800f2b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da40:	4b0d      	ldr	r3, [pc, #52]	; (800da78 <prvAddNewTaskToReadyList+0xcc>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00e      	beq.n	800da66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da48:	4b0a      	ldr	r3, [pc, #40]	; (800da74 <prvAddNewTaskToReadyList+0xc8>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da52:	429a      	cmp	r2, r3
 800da54:	d207      	bcs.n	800da66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da56:	4b0c      	ldr	r3, [pc, #48]	; (800da88 <prvAddNewTaskToReadyList+0xdc>)
 800da58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da5c:	601a      	str	r2, [r3, #0]
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da66:	bf00      	nop
 800da68:	3708      	adds	r7, #8
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	20002200 	.word	0x20002200
 800da74:	20001d2c 	.word	0x20001d2c
 800da78:	2000220c 	.word	0x2000220c
 800da7c:	2000221c 	.word	0x2000221c
 800da80:	20002208 	.word	0x20002208
 800da84:	20001d30 	.word	0x20001d30
 800da88:	e000ed04 	.word	0xe000ed04

0800da8c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800da94:	f001 fbde 	bl	800f254 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d102      	bne.n	800daa4 <vTaskDelete+0x18>
 800da9e:	4b2c      	ldr	r3, [pc, #176]	; (800db50 <vTaskDelete+0xc4>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	e000      	b.n	800daa6 <vTaskDelete+0x1a>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	3304      	adds	r3, #4
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fdfd 	bl	800c6ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d004      	beq.n	800dac4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	3318      	adds	r3, #24
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7fe fdf4 	bl	800c6ac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800dac4:	4b23      	ldr	r3, [pc, #140]	; (800db54 <vTaskDelete+0xc8>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	3301      	adds	r3, #1
 800daca:	4a22      	ldr	r2, [pc, #136]	; (800db54 <vTaskDelete+0xc8>)
 800dacc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800dace:	4b20      	ldr	r3, [pc, #128]	; (800db50 <vTaskDelete+0xc4>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d10b      	bne.n	800daf0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	3304      	adds	r3, #4
 800dadc:	4619      	mov	r1, r3
 800dade:	481e      	ldr	r0, [pc, #120]	; (800db58 <vTaskDelete+0xcc>)
 800dae0:	f7fe fd87 	bl	800c5f2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800dae4:	4b1d      	ldr	r3, [pc, #116]	; (800db5c <vTaskDelete+0xd0>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	3301      	adds	r3, #1
 800daea:	4a1c      	ldr	r2, [pc, #112]	; (800db5c <vTaskDelete+0xd0>)
 800daec:	6013      	str	r3, [r2, #0]
 800daee:	e009      	b.n	800db04 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800daf0:	4b1b      	ldr	r3, [pc, #108]	; (800db60 <vTaskDelete+0xd4>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	3b01      	subs	r3, #1
 800daf6:	4a1a      	ldr	r2, [pc, #104]	; (800db60 <vTaskDelete+0xd4>)
 800daf8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f000 fcea 	bl	800e4d4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800db00:	f000 fd1c 	bl	800e53c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800db04:	f001 fbd6 	bl	800f2b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800db08:	4b16      	ldr	r3, [pc, #88]	; (800db64 <vTaskDelete+0xd8>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d01b      	beq.n	800db48 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800db10:	4b0f      	ldr	r3, [pc, #60]	; (800db50 <vTaskDelete+0xc4>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	429a      	cmp	r2, r3
 800db18:	d116      	bne.n	800db48 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800db1a:	4b13      	ldr	r3, [pc, #76]	; (800db68 <vTaskDelete+0xdc>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00a      	beq.n	800db38 <vTaskDelete+0xac>
	__asm volatile
 800db22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	60bb      	str	r3, [r7, #8]
}
 800db34:	bf00      	nop
 800db36:	e7fe      	b.n	800db36 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800db38:	4b0c      	ldr	r3, [pc, #48]	; (800db6c <vTaskDelete+0xe0>)
 800db3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db3e:	601a      	str	r2, [r3, #0]
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db48:	bf00      	nop
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	20001d2c 	.word	0x20001d2c
 800db54:	2000221c 	.word	0x2000221c
 800db58:	200021d4 	.word	0x200021d4
 800db5c:	200021e8 	.word	0x200021e8
 800db60:	20002200 	.word	0x20002200
 800db64:	2000220c 	.word	0x2000220c
 800db68:	20002228 	.word	0x20002228
 800db6c:	e000ed04 	.word	0xe000ed04

0800db70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db78:	2300      	movs	r3, #0
 800db7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d017      	beq.n	800dbb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db82:	4b13      	ldr	r3, [pc, #76]	; (800dbd0 <vTaskDelay+0x60>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00a      	beq.n	800dba0 <vTaskDelay+0x30>
	__asm volatile
 800db8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	60bb      	str	r3, [r7, #8]
}
 800db9c:	bf00      	nop
 800db9e:	e7fe      	b.n	800db9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dba0:	f000 f900 	bl	800dda4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dba4:	2100      	movs	r1, #0
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fe82 	bl	800e8b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dbac:	f000 f908 	bl	800ddc0 <xTaskResumeAll>
 800dbb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d107      	bne.n	800dbc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dbb8:	4b06      	ldr	r3, [pc, #24]	; (800dbd4 <vTaskDelay+0x64>)
 800dbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbc8:	bf00      	nop
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20002228 	.word	0x20002228
 800dbd4:	e000ed04 	.word	0xe000ed04

0800dbd8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dbe0:	f001 fb38 	bl	800f254 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d102      	bne.n	800dbf0 <vTaskSuspend+0x18>
 800dbea:	4b30      	ldr	r3, [pc, #192]	; (800dcac <vTaskSuspend+0xd4>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	e000      	b.n	800dbf2 <vTaskSuspend+0x1a>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	3304      	adds	r3, #4
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fe fd57 	bl	800c6ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d004      	beq.n	800dc10 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	3318      	adds	r3, #24
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe fd4e 	bl	800c6ac <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	3304      	adds	r3, #4
 800dc14:	4619      	mov	r1, r3
 800dc16:	4826      	ldr	r0, [pc, #152]	; (800dcb0 <vTaskSuspend+0xd8>)
 800dc18:	f7fe fceb 	bl	800c5f2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d103      	bne.n	800dc30 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dc30:	f001 fb40 	bl	800f2b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dc34:	4b1f      	ldr	r3, [pc, #124]	; (800dcb4 <vTaskSuspend+0xdc>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d005      	beq.n	800dc48 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dc3c:	f001 fb0a 	bl	800f254 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dc40:	f000 fc7c 	bl	800e53c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dc44:	f001 fb36 	bl	800f2b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dc48:	4b18      	ldr	r3, [pc, #96]	; (800dcac <vTaskSuspend+0xd4>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d127      	bne.n	800dca2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800dc52:	4b18      	ldr	r3, [pc, #96]	; (800dcb4 <vTaskSuspend+0xdc>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d017      	beq.n	800dc8a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dc5a:	4b17      	ldr	r3, [pc, #92]	; (800dcb8 <vTaskSuspend+0xe0>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00a      	beq.n	800dc78 <vTaskSuspend+0xa0>
	__asm volatile
 800dc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc66:	f383 8811 	msr	BASEPRI, r3
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	60bb      	str	r3, [r7, #8]
}
 800dc74:	bf00      	nop
 800dc76:	e7fe      	b.n	800dc76 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800dc78:	4b10      	ldr	r3, [pc, #64]	; (800dcbc <vTaskSuspend+0xe4>)
 800dc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc7e:	601a      	str	r2, [r3, #0]
 800dc80:	f3bf 8f4f 	dsb	sy
 800dc84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc88:	e00b      	b.n	800dca2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dc8a:	4b09      	ldr	r3, [pc, #36]	; (800dcb0 <vTaskSuspend+0xd8>)
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	4b0c      	ldr	r3, [pc, #48]	; (800dcc0 <vTaskSuspend+0xe8>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d103      	bne.n	800dc9e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800dc96:	4b05      	ldr	r3, [pc, #20]	; (800dcac <vTaskSuspend+0xd4>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	601a      	str	r2, [r3, #0]
	}
 800dc9c:	e001      	b.n	800dca2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800dc9e:	f000 f9f7 	bl	800e090 <vTaskSwitchContext>
	}
 800dca2:	bf00      	nop
 800dca4:	3710      	adds	r7, #16
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	20001d2c 	.word	0x20001d2c
 800dcb0:	200021ec 	.word	0x200021ec
 800dcb4:	2000220c 	.word	0x2000220c
 800dcb8:	20002228 	.word	0x20002228
 800dcbc:	e000ed04 	.word	0xe000ed04
 800dcc0:	20002200 	.word	0x20002200

0800dcc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08a      	sub	sp, #40	; 0x28
 800dcc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcd2:	463a      	mov	r2, r7
 800dcd4:	1d39      	adds	r1, r7, #4
 800dcd6:	f107 0308 	add.w	r3, r7, #8
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fe fc28 	bl	800c530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dce0:	6839      	ldr	r1, [r7, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	9202      	str	r2, [sp, #8]
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	2300      	movs	r3, #0
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	2300      	movs	r3, #0
 800dcf0:	460a      	mov	r2, r1
 800dcf2:	4924      	ldr	r1, [pc, #144]	; (800dd84 <vTaskStartScheduler+0xc0>)
 800dcf4:	4824      	ldr	r0, [pc, #144]	; (800dd88 <vTaskStartScheduler+0xc4>)
 800dcf6:	f7ff fd11 	bl	800d71c <xTaskCreateStatic>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	4a23      	ldr	r2, [pc, #140]	; (800dd8c <vTaskStartScheduler+0xc8>)
 800dcfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd00:	4b22      	ldr	r3, [pc, #136]	; (800dd8c <vTaskStartScheduler+0xc8>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	617b      	str	r3, [r7, #20]
 800dd0c:	e001      	b.n	800dd12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d102      	bne.n	800dd1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd18:	f000 fe1e 	bl	800e958 <xTimerCreateTimerTask>
 800dd1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d11b      	bne.n	800dd5c <vTaskStartScheduler+0x98>
	__asm volatile
 800dd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd28:	f383 8811 	msr	BASEPRI, r3
 800dd2c:	f3bf 8f6f 	isb	sy
 800dd30:	f3bf 8f4f 	dsb	sy
 800dd34:	613b      	str	r3, [r7, #16]
}
 800dd36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd38:	4b15      	ldr	r3, [pc, #84]	; (800dd90 <vTaskStartScheduler+0xcc>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	3354      	adds	r3, #84	; 0x54
 800dd3e:	4a15      	ldr	r2, [pc, #84]	; (800dd94 <vTaskStartScheduler+0xd0>)
 800dd40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd42:	4b15      	ldr	r3, [pc, #84]	; (800dd98 <vTaskStartScheduler+0xd4>)
 800dd44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd4a:	4b14      	ldr	r3, [pc, #80]	; (800dd9c <vTaskStartScheduler+0xd8>)
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd50:	4b13      	ldr	r3, [pc, #76]	; (800dda0 <vTaskStartScheduler+0xdc>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd56:	f001 f9db 	bl	800f110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd5a:	e00e      	b.n	800dd7a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd62:	d10a      	bne.n	800dd7a <vTaskStartScheduler+0xb6>
	__asm volatile
 800dd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd68:	f383 8811 	msr	BASEPRI, r3
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	60fb      	str	r3, [r7, #12]
}
 800dd76:	bf00      	nop
 800dd78:	e7fe      	b.n	800dd78 <vTaskStartScheduler+0xb4>
}
 800dd7a:	bf00      	nop
 800dd7c:	3718      	adds	r7, #24
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	08010438 	.word	0x08010438
 800dd88:	0800e3c9 	.word	0x0800e3c9
 800dd8c:	20002224 	.word	0x20002224
 800dd90:	20001d2c 	.word	0x20001d2c
 800dd94:	20000028 	.word	0x20000028
 800dd98:	20002220 	.word	0x20002220
 800dd9c:	2000220c 	.word	0x2000220c
 800dda0:	20002204 	.word	0x20002204

0800dda4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dda4:	b480      	push	{r7}
 800dda6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dda8:	4b04      	ldr	r3, [pc, #16]	; (800ddbc <vTaskSuspendAll+0x18>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	3301      	adds	r3, #1
 800ddae:	4a03      	ldr	r2, [pc, #12]	; (800ddbc <vTaskSuspendAll+0x18>)
 800ddb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ddb2:	bf00      	nop
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr
 800ddbc:	20002228 	.word	0x20002228

0800ddc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ddce:	4b42      	ldr	r3, [pc, #264]	; (800ded8 <xTaskResumeAll+0x118>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d10a      	bne.n	800ddec <xTaskResumeAll+0x2c>
	__asm volatile
 800ddd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	f3bf 8f6f 	isb	sy
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	603b      	str	r3, [r7, #0]
}
 800dde8:	bf00      	nop
 800ddea:	e7fe      	b.n	800ddea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ddec:	f001 fa32 	bl	800f254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ddf0:	4b39      	ldr	r3, [pc, #228]	; (800ded8 <xTaskResumeAll+0x118>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	4a38      	ldr	r2, [pc, #224]	; (800ded8 <xTaskResumeAll+0x118>)
 800ddf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddfa:	4b37      	ldr	r3, [pc, #220]	; (800ded8 <xTaskResumeAll+0x118>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d162      	bne.n	800dec8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de02:	4b36      	ldr	r3, [pc, #216]	; (800dedc <xTaskResumeAll+0x11c>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d05e      	beq.n	800dec8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de0a:	e02f      	b.n	800de6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de0c:	4b34      	ldr	r3, [pc, #208]	; (800dee0 <xTaskResumeAll+0x120>)
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	3318      	adds	r3, #24
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fe fc47 	bl	800c6ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	3304      	adds	r3, #4
 800de22:	4618      	mov	r0, r3
 800de24:	f7fe fc42 	bl	800c6ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2c:	4b2d      	ldr	r3, [pc, #180]	; (800dee4 <xTaskResumeAll+0x124>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	429a      	cmp	r2, r3
 800de32:	d903      	bls.n	800de3c <xTaskResumeAll+0x7c>
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de38:	4a2a      	ldr	r2, [pc, #168]	; (800dee4 <xTaskResumeAll+0x124>)
 800de3a:	6013      	str	r3, [r2, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de40:	4613      	mov	r3, r2
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4413      	add	r3, r2
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4a27      	ldr	r2, [pc, #156]	; (800dee8 <xTaskResumeAll+0x128>)
 800de4a:	441a      	add	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	3304      	adds	r3, #4
 800de50:	4619      	mov	r1, r3
 800de52:	4610      	mov	r0, r2
 800de54:	f7fe fbcd 	bl	800c5f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de5c:	4b23      	ldr	r3, [pc, #140]	; (800deec <xTaskResumeAll+0x12c>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de62:	429a      	cmp	r2, r3
 800de64:	d302      	bcc.n	800de6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800de66:	4b22      	ldr	r3, [pc, #136]	; (800def0 <xTaskResumeAll+0x130>)
 800de68:	2201      	movs	r2, #1
 800de6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de6c:	4b1c      	ldr	r3, [pc, #112]	; (800dee0 <xTaskResumeAll+0x120>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d1cb      	bne.n	800de0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de7a:	f000 fb5f 	bl	800e53c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de7e:	4b1d      	ldr	r3, [pc, #116]	; (800def4 <xTaskResumeAll+0x134>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d010      	beq.n	800deac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de8a:	f000 f847 	bl	800df1c <xTaskIncrementTick>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d002      	beq.n	800de9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800de94:	4b16      	ldr	r3, [pc, #88]	; (800def0 <xTaskResumeAll+0x130>)
 800de96:	2201      	movs	r2, #1
 800de98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	3b01      	subs	r3, #1
 800de9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1f1      	bne.n	800de8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dea6:	4b13      	ldr	r3, [pc, #76]	; (800def4 <xTaskResumeAll+0x134>)
 800dea8:	2200      	movs	r2, #0
 800deaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800deac:	4b10      	ldr	r3, [pc, #64]	; (800def0 <xTaskResumeAll+0x130>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d009      	beq.n	800dec8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800deb4:	2301      	movs	r3, #1
 800deb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800deb8:	4b0f      	ldr	r3, [pc, #60]	; (800def8 <xTaskResumeAll+0x138>)
 800deba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800debe:	601a      	str	r2, [r3, #0]
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dec8:	f001 f9f4 	bl	800f2b4 <vPortExitCritical>

	return xAlreadyYielded;
 800decc:	68bb      	ldr	r3, [r7, #8]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	20002228 	.word	0x20002228
 800dedc:	20002200 	.word	0x20002200
 800dee0:	200021c0 	.word	0x200021c0
 800dee4:	20002208 	.word	0x20002208
 800dee8:	20001d30 	.word	0x20001d30
 800deec:	20001d2c 	.word	0x20001d2c
 800def0:	20002214 	.word	0x20002214
 800def4:	20002210 	.word	0x20002210
 800def8:	e000ed04 	.word	0xe000ed04

0800defc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800defc:	b480      	push	{r7}
 800defe:	b083      	sub	sp, #12
 800df00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df02:	4b05      	ldr	r3, [pc, #20]	; (800df18 <xTaskGetTickCount+0x1c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df08:	687b      	ldr	r3, [r7, #4]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	370c      	adds	r7, #12
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
 800df16:	bf00      	nop
 800df18:	20002204 	.word	0x20002204

0800df1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b086      	sub	sp, #24
 800df20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df22:	2300      	movs	r3, #0
 800df24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df26:	4b4f      	ldr	r3, [pc, #316]	; (800e064 <xTaskIncrementTick+0x148>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	f040 808f 	bne.w	800e04e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df30:	4b4d      	ldr	r3, [pc, #308]	; (800e068 <xTaskIncrementTick+0x14c>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3301      	adds	r3, #1
 800df36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df38:	4a4b      	ldr	r2, [pc, #300]	; (800e068 <xTaskIncrementTick+0x14c>)
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d120      	bne.n	800df86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800df44:	4b49      	ldr	r3, [pc, #292]	; (800e06c <xTaskIncrementTick+0x150>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00a      	beq.n	800df64 <xTaskIncrementTick+0x48>
	__asm volatile
 800df4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df52:	f383 8811 	msr	BASEPRI, r3
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	603b      	str	r3, [r7, #0]
}
 800df60:	bf00      	nop
 800df62:	e7fe      	b.n	800df62 <xTaskIncrementTick+0x46>
 800df64:	4b41      	ldr	r3, [pc, #260]	; (800e06c <xTaskIncrementTick+0x150>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	60fb      	str	r3, [r7, #12]
 800df6a:	4b41      	ldr	r3, [pc, #260]	; (800e070 <xTaskIncrementTick+0x154>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a3f      	ldr	r2, [pc, #252]	; (800e06c <xTaskIncrementTick+0x150>)
 800df70:	6013      	str	r3, [r2, #0]
 800df72:	4a3f      	ldr	r2, [pc, #252]	; (800e070 <xTaskIncrementTick+0x154>)
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6013      	str	r3, [r2, #0]
 800df78:	4b3e      	ldr	r3, [pc, #248]	; (800e074 <xTaskIncrementTick+0x158>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	3301      	adds	r3, #1
 800df7e:	4a3d      	ldr	r2, [pc, #244]	; (800e074 <xTaskIncrementTick+0x158>)
 800df80:	6013      	str	r3, [r2, #0]
 800df82:	f000 fadb 	bl	800e53c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df86:	4b3c      	ldr	r3, [pc, #240]	; (800e078 <xTaskIncrementTick+0x15c>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	693a      	ldr	r2, [r7, #16]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d349      	bcc.n	800e024 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df90:	4b36      	ldr	r3, [pc, #216]	; (800e06c <xTaskIncrementTick+0x150>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d104      	bne.n	800dfa4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df9a:	4b37      	ldr	r3, [pc, #220]	; (800e078 <xTaskIncrementTick+0x15c>)
 800df9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfa0:	601a      	str	r2, [r3, #0]
					break;
 800dfa2:	e03f      	b.n	800e024 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfa4:	4b31      	ldr	r3, [pc, #196]	; (800e06c <xTaskIncrementTick+0x150>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dfb4:	693a      	ldr	r2, [r7, #16]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d203      	bcs.n	800dfc4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dfbc:	4a2e      	ldr	r2, [pc, #184]	; (800e078 <xTaskIncrementTick+0x15c>)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dfc2:	e02f      	b.n	800e024 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fe fb6f 	bl	800c6ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d004      	beq.n	800dfe0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	3318      	adds	r3, #24
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7fe fb66 	bl	800c6ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe4:	4b25      	ldr	r3, [pc, #148]	; (800e07c <xTaskIncrementTick+0x160>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d903      	bls.n	800dff4 <xTaskIncrementTick+0xd8>
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff0:	4a22      	ldr	r2, [pc, #136]	; (800e07c <xTaskIncrementTick+0x160>)
 800dff2:	6013      	str	r3, [r2, #0]
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff8:	4613      	mov	r3, r2
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	4413      	add	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4a1f      	ldr	r2, [pc, #124]	; (800e080 <xTaskIncrementTick+0x164>)
 800e002:	441a      	add	r2, r3
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	3304      	adds	r3, #4
 800e008:	4619      	mov	r1, r3
 800e00a:	4610      	mov	r0, r2
 800e00c:	f7fe faf1 	bl	800c5f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e014:	4b1b      	ldr	r3, [pc, #108]	; (800e084 <xTaskIncrementTick+0x168>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d3b8      	bcc.n	800df90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e01e:	2301      	movs	r3, #1
 800e020:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e022:	e7b5      	b.n	800df90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e024:	4b17      	ldr	r3, [pc, #92]	; (800e084 <xTaskIncrementTick+0x168>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02a:	4915      	ldr	r1, [pc, #84]	; (800e080 <xTaskIncrementTick+0x164>)
 800e02c:	4613      	mov	r3, r2
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	4413      	add	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	440b      	add	r3, r1
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d901      	bls.n	800e040 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e03c:	2301      	movs	r3, #1
 800e03e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e040:	4b11      	ldr	r3, [pc, #68]	; (800e088 <xTaskIncrementTick+0x16c>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d007      	beq.n	800e058 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e048:	2301      	movs	r3, #1
 800e04a:	617b      	str	r3, [r7, #20]
 800e04c:	e004      	b.n	800e058 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e04e:	4b0f      	ldr	r3, [pc, #60]	; (800e08c <xTaskIncrementTick+0x170>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	3301      	adds	r3, #1
 800e054:	4a0d      	ldr	r2, [pc, #52]	; (800e08c <xTaskIncrementTick+0x170>)
 800e056:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e058:	697b      	ldr	r3, [r7, #20]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3718      	adds	r7, #24
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	20002228 	.word	0x20002228
 800e068:	20002204 	.word	0x20002204
 800e06c:	200021b8 	.word	0x200021b8
 800e070:	200021bc 	.word	0x200021bc
 800e074:	20002218 	.word	0x20002218
 800e078:	20002220 	.word	0x20002220
 800e07c:	20002208 	.word	0x20002208
 800e080:	20001d30 	.word	0x20001d30
 800e084:	20001d2c 	.word	0x20001d2c
 800e088:	20002214 	.word	0x20002214
 800e08c:	20002210 	.word	0x20002210

0800e090 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e096:	4b2a      	ldr	r3, [pc, #168]	; (800e140 <vTaskSwitchContext+0xb0>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d003      	beq.n	800e0a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e09e:	4b29      	ldr	r3, [pc, #164]	; (800e144 <vTaskSwitchContext+0xb4>)
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e0a4:	e046      	b.n	800e134 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e0a6:	4b27      	ldr	r3, [pc, #156]	; (800e144 <vTaskSwitchContext+0xb4>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ac:	4b26      	ldr	r3, [pc, #152]	; (800e148 <vTaskSwitchContext+0xb8>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	60fb      	str	r3, [r7, #12]
 800e0b2:	e010      	b.n	800e0d6 <vTaskSwitchContext+0x46>
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d10a      	bne.n	800e0d0 <vTaskSwitchContext+0x40>
	__asm volatile
 800e0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0be:	f383 8811 	msr	BASEPRI, r3
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	607b      	str	r3, [r7, #4]
}
 800e0cc:	bf00      	nop
 800e0ce:	e7fe      	b.n	800e0ce <vTaskSwitchContext+0x3e>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	3b01      	subs	r3, #1
 800e0d4:	60fb      	str	r3, [r7, #12]
 800e0d6:	491d      	ldr	r1, [pc, #116]	; (800e14c <vTaskSwitchContext+0xbc>)
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	4613      	mov	r3, r2
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4413      	add	r3, r2
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	440b      	add	r3, r1
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0e4      	beq.n	800e0b4 <vTaskSwitchContext+0x24>
 800e0ea:	68fa      	ldr	r2, [r7, #12]
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	4413      	add	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4a15      	ldr	r2, [pc, #84]	; (800e14c <vTaskSwitchContext+0xbc>)
 800e0f6:	4413      	add	r3, r2
 800e0f8:	60bb      	str	r3, [r7, #8]
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	605a      	str	r2, [r3, #4]
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	685a      	ldr	r2, [r3, #4]
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	3308      	adds	r3, #8
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d104      	bne.n	800e11a <vTaskSwitchContext+0x8a>
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	685a      	ldr	r2, [r3, #4]
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	605a      	str	r2, [r3, #4]
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	4a0b      	ldr	r2, [pc, #44]	; (800e150 <vTaskSwitchContext+0xc0>)
 800e122:	6013      	str	r3, [r2, #0]
 800e124:	4a08      	ldr	r2, [pc, #32]	; (800e148 <vTaskSwitchContext+0xb8>)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e12a:	4b09      	ldr	r3, [pc, #36]	; (800e150 <vTaskSwitchContext+0xc0>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	3354      	adds	r3, #84	; 0x54
 800e130:	4a08      	ldr	r2, [pc, #32]	; (800e154 <vTaskSwitchContext+0xc4>)
 800e132:	6013      	str	r3, [r2, #0]
}
 800e134:	bf00      	nop
 800e136:	3714      	adds	r7, #20
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr
 800e140:	20002228 	.word	0x20002228
 800e144:	20002214 	.word	0x20002214
 800e148:	20002208 	.word	0x20002208
 800e14c:	20001d30 	.word	0x20001d30
 800e150:	20001d2c 	.word	0x20001d2c
 800e154:	20000028 	.word	0x20000028

0800e158 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d10a      	bne.n	800e17e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16c:	f383 8811 	msr	BASEPRI, r3
 800e170:	f3bf 8f6f 	isb	sy
 800e174:	f3bf 8f4f 	dsb	sy
 800e178:	60fb      	str	r3, [r7, #12]
}
 800e17a:	bf00      	nop
 800e17c:	e7fe      	b.n	800e17c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e17e:	4b07      	ldr	r3, [pc, #28]	; (800e19c <vTaskPlaceOnEventList+0x44>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	3318      	adds	r3, #24
 800e184:	4619      	mov	r1, r3
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7fe fa57 	bl	800c63a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e18c:	2101      	movs	r1, #1
 800e18e:	6838      	ldr	r0, [r7, #0]
 800e190:	f000 fb8e 	bl	800e8b0 <prvAddCurrentTaskToDelayedList>
}
 800e194:	bf00      	nop
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	20001d2c 	.word	0x20001d2c

0800e1a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b086      	sub	sp, #24
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	60b9      	str	r1, [r7, #8]
 800e1aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10a      	bne.n	800e1c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	617b      	str	r3, [r7, #20]
}
 800e1c4:	bf00      	nop
 800e1c6:	e7fe      	b.n	800e1c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1c8:	4b0a      	ldr	r3, [pc, #40]	; (800e1f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3318      	adds	r3, #24
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f7fe fa0e 	bl	800c5f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e1dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e1e2:	6879      	ldr	r1, [r7, #4]
 800e1e4:	68b8      	ldr	r0, [r7, #8]
 800e1e6:	f000 fb63 	bl	800e8b0 <prvAddCurrentTaskToDelayedList>
	}
 800e1ea:	bf00      	nop
 800e1ec:	3718      	adds	r7, #24
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	20001d2c 	.word	0x20001d2c

0800e1f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b086      	sub	sp, #24
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10a      	bne.n	800e224 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	60fb      	str	r3, [r7, #12]
}
 800e220:	bf00      	nop
 800e222:	e7fe      	b.n	800e222 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	3318      	adds	r3, #24
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fe fa3f 	bl	800c6ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e22e:	4b1e      	ldr	r3, [pc, #120]	; (800e2a8 <xTaskRemoveFromEventList+0xb0>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d11d      	bne.n	800e272 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	3304      	adds	r3, #4
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe fa36 	bl	800c6ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e244:	4b19      	ldr	r3, [pc, #100]	; (800e2ac <xTaskRemoveFromEventList+0xb4>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d903      	bls.n	800e254 <xTaskRemoveFromEventList+0x5c>
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e250:	4a16      	ldr	r2, [pc, #88]	; (800e2ac <xTaskRemoveFromEventList+0xb4>)
 800e252:	6013      	str	r3, [r2, #0]
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e258:	4613      	mov	r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4413      	add	r3, r2
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	4a13      	ldr	r2, [pc, #76]	; (800e2b0 <xTaskRemoveFromEventList+0xb8>)
 800e262:	441a      	add	r2, r3
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	3304      	adds	r3, #4
 800e268:	4619      	mov	r1, r3
 800e26a:	4610      	mov	r0, r2
 800e26c:	f7fe f9c1 	bl	800c5f2 <vListInsertEnd>
 800e270:	e005      	b.n	800e27e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	3318      	adds	r3, #24
 800e276:	4619      	mov	r1, r3
 800e278:	480e      	ldr	r0, [pc, #56]	; (800e2b4 <xTaskRemoveFromEventList+0xbc>)
 800e27a:	f7fe f9ba 	bl	800c5f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e282:	4b0d      	ldr	r3, [pc, #52]	; (800e2b8 <xTaskRemoveFromEventList+0xc0>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e288:	429a      	cmp	r2, r3
 800e28a:	d905      	bls.n	800e298 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e28c:	2301      	movs	r3, #1
 800e28e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e290:	4b0a      	ldr	r3, [pc, #40]	; (800e2bc <xTaskRemoveFromEventList+0xc4>)
 800e292:	2201      	movs	r2, #1
 800e294:	601a      	str	r2, [r3, #0]
 800e296:	e001      	b.n	800e29c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e298:	2300      	movs	r3, #0
 800e29a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e29c:	697b      	ldr	r3, [r7, #20]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3718      	adds	r7, #24
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	20002228 	.word	0x20002228
 800e2ac:	20002208 	.word	0x20002208
 800e2b0:	20001d30 	.word	0x20001d30
 800e2b4:	200021c0 	.word	0x200021c0
 800e2b8:	20001d2c 	.word	0x20001d2c
 800e2bc:	20002214 	.word	0x20002214

0800e2c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e2c8:	4b06      	ldr	r3, [pc, #24]	; (800e2e4 <vTaskInternalSetTimeOutState+0x24>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2d0:	4b05      	ldr	r3, [pc, #20]	; (800e2e8 <vTaskInternalSetTimeOutState+0x28>)
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	605a      	str	r2, [r3, #4]
}
 800e2d8:	bf00      	nop
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	20002218 	.word	0x20002218
 800e2e8:	20002204 	.word	0x20002204

0800e2ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b088      	sub	sp, #32
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d10a      	bne.n	800e312 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e300:	f383 8811 	msr	BASEPRI, r3
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	613b      	str	r3, [r7, #16]
}
 800e30e:	bf00      	nop
 800e310:	e7fe      	b.n	800e310 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10a      	bne.n	800e32e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31c:	f383 8811 	msr	BASEPRI, r3
 800e320:	f3bf 8f6f 	isb	sy
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	60fb      	str	r3, [r7, #12]
}
 800e32a:	bf00      	nop
 800e32c:	e7fe      	b.n	800e32c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e32e:	f000 ff91 	bl	800f254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e332:	4b1d      	ldr	r3, [pc, #116]	; (800e3a8 <xTaskCheckForTimeOut+0xbc>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	69ba      	ldr	r2, [r7, #24]
 800e33e:	1ad3      	subs	r3, r2, r3
 800e340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e34a:	d102      	bne.n	800e352 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e34c:	2300      	movs	r3, #0
 800e34e:	61fb      	str	r3, [r7, #28]
 800e350:	e023      	b.n	800e39a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	4b15      	ldr	r3, [pc, #84]	; (800e3ac <xTaskCheckForTimeOut+0xc0>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d007      	beq.n	800e36e <xTaskCheckForTimeOut+0x82>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	69ba      	ldr	r2, [r7, #24]
 800e364:	429a      	cmp	r2, r3
 800e366:	d302      	bcc.n	800e36e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e368:	2301      	movs	r3, #1
 800e36a:	61fb      	str	r3, [r7, #28]
 800e36c:	e015      	b.n	800e39a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	697a      	ldr	r2, [r7, #20]
 800e374:	429a      	cmp	r2, r3
 800e376:	d20b      	bcs.n	800e390 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	1ad2      	subs	r2, r2, r3
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7ff ff9b 	bl	800e2c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e38a:	2300      	movs	r3, #0
 800e38c:	61fb      	str	r3, [r7, #28]
 800e38e:	e004      	b.n	800e39a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	2200      	movs	r2, #0
 800e394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e396:	2301      	movs	r3, #1
 800e398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e39a:	f000 ff8b 	bl	800f2b4 <vPortExitCritical>

	return xReturn;
 800e39e:	69fb      	ldr	r3, [r7, #28]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3720      	adds	r7, #32
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	20002204 	.word	0x20002204
 800e3ac:	20002218 	.word	0x20002218

0800e3b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e3b4:	4b03      	ldr	r3, [pc, #12]	; (800e3c4 <vTaskMissedYield+0x14>)
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	601a      	str	r2, [r3, #0]
}
 800e3ba:	bf00      	nop
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr
 800e3c4:	20002214 	.word	0x20002214

0800e3c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3d0:	f000 f852 	bl	800e478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3d4:	4b06      	ldr	r3, [pc, #24]	; (800e3f0 <prvIdleTask+0x28>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d9f9      	bls.n	800e3d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3dc:	4b05      	ldr	r3, [pc, #20]	; (800e3f4 <prvIdleTask+0x2c>)
 800e3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e2:	601a      	str	r2, [r3, #0]
 800e3e4:	f3bf 8f4f 	dsb	sy
 800e3e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3ec:	e7f0      	b.n	800e3d0 <prvIdleTask+0x8>
 800e3ee:	bf00      	nop
 800e3f0:	20001d30 	.word	0x20001d30
 800e3f4:	e000ed04 	.word	0xe000ed04

0800e3f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3fe:	2300      	movs	r3, #0
 800e400:	607b      	str	r3, [r7, #4]
 800e402:	e00c      	b.n	800e41e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	4613      	mov	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	4a12      	ldr	r2, [pc, #72]	; (800e458 <prvInitialiseTaskLists+0x60>)
 800e410:	4413      	add	r3, r2
 800e412:	4618      	mov	r0, r3
 800e414:	f7fe f8c0 	bl	800c598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	3301      	adds	r3, #1
 800e41c:	607b      	str	r3, [r7, #4]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b37      	cmp	r3, #55	; 0x37
 800e422:	d9ef      	bls.n	800e404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e424:	480d      	ldr	r0, [pc, #52]	; (800e45c <prvInitialiseTaskLists+0x64>)
 800e426:	f7fe f8b7 	bl	800c598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e42a:	480d      	ldr	r0, [pc, #52]	; (800e460 <prvInitialiseTaskLists+0x68>)
 800e42c:	f7fe f8b4 	bl	800c598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e430:	480c      	ldr	r0, [pc, #48]	; (800e464 <prvInitialiseTaskLists+0x6c>)
 800e432:	f7fe f8b1 	bl	800c598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e436:	480c      	ldr	r0, [pc, #48]	; (800e468 <prvInitialiseTaskLists+0x70>)
 800e438:	f7fe f8ae 	bl	800c598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e43c:	480b      	ldr	r0, [pc, #44]	; (800e46c <prvInitialiseTaskLists+0x74>)
 800e43e:	f7fe f8ab 	bl	800c598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e442:	4b0b      	ldr	r3, [pc, #44]	; (800e470 <prvInitialiseTaskLists+0x78>)
 800e444:	4a05      	ldr	r2, [pc, #20]	; (800e45c <prvInitialiseTaskLists+0x64>)
 800e446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e448:	4b0a      	ldr	r3, [pc, #40]	; (800e474 <prvInitialiseTaskLists+0x7c>)
 800e44a:	4a05      	ldr	r2, [pc, #20]	; (800e460 <prvInitialiseTaskLists+0x68>)
 800e44c:	601a      	str	r2, [r3, #0]
}
 800e44e:	bf00      	nop
 800e450:	3708      	adds	r7, #8
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	20001d30 	.word	0x20001d30
 800e45c:	20002190 	.word	0x20002190
 800e460:	200021a4 	.word	0x200021a4
 800e464:	200021c0 	.word	0x200021c0
 800e468:	200021d4 	.word	0x200021d4
 800e46c:	200021ec 	.word	0x200021ec
 800e470:	200021b8 	.word	0x200021b8
 800e474:	200021bc 	.word	0x200021bc

0800e478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e47e:	e019      	b.n	800e4b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e480:	f000 fee8 	bl	800f254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e484:	4b10      	ldr	r3, [pc, #64]	; (800e4c8 <prvCheckTasksWaitingTermination+0x50>)
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	3304      	adds	r3, #4
 800e490:	4618      	mov	r0, r3
 800e492:	f7fe f90b 	bl	800c6ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e496:	4b0d      	ldr	r3, [pc, #52]	; (800e4cc <prvCheckTasksWaitingTermination+0x54>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	3b01      	subs	r3, #1
 800e49c:	4a0b      	ldr	r2, [pc, #44]	; (800e4cc <prvCheckTasksWaitingTermination+0x54>)
 800e49e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e4a0:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <prvCheckTasksWaitingTermination+0x58>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	4a0a      	ldr	r2, [pc, #40]	; (800e4d0 <prvCheckTasksWaitingTermination+0x58>)
 800e4a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e4aa:	f000 ff03 	bl	800f2b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 f810 	bl	800e4d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4b4:	4b06      	ldr	r3, [pc, #24]	; (800e4d0 <prvCheckTasksWaitingTermination+0x58>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1e1      	bne.n	800e480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e4bc:	bf00      	nop
 800e4be:	bf00      	nop
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	200021d4 	.word	0x200021d4
 800e4cc:	20002200 	.word	0x20002200
 800e4d0:	200021e8 	.word	0x200021e8

0800e4d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	3354      	adds	r3, #84	; 0x54
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f001 faa7 	bl	800fa34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d108      	bne.n	800e502 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f001 f89b 	bl	800f630 <vPortFree>
				vPortFree( pxTCB );
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f001 f898 	bl	800f630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e500:	e018      	b.n	800e534 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d103      	bne.n	800e514 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f001 f88f 	bl	800f630 <vPortFree>
	}
 800e512:	e00f      	b.n	800e534 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d00a      	beq.n	800e534 <prvDeleteTCB+0x60>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	60fb      	str	r3, [r7, #12]
}
 800e530:	bf00      	nop
 800e532:	e7fe      	b.n	800e532 <prvDeleteTCB+0x5e>
	}
 800e534:	bf00      	nop
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e542:	4b0c      	ldr	r3, [pc, #48]	; (800e574 <prvResetNextTaskUnblockTime+0x38>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d104      	bne.n	800e556 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e54c:	4b0a      	ldr	r3, [pc, #40]	; (800e578 <prvResetNextTaskUnblockTime+0x3c>)
 800e54e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e552:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e554:	e008      	b.n	800e568 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e556:	4b07      	ldr	r3, [pc, #28]	; (800e574 <prvResetNextTaskUnblockTime+0x38>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	4a04      	ldr	r2, [pc, #16]	; (800e578 <prvResetNextTaskUnblockTime+0x3c>)
 800e566:	6013      	str	r3, [r2, #0]
}
 800e568:	bf00      	nop
 800e56a:	370c      	adds	r7, #12
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr
 800e574:	200021b8 	.word	0x200021b8
 800e578:	20002220 	.word	0x20002220

0800e57c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e57c:	b480      	push	{r7}
 800e57e:	b083      	sub	sp, #12
 800e580:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e582:	4b05      	ldr	r3, [pc, #20]	; (800e598 <xTaskGetCurrentTaskHandle+0x1c>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e588:	687b      	ldr	r3, [r7, #4]
	}
 800e58a:	4618      	mov	r0, r3
 800e58c:	370c      	adds	r7, #12
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	20001d2c 	.word	0x20001d2c

0800e59c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e5a2:	4b0b      	ldr	r3, [pc, #44]	; (800e5d0 <xTaskGetSchedulerState+0x34>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d102      	bne.n	800e5b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	607b      	str	r3, [r7, #4]
 800e5ae:	e008      	b.n	800e5c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5b0:	4b08      	ldr	r3, [pc, #32]	; (800e5d4 <xTaskGetSchedulerState+0x38>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d102      	bne.n	800e5be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e5b8:	2302      	movs	r3, #2
 800e5ba:	607b      	str	r3, [r7, #4]
 800e5bc:	e001      	b.n	800e5c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e5c2:	687b      	ldr	r3, [r7, #4]
	}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	2000220c 	.word	0x2000220c
 800e5d4:	20002228 	.word	0x20002228

0800e5d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d051      	beq.n	800e692 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5f2:	4b2a      	ldr	r3, [pc, #168]	; (800e69c <xTaskPriorityInherit+0xc4>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d241      	bcs.n	800e680 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	699b      	ldr	r3, [r3, #24]
 800e600:	2b00      	cmp	r3, #0
 800e602:	db06      	blt.n	800e612 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e604:	4b25      	ldr	r3, [pc, #148]	; (800e69c <xTaskPriorityInherit+0xc4>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e60a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	6959      	ldr	r1, [r3, #20]
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e61a:	4613      	mov	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4413      	add	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4a1f      	ldr	r2, [pc, #124]	; (800e6a0 <xTaskPriorityInherit+0xc8>)
 800e624:	4413      	add	r3, r2
 800e626:	4299      	cmp	r1, r3
 800e628:	d122      	bne.n	800e670 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	3304      	adds	r3, #4
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fe f83c 	bl	800c6ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e634:	4b19      	ldr	r3, [pc, #100]	; (800e69c <xTaskPriorityInherit+0xc4>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e642:	4b18      	ldr	r3, [pc, #96]	; (800e6a4 <xTaskPriorityInherit+0xcc>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	429a      	cmp	r2, r3
 800e648:	d903      	bls.n	800e652 <xTaskPriorityInherit+0x7a>
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e64e:	4a15      	ldr	r2, [pc, #84]	; (800e6a4 <xTaskPriorityInherit+0xcc>)
 800e650:	6013      	str	r3, [r2, #0]
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e656:	4613      	mov	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4413      	add	r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4a10      	ldr	r2, [pc, #64]	; (800e6a0 <xTaskPriorityInherit+0xc8>)
 800e660:	441a      	add	r2, r3
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	3304      	adds	r3, #4
 800e666:	4619      	mov	r1, r3
 800e668:	4610      	mov	r0, r2
 800e66a:	f7fd ffc2 	bl	800c5f2 <vListInsertEnd>
 800e66e:	e004      	b.n	800e67a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e670:	4b0a      	ldr	r3, [pc, #40]	; (800e69c <xTaskPriorityInherit+0xc4>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e67a:	2301      	movs	r3, #1
 800e67c:	60fb      	str	r3, [r7, #12]
 800e67e:	e008      	b.n	800e692 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e684:	4b05      	ldr	r3, [pc, #20]	; (800e69c <xTaskPriorityInherit+0xc4>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d201      	bcs.n	800e692 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e68e:	2301      	movs	r3, #1
 800e690:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e692:	68fb      	ldr	r3, [r7, #12]
	}
 800e694:	4618      	mov	r0, r3
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	20001d2c 	.word	0x20001d2c
 800e6a0:	20001d30 	.word	0x20001d30
 800e6a4:	20002208 	.word	0x20002208

0800e6a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b086      	sub	sp, #24
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d056      	beq.n	800e76c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e6be:	4b2e      	ldr	r3, [pc, #184]	; (800e778 <xTaskPriorityDisinherit+0xd0>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	693a      	ldr	r2, [r7, #16]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d00a      	beq.n	800e6de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6cc:	f383 8811 	msr	BASEPRI, r3
 800e6d0:	f3bf 8f6f 	isb	sy
 800e6d4:	f3bf 8f4f 	dsb	sy
 800e6d8:	60fb      	str	r3, [r7, #12]
}
 800e6da:	bf00      	nop
 800e6dc:	e7fe      	b.n	800e6dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d10a      	bne.n	800e6fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	60bb      	str	r3, [r7, #8]
}
 800e6f8:	bf00      	nop
 800e6fa:	e7fe      	b.n	800e6fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e700:	1e5a      	subs	r2, r3, #1
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e70e:	429a      	cmp	r2, r3
 800e710:	d02c      	beq.n	800e76c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e716:	2b00      	cmp	r3, #0
 800e718:	d128      	bne.n	800e76c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	3304      	adds	r3, #4
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fd ffc4 	bl	800c6ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e730:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e73c:	4b0f      	ldr	r3, [pc, #60]	; (800e77c <xTaskPriorityDisinherit+0xd4>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	429a      	cmp	r2, r3
 800e742:	d903      	bls.n	800e74c <xTaskPriorityDisinherit+0xa4>
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e748:	4a0c      	ldr	r2, [pc, #48]	; (800e77c <xTaskPriorityDisinherit+0xd4>)
 800e74a:	6013      	str	r3, [r2, #0]
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e750:	4613      	mov	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	4a09      	ldr	r2, [pc, #36]	; (800e780 <xTaskPriorityDisinherit+0xd8>)
 800e75a:	441a      	add	r2, r3
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	3304      	adds	r3, #4
 800e760:	4619      	mov	r1, r3
 800e762:	4610      	mov	r0, r2
 800e764:	f7fd ff45 	bl	800c5f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e768:	2301      	movs	r3, #1
 800e76a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e76c:	697b      	ldr	r3, [r7, #20]
	}
 800e76e:	4618      	mov	r0, r3
 800e770:	3718      	adds	r7, #24
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	20001d2c 	.word	0x20001d2c
 800e77c:	20002208 	.word	0x20002208
 800e780:	20001d30 	.word	0x20001d30

0800e784 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e784:	b580      	push	{r7, lr}
 800e786:	b088      	sub	sp, #32
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e792:	2301      	movs	r3, #1
 800e794:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d06a      	beq.n	800e872 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10a      	bne.n	800e7ba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	60fb      	str	r3, [r7, #12]
}
 800e7b6:	bf00      	nop
 800e7b8:	e7fe      	b.n	800e7b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7be:	683a      	ldr	r2, [r7, #0]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d902      	bls.n	800e7ca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	61fb      	str	r3, [r7, #28]
 800e7c8:	e002      	b.n	800e7d0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7ce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d4:	69fa      	ldr	r2, [r7, #28]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d04b      	beq.n	800e872 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7de:	697a      	ldr	r2, [r7, #20]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d146      	bne.n	800e872 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e7e4:	4b25      	ldr	r3, [pc, #148]	; (800e87c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	69ba      	ldr	r2, [r7, #24]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d10a      	bne.n	800e804 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f2:	f383 8811 	msr	BASEPRI, r3
 800e7f6:	f3bf 8f6f 	isb	sy
 800e7fa:	f3bf 8f4f 	dsb	sy
 800e7fe:	60bb      	str	r3, [r7, #8]
}
 800e800:	bf00      	nop
 800e802:	e7fe      	b.n	800e802 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e808:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	69fa      	ldr	r2, [r7, #28]
 800e80e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	699b      	ldr	r3, [r3, #24]
 800e814:	2b00      	cmp	r3, #0
 800e816:	db04      	blt.n	800e822 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	6959      	ldr	r1, [r3, #20]
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	4613      	mov	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	4413      	add	r3, r2
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	4a13      	ldr	r2, [pc, #76]	; (800e880 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e832:	4413      	add	r3, r2
 800e834:	4299      	cmp	r1, r3
 800e836:	d11c      	bne.n	800e872 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	3304      	adds	r3, #4
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fd ff35 	bl	800c6ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e846:	4b0f      	ldr	r3, [pc, #60]	; (800e884 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d903      	bls.n	800e856 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e852:	4a0c      	ldr	r2, [pc, #48]	; (800e884 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e854:	6013      	str	r3, [r2, #0]
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e85a:	4613      	mov	r3, r2
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	4413      	add	r3, r2
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	4a07      	ldr	r2, [pc, #28]	; (800e880 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e864:	441a      	add	r2, r3
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	3304      	adds	r3, #4
 800e86a:	4619      	mov	r1, r3
 800e86c:	4610      	mov	r0, r2
 800e86e:	f7fd fec0 	bl	800c5f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e872:	bf00      	nop
 800e874:	3720      	adds	r7, #32
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	20001d2c 	.word	0x20001d2c
 800e880:	20001d30 	.word	0x20001d30
 800e884:	20002208 	.word	0x20002208

0800e888 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e888:	b480      	push	{r7}
 800e88a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e88c:	4b07      	ldr	r3, [pc, #28]	; (800e8ac <pvTaskIncrementMutexHeldCount+0x24>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d004      	beq.n	800e89e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e894:	4b05      	ldr	r3, [pc, #20]	; (800e8ac <pvTaskIncrementMutexHeldCount+0x24>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e89a:	3201      	adds	r2, #1
 800e89c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e89e:	4b03      	ldr	r3, [pc, #12]	; (800e8ac <pvTaskIncrementMutexHeldCount+0x24>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
	}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	20001d2c 	.word	0x20001d2c

0800e8b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e8ba:	4b21      	ldr	r3, [pc, #132]	; (800e940 <prvAddCurrentTaskToDelayedList+0x90>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8c0:	4b20      	ldr	r3, [pc, #128]	; (800e944 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	3304      	adds	r3, #4
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fd fef0 	bl	800c6ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8d2:	d10a      	bne.n	800e8ea <prvAddCurrentTaskToDelayedList+0x3a>
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d007      	beq.n	800e8ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8da:	4b1a      	ldr	r3, [pc, #104]	; (800e944 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	4819      	ldr	r0, [pc, #100]	; (800e948 <prvAddCurrentTaskToDelayedList+0x98>)
 800e8e4:	f7fd fe85 	bl	800c5f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e8e8:	e026      	b.n	800e938 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e8ea:	68fa      	ldr	r2, [r7, #12]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e8f2:	4b14      	ldr	r3, [pc, #80]	; (800e944 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e8fa:	68ba      	ldr	r2, [r7, #8]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d209      	bcs.n	800e916 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e902:	4b12      	ldr	r3, [pc, #72]	; (800e94c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	4b0f      	ldr	r3, [pc, #60]	; (800e944 <prvAddCurrentTaskToDelayedList+0x94>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3304      	adds	r3, #4
 800e90c:	4619      	mov	r1, r3
 800e90e:	4610      	mov	r0, r2
 800e910:	f7fd fe93 	bl	800c63a <vListInsert>
}
 800e914:	e010      	b.n	800e938 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e916:	4b0e      	ldr	r3, [pc, #56]	; (800e950 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	4b0a      	ldr	r3, [pc, #40]	; (800e944 <prvAddCurrentTaskToDelayedList+0x94>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	3304      	adds	r3, #4
 800e920:	4619      	mov	r1, r3
 800e922:	4610      	mov	r0, r2
 800e924:	f7fd fe89 	bl	800c63a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e928:	4b0a      	ldr	r3, [pc, #40]	; (800e954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d202      	bcs.n	800e938 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e932:	4a08      	ldr	r2, [pc, #32]	; (800e954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	6013      	str	r3, [r2, #0]
}
 800e938:	bf00      	nop
 800e93a:	3710      	adds	r7, #16
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	20002204 	.word	0x20002204
 800e944:	20001d2c 	.word	0x20001d2c
 800e948:	200021ec 	.word	0x200021ec
 800e94c:	200021bc 	.word	0x200021bc
 800e950:	200021b8 	.word	0x200021b8
 800e954:	20002220 	.word	0x20002220

0800e958 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08a      	sub	sp, #40	; 0x28
 800e95c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e95e:	2300      	movs	r3, #0
 800e960:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e962:	f000 fb07 	bl	800ef74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e966:	4b1c      	ldr	r3, [pc, #112]	; (800e9d8 <xTimerCreateTimerTask+0x80>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d021      	beq.n	800e9b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e96e:	2300      	movs	r3, #0
 800e970:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e972:	2300      	movs	r3, #0
 800e974:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e976:	1d3a      	adds	r2, r7, #4
 800e978:	f107 0108 	add.w	r1, r7, #8
 800e97c:	f107 030c 	add.w	r3, r7, #12
 800e980:	4618      	mov	r0, r3
 800e982:	f7fd fdef 	bl	800c564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e986:	6879      	ldr	r1, [r7, #4]
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	9202      	str	r2, [sp, #8]
 800e98e:	9301      	str	r3, [sp, #4]
 800e990:	2302      	movs	r3, #2
 800e992:	9300      	str	r3, [sp, #0]
 800e994:	2300      	movs	r3, #0
 800e996:	460a      	mov	r2, r1
 800e998:	4910      	ldr	r1, [pc, #64]	; (800e9dc <xTimerCreateTimerTask+0x84>)
 800e99a:	4811      	ldr	r0, [pc, #68]	; (800e9e0 <xTimerCreateTimerTask+0x88>)
 800e99c:	f7fe febe 	bl	800d71c <xTaskCreateStatic>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	4a10      	ldr	r2, [pc, #64]	; (800e9e4 <xTimerCreateTimerTask+0x8c>)
 800e9a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e9a6:	4b0f      	ldr	r3, [pc, #60]	; (800e9e4 <xTimerCreateTimerTask+0x8c>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d10a      	bne.n	800e9ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	613b      	str	r3, [r7, #16]
}
 800e9ca:	bf00      	nop
 800e9cc:	e7fe      	b.n	800e9cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e9ce:	697b      	ldr	r3, [r7, #20]
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3718      	adds	r7, #24
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	2000225c 	.word	0x2000225c
 800e9dc:	08010440 	.word	0x08010440
 800e9e0:	0800eb1d 	.word	0x0800eb1d
 800e9e4:	20002260 	.word	0x20002260

0800e9e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b08a      	sub	sp, #40	; 0x28
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	607a      	str	r2, [r7, #4]
 800e9f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10a      	bne.n	800ea16 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ea00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea04:	f383 8811 	msr	BASEPRI, r3
 800ea08:	f3bf 8f6f 	isb	sy
 800ea0c:	f3bf 8f4f 	dsb	sy
 800ea10:	623b      	str	r3, [r7, #32]
}
 800ea12:	bf00      	nop
 800ea14:	e7fe      	b.n	800ea14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ea16:	4b1a      	ldr	r3, [pc, #104]	; (800ea80 <xTimerGenericCommand+0x98>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d02a      	beq.n	800ea74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	2b05      	cmp	r3, #5
 800ea2e:	dc18      	bgt.n	800ea62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ea30:	f7ff fdb4 	bl	800e59c <xTaskGetSchedulerState>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d109      	bne.n	800ea4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ea3a:	4b11      	ldr	r3, [pc, #68]	; (800ea80 <xTimerGenericCommand+0x98>)
 800ea3c:	6818      	ldr	r0, [r3, #0]
 800ea3e:	f107 0110 	add.w	r1, r7, #16
 800ea42:	2300      	movs	r3, #0
 800ea44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea46:	f7fe f803 	bl	800ca50 <xQueueGenericSend>
 800ea4a:	6278      	str	r0, [r7, #36]	; 0x24
 800ea4c:	e012      	b.n	800ea74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ea4e:	4b0c      	ldr	r3, [pc, #48]	; (800ea80 <xTimerGenericCommand+0x98>)
 800ea50:	6818      	ldr	r0, [r3, #0]
 800ea52:	f107 0110 	add.w	r1, r7, #16
 800ea56:	2300      	movs	r3, #0
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f7fd fff9 	bl	800ca50 <xQueueGenericSend>
 800ea5e:	6278      	str	r0, [r7, #36]	; 0x24
 800ea60:	e008      	b.n	800ea74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ea62:	4b07      	ldr	r3, [pc, #28]	; (800ea80 <xTimerGenericCommand+0x98>)
 800ea64:	6818      	ldr	r0, [r3, #0]
 800ea66:	f107 0110 	add.w	r1, r7, #16
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	683a      	ldr	r2, [r7, #0]
 800ea6e:	f7fe f8ed 	bl	800cc4c <xQueueGenericSendFromISR>
 800ea72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3728      	adds	r7, #40	; 0x28
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	2000225c 	.word	0x2000225c

0800ea84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b088      	sub	sp, #32
 800ea88:	af02      	add	r7, sp, #8
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea8e:	4b22      	ldr	r3, [pc, #136]	; (800eb18 <prvProcessExpiredTimer+0x94>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fd fe05 	bl	800c6ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaa8:	f003 0304 	and.w	r3, r3, #4
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d022      	beq.n	800eaf6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	699a      	ldr	r2, [r3, #24]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	18d1      	adds	r1, r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	683a      	ldr	r2, [r7, #0]
 800eabc:	6978      	ldr	r0, [r7, #20]
 800eabe:	f000 f8d1 	bl	800ec64 <prvInsertTimerInActiveList>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d01f      	beq.n	800eb08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eac8:	2300      	movs	r3, #0
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	2300      	movs	r3, #0
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	2100      	movs	r1, #0
 800ead2:	6978      	ldr	r0, [r7, #20]
 800ead4:	f7ff ff88 	bl	800e9e8 <xTimerGenericCommand>
 800ead8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d113      	bne.n	800eb08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae4:	f383 8811 	msr	BASEPRI, r3
 800eae8:	f3bf 8f6f 	isb	sy
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	60fb      	str	r3, [r7, #12]
}
 800eaf2:	bf00      	nop
 800eaf4:	e7fe      	b.n	800eaf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eafc:	f023 0301 	bic.w	r3, r3, #1
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	6a1b      	ldr	r3, [r3, #32]
 800eb0c:	6978      	ldr	r0, [r7, #20]
 800eb0e:	4798      	blx	r3
}
 800eb10:	bf00      	nop
 800eb12:	3718      	adds	r7, #24
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	20002254 	.word	0x20002254

0800eb1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb24:	f107 0308 	add.w	r3, r7, #8
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f000 f857 	bl	800ebdc <prvGetNextExpireTime>
 800eb2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	4619      	mov	r1, r3
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f000 f803 	bl	800eb40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eb3a:	f000 f8d5 	bl	800ece8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb3e:	e7f1      	b.n	800eb24 <prvTimerTask+0x8>

0800eb40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eb4a:	f7ff f92b 	bl	800dda4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb4e:	f107 0308 	add.w	r3, r7, #8
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 f866 	bl	800ec24 <prvSampleTimeNow>
 800eb58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d130      	bne.n	800ebc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d10a      	bne.n	800eb7c <prvProcessTimerOrBlockTask+0x3c>
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d806      	bhi.n	800eb7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eb6e:	f7ff f927 	bl	800ddc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eb72:	68f9      	ldr	r1, [r7, #12]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f7ff ff85 	bl	800ea84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb7a:	e024      	b.n	800ebc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d008      	beq.n	800eb94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb82:	4b13      	ldr	r3, [pc, #76]	; (800ebd0 <prvProcessTimerOrBlockTask+0x90>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d101      	bne.n	800eb90 <prvProcessTimerOrBlockTask+0x50>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e000      	b.n	800eb92 <prvProcessTimerOrBlockTask+0x52>
 800eb90:	2300      	movs	r3, #0
 800eb92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb94:	4b0f      	ldr	r3, [pc, #60]	; (800ebd4 <prvProcessTimerOrBlockTask+0x94>)
 800eb96:	6818      	ldr	r0, [r3, #0]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	683a      	ldr	r2, [r7, #0]
 800eba0:	4619      	mov	r1, r3
 800eba2:	f7fe fd87 	bl	800d6b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eba6:	f7ff f90b 	bl	800ddc0 <xTaskResumeAll>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10a      	bne.n	800ebc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ebb0:	4b09      	ldr	r3, [pc, #36]	; (800ebd8 <prvProcessTimerOrBlockTask+0x98>)
 800ebb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebb6:	601a      	str	r2, [r3, #0]
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	f3bf 8f6f 	isb	sy
}
 800ebc0:	e001      	b.n	800ebc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ebc2:	f7ff f8fd 	bl	800ddc0 <xTaskResumeAll>
}
 800ebc6:	bf00      	nop
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	20002258 	.word	0x20002258
 800ebd4:	2000225c 	.word	0x2000225c
 800ebd8:	e000ed04 	.word	0xe000ed04

0800ebdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ebe4:	4b0e      	ldr	r3, [pc, #56]	; (800ec20 <prvGetNextExpireTime+0x44>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d101      	bne.n	800ebf2 <prvGetNextExpireTime+0x16>
 800ebee:	2201      	movs	r2, #1
 800ebf0:	e000      	b.n	800ebf4 <prvGetNextExpireTime+0x18>
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d105      	bne.n	800ec0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec00:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <prvGetNextExpireTime+0x44>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	60fb      	str	r3, [r7, #12]
 800ec0a:	e001      	b.n	800ec10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ec10:	68fb      	ldr	r3, [r7, #12]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3714      	adds	r7, #20
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	20002254 	.word	0x20002254

0800ec24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ec2c:	f7ff f966 	bl	800defc <xTaskGetTickCount>
 800ec30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ec32:	4b0b      	ldr	r3, [pc, #44]	; (800ec60 <prvSampleTimeNow+0x3c>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d205      	bcs.n	800ec48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ec3c:	f000 f936 	bl	800eeac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	e002      	b.n	800ec4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ec4e:	4a04      	ldr	r2, [pc, #16]	; (800ec60 <prvSampleTimeNow+0x3c>)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ec54:	68fb      	ldr	r3, [r7, #12]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	20002264 	.word	0x20002264

0800ec64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]
 800ec70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ec72:	2300      	movs	r3, #0
 800ec74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	68ba      	ldr	r2, [r7, #8]
 800ec7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	68fa      	ldr	r2, [r7, #12]
 800ec80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec82:	68ba      	ldr	r2, [r7, #8]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d812      	bhi.n	800ecb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	1ad2      	subs	r2, r2, r3
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	699b      	ldr	r3, [r3, #24]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d302      	bcc.n	800ec9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	617b      	str	r3, [r7, #20]
 800ec9c:	e01b      	b.n	800ecd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec9e:	4b10      	ldr	r3, [pc, #64]	; (800ece0 <prvInsertTimerInActiveList+0x7c>)
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	3304      	adds	r3, #4
 800eca6:	4619      	mov	r1, r3
 800eca8:	4610      	mov	r0, r2
 800ecaa:	f7fd fcc6 	bl	800c63a <vListInsert>
 800ecae:	e012      	b.n	800ecd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d206      	bcs.n	800ecc6 <prvInsertTimerInActiveList+0x62>
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d302      	bcc.n	800ecc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	617b      	str	r3, [r7, #20]
 800ecc4:	e007      	b.n	800ecd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ecc6:	4b07      	ldr	r3, [pc, #28]	; (800ece4 <prvInsertTimerInActiveList+0x80>)
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	3304      	adds	r3, #4
 800ecce:	4619      	mov	r1, r3
 800ecd0:	4610      	mov	r0, r2
 800ecd2:	f7fd fcb2 	bl	800c63a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ecd6:	697b      	ldr	r3, [r7, #20]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3718      	adds	r7, #24
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	20002258 	.word	0x20002258
 800ece4:	20002254 	.word	0x20002254

0800ece8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b08e      	sub	sp, #56	; 0x38
 800ecec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecee:	e0ca      	b.n	800ee86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	da18      	bge.n	800ed28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ecf6:	1d3b      	adds	r3, r7, #4
 800ecf8:	3304      	adds	r3, #4
 800ecfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ecfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d10a      	bne.n	800ed18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ed02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed06:	f383 8811 	msr	BASEPRI, r3
 800ed0a:	f3bf 8f6f 	isb	sy
 800ed0e:	f3bf 8f4f 	dsb	sy
 800ed12:	61fb      	str	r3, [r7, #28]
}
 800ed14:	bf00      	nop
 800ed16:	e7fe      	b.n	800ed16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed1e:	6850      	ldr	r0, [r2, #4]
 800ed20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed22:	6892      	ldr	r2, [r2, #8]
 800ed24:	4611      	mov	r1, r2
 800ed26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f2c0 80aa 	blt.w	800ee84 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ed34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed36:	695b      	ldr	r3, [r3, #20]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d004      	beq.n	800ed46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3e:	3304      	adds	r3, #4
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fd fcb3 	bl	800c6ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed46:	463b      	mov	r3, r7
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff ff6b 	bl	800ec24 <prvSampleTimeNow>
 800ed4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2b09      	cmp	r3, #9
 800ed54:	f200 8097 	bhi.w	800ee86 <prvProcessReceivedCommands+0x19e>
 800ed58:	a201      	add	r2, pc, #4	; (adr r2, 800ed60 <prvProcessReceivedCommands+0x78>)
 800ed5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed5e:	bf00      	nop
 800ed60:	0800ed89 	.word	0x0800ed89
 800ed64:	0800ed89 	.word	0x0800ed89
 800ed68:	0800ed89 	.word	0x0800ed89
 800ed6c:	0800edfd 	.word	0x0800edfd
 800ed70:	0800ee11 	.word	0x0800ee11
 800ed74:	0800ee5b 	.word	0x0800ee5b
 800ed78:	0800ed89 	.word	0x0800ed89
 800ed7c:	0800ed89 	.word	0x0800ed89
 800ed80:	0800edfd 	.word	0x0800edfd
 800ed84:	0800ee11 	.word	0x0800ee11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed8e:	f043 0301 	orr.w	r3, r3, #1
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9e:	699b      	ldr	r3, [r3, #24]
 800eda0:	18d1      	adds	r1, r2, r3
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eda6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eda8:	f7ff ff5c 	bl	800ec64 <prvInsertTimerInActiveList>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d069      	beq.n	800ee86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edc0:	f003 0304 	and.w	r3, r3, #4
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d05e      	beq.n	800ee86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800edc8:	68ba      	ldr	r2, [r7, #8]
 800edca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edcc:	699b      	ldr	r3, [r3, #24]
 800edce:	441a      	add	r2, r3
 800edd0:	2300      	movs	r3, #0
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	2300      	movs	r3, #0
 800edd6:	2100      	movs	r1, #0
 800edd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edda:	f7ff fe05 	bl	800e9e8 <xTimerGenericCommand>
 800edde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ede0:	6a3b      	ldr	r3, [r7, #32]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d14f      	bne.n	800ee86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ede6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edea:	f383 8811 	msr	BASEPRI, r3
 800edee:	f3bf 8f6f 	isb	sy
 800edf2:	f3bf 8f4f 	dsb	sy
 800edf6:	61bb      	str	r3, [r7, #24]
}
 800edf8:	bf00      	nop
 800edfa:	e7fe      	b.n	800edfa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee02:	f023 0301 	bic.w	r3, r3, #1
 800ee06:	b2da      	uxtb	r2, r3
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ee0e:	e03a      	b.n	800ee86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee16:	f043 0301 	orr.w	r3, r3, #1
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ee22:	68ba      	ldr	r2, [r7, #8]
 800ee24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2a:	699b      	ldr	r3, [r3, #24]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d10a      	bne.n	800ee46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ee30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee34:	f383 8811 	msr	BASEPRI, r3
 800ee38:	f3bf 8f6f 	isb	sy
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	617b      	str	r3, [r7, #20]
}
 800ee42:	bf00      	nop
 800ee44:	e7fe      	b.n	800ee44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ee46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee48:	699a      	ldr	r2, [r3, #24]
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4c:	18d1      	adds	r1, r2, r3
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee54:	f7ff ff06 	bl	800ec64 <prvInsertTimerInActiveList>
					break;
 800ee58:	e015      	b.n	800ee86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee60:	f003 0302 	and.w	r3, r3, #2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d103      	bne.n	800ee70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ee68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee6a:	f000 fbe1 	bl	800f630 <vPortFree>
 800ee6e:	e00a      	b.n	800ee86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee76:	f023 0301 	bic.w	r3, r3, #1
 800ee7a:	b2da      	uxtb	r2, r3
 800ee7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee82:	e000      	b.n	800ee86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ee84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee86:	4b08      	ldr	r3, [pc, #32]	; (800eea8 <prvProcessReceivedCommands+0x1c0>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	1d39      	adds	r1, r7, #4
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fe f804 	bl	800ce9c <xQueueReceive>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f47f af2a 	bne.w	800ecf0 <prvProcessReceivedCommands+0x8>
	}
}
 800ee9c:	bf00      	nop
 800ee9e:	bf00      	nop
 800eea0:	3730      	adds	r7, #48	; 0x30
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	2000225c 	.word	0x2000225c

0800eeac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b088      	sub	sp, #32
 800eeb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eeb2:	e048      	b.n	800ef46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eeb4:	4b2d      	ldr	r3, [pc, #180]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eebe:	4b2b      	ldr	r3, [pc, #172]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	3304      	adds	r3, #4
 800eecc:	4618      	mov	r0, r3
 800eece:	f7fd fbed 	bl	800c6ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	6a1b      	ldr	r3, [r3, #32]
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eee0:	f003 0304 	and.w	r3, r3, #4
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d02e      	beq.n	800ef46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	699b      	ldr	r3, [r3, #24]
 800eeec:	693a      	ldr	r2, [r7, #16]
 800eeee:	4413      	add	r3, r2
 800eef0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d90e      	bls.n	800ef18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	68ba      	ldr	r2, [r7, #8]
 800eefe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef06:	4b19      	ldr	r3, [pc, #100]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	3304      	adds	r3, #4
 800ef0e:	4619      	mov	r1, r3
 800ef10:	4610      	mov	r0, r2
 800ef12:	f7fd fb92 	bl	800c63a <vListInsert>
 800ef16:	e016      	b.n	800ef46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef18:	2300      	movs	r3, #0
 800ef1a:	9300      	str	r3, [sp, #0]
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	693a      	ldr	r2, [r7, #16]
 800ef20:	2100      	movs	r1, #0
 800ef22:	68f8      	ldr	r0, [r7, #12]
 800ef24:	f7ff fd60 	bl	800e9e8 <xTimerGenericCommand>
 800ef28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d10a      	bne.n	800ef46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ef30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef34:	f383 8811 	msr	BASEPRI, r3
 800ef38:	f3bf 8f6f 	isb	sy
 800ef3c:	f3bf 8f4f 	dsb	sy
 800ef40:	603b      	str	r3, [r7, #0]
}
 800ef42:	bf00      	nop
 800ef44:	e7fe      	b.n	800ef44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef46:	4b09      	ldr	r3, [pc, #36]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d1b1      	bne.n	800eeb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef50:	4b06      	ldr	r3, [pc, #24]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef56:	4b06      	ldr	r3, [pc, #24]	; (800ef70 <prvSwitchTimerLists+0xc4>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a04      	ldr	r2, [pc, #16]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800ef5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef5e:	4a04      	ldr	r2, [pc, #16]	; (800ef70 <prvSwitchTimerLists+0xc4>)
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	6013      	str	r3, [r2, #0]
}
 800ef64:	bf00      	nop
 800ef66:	3718      	adds	r7, #24
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	20002254 	.word	0x20002254
 800ef70:	20002258 	.word	0x20002258

0800ef74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef7a:	f000 f96b 	bl	800f254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef7e:	4b15      	ldr	r3, [pc, #84]	; (800efd4 <prvCheckForValidListAndQueue+0x60>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d120      	bne.n	800efc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef86:	4814      	ldr	r0, [pc, #80]	; (800efd8 <prvCheckForValidListAndQueue+0x64>)
 800ef88:	f7fd fb06 	bl	800c598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef8c:	4813      	ldr	r0, [pc, #76]	; (800efdc <prvCheckForValidListAndQueue+0x68>)
 800ef8e:	f7fd fb03 	bl	800c598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef92:	4b13      	ldr	r3, [pc, #76]	; (800efe0 <prvCheckForValidListAndQueue+0x6c>)
 800ef94:	4a10      	ldr	r2, [pc, #64]	; (800efd8 <prvCheckForValidListAndQueue+0x64>)
 800ef96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef98:	4b12      	ldr	r3, [pc, #72]	; (800efe4 <prvCheckForValidListAndQueue+0x70>)
 800ef9a:	4a10      	ldr	r2, [pc, #64]	; (800efdc <prvCheckForValidListAndQueue+0x68>)
 800ef9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef9e:	2300      	movs	r3, #0
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	4b11      	ldr	r3, [pc, #68]	; (800efe8 <prvCheckForValidListAndQueue+0x74>)
 800efa4:	4a11      	ldr	r2, [pc, #68]	; (800efec <prvCheckForValidListAndQueue+0x78>)
 800efa6:	2110      	movs	r1, #16
 800efa8:	200a      	movs	r0, #10
 800efaa:	f7fd fc11 	bl	800c7d0 <xQueueGenericCreateStatic>
 800efae:	4603      	mov	r3, r0
 800efb0:	4a08      	ldr	r2, [pc, #32]	; (800efd4 <prvCheckForValidListAndQueue+0x60>)
 800efb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800efb4:	4b07      	ldr	r3, [pc, #28]	; (800efd4 <prvCheckForValidListAndQueue+0x60>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d005      	beq.n	800efc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800efbc:	4b05      	ldr	r3, [pc, #20]	; (800efd4 <prvCheckForValidListAndQueue+0x60>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	490b      	ldr	r1, [pc, #44]	; (800eff0 <prvCheckForValidListAndQueue+0x7c>)
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fe fb22 	bl	800d60c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800efc8:	f000 f974 	bl	800f2b4 <vPortExitCritical>
}
 800efcc:	bf00      	nop
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	bf00      	nop
 800efd4:	2000225c 	.word	0x2000225c
 800efd8:	2000222c 	.word	0x2000222c
 800efdc:	20002240 	.word	0x20002240
 800efe0:	20002254 	.word	0x20002254
 800efe4:	20002258 	.word	0x20002258
 800efe8:	20002308 	.word	0x20002308
 800efec:	20002268 	.word	0x20002268
 800eff0:	08010448 	.word	0x08010448

0800eff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	3b04      	subs	r3, #4
 800f004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3b04      	subs	r3, #4
 800f012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	f023 0201 	bic.w	r2, r3, #1
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	3b04      	subs	r3, #4
 800f022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f024:	4a0c      	ldr	r2, [pc, #48]	; (800f058 <pxPortInitialiseStack+0x64>)
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	3b14      	subs	r3, #20
 800f02e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	3b04      	subs	r3, #4
 800f03a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f06f 0202 	mvn.w	r2, #2
 800f042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	3b20      	subs	r3, #32
 800f048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f04a:	68fb      	ldr	r3, [r7, #12]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	0800f05d 	.word	0x0800f05d

0800f05c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f062:	2300      	movs	r3, #0
 800f064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f066:	4b12      	ldr	r3, [pc, #72]	; (800f0b0 <prvTaskExitError+0x54>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f06e:	d00a      	beq.n	800f086 <prvTaskExitError+0x2a>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	60fb      	str	r3, [r7, #12]
}
 800f082:	bf00      	nop
 800f084:	e7fe      	b.n	800f084 <prvTaskExitError+0x28>
	__asm volatile
 800f086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08a:	f383 8811 	msr	BASEPRI, r3
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	60bb      	str	r3, [r7, #8]
}
 800f098:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f09a:	bf00      	nop
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d0fc      	beq.n	800f09c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f0a2:	bf00      	nop
 800f0a4:	bf00      	nop
 800f0a6:	3714      	adds	r7, #20
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr
 800f0b0:	20000024 	.word	0x20000024
	...

0800f0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f0c0:	4b07      	ldr	r3, [pc, #28]	; (800f0e0 <pxCurrentTCBConst2>)
 800f0c2:	6819      	ldr	r1, [r3, #0]
 800f0c4:	6808      	ldr	r0, [r1, #0]
 800f0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ca:	f380 8809 	msr	PSP, r0
 800f0ce:	f3bf 8f6f 	isb	sy
 800f0d2:	f04f 0000 	mov.w	r0, #0
 800f0d6:	f380 8811 	msr	BASEPRI, r0
 800f0da:	4770      	bx	lr
 800f0dc:	f3af 8000 	nop.w

0800f0e0 <pxCurrentTCBConst2>:
 800f0e0:	20001d2c 	.word	0x20001d2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f0e4:	bf00      	nop
 800f0e6:	bf00      	nop

0800f0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f0e8:	4808      	ldr	r0, [pc, #32]	; (800f10c <prvPortStartFirstTask+0x24>)
 800f0ea:	6800      	ldr	r0, [r0, #0]
 800f0ec:	6800      	ldr	r0, [r0, #0]
 800f0ee:	f380 8808 	msr	MSP, r0
 800f0f2:	f04f 0000 	mov.w	r0, #0
 800f0f6:	f380 8814 	msr	CONTROL, r0
 800f0fa:	b662      	cpsie	i
 800f0fc:	b661      	cpsie	f
 800f0fe:	f3bf 8f4f 	dsb	sy
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	df00      	svc	0
 800f108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f10a:	bf00      	nop
 800f10c:	e000ed08 	.word	0xe000ed08

0800f110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b086      	sub	sp, #24
 800f114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f116:	4b46      	ldr	r3, [pc, #280]	; (800f230 <xPortStartScheduler+0x120>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a46      	ldr	r2, [pc, #280]	; (800f234 <xPortStartScheduler+0x124>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d10a      	bne.n	800f136 <xPortStartScheduler+0x26>
	__asm volatile
 800f120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	613b      	str	r3, [r7, #16]
}
 800f132:	bf00      	nop
 800f134:	e7fe      	b.n	800f134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f136:	4b3e      	ldr	r3, [pc, #248]	; (800f230 <xPortStartScheduler+0x120>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a3f      	ldr	r2, [pc, #252]	; (800f238 <xPortStartScheduler+0x128>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d10a      	bne.n	800f156 <xPortStartScheduler+0x46>
	__asm volatile
 800f140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f144:	f383 8811 	msr	BASEPRI, r3
 800f148:	f3bf 8f6f 	isb	sy
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	60fb      	str	r3, [r7, #12]
}
 800f152:	bf00      	nop
 800f154:	e7fe      	b.n	800f154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f156:	4b39      	ldr	r3, [pc, #228]	; (800f23c <xPortStartScheduler+0x12c>)
 800f158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	22ff      	movs	r2, #255	; 0xff
 800f166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f170:	78fb      	ldrb	r3, [r7, #3]
 800f172:	b2db      	uxtb	r3, r3
 800f174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	4b31      	ldr	r3, [pc, #196]	; (800f240 <xPortStartScheduler+0x130>)
 800f17c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f17e:	4b31      	ldr	r3, [pc, #196]	; (800f244 <xPortStartScheduler+0x134>)
 800f180:	2207      	movs	r2, #7
 800f182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f184:	e009      	b.n	800f19a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f186:	4b2f      	ldr	r3, [pc, #188]	; (800f244 <xPortStartScheduler+0x134>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3b01      	subs	r3, #1
 800f18c:	4a2d      	ldr	r2, [pc, #180]	; (800f244 <xPortStartScheduler+0x134>)
 800f18e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f190:	78fb      	ldrb	r3, [r7, #3]
 800f192:	b2db      	uxtb	r3, r3
 800f194:	005b      	lsls	r3, r3, #1
 800f196:	b2db      	uxtb	r3, r3
 800f198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f19a:	78fb      	ldrb	r3, [r7, #3]
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1a2:	2b80      	cmp	r3, #128	; 0x80
 800f1a4:	d0ef      	beq.n	800f186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f1a6:	4b27      	ldr	r3, [pc, #156]	; (800f244 <xPortStartScheduler+0x134>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f1c3 0307 	rsb	r3, r3, #7
 800f1ae:	2b04      	cmp	r3, #4
 800f1b0:	d00a      	beq.n	800f1c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b6:	f383 8811 	msr	BASEPRI, r3
 800f1ba:	f3bf 8f6f 	isb	sy
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	60bb      	str	r3, [r7, #8]
}
 800f1c4:	bf00      	nop
 800f1c6:	e7fe      	b.n	800f1c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f1c8:	4b1e      	ldr	r3, [pc, #120]	; (800f244 <xPortStartScheduler+0x134>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	021b      	lsls	r3, r3, #8
 800f1ce:	4a1d      	ldr	r2, [pc, #116]	; (800f244 <xPortStartScheduler+0x134>)
 800f1d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f1d2:	4b1c      	ldr	r3, [pc, #112]	; (800f244 <xPortStartScheduler+0x134>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f1da:	4a1a      	ldr	r2, [pc, #104]	; (800f244 <xPortStartScheduler+0x134>)
 800f1dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f1e6:	4b18      	ldr	r3, [pc, #96]	; (800f248 <xPortStartScheduler+0x138>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a17      	ldr	r2, [pc, #92]	; (800f248 <xPortStartScheduler+0x138>)
 800f1ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f1f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f1f2:	4b15      	ldr	r3, [pc, #84]	; (800f248 <xPortStartScheduler+0x138>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4a14      	ldr	r2, [pc, #80]	; (800f248 <xPortStartScheduler+0x138>)
 800f1f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f1fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f1fe:	f000 f8dd 	bl	800f3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f202:	4b12      	ldr	r3, [pc, #72]	; (800f24c <xPortStartScheduler+0x13c>)
 800f204:	2200      	movs	r2, #0
 800f206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f208:	f000 f8fc 	bl	800f404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f20c:	4b10      	ldr	r3, [pc, #64]	; (800f250 <xPortStartScheduler+0x140>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a0f      	ldr	r2, [pc, #60]	; (800f250 <xPortStartScheduler+0x140>)
 800f212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f218:	f7ff ff66 	bl	800f0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f21c:	f7fe ff38 	bl	800e090 <vTaskSwitchContext>
	prvTaskExitError();
 800f220:	f7ff ff1c 	bl	800f05c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f224:	2300      	movs	r3, #0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3718      	adds	r7, #24
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	e000ed00 	.word	0xe000ed00
 800f234:	410fc271 	.word	0x410fc271
 800f238:	410fc270 	.word	0x410fc270
 800f23c:	e000e400 	.word	0xe000e400
 800f240:	20002358 	.word	0x20002358
 800f244:	2000235c 	.word	0x2000235c
 800f248:	e000ed20 	.word	0xe000ed20
 800f24c:	20000024 	.word	0x20000024
 800f250:	e000ef34 	.word	0xe000ef34

0800f254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
	__asm volatile
 800f25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25e:	f383 8811 	msr	BASEPRI, r3
 800f262:	f3bf 8f6f 	isb	sy
 800f266:	f3bf 8f4f 	dsb	sy
 800f26a:	607b      	str	r3, [r7, #4]
}
 800f26c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f26e:	4b0f      	ldr	r3, [pc, #60]	; (800f2ac <vPortEnterCritical+0x58>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3301      	adds	r3, #1
 800f274:	4a0d      	ldr	r2, [pc, #52]	; (800f2ac <vPortEnterCritical+0x58>)
 800f276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f278:	4b0c      	ldr	r3, [pc, #48]	; (800f2ac <vPortEnterCritical+0x58>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d10f      	bne.n	800f2a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f280:	4b0b      	ldr	r3, [pc, #44]	; (800f2b0 <vPortEnterCritical+0x5c>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00a      	beq.n	800f2a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28e:	f383 8811 	msr	BASEPRI, r3
 800f292:	f3bf 8f6f 	isb	sy
 800f296:	f3bf 8f4f 	dsb	sy
 800f29a:	603b      	str	r3, [r7, #0]
}
 800f29c:	bf00      	nop
 800f29e:	e7fe      	b.n	800f29e <vPortEnterCritical+0x4a>
	}
}
 800f2a0:	bf00      	nop
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr
 800f2ac:	20000024 	.word	0x20000024
 800f2b0:	e000ed04 	.word	0xe000ed04

0800f2b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f2ba:	4b12      	ldr	r3, [pc, #72]	; (800f304 <vPortExitCritical+0x50>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10a      	bne.n	800f2d8 <vPortExitCritical+0x24>
	__asm volatile
 800f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	607b      	str	r3, [r7, #4]
}
 800f2d4:	bf00      	nop
 800f2d6:	e7fe      	b.n	800f2d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f2d8:	4b0a      	ldr	r3, [pc, #40]	; (800f304 <vPortExitCritical+0x50>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	4a09      	ldr	r2, [pc, #36]	; (800f304 <vPortExitCritical+0x50>)
 800f2e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f2e2:	4b08      	ldr	r3, [pc, #32]	; (800f304 <vPortExitCritical+0x50>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d105      	bne.n	800f2f6 <vPortExitCritical+0x42>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	f383 8811 	msr	BASEPRI, r3
}
 800f2f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f2f6:	bf00      	nop
 800f2f8:	370c      	adds	r7, #12
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	20000024 	.word	0x20000024
	...

0800f310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f310:	f3ef 8009 	mrs	r0, PSP
 800f314:	f3bf 8f6f 	isb	sy
 800f318:	4b15      	ldr	r3, [pc, #84]	; (800f370 <pxCurrentTCBConst>)
 800f31a:	681a      	ldr	r2, [r3, #0]
 800f31c:	f01e 0f10 	tst.w	lr, #16
 800f320:	bf08      	it	eq
 800f322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f32a:	6010      	str	r0, [r2, #0]
 800f32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f334:	f380 8811 	msr	BASEPRI, r0
 800f338:	f3bf 8f4f 	dsb	sy
 800f33c:	f3bf 8f6f 	isb	sy
 800f340:	f7fe fea6 	bl	800e090 <vTaskSwitchContext>
 800f344:	f04f 0000 	mov.w	r0, #0
 800f348:	f380 8811 	msr	BASEPRI, r0
 800f34c:	bc09      	pop	{r0, r3}
 800f34e:	6819      	ldr	r1, [r3, #0]
 800f350:	6808      	ldr	r0, [r1, #0]
 800f352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f356:	f01e 0f10 	tst.w	lr, #16
 800f35a:	bf08      	it	eq
 800f35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f360:	f380 8809 	msr	PSP, r0
 800f364:	f3bf 8f6f 	isb	sy
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	f3af 8000 	nop.w

0800f370 <pxCurrentTCBConst>:
 800f370:	20001d2c 	.word	0x20001d2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f374:	bf00      	nop
 800f376:	bf00      	nop

0800f378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
	__asm volatile
 800f37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f382:	f383 8811 	msr	BASEPRI, r3
 800f386:	f3bf 8f6f 	isb	sy
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	607b      	str	r3, [r7, #4]
}
 800f390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f392:	f7fe fdc3 	bl	800df1c <xTaskIncrementTick>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d003      	beq.n	800f3a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f39c:	4b06      	ldr	r3, [pc, #24]	; (800f3b8 <xPortSysTickHandler+0x40>)
 800f39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3a2:	601a      	str	r2, [r3, #0]
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	f383 8811 	msr	BASEPRI, r3
}
 800f3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f3b0:	bf00      	nop
 800f3b2:	3708      	adds	r7, #8
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	e000ed04 	.word	0xe000ed04

0800f3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f3bc:	b480      	push	{r7}
 800f3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f3c0:	4b0b      	ldr	r3, [pc, #44]	; (800f3f0 <vPortSetupTimerInterrupt+0x34>)
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f3c6:	4b0b      	ldr	r3, [pc, #44]	; (800f3f4 <vPortSetupTimerInterrupt+0x38>)
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f3cc:	4b0a      	ldr	r3, [pc, #40]	; (800f3f8 <vPortSetupTimerInterrupt+0x3c>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	4a0a      	ldr	r2, [pc, #40]	; (800f3fc <vPortSetupTimerInterrupt+0x40>)
 800f3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3d6:	099b      	lsrs	r3, r3, #6
 800f3d8:	4a09      	ldr	r2, [pc, #36]	; (800f400 <vPortSetupTimerInterrupt+0x44>)
 800f3da:	3b01      	subs	r3, #1
 800f3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f3de:	4b04      	ldr	r3, [pc, #16]	; (800f3f0 <vPortSetupTimerInterrupt+0x34>)
 800f3e0:	2207      	movs	r2, #7
 800f3e2:	601a      	str	r2, [r3, #0]
}
 800f3e4:	bf00      	nop
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop
 800f3f0:	e000e010 	.word	0xe000e010
 800f3f4:	e000e018 	.word	0xe000e018
 800f3f8:	20000000 	.word	0x20000000
 800f3fc:	10624dd3 	.word	0x10624dd3
 800f400:	e000e014 	.word	0xe000e014

0800f404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f414 <vPortEnableVFP+0x10>
 800f408:	6801      	ldr	r1, [r0, #0]
 800f40a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f40e:	6001      	str	r1, [r0, #0]
 800f410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f412:	bf00      	nop
 800f414:	e000ed88 	.word	0xe000ed88

0800f418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f41e:	f3ef 8305 	mrs	r3, IPSR
 800f422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2b0f      	cmp	r3, #15
 800f428:	d914      	bls.n	800f454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f42a:	4a17      	ldr	r2, [pc, #92]	; (800f488 <vPortValidateInterruptPriority+0x70>)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	4413      	add	r3, r2
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f434:	4b15      	ldr	r3, [pc, #84]	; (800f48c <vPortValidateInterruptPriority+0x74>)
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	7afa      	ldrb	r2, [r7, #11]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d20a      	bcs.n	800f454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f442:	f383 8811 	msr	BASEPRI, r3
 800f446:	f3bf 8f6f 	isb	sy
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	607b      	str	r3, [r7, #4]
}
 800f450:	bf00      	nop
 800f452:	e7fe      	b.n	800f452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f454:	4b0e      	ldr	r3, [pc, #56]	; (800f490 <vPortValidateInterruptPriority+0x78>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f45c:	4b0d      	ldr	r3, [pc, #52]	; (800f494 <vPortValidateInterruptPriority+0x7c>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	429a      	cmp	r2, r3
 800f462:	d90a      	bls.n	800f47a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f468:	f383 8811 	msr	BASEPRI, r3
 800f46c:	f3bf 8f6f 	isb	sy
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	603b      	str	r3, [r7, #0]
}
 800f476:	bf00      	nop
 800f478:	e7fe      	b.n	800f478 <vPortValidateInterruptPriority+0x60>
	}
 800f47a:	bf00      	nop
 800f47c:	3714      	adds	r7, #20
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	e000e3f0 	.word	0xe000e3f0
 800f48c:	20002358 	.word	0x20002358
 800f490:	e000ed0c 	.word	0xe000ed0c
 800f494:	2000235c 	.word	0x2000235c

0800f498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b08a      	sub	sp, #40	; 0x28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f4a4:	f7fe fc7e 	bl	800dda4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f4a8:	4b5b      	ldr	r3, [pc, #364]	; (800f618 <pvPortMalloc+0x180>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d101      	bne.n	800f4b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f4b0:	f000 f920 	bl	800f6f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f4b4:	4b59      	ldr	r3, [pc, #356]	; (800f61c <pvPortMalloc+0x184>)
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f040 8093 	bne.w	800f5e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d01d      	beq.n	800f504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f4c8:	2208      	movs	r2, #8
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f003 0307 	and.w	r3, r3, #7
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d014      	beq.n	800f504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f023 0307 	bic.w	r3, r3, #7
 800f4e0:	3308      	adds	r3, #8
 800f4e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f003 0307 	and.w	r3, r3, #7
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00a      	beq.n	800f504 <pvPortMalloc+0x6c>
	__asm volatile
 800f4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f2:	f383 8811 	msr	BASEPRI, r3
 800f4f6:	f3bf 8f6f 	isb	sy
 800f4fa:	f3bf 8f4f 	dsb	sy
 800f4fe:	617b      	str	r3, [r7, #20]
}
 800f500:	bf00      	nop
 800f502:	e7fe      	b.n	800f502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d06e      	beq.n	800f5e8 <pvPortMalloc+0x150>
 800f50a:	4b45      	ldr	r3, [pc, #276]	; (800f620 <pvPortMalloc+0x188>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	429a      	cmp	r2, r3
 800f512:	d869      	bhi.n	800f5e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f514:	4b43      	ldr	r3, [pc, #268]	; (800f624 <pvPortMalloc+0x18c>)
 800f516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f518:	4b42      	ldr	r3, [pc, #264]	; (800f624 <pvPortMalloc+0x18c>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f51e:	e004      	b.n	800f52a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	429a      	cmp	r2, r3
 800f532:	d903      	bls.n	800f53c <pvPortMalloc+0xa4>
 800f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1f1      	bne.n	800f520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f53c:	4b36      	ldr	r3, [pc, #216]	; (800f618 <pvPortMalloc+0x180>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f542:	429a      	cmp	r2, r3
 800f544:	d050      	beq.n	800f5e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f546:	6a3b      	ldr	r3, [r7, #32]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2208      	movs	r2, #8
 800f54c:	4413      	add	r3, r2
 800f54e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	6a3b      	ldr	r3, [r7, #32]
 800f556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55a:	685a      	ldr	r2, [r3, #4]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	1ad2      	subs	r2, r2, r3
 800f560:	2308      	movs	r3, #8
 800f562:	005b      	lsls	r3, r3, #1
 800f564:	429a      	cmp	r2, r3
 800f566:	d91f      	bls.n	800f5a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4413      	add	r3, r2
 800f56e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f570:	69bb      	ldr	r3, [r7, #24]
 800f572:	f003 0307 	and.w	r3, r3, #7
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00a      	beq.n	800f590 <pvPortMalloc+0xf8>
	__asm volatile
 800f57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57e:	f383 8811 	msr	BASEPRI, r3
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	f3bf 8f4f 	dsb	sy
 800f58a:	613b      	str	r3, [r7, #16]
}
 800f58c:	bf00      	nop
 800f58e:	e7fe      	b.n	800f58e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f592:	685a      	ldr	r2, [r3, #4]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	1ad2      	subs	r2, r2, r3
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f5a2:	69b8      	ldr	r0, [r7, #24]
 800f5a4:	f000 f908 	bl	800f7b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f5a8:	4b1d      	ldr	r3, [pc, #116]	; (800f620 <pvPortMalloc+0x188>)
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	4a1b      	ldr	r2, [pc, #108]	; (800f620 <pvPortMalloc+0x188>)
 800f5b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f5b6:	4b1a      	ldr	r3, [pc, #104]	; (800f620 <pvPortMalloc+0x188>)
 800f5b8:	681a      	ldr	r2, [r3, #0]
 800f5ba:	4b1b      	ldr	r3, [pc, #108]	; (800f628 <pvPortMalloc+0x190>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d203      	bcs.n	800f5ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f5c2:	4b17      	ldr	r3, [pc, #92]	; (800f620 <pvPortMalloc+0x188>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4a18      	ldr	r2, [pc, #96]	; (800f628 <pvPortMalloc+0x190>)
 800f5c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	685a      	ldr	r2, [r3, #4]
 800f5ce:	4b13      	ldr	r3, [pc, #76]	; (800f61c <pvPortMalloc+0x184>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	431a      	orrs	r2, r3
 800f5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	2200      	movs	r2, #0
 800f5dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f5de:	4b13      	ldr	r3, [pc, #76]	; (800f62c <pvPortMalloc+0x194>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	4a11      	ldr	r2, [pc, #68]	; (800f62c <pvPortMalloc+0x194>)
 800f5e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f5e8:	f7fe fbea 	bl	800ddc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	f003 0307 	and.w	r3, r3, #7
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00a      	beq.n	800f60c <pvPortMalloc+0x174>
	__asm volatile
 800f5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fa:	f383 8811 	msr	BASEPRI, r3
 800f5fe:	f3bf 8f6f 	isb	sy
 800f602:	f3bf 8f4f 	dsb	sy
 800f606:	60fb      	str	r3, [r7, #12]
}
 800f608:	bf00      	nop
 800f60a:	e7fe      	b.n	800f60a <pvPortMalloc+0x172>
	return pvReturn;
 800f60c:	69fb      	ldr	r3, [r7, #28]
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3728      	adds	r7, #40	; 0x28
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	20002f68 	.word	0x20002f68
 800f61c:	20002f7c 	.word	0x20002f7c
 800f620:	20002f6c 	.word	0x20002f6c
 800f624:	20002f60 	.word	0x20002f60
 800f628:	20002f70 	.word	0x20002f70
 800f62c:	20002f74 	.word	0x20002f74

0800f630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d04d      	beq.n	800f6de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f642:	2308      	movs	r3, #8
 800f644:	425b      	negs	r3, r3
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	4413      	add	r3, r2
 800f64a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	685a      	ldr	r2, [r3, #4]
 800f654:	4b24      	ldr	r3, [pc, #144]	; (800f6e8 <vPortFree+0xb8>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4013      	ands	r3, r2
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d10a      	bne.n	800f674 <vPortFree+0x44>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	60fb      	str	r3, [r7, #12]
}
 800f670:	bf00      	nop
 800f672:	e7fe      	b.n	800f672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00a      	beq.n	800f692 <vPortFree+0x62>
	__asm volatile
 800f67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f680:	f383 8811 	msr	BASEPRI, r3
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	60bb      	str	r3, [r7, #8]
}
 800f68e:	bf00      	nop
 800f690:	e7fe      	b.n	800f690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	685a      	ldr	r2, [r3, #4]
 800f696:	4b14      	ldr	r3, [pc, #80]	; (800f6e8 <vPortFree+0xb8>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4013      	ands	r3, r2
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d01e      	beq.n	800f6de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d11a      	bne.n	800f6de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	685a      	ldr	r2, [r3, #4]
 800f6ac:	4b0e      	ldr	r3, [pc, #56]	; (800f6e8 <vPortFree+0xb8>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	43db      	mvns	r3, r3
 800f6b2:	401a      	ands	r2, r3
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f6b8:	f7fe fb74 	bl	800dda4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	685a      	ldr	r2, [r3, #4]
 800f6c0:	4b0a      	ldr	r3, [pc, #40]	; (800f6ec <vPortFree+0xbc>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	4a09      	ldr	r2, [pc, #36]	; (800f6ec <vPortFree+0xbc>)
 800f6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f6ca:	6938      	ldr	r0, [r7, #16]
 800f6cc:	f000 f874 	bl	800f7b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f6d0:	4b07      	ldr	r3, [pc, #28]	; (800f6f0 <vPortFree+0xc0>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	4a06      	ldr	r2, [pc, #24]	; (800f6f0 <vPortFree+0xc0>)
 800f6d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f6da:	f7fe fb71 	bl	800ddc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f6de:	bf00      	nop
 800f6e0:	3718      	adds	r7, #24
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	20002f7c 	.word	0x20002f7c
 800f6ec:	20002f6c 	.word	0x20002f6c
 800f6f0:	20002f78 	.word	0x20002f78

0800f6f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f6fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f6fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f700:	4b27      	ldr	r3, [pc, #156]	; (800f7a0 <prvHeapInit+0xac>)
 800f702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f003 0307 	and.w	r3, r3, #7
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00c      	beq.n	800f728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	3307      	adds	r3, #7
 800f712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f023 0307 	bic.w	r3, r3, #7
 800f71a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	1ad3      	subs	r3, r2, r3
 800f722:	4a1f      	ldr	r2, [pc, #124]	; (800f7a0 <prvHeapInit+0xac>)
 800f724:	4413      	add	r3, r2
 800f726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f72c:	4a1d      	ldr	r2, [pc, #116]	; (800f7a4 <prvHeapInit+0xb0>)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f732:	4b1c      	ldr	r3, [pc, #112]	; (800f7a4 <prvHeapInit+0xb0>)
 800f734:	2200      	movs	r2, #0
 800f736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	4413      	add	r3, r2
 800f73e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f740:	2208      	movs	r2, #8
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	1a9b      	subs	r3, r3, r2
 800f746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f023 0307 	bic.w	r3, r3, #7
 800f74e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	4a15      	ldr	r2, [pc, #84]	; (800f7a8 <prvHeapInit+0xb4>)
 800f754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f756:	4b14      	ldr	r3, [pc, #80]	; (800f7a8 <prvHeapInit+0xb4>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2200      	movs	r2, #0
 800f75c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f75e:	4b12      	ldr	r3, [pc, #72]	; (800f7a8 <prvHeapInit+0xb4>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	2200      	movs	r2, #0
 800f764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	1ad2      	subs	r2, r2, r3
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f774:	4b0c      	ldr	r3, [pc, #48]	; (800f7a8 <prvHeapInit+0xb4>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	4a0a      	ldr	r2, [pc, #40]	; (800f7ac <prvHeapInit+0xb8>)
 800f782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	4a09      	ldr	r2, [pc, #36]	; (800f7b0 <prvHeapInit+0xbc>)
 800f78a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f78c:	4b09      	ldr	r3, [pc, #36]	; (800f7b4 <prvHeapInit+0xc0>)
 800f78e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f792:	601a      	str	r2, [r3, #0]
}
 800f794:	bf00      	nop
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	20002360 	.word	0x20002360
 800f7a4:	20002f60 	.word	0x20002f60
 800f7a8:	20002f68 	.word	0x20002f68
 800f7ac:	20002f70 	.word	0x20002f70
 800f7b0:	20002f6c 	.word	0x20002f6c
 800f7b4:	20002f7c 	.word	0x20002f7c

0800f7b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b085      	sub	sp, #20
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f7c0:	4b28      	ldr	r3, [pc, #160]	; (800f864 <prvInsertBlockIntoFreeList+0xac>)
 800f7c2:	60fb      	str	r3, [r7, #12]
 800f7c4:	e002      	b.n	800f7cc <prvInsertBlockIntoFreeList+0x14>
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	60fb      	str	r3, [r7, #12]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d8f7      	bhi.n	800f7c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	68ba      	ldr	r2, [r7, #8]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d108      	bne.n	800f7fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	685a      	ldr	r2, [r3, #4]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	441a      	add	r2, r3
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	68ba      	ldr	r2, [r7, #8]
 800f804:	441a      	add	r2, r3
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d118      	bne.n	800f840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	4b15      	ldr	r3, [pc, #84]	; (800f868 <prvInsertBlockIntoFreeList+0xb0>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	429a      	cmp	r2, r3
 800f818:	d00d      	beq.n	800f836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	685a      	ldr	r2, [r3, #4]
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	441a      	add	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	e008      	b.n	800f848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f836:	4b0c      	ldr	r3, [pc, #48]	; (800f868 <prvInsertBlockIntoFreeList+0xb0>)
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	601a      	str	r2, [r3, #0]
 800f83e:	e003      	b.n	800f848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d002      	beq.n	800f856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f856:	bf00      	nop
 800f858:	3714      	adds	r7, #20
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	20002f60 	.word	0x20002f60
 800f868:	20002f68 	.word	0x20002f68

0800f86c <__errno>:
 800f86c:	4b01      	ldr	r3, [pc, #4]	; (800f874 <__errno+0x8>)
 800f86e:	6818      	ldr	r0, [r3, #0]
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop
 800f874:	20000028 	.word	0x20000028

0800f878 <__libc_init_array>:
 800f878:	b570      	push	{r4, r5, r6, lr}
 800f87a:	4d0d      	ldr	r5, [pc, #52]	; (800f8b0 <__libc_init_array+0x38>)
 800f87c:	4c0d      	ldr	r4, [pc, #52]	; (800f8b4 <__libc_init_array+0x3c>)
 800f87e:	1b64      	subs	r4, r4, r5
 800f880:	10a4      	asrs	r4, r4, #2
 800f882:	2600      	movs	r6, #0
 800f884:	42a6      	cmp	r6, r4
 800f886:	d109      	bne.n	800f89c <__libc_init_array+0x24>
 800f888:	4d0b      	ldr	r5, [pc, #44]	; (800f8b8 <__libc_init_array+0x40>)
 800f88a:	4c0c      	ldr	r4, [pc, #48]	; (800f8bc <__libc_init_array+0x44>)
 800f88c:	f000 fd22 	bl	80102d4 <_init>
 800f890:	1b64      	subs	r4, r4, r5
 800f892:	10a4      	asrs	r4, r4, #2
 800f894:	2600      	movs	r6, #0
 800f896:	42a6      	cmp	r6, r4
 800f898:	d105      	bne.n	800f8a6 <__libc_init_array+0x2e>
 800f89a:	bd70      	pop	{r4, r5, r6, pc}
 800f89c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8a0:	4798      	blx	r3
 800f8a2:	3601      	adds	r6, #1
 800f8a4:	e7ee      	b.n	800f884 <__libc_init_array+0xc>
 800f8a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8aa:	4798      	blx	r3
 800f8ac:	3601      	adds	r6, #1
 800f8ae:	e7f2      	b.n	800f896 <__libc_init_array+0x1e>
 800f8b0:	080105e0 	.word	0x080105e0
 800f8b4:	080105e0 	.word	0x080105e0
 800f8b8:	080105e0 	.word	0x080105e0
 800f8bc:	080105e4 	.word	0x080105e4

0800f8c0 <__retarget_lock_acquire_recursive>:
 800f8c0:	4770      	bx	lr

0800f8c2 <__retarget_lock_release_recursive>:
 800f8c2:	4770      	bx	lr

0800f8c4 <memcpy>:
 800f8c4:	440a      	add	r2, r1
 800f8c6:	4291      	cmp	r1, r2
 800f8c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f8cc:	d100      	bne.n	800f8d0 <memcpy+0xc>
 800f8ce:	4770      	bx	lr
 800f8d0:	b510      	push	{r4, lr}
 800f8d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8da:	4291      	cmp	r1, r2
 800f8dc:	d1f9      	bne.n	800f8d2 <memcpy+0xe>
 800f8de:	bd10      	pop	{r4, pc}

0800f8e0 <memset>:
 800f8e0:	4402      	add	r2, r0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d100      	bne.n	800f8ea <memset+0xa>
 800f8e8:	4770      	bx	lr
 800f8ea:	f803 1b01 	strb.w	r1, [r3], #1
 800f8ee:	e7f9      	b.n	800f8e4 <memset+0x4>

0800f8f0 <sbrk_aligned>:
 800f8f0:	b570      	push	{r4, r5, r6, lr}
 800f8f2:	4e0e      	ldr	r6, [pc, #56]	; (800f92c <sbrk_aligned+0x3c>)
 800f8f4:	460c      	mov	r4, r1
 800f8f6:	6831      	ldr	r1, [r6, #0]
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	b911      	cbnz	r1, 800f902 <sbrk_aligned+0x12>
 800f8fc:	f000 f8f6 	bl	800faec <_sbrk_r>
 800f900:	6030      	str	r0, [r6, #0]
 800f902:	4621      	mov	r1, r4
 800f904:	4628      	mov	r0, r5
 800f906:	f000 f8f1 	bl	800faec <_sbrk_r>
 800f90a:	1c43      	adds	r3, r0, #1
 800f90c:	d00a      	beq.n	800f924 <sbrk_aligned+0x34>
 800f90e:	1cc4      	adds	r4, r0, #3
 800f910:	f024 0403 	bic.w	r4, r4, #3
 800f914:	42a0      	cmp	r0, r4
 800f916:	d007      	beq.n	800f928 <sbrk_aligned+0x38>
 800f918:	1a21      	subs	r1, r4, r0
 800f91a:	4628      	mov	r0, r5
 800f91c:	f000 f8e6 	bl	800faec <_sbrk_r>
 800f920:	3001      	adds	r0, #1
 800f922:	d101      	bne.n	800f928 <sbrk_aligned+0x38>
 800f924:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f928:	4620      	mov	r0, r4
 800f92a:	bd70      	pop	{r4, r5, r6, pc}
 800f92c:	20002f88 	.word	0x20002f88

0800f930 <_malloc_r>:
 800f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f934:	1ccd      	adds	r5, r1, #3
 800f936:	f025 0503 	bic.w	r5, r5, #3
 800f93a:	3508      	adds	r5, #8
 800f93c:	2d0c      	cmp	r5, #12
 800f93e:	bf38      	it	cc
 800f940:	250c      	movcc	r5, #12
 800f942:	2d00      	cmp	r5, #0
 800f944:	4607      	mov	r7, r0
 800f946:	db01      	blt.n	800f94c <_malloc_r+0x1c>
 800f948:	42a9      	cmp	r1, r5
 800f94a:	d905      	bls.n	800f958 <_malloc_r+0x28>
 800f94c:	230c      	movs	r3, #12
 800f94e:	603b      	str	r3, [r7, #0]
 800f950:	2600      	movs	r6, #0
 800f952:	4630      	mov	r0, r6
 800f954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f958:	4e2e      	ldr	r6, [pc, #184]	; (800fa14 <_malloc_r+0xe4>)
 800f95a:	f000 f921 	bl	800fba0 <__malloc_lock>
 800f95e:	6833      	ldr	r3, [r6, #0]
 800f960:	461c      	mov	r4, r3
 800f962:	bb34      	cbnz	r4, 800f9b2 <_malloc_r+0x82>
 800f964:	4629      	mov	r1, r5
 800f966:	4638      	mov	r0, r7
 800f968:	f7ff ffc2 	bl	800f8f0 <sbrk_aligned>
 800f96c:	1c43      	adds	r3, r0, #1
 800f96e:	4604      	mov	r4, r0
 800f970:	d14d      	bne.n	800fa0e <_malloc_r+0xde>
 800f972:	6834      	ldr	r4, [r6, #0]
 800f974:	4626      	mov	r6, r4
 800f976:	2e00      	cmp	r6, #0
 800f978:	d140      	bne.n	800f9fc <_malloc_r+0xcc>
 800f97a:	6823      	ldr	r3, [r4, #0]
 800f97c:	4631      	mov	r1, r6
 800f97e:	4638      	mov	r0, r7
 800f980:	eb04 0803 	add.w	r8, r4, r3
 800f984:	f000 f8b2 	bl	800faec <_sbrk_r>
 800f988:	4580      	cmp	r8, r0
 800f98a:	d13a      	bne.n	800fa02 <_malloc_r+0xd2>
 800f98c:	6821      	ldr	r1, [r4, #0]
 800f98e:	3503      	adds	r5, #3
 800f990:	1a6d      	subs	r5, r5, r1
 800f992:	f025 0503 	bic.w	r5, r5, #3
 800f996:	3508      	adds	r5, #8
 800f998:	2d0c      	cmp	r5, #12
 800f99a:	bf38      	it	cc
 800f99c:	250c      	movcc	r5, #12
 800f99e:	4629      	mov	r1, r5
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f7ff ffa5 	bl	800f8f0 <sbrk_aligned>
 800f9a6:	3001      	adds	r0, #1
 800f9a8:	d02b      	beq.n	800fa02 <_malloc_r+0xd2>
 800f9aa:	6823      	ldr	r3, [r4, #0]
 800f9ac:	442b      	add	r3, r5
 800f9ae:	6023      	str	r3, [r4, #0]
 800f9b0:	e00e      	b.n	800f9d0 <_malloc_r+0xa0>
 800f9b2:	6822      	ldr	r2, [r4, #0]
 800f9b4:	1b52      	subs	r2, r2, r5
 800f9b6:	d41e      	bmi.n	800f9f6 <_malloc_r+0xc6>
 800f9b8:	2a0b      	cmp	r2, #11
 800f9ba:	d916      	bls.n	800f9ea <_malloc_r+0xba>
 800f9bc:	1961      	adds	r1, r4, r5
 800f9be:	42a3      	cmp	r3, r4
 800f9c0:	6025      	str	r5, [r4, #0]
 800f9c2:	bf18      	it	ne
 800f9c4:	6059      	strne	r1, [r3, #4]
 800f9c6:	6863      	ldr	r3, [r4, #4]
 800f9c8:	bf08      	it	eq
 800f9ca:	6031      	streq	r1, [r6, #0]
 800f9cc:	5162      	str	r2, [r4, r5]
 800f9ce:	604b      	str	r3, [r1, #4]
 800f9d0:	4638      	mov	r0, r7
 800f9d2:	f104 060b 	add.w	r6, r4, #11
 800f9d6:	f000 f8e9 	bl	800fbac <__malloc_unlock>
 800f9da:	f026 0607 	bic.w	r6, r6, #7
 800f9de:	1d23      	adds	r3, r4, #4
 800f9e0:	1af2      	subs	r2, r6, r3
 800f9e2:	d0b6      	beq.n	800f952 <_malloc_r+0x22>
 800f9e4:	1b9b      	subs	r3, r3, r6
 800f9e6:	50a3      	str	r3, [r4, r2]
 800f9e8:	e7b3      	b.n	800f952 <_malloc_r+0x22>
 800f9ea:	6862      	ldr	r2, [r4, #4]
 800f9ec:	42a3      	cmp	r3, r4
 800f9ee:	bf0c      	ite	eq
 800f9f0:	6032      	streq	r2, [r6, #0]
 800f9f2:	605a      	strne	r2, [r3, #4]
 800f9f4:	e7ec      	b.n	800f9d0 <_malloc_r+0xa0>
 800f9f6:	4623      	mov	r3, r4
 800f9f8:	6864      	ldr	r4, [r4, #4]
 800f9fa:	e7b2      	b.n	800f962 <_malloc_r+0x32>
 800f9fc:	4634      	mov	r4, r6
 800f9fe:	6876      	ldr	r6, [r6, #4]
 800fa00:	e7b9      	b.n	800f976 <_malloc_r+0x46>
 800fa02:	230c      	movs	r3, #12
 800fa04:	603b      	str	r3, [r7, #0]
 800fa06:	4638      	mov	r0, r7
 800fa08:	f000 f8d0 	bl	800fbac <__malloc_unlock>
 800fa0c:	e7a1      	b.n	800f952 <_malloc_r+0x22>
 800fa0e:	6025      	str	r5, [r4, #0]
 800fa10:	e7de      	b.n	800f9d0 <_malloc_r+0xa0>
 800fa12:	bf00      	nop
 800fa14:	20002f84 	.word	0x20002f84

0800fa18 <cleanup_glue>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	6809      	ldr	r1, [r1, #0]
 800fa1e:	4605      	mov	r5, r0
 800fa20:	b109      	cbz	r1, 800fa26 <cleanup_glue+0xe>
 800fa22:	f7ff fff9 	bl	800fa18 <cleanup_glue>
 800fa26:	4621      	mov	r1, r4
 800fa28:	4628      	mov	r0, r5
 800fa2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa2e:	f000 b8c3 	b.w	800fbb8 <_free_r>
	...

0800fa34 <_reclaim_reent>:
 800fa34:	4b2c      	ldr	r3, [pc, #176]	; (800fae8 <_reclaim_reent+0xb4>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4283      	cmp	r3, r0
 800fa3a:	b570      	push	{r4, r5, r6, lr}
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	d051      	beq.n	800fae4 <_reclaim_reent+0xb0>
 800fa40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fa42:	b143      	cbz	r3, 800fa56 <_reclaim_reent+0x22>
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d14a      	bne.n	800fae0 <_reclaim_reent+0xac>
 800fa4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa4c:	6819      	ldr	r1, [r3, #0]
 800fa4e:	b111      	cbz	r1, 800fa56 <_reclaim_reent+0x22>
 800fa50:	4620      	mov	r0, r4
 800fa52:	f000 f8b1 	bl	800fbb8 <_free_r>
 800fa56:	6961      	ldr	r1, [r4, #20]
 800fa58:	b111      	cbz	r1, 800fa60 <_reclaim_reent+0x2c>
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f000 f8ac 	bl	800fbb8 <_free_r>
 800fa60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fa62:	b111      	cbz	r1, 800fa6a <_reclaim_reent+0x36>
 800fa64:	4620      	mov	r0, r4
 800fa66:	f000 f8a7 	bl	800fbb8 <_free_r>
 800fa6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fa6c:	b111      	cbz	r1, 800fa74 <_reclaim_reent+0x40>
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f000 f8a2 	bl	800fbb8 <_free_r>
 800fa74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fa76:	b111      	cbz	r1, 800fa7e <_reclaim_reent+0x4a>
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f000 f89d 	bl	800fbb8 <_free_r>
 800fa7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fa80:	b111      	cbz	r1, 800fa88 <_reclaim_reent+0x54>
 800fa82:	4620      	mov	r0, r4
 800fa84:	f000 f898 	bl	800fbb8 <_free_r>
 800fa88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fa8a:	b111      	cbz	r1, 800fa92 <_reclaim_reent+0x5e>
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f000 f893 	bl	800fbb8 <_free_r>
 800fa92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fa94:	b111      	cbz	r1, 800fa9c <_reclaim_reent+0x68>
 800fa96:	4620      	mov	r0, r4
 800fa98:	f000 f88e 	bl	800fbb8 <_free_r>
 800fa9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa9e:	b111      	cbz	r1, 800faa6 <_reclaim_reent+0x72>
 800faa0:	4620      	mov	r0, r4
 800faa2:	f000 f889 	bl	800fbb8 <_free_r>
 800faa6:	69a3      	ldr	r3, [r4, #24]
 800faa8:	b1e3      	cbz	r3, 800fae4 <_reclaim_reent+0xb0>
 800faaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800faac:	4620      	mov	r0, r4
 800faae:	4798      	blx	r3
 800fab0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fab2:	b1b9      	cbz	r1, 800fae4 <_reclaim_reent+0xb0>
 800fab4:	4620      	mov	r0, r4
 800fab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800faba:	f7ff bfad 	b.w	800fa18 <cleanup_glue>
 800fabe:	5949      	ldr	r1, [r1, r5]
 800fac0:	b941      	cbnz	r1, 800fad4 <_reclaim_reent+0xa0>
 800fac2:	3504      	adds	r5, #4
 800fac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fac6:	2d80      	cmp	r5, #128	; 0x80
 800fac8:	68d9      	ldr	r1, [r3, #12]
 800faca:	d1f8      	bne.n	800fabe <_reclaim_reent+0x8a>
 800facc:	4620      	mov	r0, r4
 800face:	f000 f873 	bl	800fbb8 <_free_r>
 800fad2:	e7ba      	b.n	800fa4a <_reclaim_reent+0x16>
 800fad4:	680e      	ldr	r6, [r1, #0]
 800fad6:	4620      	mov	r0, r4
 800fad8:	f000 f86e 	bl	800fbb8 <_free_r>
 800fadc:	4631      	mov	r1, r6
 800fade:	e7ef      	b.n	800fac0 <_reclaim_reent+0x8c>
 800fae0:	2500      	movs	r5, #0
 800fae2:	e7ef      	b.n	800fac4 <_reclaim_reent+0x90>
 800fae4:	bd70      	pop	{r4, r5, r6, pc}
 800fae6:	bf00      	nop
 800fae8:	20000028 	.word	0x20000028

0800faec <_sbrk_r>:
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	4d06      	ldr	r5, [pc, #24]	; (800fb08 <_sbrk_r+0x1c>)
 800faf0:	2300      	movs	r3, #0
 800faf2:	4604      	mov	r4, r0
 800faf4:	4608      	mov	r0, r1
 800faf6:	602b      	str	r3, [r5, #0]
 800faf8:	f7f3 f82c 	bl	8002b54 <_sbrk>
 800fafc:	1c43      	adds	r3, r0, #1
 800fafe:	d102      	bne.n	800fb06 <_sbrk_r+0x1a>
 800fb00:	682b      	ldr	r3, [r5, #0]
 800fb02:	b103      	cbz	r3, 800fb06 <_sbrk_r+0x1a>
 800fb04:	6023      	str	r3, [r4, #0]
 800fb06:	bd38      	pop	{r3, r4, r5, pc}
 800fb08:	20002f8c 	.word	0x20002f8c

0800fb0c <siprintf>:
 800fb0c:	b40e      	push	{r1, r2, r3}
 800fb0e:	b500      	push	{lr}
 800fb10:	b09c      	sub	sp, #112	; 0x70
 800fb12:	ab1d      	add	r3, sp, #116	; 0x74
 800fb14:	9002      	str	r0, [sp, #8]
 800fb16:	9006      	str	r0, [sp, #24]
 800fb18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fb1c:	4809      	ldr	r0, [pc, #36]	; (800fb44 <siprintf+0x38>)
 800fb1e:	9107      	str	r1, [sp, #28]
 800fb20:	9104      	str	r1, [sp, #16]
 800fb22:	4909      	ldr	r1, [pc, #36]	; (800fb48 <siprintf+0x3c>)
 800fb24:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb28:	9105      	str	r1, [sp, #20]
 800fb2a:	6800      	ldr	r0, [r0, #0]
 800fb2c:	9301      	str	r3, [sp, #4]
 800fb2e:	a902      	add	r1, sp, #8
 800fb30:	f000 f8ea 	bl	800fd08 <_svfiprintf_r>
 800fb34:	9b02      	ldr	r3, [sp, #8]
 800fb36:	2200      	movs	r2, #0
 800fb38:	701a      	strb	r2, [r3, #0]
 800fb3a:	b01c      	add	sp, #112	; 0x70
 800fb3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb40:	b003      	add	sp, #12
 800fb42:	4770      	bx	lr
 800fb44:	20000028 	.word	0x20000028
 800fb48:	ffff0208 	.word	0xffff0208

0800fb4c <strncmp>:
 800fb4c:	b510      	push	{r4, lr}
 800fb4e:	b17a      	cbz	r2, 800fb70 <strncmp+0x24>
 800fb50:	4603      	mov	r3, r0
 800fb52:	3901      	subs	r1, #1
 800fb54:	1884      	adds	r4, r0, r2
 800fb56:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fb5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fb5e:	4290      	cmp	r0, r2
 800fb60:	d101      	bne.n	800fb66 <strncmp+0x1a>
 800fb62:	42a3      	cmp	r3, r4
 800fb64:	d101      	bne.n	800fb6a <strncmp+0x1e>
 800fb66:	1a80      	subs	r0, r0, r2
 800fb68:	bd10      	pop	{r4, pc}
 800fb6a:	2800      	cmp	r0, #0
 800fb6c:	d1f3      	bne.n	800fb56 <strncmp+0xa>
 800fb6e:	e7fa      	b.n	800fb66 <strncmp+0x1a>
 800fb70:	4610      	mov	r0, r2
 800fb72:	e7f9      	b.n	800fb68 <strncmp+0x1c>

0800fb74 <strstr>:
 800fb74:	780a      	ldrb	r2, [r1, #0]
 800fb76:	b570      	push	{r4, r5, r6, lr}
 800fb78:	b96a      	cbnz	r2, 800fb96 <strstr+0x22>
 800fb7a:	bd70      	pop	{r4, r5, r6, pc}
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d109      	bne.n	800fb94 <strstr+0x20>
 800fb80:	460c      	mov	r4, r1
 800fb82:	4605      	mov	r5, r0
 800fb84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d0f6      	beq.n	800fb7a <strstr+0x6>
 800fb8c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fb90:	429e      	cmp	r6, r3
 800fb92:	d0f7      	beq.n	800fb84 <strstr+0x10>
 800fb94:	3001      	adds	r0, #1
 800fb96:	7803      	ldrb	r3, [r0, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d1ef      	bne.n	800fb7c <strstr+0x8>
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	e7ec      	b.n	800fb7a <strstr+0x6>

0800fba0 <__malloc_lock>:
 800fba0:	4801      	ldr	r0, [pc, #4]	; (800fba8 <__malloc_lock+0x8>)
 800fba2:	f7ff be8d 	b.w	800f8c0 <__retarget_lock_acquire_recursive>
 800fba6:	bf00      	nop
 800fba8:	20002f80 	.word	0x20002f80

0800fbac <__malloc_unlock>:
 800fbac:	4801      	ldr	r0, [pc, #4]	; (800fbb4 <__malloc_unlock+0x8>)
 800fbae:	f7ff be88 	b.w	800f8c2 <__retarget_lock_release_recursive>
 800fbb2:	bf00      	nop
 800fbb4:	20002f80 	.word	0x20002f80

0800fbb8 <_free_r>:
 800fbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbba:	2900      	cmp	r1, #0
 800fbbc:	d044      	beq.n	800fc48 <_free_r+0x90>
 800fbbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbc2:	9001      	str	r0, [sp, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f1a1 0404 	sub.w	r4, r1, #4
 800fbca:	bfb8      	it	lt
 800fbcc:	18e4      	addlt	r4, r4, r3
 800fbce:	f7ff ffe7 	bl	800fba0 <__malloc_lock>
 800fbd2:	4a1e      	ldr	r2, [pc, #120]	; (800fc4c <_free_r+0x94>)
 800fbd4:	9801      	ldr	r0, [sp, #4]
 800fbd6:	6813      	ldr	r3, [r2, #0]
 800fbd8:	b933      	cbnz	r3, 800fbe8 <_free_r+0x30>
 800fbda:	6063      	str	r3, [r4, #4]
 800fbdc:	6014      	str	r4, [r2, #0]
 800fbde:	b003      	add	sp, #12
 800fbe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbe4:	f7ff bfe2 	b.w	800fbac <__malloc_unlock>
 800fbe8:	42a3      	cmp	r3, r4
 800fbea:	d908      	bls.n	800fbfe <_free_r+0x46>
 800fbec:	6825      	ldr	r5, [r4, #0]
 800fbee:	1961      	adds	r1, r4, r5
 800fbf0:	428b      	cmp	r3, r1
 800fbf2:	bf01      	itttt	eq
 800fbf4:	6819      	ldreq	r1, [r3, #0]
 800fbf6:	685b      	ldreq	r3, [r3, #4]
 800fbf8:	1949      	addeq	r1, r1, r5
 800fbfa:	6021      	streq	r1, [r4, #0]
 800fbfc:	e7ed      	b.n	800fbda <_free_r+0x22>
 800fbfe:	461a      	mov	r2, r3
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	b10b      	cbz	r3, 800fc08 <_free_r+0x50>
 800fc04:	42a3      	cmp	r3, r4
 800fc06:	d9fa      	bls.n	800fbfe <_free_r+0x46>
 800fc08:	6811      	ldr	r1, [r2, #0]
 800fc0a:	1855      	adds	r5, r2, r1
 800fc0c:	42a5      	cmp	r5, r4
 800fc0e:	d10b      	bne.n	800fc28 <_free_r+0x70>
 800fc10:	6824      	ldr	r4, [r4, #0]
 800fc12:	4421      	add	r1, r4
 800fc14:	1854      	adds	r4, r2, r1
 800fc16:	42a3      	cmp	r3, r4
 800fc18:	6011      	str	r1, [r2, #0]
 800fc1a:	d1e0      	bne.n	800fbde <_free_r+0x26>
 800fc1c:	681c      	ldr	r4, [r3, #0]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	6053      	str	r3, [r2, #4]
 800fc22:	4421      	add	r1, r4
 800fc24:	6011      	str	r1, [r2, #0]
 800fc26:	e7da      	b.n	800fbde <_free_r+0x26>
 800fc28:	d902      	bls.n	800fc30 <_free_r+0x78>
 800fc2a:	230c      	movs	r3, #12
 800fc2c:	6003      	str	r3, [r0, #0]
 800fc2e:	e7d6      	b.n	800fbde <_free_r+0x26>
 800fc30:	6825      	ldr	r5, [r4, #0]
 800fc32:	1961      	adds	r1, r4, r5
 800fc34:	428b      	cmp	r3, r1
 800fc36:	bf04      	itt	eq
 800fc38:	6819      	ldreq	r1, [r3, #0]
 800fc3a:	685b      	ldreq	r3, [r3, #4]
 800fc3c:	6063      	str	r3, [r4, #4]
 800fc3e:	bf04      	itt	eq
 800fc40:	1949      	addeq	r1, r1, r5
 800fc42:	6021      	streq	r1, [r4, #0]
 800fc44:	6054      	str	r4, [r2, #4]
 800fc46:	e7ca      	b.n	800fbde <_free_r+0x26>
 800fc48:	b003      	add	sp, #12
 800fc4a:	bd30      	pop	{r4, r5, pc}
 800fc4c:	20002f84 	.word	0x20002f84

0800fc50 <__ssputs_r>:
 800fc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc54:	688e      	ldr	r6, [r1, #8]
 800fc56:	429e      	cmp	r6, r3
 800fc58:	4682      	mov	sl, r0
 800fc5a:	460c      	mov	r4, r1
 800fc5c:	4690      	mov	r8, r2
 800fc5e:	461f      	mov	r7, r3
 800fc60:	d838      	bhi.n	800fcd4 <__ssputs_r+0x84>
 800fc62:	898a      	ldrh	r2, [r1, #12]
 800fc64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc68:	d032      	beq.n	800fcd0 <__ssputs_r+0x80>
 800fc6a:	6825      	ldr	r5, [r4, #0]
 800fc6c:	6909      	ldr	r1, [r1, #16]
 800fc6e:	eba5 0901 	sub.w	r9, r5, r1
 800fc72:	6965      	ldr	r5, [r4, #20]
 800fc74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	444b      	add	r3, r9
 800fc80:	106d      	asrs	r5, r5, #1
 800fc82:	429d      	cmp	r5, r3
 800fc84:	bf38      	it	cc
 800fc86:	461d      	movcc	r5, r3
 800fc88:	0553      	lsls	r3, r2, #21
 800fc8a:	d531      	bpl.n	800fcf0 <__ssputs_r+0xa0>
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	f7ff fe4f 	bl	800f930 <_malloc_r>
 800fc92:	4606      	mov	r6, r0
 800fc94:	b950      	cbnz	r0, 800fcac <__ssputs_r+0x5c>
 800fc96:	230c      	movs	r3, #12
 800fc98:	f8ca 3000 	str.w	r3, [sl]
 800fc9c:	89a3      	ldrh	r3, [r4, #12]
 800fc9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fca2:	81a3      	strh	r3, [r4, #12]
 800fca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcac:	6921      	ldr	r1, [r4, #16]
 800fcae:	464a      	mov	r2, r9
 800fcb0:	f7ff fe08 	bl	800f8c4 <memcpy>
 800fcb4:	89a3      	ldrh	r3, [r4, #12]
 800fcb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fcba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcbe:	81a3      	strh	r3, [r4, #12]
 800fcc0:	6126      	str	r6, [r4, #16]
 800fcc2:	6165      	str	r5, [r4, #20]
 800fcc4:	444e      	add	r6, r9
 800fcc6:	eba5 0509 	sub.w	r5, r5, r9
 800fcca:	6026      	str	r6, [r4, #0]
 800fccc:	60a5      	str	r5, [r4, #8]
 800fcce:	463e      	mov	r6, r7
 800fcd0:	42be      	cmp	r6, r7
 800fcd2:	d900      	bls.n	800fcd6 <__ssputs_r+0x86>
 800fcd4:	463e      	mov	r6, r7
 800fcd6:	6820      	ldr	r0, [r4, #0]
 800fcd8:	4632      	mov	r2, r6
 800fcda:	4641      	mov	r1, r8
 800fcdc:	f000 faa8 	bl	8010230 <memmove>
 800fce0:	68a3      	ldr	r3, [r4, #8]
 800fce2:	1b9b      	subs	r3, r3, r6
 800fce4:	60a3      	str	r3, [r4, #8]
 800fce6:	6823      	ldr	r3, [r4, #0]
 800fce8:	4433      	add	r3, r6
 800fcea:	6023      	str	r3, [r4, #0]
 800fcec:	2000      	movs	r0, #0
 800fcee:	e7db      	b.n	800fca8 <__ssputs_r+0x58>
 800fcf0:	462a      	mov	r2, r5
 800fcf2:	f000 fab7 	bl	8010264 <_realloc_r>
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	d1e1      	bne.n	800fcc0 <__ssputs_r+0x70>
 800fcfc:	6921      	ldr	r1, [r4, #16]
 800fcfe:	4650      	mov	r0, sl
 800fd00:	f7ff ff5a 	bl	800fbb8 <_free_r>
 800fd04:	e7c7      	b.n	800fc96 <__ssputs_r+0x46>
	...

0800fd08 <_svfiprintf_r>:
 800fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	4698      	mov	r8, r3
 800fd0e:	898b      	ldrh	r3, [r1, #12]
 800fd10:	061b      	lsls	r3, r3, #24
 800fd12:	b09d      	sub	sp, #116	; 0x74
 800fd14:	4607      	mov	r7, r0
 800fd16:	460d      	mov	r5, r1
 800fd18:	4614      	mov	r4, r2
 800fd1a:	d50e      	bpl.n	800fd3a <_svfiprintf_r+0x32>
 800fd1c:	690b      	ldr	r3, [r1, #16]
 800fd1e:	b963      	cbnz	r3, 800fd3a <_svfiprintf_r+0x32>
 800fd20:	2140      	movs	r1, #64	; 0x40
 800fd22:	f7ff fe05 	bl	800f930 <_malloc_r>
 800fd26:	6028      	str	r0, [r5, #0]
 800fd28:	6128      	str	r0, [r5, #16]
 800fd2a:	b920      	cbnz	r0, 800fd36 <_svfiprintf_r+0x2e>
 800fd2c:	230c      	movs	r3, #12
 800fd2e:	603b      	str	r3, [r7, #0]
 800fd30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd34:	e0d1      	b.n	800feda <_svfiprintf_r+0x1d2>
 800fd36:	2340      	movs	r3, #64	; 0x40
 800fd38:	616b      	str	r3, [r5, #20]
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd3e:	2320      	movs	r3, #32
 800fd40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd44:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd48:	2330      	movs	r3, #48	; 0x30
 800fd4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fef4 <_svfiprintf_r+0x1ec>
 800fd4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd52:	f04f 0901 	mov.w	r9, #1
 800fd56:	4623      	mov	r3, r4
 800fd58:	469a      	mov	sl, r3
 800fd5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd5e:	b10a      	cbz	r2, 800fd64 <_svfiprintf_r+0x5c>
 800fd60:	2a25      	cmp	r2, #37	; 0x25
 800fd62:	d1f9      	bne.n	800fd58 <_svfiprintf_r+0x50>
 800fd64:	ebba 0b04 	subs.w	fp, sl, r4
 800fd68:	d00b      	beq.n	800fd82 <_svfiprintf_r+0x7a>
 800fd6a:	465b      	mov	r3, fp
 800fd6c:	4622      	mov	r2, r4
 800fd6e:	4629      	mov	r1, r5
 800fd70:	4638      	mov	r0, r7
 800fd72:	f7ff ff6d 	bl	800fc50 <__ssputs_r>
 800fd76:	3001      	adds	r0, #1
 800fd78:	f000 80aa 	beq.w	800fed0 <_svfiprintf_r+0x1c8>
 800fd7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd7e:	445a      	add	r2, fp
 800fd80:	9209      	str	r2, [sp, #36]	; 0x24
 800fd82:	f89a 3000 	ldrb.w	r3, [sl]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f000 80a2 	beq.w	800fed0 <_svfiprintf_r+0x1c8>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd96:	f10a 0a01 	add.w	sl, sl, #1
 800fd9a:	9304      	str	r3, [sp, #16]
 800fd9c:	9307      	str	r3, [sp, #28]
 800fd9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fda2:	931a      	str	r3, [sp, #104]	; 0x68
 800fda4:	4654      	mov	r4, sl
 800fda6:	2205      	movs	r2, #5
 800fda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdac:	4851      	ldr	r0, [pc, #324]	; (800fef4 <_svfiprintf_r+0x1ec>)
 800fdae:	f7f0 fa3f 	bl	8000230 <memchr>
 800fdb2:	9a04      	ldr	r2, [sp, #16]
 800fdb4:	b9d8      	cbnz	r0, 800fdee <_svfiprintf_r+0xe6>
 800fdb6:	06d0      	lsls	r0, r2, #27
 800fdb8:	bf44      	itt	mi
 800fdba:	2320      	movmi	r3, #32
 800fdbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdc0:	0711      	lsls	r1, r2, #28
 800fdc2:	bf44      	itt	mi
 800fdc4:	232b      	movmi	r3, #43	; 0x2b
 800fdc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdca:	f89a 3000 	ldrb.w	r3, [sl]
 800fdce:	2b2a      	cmp	r3, #42	; 0x2a
 800fdd0:	d015      	beq.n	800fdfe <_svfiprintf_r+0xf6>
 800fdd2:	9a07      	ldr	r2, [sp, #28]
 800fdd4:	4654      	mov	r4, sl
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	f04f 0c0a 	mov.w	ip, #10
 800fddc:	4621      	mov	r1, r4
 800fdde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fde2:	3b30      	subs	r3, #48	; 0x30
 800fde4:	2b09      	cmp	r3, #9
 800fde6:	d94e      	bls.n	800fe86 <_svfiprintf_r+0x17e>
 800fde8:	b1b0      	cbz	r0, 800fe18 <_svfiprintf_r+0x110>
 800fdea:	9207      	str	r2, [sp, #28]
 800fdec:	e014      	b.n	800fe18 <_svfiprintf_r+0x110>
 800fdee:	eba0 0308 	sub.w	r3, r0, r8
 800fdf2:	fa09 f303 	lsl.w	r3, r9, r3
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	9304      	str	r3, [sp, #16]
 800fdfa:	46a2      	mov	sl, r4
 800fdfc:	e7d2      	b.n	800fda4 <_svfiprintf_r+0x9c>
 800fdfe:	9b03      	ldr	r3, [sp, #12]
 800fe00:	1d19      	adds	r1, r3, #4
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	9103      	str	r1, [sp, #12]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	bfbb      	ittet	lt
 800fe0a:	425b      	neglt	r3, r3
 800fe0c:	f042 0202 	orrlt.w	r2, r2, #2
 800fe10:	9307      	strge	r3, [sp, #28]
 800fe12:	9307      	strlt	r3, [sp, #28]
 800fe14:	bfb8      	it	lt
 800fe16:	9204      	strlt	r2, [sp, #16]
 800fe18:	7823      	ldrb	r3, [r4, #0]
 800fe1a:	2b2e      	cmp	r3, #46	; 0x2e
 800fe1c:	d10c      	bne.n	800fe38 <_svfiprintf_r+0x130>
 800fe1e:	7863      	ldrb	r3, [r4, #1]
 800fe20:	2b2a      	cmp	r3, #42	; 0x2a
 800fe22:	d135      	bne.n	800fe90 <_svfiprintf_r+0x188>
 800fe24:	9b03      	ldr	r3, [sp, #12]
 800fe26:	1d1a      	adds	r2, r3, #4
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	9203      	str	r2, [sp, #12]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	bfb8      	it	lt
 800fe30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fe34:	3402      	adds	r4, #2
 800fe36:	9305      	str	r3, [sp, #20]
 800fe38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ff04 <_svfiprintf_r+0x1fc>
 800fe3c:	7821      	ldrb	r1, [r4, #0]
 800fe3e:	2203      	movs	r2, #3
 800fe40:	4650      	mov	r0, sl
 800fe42:	f7f0 f9f5 	bl	8000230 <memchr>
 800fe46:	b140      	cbz	r0, 800fe5a <_svfiprintf_r+0x152>
 800fe48:	2340      	movs	r3, #64	; 0x40
 800fe4a:	eba0 000a 	sub.w	r0, r0, sl
 800fe4e:	fa03 f000 	lsl.w	r0, r3, r0
 800fe52:	9b04      	ldr	r3, [sp, #16]
 800fe54:	4303      	orrs	r3, r0
 800fe56:	3401      	adds	r4, #1
 800fe58:	9304      	str	r3, [sp, #16]
 800fe5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe5e:	4826      	ldr	r0, [pc, #152]	; (800fef8 <_svfiprintf_r+0x1f0>)
 800fe60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe64:	2206      	movs	r2, #6
 800fe66:	f7f0 f9e3 	bl	8000230 <memchr>
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	d038      	beq.n	800fee0 <_svfiprintf_r+0x1d8>
 800fe6e:	4b23      	ldr	r3, [pc, #140]	; (800fefc <_svfiprintf_r+0x1f4>)
 800fe70:	bb1b      	cbnz	r3, 800feba <_svfiprintf_r+0x1b2>
 800fe72:	9b03      	ldr	r3, [sp, #12]
 800fe74:	3307      	adds	r3, #7
 800fe76:	f023 0307 	bic.w	r3, r3, #7
 800fe7a:	3308      	adds	r3, #8
 800fe7c:	9303      	str	r3, [sp, #12]
 800fe7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe80:	4433      	add	r3, r6
 800fe82:	9309      	str	r3, [sp, #36]	; 0x24
 800fe84:	e767      	b.n	800fd56 <_svfiprintf_r+0x4e>
 800fe86:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe8a:	460c      	mov	r4, r1
 800fe8c:	2001      	movs	r0, #1
 800fe8e:	e7a5      	b.n	800fddc <_svfiprintf_r+0xd4>
 800fe90:	2300      	movs	r3, #0
 800fe92:	3401      	adds	r4, #1
 800fe94:	9305      	str	r3, [sp, #20]
 800fe96:	4619      	mov	r1, r3
 800fe98:	f04f 0c0a 	mov.w	ip, #10
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fea2:	3a30      	subs	r2, #48	; 0x30
 800fea4:	2a09      	cmp	r2, #9
 800fea6:	d903      	bls.n	800feb0 <_svfiprintf_r+0x1a8>
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d0c5      	beq.n	800fe38 <_svfiprintf_r+0x130>
 800feac:	9105      	str	r1, [sp, #20]
 800feae:	e7c3      	b.n	800fe38 <_svfiprintf_r+0x130>
 800feb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800feb4:	4604      	mov	r4, r0
 800feb6:	2301      	movs	r3, #1
 800feb8:	e7f0      	b.n	800fe9c <_svfiprintf_r+0x194>
 800feba:	ab03      	add	r3, sp, #12
 800febc:	9300      	str	r3, [sp, #0]
 800febe:	462a      	mov	r2, r5
 800fec0:	4b0f      	ldr	r3, [pc, #60]	; (800ff00 <_svfiprintf_r+0x1f8>)
 800fec2:	a904      	add	r1, sp, #16
 800fec4:	4638      	mov	r0, r7
 800fec6:	f3af 8000 	nop.w
 800feca:	1c42      	adds	r2, r0, #1
 800fecc:	4606      	mov	r6, r0
 800fece:	d1d6      	bne.n	800fe7e <_svfiprintf_r+0x176>
 800fed0:	89ab      	ldrh	r3, [r5, #12]
 800fed2:	065b      	lsls	r3, r3, #25
 800fed4:	f53f af2c 	bmi.w	800fd30 <_svfiprintf_r+0x28>
 800fed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800feda:	b01d      	add	sp, #116	; 0x74
 800fedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee0:	ab03      	add	r3, sp, #12
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	462a      	mov	r2, r5
 800fee6:	4b06      	ldr	r3, [pc, #24]	; (800ff00 <_svfiprintf_r+0x1f8>)
 800fee8:	a904      	add	r1, sp, #16
 800feea:	4638      	mov	r0, r7
 800feec:	f000 f87a 	bl	800ffe4 <_printf_i>
 800fef0:	e7eb      	b.n	800feca <_svfiprintf_r+0x1c2>
 800fef2:	bf00      	nop
 800fef4:	080105a4 	.word	0x080105a4
 800fef8:	080105ae 	.word	0x080105ae
 800fefc:	00000000 	.word	0x00000000
 800ff00:	0800fc51 	.word	0x0800fc51
 800ff04:	080105aa 	.word	0x080105aa

0800ff08 <_printf_common>:
 800ff08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff0c:	4616      	mov	r6, r2
 800ff0e:	4699      	mov	r9, r3
 800ff10:	688a      	ldr	r2, [r1, #8]
 800ff12:	690b      	ldr	r3, [r1, #16]
 800ff14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	bfb8      	it	lt
 800ff1c:	4613      	movlt	r3, r2
 800ff1e:	6033      	str	r3, [r6, #0]
 800ff20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff24:	4607      	mov	r7, r0
 800ff26:	460c      	mov	r4, r1
 800ff28:	b10a      	cbz	r2, 800ff2e <_printf_common+0x26>
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	6033      	str	r3, [r6, #0]
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	0699      	lsls	r1, r3, #26
 800ff32:	bf42      	ittt	mi
 800ff34:	6833      	ldrmi	r3, [r6, #0]
 800ff36:	3302      	addmi	r3, #2
 800ff38:	6033      	strmi	r3, [r6, #0]
 800ff3a:	6825      	ldr	r5, [r4, #0]
 800ff3c:	f015 0506 	ands.w	r5, r5, #6
 800ff40:	d106      	bne.n	800ff50 <_printf_common+0x48>
 800ff42:	f104 0a19 	add.w	sl, r4, #25
 800ff46:	68e3      	ldr	r3, [r4, #12]
 800ff48:	6832      	ldr	r2, [r6, #0]
 800ff4a:	1a9b      	subs	r3, r3, r2
 800ff4c:	42ab      	cmp	r3, r5
 800ff4e:	dc26      	bgt.n	800ff9e <_printf_common+0x96>
 800ff50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff54:	1e13      	subs	r3, r2, #0
 800ff56:	6822      	ldr	r2, [r4, #0]
 800ff58:	bf18      	it	ne
 800ff5a:	2301      	movne	r3, #1
 800ff5c:	0692      	lsls	r2, r2, #26
 800ff5e:	d42b      	bmi.n	800ffb8 <_printf_common+0xb0>
 800ff60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff64:	4649      	mov	r1, r9
 800ff66:	4638      	mov	r0, r7
 800ff68:	47c0      	blx	r8
 800ff6a:	3001      	adds	r0, #1
 800ff6c:	d01e      	beq.n	800ffac <_printf_common+0xa4>
 800ff6e:	6823      	ldr	r3, [r4, #0]
 800ff70:	68e5      	ldr	r5, [r4, #12]
 800ff72:	6832      	ldr	r2, [r6, #0]
 800ff74:	f003 0306 	and.w	r3, r3, #6
 800ff78:	2b04      	cmp	r3, #4
 800ff7a:	bf08      	it	eq
 800ff7c:	1aad      	subeq	r5, r5, r2
 800ff7e:	68a3      	ldr	r3, [r4, #8]
 800ff80:	6922      	ldr	r2, [r4, #16]
 800ff82:	bf0c      	ite	eq
 800ff84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff88:	2500      	movne	r5, #0
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	bfc4      	itt	gt
 800ff8e:	1a9b      	subgt	r3, r3, r2
 800ff90:	18ed      	addgt	r5, r5, r3
 800ff92:	2600      	movs	r6, #0
 800ff94:	341a      	adds	r4, #26
 800ff96:	42b5      	cmp	r5, r6
 800ff98:	d11a      	bne.n	800ffd0 <_printf_common+0xc8>
 800ff9a:	2000      	movs	r0, #0
 800ff9c:	e008      	b.n	800ffb0 <_printf_common+0xa8>
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	4652      	mov	r2, sl
 800ffa2:	4649      	mov	r1, r9
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	47c0      	blx	r8
 800ffa8:	3001      	adds	r0, #1
 800ffaa:	d103      	bne.n	800ffb4 <_printf_common+0xac>
 800ffac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffb4:	3501      	adds	r5, #1
 800ffb6:	e7c6      	b.n	800ff46 <_printf_common+0x3e>
 800ffb8:	18e1      	adds	r1, r4, r3
 800ffba:	1c5a      	adds	r2, r3, #1
 800ffbc:	2030      	movs	r0, #48	; 0x30
 800ffbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffc2:	4422      	add	r2, r4
 800ffc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffcc:	3302      	adds	r3, #2
 800ffce:	e7c7      	b.n	800ff60 <_printf_common+0x58>
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	4622      	mov	r2, r4
 800ffd4:	4649      	mov	r1, r9
 800ffd6:	4638      	mov	r0, r7
 800ffd8:	47c0      	blx	r8
 800ffda:	3001      	adds	r0, #1
 800ffdc:	d0e6      	beq.n	800ffac <_printf_common+0xa4>
 800ffde:	3601      	adds	r6, #1
 800ffe0:	e7d9      	b.n	800ff96 <_printf_common+0x8e>
	...

0800ffe4 <_printf_i>:
 800ffe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe8:	7e0f      	ldrb	r7, [r1, #24]
 800ffea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ffec:	2f78      	cmp	r7, #120	; 0x78
 800ffee:	4691      	mov	r9, r2
 800fff0:	4680      	mov	r8, r0
 800fff2:	460c      	mov	r4, r1
 800fff4:	469a      	mov	sl, r3
 800fff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fffa:	d807      	bhi.n	801000c <_printf_i+0x28>
 800fffc:	2f62      	cmp	r7, #98	; 0x62
 800fffe:	d80a      	bhi.n	8010016 <_printf_i+0x32>
 8010000:	2f00      	cmp	r7, #0
 8010002:	f000 80d8 	beq.w	80101b6 <_printf_i+0x1d2>
 8010006:	2f58      	cmp	r7, #88	; 0x58
 8010008:	f000 80a3 	beq.w	8010152 <_printf_i+0x16e>
 801000c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010014:	e03a      	b.n	801008c <_printf_i+0xa8>
 8010016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801001a:	2b15      	cmp	r3, #21
 801001c:	d8f6      	bhi.n	801000c <_printf_i+0x28>
 801001e:	a101      	add	r1, pc, #4	; (adr r1, 8010024 <_printf_i+0x40>)
 8010020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010024:	0801007d 	.word	0x0801007d
 8010028:	08010091 	.word	0x08010091
 801002c:	0801000d 	.word	0x0801000d
 8010030:	0801000d 	.word	0x0801000d
 8010034:	0801000d 	.word	0x0801000d
 8010038:	0801000d 	.word	0x0801000d
 801003c:	08010091 	.word	0x08010091
 8010040:	0801000d 	.word	0x0801000d
 8010044:	0801000d 	.word	0x0801000d
 8010048:	0801000d 	.word	0x0801000d
 801004c:	0801000d 	.word	0x0801000d
 8010050:	0801019d 	.word	0x0801019d
 8010054:	080100c1 	.word	0x080100c1
 8010058:	0801017f 	.word	0x0801017f
 801005c:	0801000d 	.word	0x0801000d
 8010060:	0801000d 	.word	0x0801000d
 8010064:	080101bf 	.word	0x080101bf
 8010068:	0801000d 	.word	0x0801000d
 801006c:	080100c1 	.word	0x080100c1
 8010070:	0801000d 	.word	0x0801000d
 8010074:	0801000d 	.word	0x0801000d
 8010078:	08010187 	.word	0x08010187
 801007c:	682b      	ldr	r3, [r5, #0]
 801007e:	1d1a      	adds	r2, r3, #4
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	602a      	str	r2, [r5, #0]
 8010084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801008c:	2301      	movs	r3, #1
 801008e:	e0a3      	b.n	80101d8 <_printf_i+0x1f4>
 8010090:	6820      	ldr	r0, [r4, #0]
 8010092:	6829      	ldr	r1, [r5, #0]
 8010094:	0606      	lsls	r6, r0, #24
 8010096:	f101 0304 	add.w	r3, r1, #4
 801009a:	d50a      	bpl.n	80100b2 <_printf_i+0xce>
 801009c:	680e      	ldr	r6, [r1, #0]
 801009e:	602b      	str	r3, [r5, #0]
 80100a0:	2e00      	cmp	r6, #0
 80100a2:	da03      	bge.n	80100ac <_printf_i+0xc8>
 80100a4:	232d      	movs	r3, #45	; 0x2d
 80100a6:	4276      	negs	r6, r6
 80100a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100ac:	485e      	ldr	r0, [pc, #376]	; (8010228 <_printf_i+0x244>)
 80100ae:	230a      	movs	r3, #10
 80100b0:	e019      	b.n	80100e6 <_printf_i+0x102>
 80100b2:	680e      	ldr	r6, [r1, #0]
 80100b4:	602b      	str	r3, [r5, #0]
 80100b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80100ba:	bf18      	it	ne
 80100bc:	b236      	sxthne	r6, r6
 80100be:	e7ef      	b.n	80100a0 <_printf_i+0xbc>
 80100c0:	682b      	ldr	r3, [r5, #0]
 80100c2:	6820      	ldr	r0, [r4, #0]
 80100c4:	1d19      	adds	r1, r3, #4
 80100c6:	6029      	str	r1, [r5, #0]
 80100c8:	0601      	lsls	r1, r0, #24
 80100ca:	d501      	bpl.n	80100d0 <_printf_i+0xec>
 80100cc:	681e      	ldr	r6, [r3, #0]
 80100ce:	e002      	b.n	80100d6 <_printf_i+0xf2>
 80100d0:	0646      	lsls	r6, r0, #25
 80100d2:	d5fb      	bpl.n	80100cc <_printf_i+0xe8>
 80100d4:	881e      	ldrh	r6, [r3, #0]
 80100d6:	4854      	ldr	r0, [pc, #336]	; (8010228 <_printf_i+0x244>)
 80100d8:	2f6f      	cmp	r7, #111	; 0x6f
 80100da:	bf0c      	ite	eq
 80100dc:	2308      	moveq	r3, #8
 80100de:	230a      	movne	r3, #10
 80100e0:	2100      	movs	r1, #0
 80100e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100e6:	6865      	ldr	r5, [r4, #4]
 80100e8:	60a5      	str	r5, [r4, #8]
 80100ea:	2d00      	cmp	r5, #0
 80100ec:	bfa2      	ittt	ge
 80100ee:	6821      	ldrge	r1, [r4, #0]
 80100f0:	f021 0104 	bicge.w	r1, r1, #4
 80100f4:	6021      	strge	r1, [r4, #0]
 80100f6:	b90e      	cbnz	r6, 80100fc <_printf_i+0x118>
 80100f8:	2d00      	cmp	r5, #0
 80100fa:	d04d      	beq.n	8010198 <_printf_i+0x1b4>
 80100fc:	4615      	mov	r5, r2
 80100fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8010102:	fb03 6711 	mls	r7, r3, r1, r6
 8010106:	5dc7      	ldrb	r7, [r0, r7]
 8010108:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801010c:	4637      	mov	r7, r6
 801010e:	42bb      	cmp	r3, r7
 8010110:	460e      	mov	r6, r1
 8010112:	d9f4      	bls.n	80100fe <_printf_i+0x11a>
 8010114:	2b08      	cmp	r3, #8
 8010116:	d10b      	bne.n	8010130 <_printf_i+0x14c>
 8010118:	6823      	ldr	r3, [r4, #0]
 801011a:	07de      	lsls	r6, r3, #31
 801011c:	d508      	bpl.n	8010130 <_printf_i+0x14c>
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	6861      	ldr	r1, [r4, #4]
 8010122:	4299      	cmp	r1, r3
 8010124:	bfde      	ittt	le
 8010126:	2330      	movle	r3, #48	; 0x30
 8010128:	f805 3c01 	strble.w	r3, [r5, #-1]
 801012c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010130:	1b52      	subs	r2, r2, r5
 8010132:	6122      	str	r2, [r4, #16]
 8010134:	f8cd a000 	str.w	sl, [sp]
 8010138:	464b      	mov	r3, r9
 801013a:	aa03      	add	r2, sp, #12
 801013c:	4621      	mov	r1, r4
 801013e:	4640      	mov	r0, r8
 8010140:	f7ff fee2 	bl	800ff08 <_printf_common>
 8010144:	3001      	adds	r0, #1
 8010146:	d14c      	bne.n	80101e2 <_printf_i+0x1fe>
 8010148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801014c:	b004      	add	sp, #16
 801014e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010152:	4835      	ldr	r0, [pc, #212]	; (8010228 <_printf_i+0x244>)
 8010154:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010158:	6829      	ldr	r1, [r5, #0]
 801015a:	6823      	ldr	r3, [r4, #0]
 801015c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010160:	6029      	str	r1, [r5, #0]
 8010162:	061d      	lsls	r5, r3, #24
 8010164:	d514      	bpl.n	8010190 <_printf_i+0x1ac>
 8010166:	07df      	lsls	r7, r3, #31
 8010168:	bf44      	itt	mi
 801016a:	f043 0320 	orrmi.w	r3, r3, #32
 801016e:	6023      	strmi	r3, [r4, #0]
 8010170:	b91e      	cbnz	r6, 801017a <_printf_i+0x196>
 8010172:	6823      	ldr	r3, [r4, #0]
 8010174:	f023 0320 	bic.w	r3, r3, #32
 8010178:	6023      	str	r3, [r4, #0]
 801017a:	2310      	movs	r3, #16
 801017c:	e7b0      	b.n	80100e0 <_printf_i+0xfc>
 801017e:	6823      	ldr	r3, [r4, #0]
 8010180:	f043 0320 	orr.w	r3, r3, #32
 8010184:	6023      	str	r3, [r4, #0]
 8010186:	2378      	movs	r3, #120	; 0x78
 8010188:	4828      	ldr	r0, [pc, #160]	; (801022c <_printf_i+0x248>)
 801018a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801018e:	e7e3      	b.n	8010158 <_printf_i+0x174>
 8010190:	0659      	lsls	r1, r3, #25
 8010192:	bf48      	it	mi
 8010194:	b2b6      	uxthmi	r6, r6
 8010196:	e7e6      	b.n	8010166 <_printf_i+0x182>
 8010198:	4615      	mov	r5, r2
 801019a:	e7bb      	b.n	8010114 <_printf_i+0x130>
 801019c:	682b      	ldr	r3, [r5, #0]
 801019e:	6826      	ldr	r6, [r4, #0]
 80101a0:	6961      	ldr	r1, [r4, #20]
 80101a2:	1d18      	adds	r0, r3, #4
 80101a4:	6028      	str	r0, [r5, #0]
 80101a6:	0635      	lsls	r5, r6, #24
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	d501      	bpl.n	80101b0 <_printf_i+0x1cc>
 80101ac:	6019      	str	r1, [r3, #0]
 80101ae:	e002      	b.n	80101b6 <_printf_i+0x1d2>
 80101b0:	0670      	lsls	r0, r6, #25
 80101b2:	d5fb      	bpl.n	80101ac <_printf_i+0x1c8>
 80101b4:	8019      	strh	r1, [r3, #0]
 80101b6:	2300      	movs	r3, #0
 80101b8:	6123      	str	r3, [r4, #16]
 80101ba:	4615      	mov	r5, r2
 80101bc:	e7ba      	b.n	8010134 <_printf_i+0x150>
 80101be:	682b      	ldr	r3, [r5, #0]
 80101c0:	1d1a      	adds	r2, r3, #4
 80101c2:	602a      	str	r2, [r5, #0]
 80101c4:	681d      	ldr	r5, [r3, #0]
 80101c6:	6862      	ldr	r2, [r4, #4]
 80101c8:	2100      	movs	r1, #0
 80101ca:	4628      	mov	r0, r5
 80101cc:	f7f0 f830 	bl	8000230 <memchr>
 80101d0:	b108      	cbz	r0, 80101d6 <_printf_i+0x1f2>
 80101d2:	1b40      	subs	r0, r0, r5
 80101d4:	6060      	str	r0, [r4, #4]
 80101d6:	6863      	ldr	r3, [r4, #4]
 80101d8:	6123      	str	r3, [r4, #16]
 80101da:	2300      	movs	r3, #0
 80101dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101e0:	e7a8      	b.n	8010134 <_printf_i+0x150>
 80101e2:	6923      	ldr	r3, [r4, #16]
 80101e4:	462a      	mov	r2, r5
 80101e6:	4649      	mov	r1, r9
 80101e8:	4640      	mov	r0, r8
 80101ea:	47d0      	blx	sl
 80101ec:	3001      	adds	r0, #1
 80101ee:	d0ab      	beq.n	8010148 <_printf_i+0x164>
 80101f0:	6823      	ldr	r3, [r4, #0]
 80101f2:	079b      	lsls	r3, r3, #30
 80101f4:	d413      	bmi.n	801021e <_printf_i+0x23a>
 80101f6:	68e0      	ldr	r0, [r4, #12]
 80101f8:	9b03      	ldr	r3, [sp, #12]
 80101fa:	4298      	cmp	r0, r3
 80101fc:	bfb8      	it	lt
 80101fe:	4618      	movlt	r0, r3
 8010200:	e7a4      	b.n	801014c <_printf_i+0x168>
 8010202:	2301      	movs	r3, #1
 8010204:	4632      	mov	r2, r6
 8010206:	4649      	mov	r1, r9
 8010208:	4640      	mov	r0, r8
 801020a:	47d0      	blx	sl
 801020c:	3001      	adds	r0, #1
 801020e:	d09b      	beq.n	8010148 <_printf_i+0x164>
 8010210:	3501      	adds	r5, #1
 8010212:	68e3      	ldr	r3, [r4, #12]
 8010214:	9903      	ldr	r1, [sp, #12]
 8010216:	1a5b      	subs	r3, r3, r1
 8010218:	42ab      	cmp	r3, r5
 801021a:	dcf2      	bgt.n	8010202 <_printf_i+0x21e>
 801021c:	e7eb      	b.n	80101f6 <_printf_i+0x212>
 801021e:	2500      	movs	r5, #0
 8010220:	f104 0619 	add.w	r6, r4, #25
 8010224:	e7f5      	b.n	8010212 <_printf_i+0x22e>
 8010226:	bf00      	nop
 8010228:	080105b5 	.word	0x080105b5
 801022c:	080105c6 	.word	0x080105c6

08010230 <memmove>:
 8010230:	4288      	cmp	r0, r1
 8010232:	b510      	push	{r4, lr}
 8010234:	eb01 0402 	add.w	r4, r1, r2
 8010238:	d902      	bls.n	8010240 <memmove+0x10>
 801023a:	4284      	cmp	r4, r0
 801023c:	4623      	mov	r3, r4
 801023e:	d807      	bhi.n	8010250 <memmove+0x20>
 8010240:	1e43      	subs	r3, r0, #1
 8010242:	42a1      	cmp	r1, r4
 8010244:	d008      	beq.n	8010258 <memmove+0x28>
 8010246:	f811 2b01 	ldrb.w	r2, [r1], #1
 801024a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801024e:	e7f8      	b.n	8010242 <memmove+0x12>
 8010250:	4402      	add	r2, r0
 8010252:	4601      	mov	r1, r0
 8010254:	428a      	cmp	r2, r1
 8010256:	d100      	bne.n	801025a <memmove+0x2a>
 8010258:	bd10      	pop	{r4, pc}
 801025a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801025e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010262:	e7f7      	b.n	8010254 <memmove+0x24>

08010264 <_realloc_r>:
 8010264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010268:	4680      	mov	r8, r0
 801026a:	4614      	mov	r4, r2
 801026c:	460e      	mov	r6, r1
 801026e:	b921      	cbnz	r1, 801027a <_realloc_r+0x16>
 8010270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010274:	4611      	mov	r1, r2
 8010276:	f7ff bb5b 	b.w	800f930 <_malloc_r>
 801027a:	b92a      	cbnz	r2, 8010288 <_realloc_r+0x24>
 801027c:	f7ff fc9c 	bl	800fbb8 <_free_r>
 8010280:	4625      	mov	r5, r4
 8010282:	4628      	mov	r0, r5
 8010284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010288:	f000 f81b 	bl	80102c2 <_malloc_usable_size_r>
 801028c:	4284      	cmp	r4, r0
 801028e:	4607      	mov	r7, r0
 8010290:	d802      	bhi.n	8010298 <_realloc_r+0x34>
 8010292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010296:	d812      	bhi.n	80102be <_realloc_r+0x5a>
 8010298:	4621      	mov	r1, r4
 801029a:	4640      	mov	r0, r8
 801029c:	f7ff fb48 	bl	800f930 <_malloc_r>
 80102a0:	4605      	mov	r5, r0
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d0ed      	beq.n	8010282 <_realloc_r+0x1e>
 80102a6:	42bc      	cmp	r4, r7
 80102a8:	4622      	mov	r2, r4
 80102aa:	4631      	mov	r1, r6
 80102ac:	bf28      	it	cs
 80102ae:	463a      	movcs	r2, r7
 80102b0:	f7ff fb08 	bl	800f8c4 <memcpy>
 80102b4:	4631      	mov	r1, r6
 80102b6:	4640      	mov	r0, r8
 80102b8:	f7ff fc7e 	bl	800fbb8 <_free_r>
 80102bc:	e7e1      	b.n	8010282 <_realloc_r+0x1e>
 80102be:	4635      	mov	r5, r6
 80102c0:	e7df      	b.n	8010282 <_realloc_r+0x1e>

080102c2 <_malloc_usable_size_r>:
 80102c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102c6:	1f18      	subs	r0, r3, #4
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	bfbc      	itt	lt
 80102cc:	580b      	ldrlt	r3, [r1, r0]
 80102ce:	18c0      	addlt	r0, r0, r3
 80102d0:	4770      	bx	lr
	...

080102d4 <_init>:
 80102d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d6:	bf00      	nop
 80102d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102da:	bc08      	pop	{r3}
 80102dc:	469e      	mov	lr, r3
 80102de:	4770      	bx	lr

080102e0 <_fini>:
 80102e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e2:	bf00      	nop
 80102e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102e6:	bc08      	pop	{r3}
 80102e8:	469e      	mov	lr, r3
 80102ea:	4770      	bx	lr
