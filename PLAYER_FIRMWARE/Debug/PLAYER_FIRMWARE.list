
PLAYER_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram1_low    00004000  20004000  20004000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .sram1_upper  0000c000  20008000  20008000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .sram2        00000000  20014000  20014000  00034000  2**0
                  CONTENTS
  3 .ccm_sram_all 00000000  20018000  20018000  00034000  2**0
                  CONTENTS
  4 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .text         0000b060  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000148  0800b240  0800b240  0001b240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0800b388  0800b388  00034000  2**0
                  CONTENTS
  8 .ARM          00000008  0800b388  0800b388  0001b388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0800b390  0800b390  00034000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  0800b390  0800b390  0001b390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000004  0800b394  0800b394  0001b394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000008c  20000000  0800b398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00002548  2000008c  0800b424  0002008c  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  200025d4  0800b424  000225d4  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003121e  00000000  00000000  00034030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000058dc  00000000  00000000  0006524e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000025f0  00000000  00000000  0006ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000023b8  00000000  00000000  0006d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00006db0  00000000  00000000  0006f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002ca52  00000000  00000000  00076288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012a553  00000000  00000000  000a2cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001cd22d  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a5bc  00000000  00000000  001cd280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b228 	.word	0x0800b228

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	0800b228 	.word	0x0800b228

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <braeden_main>:
#include <FreeRTOS.h>
#include <task.h>

void braeden_main(void *ignore) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 800052c:	f009 fd04 	bl	8009f38 <xTaskGetCurrentTaskHandle>
 8000530:	4603      	mov	r3, r0
 8000532:	4618      	mov	r0, r3
 8000534:	f009 f82e 	bl	8009594 <vTaskSuspend>
	vTaskDelete(NULL);
 8000538:	2000      	movs	r0, #0
 800053a:	f008 ff85 	bl	8009448 <vTaskDelete>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <bryant_main>:
#include <FreeRTOS.h>
#include <task.h>

extern uint8_t audio_buffer[49152]; //Can be recast to a more appropriate type.

void bryant_main(void *ignore) {
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]


	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 800054e:	f009 fcf3 	bl	8009f38 <xTaskGetCurrentTaskHandle>
 8000552:	4603      	mov	r3, r0
 8000554:	4618      	mov	r0, r3
 8000556:	f009 f81d 	bl	8009594 <vTaskSuspend>
	vTaskDelete(NULL);
 800055a:	2000      	movs	r0, #0
 800055c:	f008 ff74 	bl	8009448 <vTaskDelete>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <update_green_DMA_addr>:

//DAC_DHR12LD

size_t audio_dma_current_address;

void update_green_DMA_addr(TIM_HandleTypeDef *htim){
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	audio_dma_current_address = (audio_dma_current_address+1)%AUD_BUFFER_SIZE;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <update_green_DMA_addr+0x30>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	1c59      	adds	r1, r3, #1
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <update_green_DMA_addr+0x34>)
 8000578:	fba3 2301 	umull	r2, r3, r3, r1
 800057c:	0bda      	lsrs	r2, r3, #15
 800057e:	4613      	mov	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4413      	add	r3, r2
 8000584:	039b      	lsls	r3, r3, #14
 8000586:	1aca      	subs	r2, r1, r3
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <update_green_DMA_addr+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	200000a8 	.word	0x200000a8
 800059c:	aaaaaaab 	.word	0xaaaaaaab

080005a0 <jeremy_main>:


void jeremy_main(void *ignore) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_TIM_RegisterCallback(&AUDIO_44_1_KHZ_TIMER, HAL_TIM_PERIOD_ELAPSED_CB_ID, update_green_DMA_addr);
 80005a8:	4a17      	ldr	r2, [pc, #92]	; (8000608 <jeremy_main+0x68>)
 80005aa:	210e      	movs	r1, #14
 80005ac:	4817      	ldr	r0, [pc, #92]	; (800060c <jeremy_main+0x6c>)
 80005ae:	f005 ff2f 	bl	8006410 <HAL_TIM_RegisterCallback>

	HAL_TIM_Base_Start(&AUDIO_44_1_KHZ_TIMER);
 80005b2:	4816      	ldr	r0, [pc, #88]	; (800060c <jeremy_main+0x6c>)
 80005b4:	f005 fc70 	bl	8005e98 <HAL_TIM_Base_Start>

	HAL_DAC_Start(&AUD_GREEN_DAC, DAC_CHANNEL_1);
 80005b8:	2100      	movs	r1, #0
 80005ba:	4815      	ldr	r0, [pc, #84]	; (8000610 <jeremy_main+0x70>)
 80005bc:	f003 f93a 	bl	8003834 <HAL_DAC_Start>
	HAL_DAC_Start(&AUD_GREEN_DAC, DAC_CHANNEL_2);
 80005c0:	2110      	movs	r1, #16
 80005c2:	4813      	ldr	r0, [pc, #76]	; (8000610 <jeremy_main+0x70>)
 80005c4:	f003 f936 	bl	8003834 <HAL_DAC_Start>

	HAL_DAC_Start_DMA(&AUD_GREEN_DAC, DAC_CHANNEL_1, (uint32_t*)audio_buffer, (AUD_BUFFER_SIZE>>2)-1 , DAC_ALIGN_12B_L);
 80005c8:	2304      	movs	r3, #4
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <jeremy_main+0x74>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <jeremy_main+0x70>)
 80005d6:	f003 f999 	bl	800390c <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(&AUD_GREEN_DAC, DAC_CHANNEL_2, (uint32_t*)(audio_buffer+2), (AUD_BUFFER_SIZE>>2)-1 , DAC_ALIGN_12B_L);
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <jeremy_main+0x78>)
 80005dc:	2304      	movs	r3, #4
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80005e4:	2110      	movs	r1, #16
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <jeremy_main+0x70>)
 80005e8:	f003 f990 	bl	800390c <HAL_DAC_Start_DMA>

	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 80005ec:	f009 fca4 	bl	8009f38 <xTaskGetCurrentTaskHandle>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f008 ffce 	bl	8009594 <vTaskSuspend>
	vTaskDelete(NULL);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f008 ff25 	bl	8009448 <vTaskDelete>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08000569 	.word	0x08000569
 800060c:	2000061c 	.word	0x2000061c
 8000610:	200002c8 	.word	0x200002c8
 8000614:	20008000 	.word	0x20008000
 8000618:	20008002 	.word	0x20008002

0800061c <wyatt_main>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "jeremy.h"
//#include "wyatt.h"
void wyatt_main(void *ignore){}; //temporary measure
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f001 fec4 	bl	80023c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f89d 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 fea9 	bl	8001394 <MX_GPIO_Init>
  MX_DMA_Init();
 8000642:	f000 fe7d 	bl	8001340 <MX_DMA_Init>
  MX_DAC1_Init();
 8000646:	f000 fb05 	bl	8000c54 <MX_DAC1_Init>
  MX_DAC2_Init();
 800064a:	f000 fb47 	bl	8000cdc <MX_DAC2_Init>
  MX_DAC3_Init();
 800064e:	f000 fb7f 	bl	8000d50 <MX_DAC3_Init>
  MX_DAC4_Init();
 8000652:	f000 fbc1 	bl	8000dd8 <MX_DAC4_Init>
  MX_OPAMP1_Init();
 8000656:	f000 fc03 	bl	8000e60 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 800065a:	f000 fc27 	bl	8000eac <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 800065e:	f000 fc4b 	bl	8000ef8 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 8000662:	f000 fc6f 	bl	8000f44 <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 8000666:	f000 fc93 	bl	8000f90 <MX_OPAMP6_Init>
  MX_QUADSPI1_Init();
 800066a:	f000 fcb7 	bl	8000fdc <MX_QUADSPI1_Init>
  MX_SPI2_Init();
 800066e:	f000 fcdd 	bl	800102c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000672:	f000 fd19 	bl	80010a8 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000676:	f000 fd55 	bl	8001124 <MX_SPI4_Init>
  MX_UART5_Init();
 800067a:	f000 fdc7 	bl	800120c <MX_UART5_Init>
  MX_USART3_Init();
 800067e:	f000 fe11 	bl	80012a4 <MX_USART3_Init>
  MX_ADC1_Init();
 8000682:	f000 f8c5 	bl	8000810 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000686:	f000 f93b 	bl	8000900 <MX_ADC2_Init>
  MX_ADC3_Init();
 800068a:	f000 f99f 	bl	80009cc <MX_ADC3_Init>
  MX_ADC4_Init();
 800068e:	f000 fa15 	bl	8000abc <MX_ADC4_Init>
  MX_ADC5_Init();
 8000692:	f000 fa79 	bl	8000b88 <MX_ADC5_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000696:	f007 fd43 	bl	8008120 <MX_FATFS_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <main+0x74>
    Error_Handler();
 80006a0:	f000 ff62 	bl	8001568 <Error_Handler>
  }
  MX_TIM6_Init();
 80006a4:	f000 fd7c 	bl	80011a0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006a8:	f007 fe4a 	bl	8008340 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ac:	4a1f      	ldr	r2, [pc, #124]	; (800072c <main+0xfc>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	481f      	ldr	r0, [pc, #124]	; (8000730 <main+0x100>)
 80006b2:	f007 fe8f 	bl	80083d4 <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <main+0x104>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  static StaticTask_t threads[4];
  xTaskCreateStatic(wyatt_main, 	"wyatt_main_thread", 	1024, NULL, 5, (StackType_t *)wyatt_memspace, 	&threads[0]);
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <main+0x108>)
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <main+0x10c>)
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	2305      	movs	r3, #5
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ce:	491c      	ldr	r1, [pc, #112]	; (8000740 <main+0x110>)
 80006d0:	481c      	ldr	r0, [pc, #112]	; (8000744 <main+0x114>)
 80006d2:	f008 fd01 	bl	80090d8 <xTaskCreateStatic>
  xTaskCreateStatic(jeremy_main, 	"jeremy_main_thread", 	1024, NULL, 5, (StackType_t *)jeremy_memspace, 	&threads[1]);
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <main+0x118>)
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <main+0x11c>)
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2305      	movs	r3, #5
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e8:	4919      	ldr	r1, [pc, #100]	; (8000750 <main+0x120>)
 80006ea:	481a      	ldr	r0, [pc, #104]	; (8000754 <main+0x124>)
 80006ec:	f008 fcf4 	bl	80090d8 <xTaskCreateStatic>
  xTaskCreateStatic(bryant_main, 	"bryant_main_thread", 	1024, NULL, 5, (StackType_t *)bryant_memspace, 	&threads[2]);
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <main+0x128>)
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <main+0x12c>)
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	2305      	movs	r3, #5
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000702:	4917      	ldr	r1, [pc, #92]	; (8000760 <main+0x130>)
 8000704:	4817      	ldr	r0, [pc, #92]	; (8000764 <main+0x134>)
 8000706:	f008 fce7 	bl	80090d8 <xTaskCreateStatic>
  xTaskCreateStatic(braeden_main, 	"braeden_main_thread", 	1024, NULL, 5, (StackType_t *)braeden_memspace, &threads[3]);
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <main+0x138>)
 800070c:	9302      	str	r3, [sp, #8]
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <main+0x13c>)
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	2305      	movs	r3, #5
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2300      	movs	r3, #0
 8000718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800071c:	4914      	ldr	r1, [pc, #80]	; (8000770 <main+0x140>)
 800071e:	4815      	ldr	r0, [pc, #84]	; (8000774 <main+0x144>)
 8000720:	f008 fcda 	bl	80090d8 <xTaskCreateStatic>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000724:	f007 fe30 	bl	8008388 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	e7fe      	b.n	8000728 <main+0xf8>
 800072a:	bf00      	nop
 800072c:	0800b2b4 	.word	0x0800b2b4
 8000730:	08001535 	.word	0x08001535
 8000734:	200007dc 	.word	0x200007dc
 8000738:	200007e0 	.word	0x200007e0
 800073c:	20004000 	.word	0x20004000
 8000740:	0800b24c 	.word	0x0800b24c
 8000744:	0800061d 	.word	0x0800061d
 8000748:	2000089c 	.word	0x2000089c
 800074c:	20007000 	.word	0x20007000
 8000750:	0800b260 	.word	0x0800b260
 8000754:	080005a1 	.word	0x080005a1
 8000758:	20000958 	.word	0x20000958
 800075c:	20005000 	.word	0x20005000
 8000760:	0800b274 	.word	0x0800b274
 8000764:	08000547 	.word	0x08000547
 8000768:	20000a14 	.word	0x20000a14
 800076c:	20006000 	.word	0x20006000
 8000770:	0800b288 	.word	0x0800b288
 8000774:	08000525 	.word	0x08000525

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	2238      	movs	r2, #56	; 0x38
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00a fc84 	bl	800b094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800079a:	2000      	movs	r0, #0
 800079c:	f004 f930 	bl	8004a00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	2303      	movs	r3, #3
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80007b6:	2314      	movs	r3, #20
 80007b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80007be:	2304      	movs	r3, #4
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 fa7e 	bl	8004ccc <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007d6:	f000 fec7 	bl	8001568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2303      	movs	r3, #3
 80007e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2104      	movs	r1, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 fd7c 	bl	80052f0 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007fe:	f000 feb3 	bl	8001568 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000802:	f004 ff7b 	bl	80056fc <HAL_RCC_EnableCSS>
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2220      	movs	r2, #32
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f00a fc33 	bl	800b094 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000830:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000834:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000838:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800083c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000844:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800084a:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000858:	2204      	movs	r2, #4
 800085a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800085e:	2200      	movs	r2, #0
 8000860:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000864:	2200      	movs	r2, #0
 8000866:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800086a:	2201      	movs	r2, #1
 800086c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800087e:	2200      	movs	r2, #0
 8000880:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000898:	4817      	ldr	r0, [pc, #92]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800089a:	f001 ff9f 	bl	80027dc <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008a4:	f000 fe60 	bl	8001568 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <MX_ADC1_Init+0xe8>)
 80008b4:	f002 fdb4 	bl	8003420 <HAL_ADCEx_MultiModeConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008be:	f000 fe53 	bl	8001568 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_ADC1_Init+0xec>)
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c6:	2306      	movs	r3, #6
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ce:	237f      	movs	r3, #127	; 0x7f
 80008d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_ADC1_Init+0xe8>)
 80008e0:	f002 f938 	bl	8002b54 <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008ea:	f000 fe3d 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000ac 	.word	0x200000ac
 80008fc:	08600004 	.word	0x08600004

08000900 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2220      	movs	r2, #32
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f00a fbc1 	bl	800b094 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000912:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <MX_ADC2_Init+0xc0>)
 8000914:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <MX_ADC2_Init+0xc4>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_ADC2_Init+0xc0>)
 800091a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800091e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_ADC2_Init+0xc0>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <MX_ADC2_Init+0xc0>)
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_ADC2_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000932:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <MX_ADC2_Init+0xc0>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_ADC2_Init+0xc0>)
 800093a:	2204      	movs	r2, #4
 800093c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_ADC2_Init+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_ADC2_Init+0xc0>)
 8000946:	2200      	movs	r2, #0
 8000948:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_ADC2_Init+0xc0>)
 800094c:	2201      	movs	r2, #1
 800094e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_ADC2_Init+0xc0>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_ADC2_Init+0xc0>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_ADC2_Init+0xc0>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_ADC2_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_ADC2_Init+0xc0>)
 800096e:	2200      	movs	r2, #0
 8000970:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_ADC2_Init+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_ADC2_Init+0xc0>)
 800097c:	f001 ff2e 	bl	80027dc <HAL_ADC_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000986:	f000 fdef 	bl	8001568 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_ADC2_Init+0xc8>)
 800098c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098e:	2306      	movs	r3, #6
 8000990:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000996:	237f      	movs	r3, #127	; 0x7f
 8000998:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800099a:	2304      	movs	r3, #4
 800099c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_ADC2_Init+0xc0>)
 80009a8:	f002 f8d4 	bl	8002b54 <HAL_ADC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80009b2:	f000 fdd9 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000118 	.word	0x20000118
 80009c4:	50000100 	.word	0x50000100
 80009c8:	10c00010 	.word	0x10c00010

080009cc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	; 0x30
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2220      	movs	r2, #32
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f00a fb55 	bl	800b094 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 80009ec:	4a31      	ldr	r2, [pc, #196]	; (8000ab4 <MX_ADC3_Init+0xe8>)
 80009ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009f0:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 80009f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009f8:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009fe:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000a04:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a52:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a54:	f001 fec2 	bl	80027dc <HAL_ADC_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000a5e:	f000 fd83 	bl	8001568 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a6e:	f002 fcd7 	bl	8003420 <HAL_ADCEx_MultiModeConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000a78:	f000 fd76 	bl	8001568 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_ADC3_Init+0xec>)
 8000a7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a80:	2306      	movs	r3, #6
 8000a82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a88:	237f      	movs	r3, #127	; 0x7f
 8000a8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_ADC3_Init+0xe4>)
 8000a9a:	f002 f85b 	bl	8002b54 <HAL_ADC_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000aa4:	f000 fd60 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000184 	.word	0x20000184
 8000ab4:	50000400 	.word	0x50000400
 8000ab8:	21800100 	.word	0x21800100

08000abc <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f00a fae3 	bl	800b094 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000ace:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000ad0:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <MX_ADC4_Init+0xc4>)
 8000ad2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000ad6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ada:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aee:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000af6:	2204      	movs	r2, #4
 8000af8:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000afa:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000b36:	4811      	ldr	r0, [pc, #68]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000b38:	f001 fe50 	bl	80027dc <HAL_ADC_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000b42:	f000 fd11 	bl	8001568 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_ADC4_Init+0xc8>)
 8000b48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b52:	237f      	movs	r3, #127	; 0x7f
 8000b54:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b56:	2304      	movs	r3, #4
 8000b58:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000b5e:	463b      	mov	r3, r7
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <MX_ADC4_Init+0xc0>)
 8000b64:	f001 fff6 	bl	8002b54 <HAL_ADC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000b6e:	f000 fcfb 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200001f0 	.word	0x200001f0
 8000b80:	50000500 	.word	0x50000500
 8000b84:	25b00200 	.word	0x25b00200

08000b88 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2220      	movs	r2, #32
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f00a fa7d 	bl	800b094 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000b9c:	4a2b      	ldr	r2, [pc, #172]	; (8000c4c <MX_ADC5_Init+0xc4>)
 8000b9e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000ba2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ba6:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000c02:	4811      	ldr	r0, [pc, #68]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000c04:	f001 fdea 	bl	80027dc <HAL_ADC_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000c0e:	f000 fcab 	bl	8001568 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_ADC5_Init+0xc8>)
 8000c14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c16:	2306      	movs	r3, #6
 8000c18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c1e:	237f      	movs	r3, #127	; 0x7f
 8000c20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c22:	2304      	movs	r3, #4
 8000c24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_ADC5_Init+0xc0>)
 8000c30:	f001 ff90 	bl	8002b54 <HAL_ADC_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000c3a:	f000 fc95 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000025c 	.word	0x2000025c
 8000c4c:	50000600 	.word	0x50000600
 8000c50:	08600004 	.word	0x08600004

08000c54 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2230      	movs	r2, #48	; 0x30
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f00a fa17 	bl	800b094 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_DAC1_Init+0x80>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <MX_DAC1_Init+0x84>)
 8000c6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c6c:	4819      	ldr	r0, [pc, #100]	; (8000cd4 <MX_DAC1_Init+0x80>)
 8000c6e:	f002 fdbf 	bl	80037f0 <HAL_DAC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c78:	f000 fc76 	bl	8001568 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000c8c:	231e      	movs	r3, #30
 8000c8e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <MX_DAC1_Init+0x80>)
 8000ca8:	f002 ff82 	bl	8003bb0 <HAL_DAC_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000cb2:	f000 fc59 	bl	8001568 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2210      	movs	r2, #16
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_DAC1_Init+0x80>)
 8000cbe:	f002 ff77 	bl	8003bb0 <HAL_DAC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000cc8:	f000 fc4e 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200002c8 	.word	0x200002c8
 8000cd8:	50000800 	.word	0x50000800

08000cdc <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	; 0x30
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2230      	movs	r2, #48	; 0x30
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00a f9d3 	bl	800b094 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_DAC2_Init+0x6c>)
 8000cf0:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <MX_DAC2_Init+0x70>)
 8000cf2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000cf4:	4814      	ldr	r0, [pc, #80]	; (8000d48 <MX_DAC2_Init+0x6c>)
 8000cf6:	f002 fd7b 	bl	80037f0 <HAL_DAC_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000d00:	f000 fc32 	bl	8001568 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d04:	2302      	movs	r3, #2
 8000d06:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <MX_DAC2_Init+0x6c>)
 8000d30:	f002 ff3e 	bl	8003bb0 <HAL_DAC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000d3a:	f000 fc15 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3730      	adds	r7, #48	; 0x30
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200002dc 	.word	0x200002dc
 8000d4c:	50000c00 	.word	0x50000c00

08000d50 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2230      	movs	r2, #48	; 0x30
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f00a f999 	bl	800b094 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <MX_DAC3_Init+0x80>)
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <MX_DAC3_Init+0x84>)
 8000d66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000d68:	4819      	ldr	r0, [pc, #100]	; (8000dd0 <MX_DAC3_Init+0x80>)
 8000d6a:	f002 fd41 	bl	80037f0 <HAL_DAC_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000d74:	f000 fbf8 	bl	8001568 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000d90:	2302      	movs	r3, #2
 8000d92:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4619      	mov	r1, r3
 8000da2:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <MX_DAC3_Init+0x80>)
 8000da4:	f002 ff04 	bl	8003bb0 <HAL_DAC_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000dae:	f000 fbdb 	bl	8001568 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	2210      	movs	r2, #16
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_DAC3_Init+0x80>)
 8000dba:	f002 fef9 	bl	8003bb0 <HAL_DAC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000dc4:	f000 fbd0 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200002f0 	.word	0x200002f0
 8000dd4:	50001000 	.word	0x50001000

08000dd8 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2230      	movs	r2, #48	; 0x30
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f00a f955 	bl	800b094 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_DAC4_Init+0x80>)
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <MX_DAC4_Init+0x84>)
 8000dee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8000df0:	4819      	ldr	r0, [pc, #100]	; (8000e58 <MX_DAC4_Init+0x80>)
 8000df2:	f002 fcfd 	bl	80037f0 <HAL_DAC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8000dfc:	f000 fbb4 	bl	8001568 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000e00:	2302      	movs	r3, #2
 8000e02:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <MX_DAC4_Init+0x80>)
 8000e2c:	f002 fec0 	bl	8003bb0 <HAL_DAC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8000e36:	f000 fb97 	bl	8001568 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2210      	movs	r2, #16
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_DAC4_Init+0x80>)
 8000e42:	f002 feb5 	bl	8003bb0 <HAL_DAC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_DAC4_Init+0x78>
  {
    Error_Handler();
 8000e4c:	f000 fb8c 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3730      	adds	r7, #48	; 0x30
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000304 	.word	0x20000304
 8000e5c:	50001400 	.word	0x50001400

08000e60 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_OPAMP1_Init+0x44>)
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <MX_OPAMP1_Init+0x48>)
 8000e68:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_OPAMP1_Init+0x44>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_OPAMP1_Init+0x44>)
 8000e72:	2260      	movs	r2, #96	; 0x60
 8000e74:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_OPAMP1_Init+0x44>)
 8000e78:	220c      	movs	r2, #12
 8000e7a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_OPAMP1_Init+0x44>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_OPAMP1_Init+0x44>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_OPAMP1_Init+0x44>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_OPAMP1_Init+0x44>)
 8000e90:	f003 fce6 	bl	8004860 <HAL_OPAMP_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000e9a:	f000 fb65 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000378 	.word	0x20000378
 8000ea8:	40010300 	.word	0x40010300

08000eac <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_OPAMP3_Init+0x44>)
 8000eb2:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <MX_OPAMP3_Init+0x48>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_OPAMP3_Init+0x44>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_OPAMP3_Init+0x44>)
 8000ebe:	2260      	movs	r2, #96	; 0x60
 8000ec0:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_OPAMP3_Init+0x44>)
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_OPAMP3_Init+0x44>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_OPAMP3_Init+0x44>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_OPAMP3_Init+0x44>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_OPAMP3_Init+0x44>)
 8000edc:	f003 fcc0 	bl	8004860 <HAL_OPAMP_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000ee6:	f000 fb3f 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200003b4 	.word	0x200003b4
 8000ef4:	40010308 	.word	0x40010308

08000ef8 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_OPAMP4_Init+0x44>)
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <MX_OPAMP4_Init+0x48>)
 8000f00:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_OPAMP4_Init+0x44>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_OPAMP4_Init+0x44>)
 8000f0a:	2260      	movs	r2, #96	; 0x60
 8000f0c:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_OPAMP4_Init+0x44>)
 8000f10:	220c      	movs	r2, #12
 8000f12:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_OPAMP4_Init+0x44>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_OPAMP4_Init+0x44>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_OPAMP4_Init+0x44>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_OPAMP4_Init+0x44>)
 8000f28:	f003 fc9a 	bl	8004860 <HAL_OPAMP_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8000f32:	f000 fb19 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200003f0 	.word	0x200003f0
 8000f40:	4001030c 	.word	0x4001030c

08000f44 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_OPAMP5_Init+0x44>)
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <MX_OPAMP5_Init+0x48>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_OPAMP5_Init+0x44>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_OPAMP5_Init+0x44>)
 8000f56:	2260      	movs	r2, #96	; 0x60
 8000f58:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_OPAMP5_Init+0x44>)
 8000f5c:	220c      	movs	r2, #12
 8000f5e:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_OPAMP5_Init+0x44>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_OPAMP5_Init+0x44>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_OPAMP5_Init+0x44>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_OPAMP5_Init+0x44>)
 8000f74:	f003 fc74 	bl	8004860 <HAL_OPAMP_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 8000f7e:	f000 faf3 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000042c 	.word	0x2000042c
 8000f8c:	40010310 	.word	0x40010310

08000f90 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_OPAMP6_Init+0x44>)
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <MX_OPAMP6_Init+0x48>)
 8000f98:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_OPAMP6_Init+0x44>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_OPAMP6_Init+0x44>)
 8000fa2:	2260      	movs	r2, #96	; 0x60
 8000fa4:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_OPAMP6_Init+0x44>)
 8000fa8:	220c      	movs	r2, #12
 8000faa:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_OPAMP6_Init+0x44>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_OPAMP6_Init+0x44>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_OPAMP6_Init+0x44>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_OPAMP6_Init+0x44>)
 8000fc0:	f003 fc4e 	bl	8004860 <HAL_OPAMP_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 8000fca:	f000 facd 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000468 	.word	0x20000468
 8000fd8:	40010314 	.word	0x40010314

08000fdc <MX_QUADSPI1_Init>:
  * @brief QUADSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  /* QUADSPI1 parameter configuration*/
  hqspi1.Instance = QUADSPI;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_QUADSPI1_Init+0x48>)
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <MX_QUADSPI1_Init+0x4c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 1;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_QUADSPI1_Init+0x48>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <MX_QUADSPI1_Init+0x48>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_QUADSPI1_Init+0x48>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 25;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_QUADSPI1_Init+0x48>)
 8000ffa:	2219      	movs	r2, #25
 8000ffc:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_QUADSPI1_Init+0x48>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_3;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_QUADSPI1_Init+0x48>)
 8001006:	2201      	movs	r2, #1
 8001008:	619a      	str	r2, [r3, #24]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_QUADSPI1_Init+0x48>)
 800100c:	2240      	movs	r2, #64	; 0x40
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_QUADSPI1_Init+0x48>)
 8001012:	f003 fd99 	bl	8004b48 <HAL_QSPI_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_QUADSPI1_Init+0x44>
  {
    Error_Handler();
 800101c:	f000 faa4 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200004a4 	.word	0x200004a4
 8001028:	a0001000 	.word	0xa0001000

0800102c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <MX_SPI2_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800103c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001046:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800104a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_SPI2_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_SPI2_Init+0x74>)
 800105a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800105e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001062:	2208      	movs	r2, #8
 8001064:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_SPI2_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_SPI2_Init+0x74>)
 800107a:	2207      	movs	r2, #7
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_SPI2_Init+0x74>)
 8001086:	2208      	movs	r2, #8
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_SPI2_Init+0x74>)
 800108c:	f004 fdf4 	bl	8005c78 <HAL_SPI_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001096:	f000 fa67 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200004f0 	.word	0x200004f0
 80010a4:	40003800 	.word	0x40003800

080010a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <MX_SPI3_Init+0x74>)
 80010ae:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <MX_SPI3_Init+0x78>)
 80010b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_SPI3_Init+0x74>)
 80010b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_SPI3_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_SPI3_Init+0x74>)
 80010c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_SPI3_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_SPI3_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_SPI3_Init+0x74>)
 80010d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_SPI3_Init+0x74>)
 80010de:	2208      	movs	r2, #8
 80010e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_SPI3_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_SPI3_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_SPI3_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_SPI3_Init+0x74>)
 80010f6:	2207      	movs	r2, #7
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_SPI3_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_SPI3_Init+0x74>)
 8001102:	2208      	movs	r2, #8
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_SPI3_Init+0x74>)
 8001108:	f004 fdb6 	bl	8005c78 <HAL_SPI_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001112:	f000 fa29 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000554 	.word	0x20000554
 8001120:	40003c00 	.word	0x40003c00

08001124 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_SPI4_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <MX_SPI4_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_SPI4_Init+0x74>)
 8001130:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001134:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_SPI4_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_SPI4_Init+0x74>)
 800113e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001142:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_SPI4_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_SPI4_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_SPI4_Init+0x74>)
 8001152:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001156:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_SPI4_Init+0x74>)
 800115a:	2208      	movs	r2, #8
 800115c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_SPI4_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_SPI4_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_SPI4_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_SPI4_Init+0x74>)
 8001172:	2207      	movs	r2, #7
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_SPI4_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_SPI4_Init+0x74>)
 800117e:	2208      	movs	r2, #8
 8001180:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_SPI4_Init+0x74>)
 8001184:	f004 fd78 	bl	8005c78 <HAL_SPI_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800118e:	f000 f9eb 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200005b8 	.word	0x200005b8
 800119c:	40013c00 	.word	0x40013c00

080011a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_TIM6_Init+0x64>)
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <MX_TIM6_Init+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_TIM6_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_TIM6_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3627;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_TIM6_Init+0x64>)
 80011c4:	f640 622b 	movw	r2, #3627	; 0xe2b
 80011c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_TIM6_Init+0x64>)
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <MX_TIM6_Init+0x64>)
 80011d2:	f004 fdfd 	bl	8005dd0 <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011dc:	f000 f9c4 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011e0:	2320      	movs	r3, #32
 80011e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_TIM6_Init+0x64>)
 80011ee:	f005 fb99 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011f8:	f000 f9b6 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	2000061c 	.word	0x2000061c
 8001208:	40001000 	.word	0x40001000

0800120c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <MX_UART5_Init+0x90>)
 8001212:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <MX_UART5_Init+0x94>)
 8001214:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_UART5_Init+0x90>)
 8001218:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800121c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_UART5_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_UART5_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_UART5_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_UART5_Init+0x90>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_UART5_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_UART5_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_UART5_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_UART5_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_UART5_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001254:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_UART5_Init+0x90>)
 8001256:	f005 fc4b 	bl	8006af0 <HAL_UART_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001260:	f000 f982 	bl	8001568 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_UART5_Init+0x90>)
 8001268:	f006 f9e6 	bl	8007638 <HAL_UARTEx_SetTxFifoThreshold>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001272:	f000 f979 	bl	8001568 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001276:	2100      	movs	r1, #0
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <MX_UART5_Init+0x90>)
 800127a:	f006 fa1b 	bl	80076b4 <HAL_UARTEx_SetRxFifoThreshold>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001284:	f000 f970 	bl	8001568 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_UART5_Init+0x90>)
 800128a:	f006 f99c 	bl	80075c6 <HAL_UARTEx_DisableFifoMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001294:	f000 f968 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200006e8 	.word	0x200006e8
 80012a0:	40005000 	.word	0x40005000

080012a4 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <MX_USART3_Init+0x90>)
 80012aa:	4a23      	ldr	r2, [pc, #140]	; (8001338 <MX_USART3_Init+0x94>)
 80012ac:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_USART3_Init+0x90>)
 80012b0:	4a22      	ldr	r2, [pc, #136]	; (800133c <MX_USART3_Init+0x98>)
 80012b2:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_USART3_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_USART3_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_USART3_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_USART3_Init+0x90>)
 80012c8:	220c      	movs	r2, #12
 80012ca:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_USART3_Init+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_USART3_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_USART3_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_USART3_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_USART3_Init+0x90>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80012ea:	4812      	ldr	r0, [pc, #72]	; (8001334 <MX_USART3_Init+0x90>)
 80012ec:	f006 fa6e 	bl	80077cc <HAL_USART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART3_Init+0x56>
  {
    Error_Handler();
 80012f6:	f000 f937 	bl	8001568 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_USART3_Init+0x90>)
 80012fe:	f006 fe49 	bl	8007f94 <HAL_USARTEx_SetTxFifoThreshold>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART3_Init+0x68>
  {
    Error_Handler();
 8001308:	f000 f92e 	bl	8001568 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <MX_USART3_Init+0x90>)
 8001310:	f006 fe7e 	bl	8008010 <HAL_USARTEx_SetRxFifoThreshold>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART3_Init+0x7a>
  {
    Error_Handler();
 800131a:	f000 f925 	bl	8001568 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_USART3_Init+0x90>)
 8001320:	f006 fdff 	bl	8007f22 <HAL_USARTEx_DisableFifoMode>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART3_Init+0x8a>
  {
    Error_Handler();
 800132a:	f000 f91d 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000077c 	.word	0x2000077c
 8001338:	40004800 	.word	0x40004800
 800133c:	007a1200 	.word	0x007a1200

08001340 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_DMA_Init+0x50>)
 8001348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <MX_DMA_Init+0x50>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6493      	str	r3, [r2, #72]	; 0x48
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_DMA_Init+0x50>)
 8001354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_DMA_Init+0x50>)
 8001360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <MX_DMA_Init+0x50>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6493      	str	r3, [r2, #72]	; 0x48
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_DMA_Init+0x50>)
 800136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	200b      	movs	r0, #11
 800137c:	f002 fa10 	bl	80037a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001380:	200b      	movs	r0, #11
 8001382:	f002 fa27 	bl	80037d4 <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	; 0x30
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013aa:	4b5d      	ldr	r3, [pc, #372]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a5c      	ldr	r2, [pc, #368]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013b0:	f043 0310 	orr.w	r3, r3, #16
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b5a      	ldr	r3, [pc, #360]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b57      	ldr	r3, [pc, #348]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a56      	ldr	r2, [pc, #344]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b54      	ldr	r3, [pc, #336]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013da:	4b51      	ldr	r3, [pc, #324]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a50      	ldr	r2, [pc, #320]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <MX_GPIO_Init+0x18c>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4b48      	ldr	r3, [pc, #288]	; (8001520 <MX_GPIO_Init+0x18c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b45      	ldr	r3, [pc, #276]	; (8001520 <MX_GPIO_Init+0x18c>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a44      	ldr	r2, [pc, #272]	; (8001520 <MX_GPIO_Init+0x18c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <MX_GPIO_Init+0x18c>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <MX_GPIO_Init+0x18c>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a3e      	ldr	r2, [pc, #248]	; (8001520 <MX_GPIO_Init+0x18c>)
 8001428:	f043 0320 	orr.w	r3, r3, #32
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <MX_GPIO_Init+0x18c>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0320 	and.w	r3, r3, #32
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_NRST_GPIO_Port, TFT_NRST_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2140      	movs	r1, #64	; 0x40
 800143e:	4839      	ldr	r0, [pc, #228]	; (8001524 <MX_GPIO_Init+0x190>)
 8001440:	f003 f9f6 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 7101 	mov.w	r1, #516	; 0x204
 800144a:	4837      	ldr	r0, [pc, #220]	; (8001528 <MX_GPIO_Init+0x194>)
 800144c:	f003 f9f0 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f240 210b 	movw	r1, #523	; 0x20b
 8001456:	4835      	ldr	r0, [pc, #212]	; (800152c <MX_GPIO_Init+0x198>)
 8001458:	f003 f9ea 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_SPI_DC_GPIO_Port, TFT_SPI_DC_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2101      	movs	r1, #1
 8001460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001464:	f003 f9e4 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_NRST_Pin */
  GPIO_InitStruct.Pin = TFT_NRST_Pin;
 8001468:	2340      	movs	r3, #64	; 0x40
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_NRST_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4829      	ldr	r0, [pc, #164]	; (8001524 <MX_GPIO_Init+0x190>)
 8001480:	f003 f854 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : BRIDGE_CLK_Pin */
  GPIO_InitStruct.Pin = BRIDGE_CLK_Pin;
 8001484:	2302      	movs	r3, #2
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001494:	2304      	movs	r3, #4
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BRIDGE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4824      	ldr	r0, [pc, #144]	; (8001530 <MX_GPIO_Init+0x19c>)
 80014a0:	f003 f844 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : AUD_ORANGE_R_OUTPUT_EN_Pin AUD_ORANGE_L_OUTPUT_EN_Pin */
  GPIO_InitStruct.Pin = AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin;
 80014a4:	f44f 7301 	mov.w	r3, #516	; 0x204
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	481a      	ldr	r0, [pc, #104]	; (8001528 <MX_GPIO_Init+0x194>)
 80014be:	f003 f835 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : MICRO_SD_CS_Pin AUD_GREEN_L_OUTPUT_EN_Pin AUD_GREEN_R_OUTPUT_EN_Pin ROT_B_Pin */
  GPIO_InitStruct.Pin = MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin;
 80014c2:	f240 230b 	movw	r3, #523	; 0x20b
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4814      	ldr	r0, [pc, #80]	; (800152c <MX_GPIO_Init+0x198>)
 80014dc:	f003 f826 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_A_Pin ROT_S2_Pin ROT_S1_Pin ROT_C_Pin */
  GPIO_InitStruct.Pin = ROT_A_Pin|ROT_S2_Pin|ROT_S1_Pin|ROT_C_Pin;
 80014e0:	2374      	movs	r3, #116	; 0x74
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <MX_GPIO_Init+0x198>)
 80014f4:	f003 f81a 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_SPI_DC_Pin */
  GPIO_InitStruct.Pin = TFT_SPI_DC_Pin;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_SPI_DC_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f003 f80b 	bl	800452c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	; 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400
 8001528:	48001400 	.word	0x48001400
 800152c:	48000800 	.word	0x48000800
 8001530:	48000c00 	.word	0x48000c00

08001534 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800153c:	2001      	movs	r0, #1
 800153e:	f006 ffdb 	bl	80084f8 <osDelay>
 8001542:	e7fb      	b.n	800153c <StartDefaultTask+0x8>

08001544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001556:	f000 ff4d 	bl	80023f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40001400 	.word	0x40001400

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	e7fe      	b.n	8001570 <Error_Handler+0x8>
	...

08001574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_MspInit+0x4c>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <HAL_MspInit+0x4c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6613      	str	r3, [r2, #96]	; 0x60
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_MspInit+0x4c>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_MspInit+0x4c>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_MspInit+0x4c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6593      	str	r3, [r2, #88]	; 0x58
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_MspInit+0x4c>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	210f      	movs	r1, #15
 80015ae:	f06f 0001 	mvn.w	r0, #1
 80015b2:	f002 f8f5 	bl	80037a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000

080015c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0a8      	sub	sp, #160	; 0xa0
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015e0:	2254      	movs	r2, #84	; 0x54
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f009 fd55 	bl	800b094 <memset>
  if(hadc->Instance==ADC1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015f2:	d141      	bne.n	8001678 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015f8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001600:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001604:	4618      	mov	r0, r3
 8001606:	f004 f8e9 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001610:	f7ff ffaa 	bl	8001568 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001614:	4b84      	ldr	r3, [pc, #528]	; (8001828 <HAL_ADC_MspInit+0x264>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a83      	ldr	r2, [pc, #524]	; (8001828 <HAL_ADC_MspInit+0x264>)
 800161c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800161e:	4b82      	ldr	r3, [pc, #520]	; (8001828 <HAL_ADC_MspInit+0x264>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d10b      	bne.n	800163e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001626:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a80      	ldr	r2, [pc, #512]	; (800182c <HAL_ADC_MspInit+0x268>)
 800162c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b7e      	ldr	r3, [pc, #504]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
 800163c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b7b      	ldr	r3, [pc, #492]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a7a      	ldr	r2, [pc, #488]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b78      	ldr	r3, [pc, #480]	; (800182c <HAL_ADC_MspInit+0x268>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
 8001654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AUD_GRN_MIC_POSTAMP_Pin;
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165c:	2303      	movs	r3, #3
 800165e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_GRN_MIC_POSTAMP_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800166c:	4619      	mov	r1, r3
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f002 ff5b 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001676:	e165      	b.n	8001944 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a6c      	ldr	r2, [pc, #432]	; (8001830 <HAL_ADC_MspInit+0x26c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d141      	bne.n	8001706 <HAL_ADC_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001686:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001688:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800168c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001692:	4618      	mov	r0, r3
 8001694:	f004 f8a2 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_ADC_MspInit+0xde>
      Error_Handler();
 800169e:	f7ff ff63 	bl	8001568 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016a2:	4b61      	ldr	r3, [pc, #388]	; (8001828 <HAL_ADC_MspInit+0x264>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a5f      	ldr	r2, [pc, #380]	; (8001828 <HAL_ADC_MspInit+0x264>)
 80016aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016ac:	4b5e      	ldr	r3, [pc, #376]	; (8001828 <HAL_ADC_MspInit+0x264>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10b      	bne.n	80016cc <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016b4:	4b5d      	ldr	r3, [pc, #372]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	4a5c      	ldr	r2, [pc, #368]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c0:	4b5a      	ldr	r3, [pc, #360]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a56      	ldr	r2, [pc, #344]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b54      	ldr	r3, [pc, #336]	; (800182c <HAL_ADC_MspInit+0x268>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_S_Pin;
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_S_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f002 ff14 	bl	800452c <HAL_GPIO_Init>
}
 8001704:	e11e      	b.n	8001944 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC3)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a4a      	ldr	r2, [pc, #296]	; (8001834 <HAL_ADC_MspInit+0x270>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d142      	bne.n	8001796 <HAL_ADC_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001716:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800171a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001722:	4618      	mov	r0, r3
 8001724:	f004 f85a 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_ADC_MspInit+0x16e>
      Error_Handler();
 800172e:	f7ff ff1b 	bl	8001568 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_ADC_MspInit+0x274>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	4a3f      	ldr	r2, [pc, #252]	; (8001838 <HAL_ADC_MspInit+0x274>)
 800173a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800173c:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <HAL_ADC_MspInit+0x274>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d10b      	bne.n	800175c <HAL_ADC_MspInit+0x198>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001744:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	4a38      	ldr	r2, [pc, #224]	; (800182c <HAL_ADC_MspInit+0x268>)
 800174a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_ADC_MspInit+0x268>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	4a32      	ldr	r2, [pc, #200]	; (800182c <HAL_ADC_MspInit+0x268>)
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_ADC_MspInit+0x268>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	623b      	str	r3, [r7, #32]
 8001772:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_R1_Pin;
 8001774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001778:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177c:	2303      	movs	r3, #3
 800177e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_R1_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800178c:	4619      	mov	r1, r3
 800178e:	482b      	ldr	r0, [pc, #172]	; (800183c <HAL_ADC_MspInit+0x278>)
 8001790:	f002 fecc 	bl	800452c <HAL_GPIO_Init>
}
 8001794:	e0d6      	b.n	8001944 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC4)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a29      	ldr	r2, [pc, #164]	; (8001840 <HAL_ADC_MspInit+0x27c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d151      	bne.n	8001844 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80017a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80017a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017b2:	4618      	mov	r0, r3
 80017b4:	f004 f812 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 80017be:	f7ff fed3 	bl	8001568 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_ADC_MspInit+0x274>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <HAL_ADC_MspInit+0x274>)
 80017ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_ADC_MspInit+0x274>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10b      	bne.n	80017ec <HAL_ADC_MspInit+0x228>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_ADC_MspInit+0x268>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_ADC_MspInit+0x268>)
 80017da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_ADC_MspInit+0x268>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_ADC_MspInit+0x268>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_ADC_MspInit+0x268>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_ADC_MspInit+0x268>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_T_Pin;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180c:	2303      	movs	r3, #3
 800180e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_T_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800181c:	4619      	mov	r1, r3
 800181e:	4807      	ldr	r0, [pc, #28]	; (800183c <HAL_ADC_MspInit+0x278>)
 8001820:	f002 fe84 	bl	800452c <HAL_GPIO_Init>
}
 8001824:	e08e      	b.n	8001944 <HAL_ADC_MspInit+0x380>
 8001826:	bf00      	nop
 8001828:	20000ad0 	.word	0x20000ad0
 800182c:	40021000 	.word	0x40021000
 8001830:	50000100 	.word	0x50000100
 8001834:	50000400 	.word	0x50000400
 8001838:	20000ad4 	.word	0x20000ad4
 800183c:	48000c00 	.word	0x48000c00
 8001840:	50000500 	.word	0x50000500
  else if(hadc->Instance==ADC5)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a40      	ldr	r2, [pc, #256]	; (800194c <HAL_ADC_MspInit+0x388>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d17a      	bne.n	8001944 <HAL_ADC_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800184e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001860:	4618      	mov	r0, r3
 8001862:	f003 ffbb 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_ADC_MspInit+0x2ac>
      Error_Handler();
 800186c:	f7ff fe7c 	bl	8001568 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001870:	4b37      	ldr	r3, [pc, #220]	; (8001950 <HAL_ADC_MspInit+0x38c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	4a36      	ldr	r2, [pc, #216]	; (8001950 <HAL_ADC_MspInit+0x38c>)
 8001878:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <HAL_ADC_MspInit+0x38c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d10b      	bne.n	800189a <HAL_ADC_MspInit+0x2d6>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <HAL_ADC_MspInit+0x390>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a33      	ldr	r2, [pc, #204]	; (8001954 <HAL_ADC_MspInit+0x390>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <HAL_ADC_MspInit+0x390>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <HAL_ADC_MspInit+0x390>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a2d      	ldr	r2, [pc, #180]	; (8001954 <HAL_ADC_MspInit+0x390>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_ADC_MspInit+0x390>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_ADC_MspInit+0x390>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	4a27      	ldr	r2, [pc, #156]	; (8001954 <HAL_ADC_MspInit+0x390>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018be:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_ADC_MspInit+0x390>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_ADC_MspInit+0x390>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	4a21      	ldr	r2, [pc, #132]	; (8001954 <HAL_ADC_MspInit+0x390>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_ADC_MspInit+0x390>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AUD_ORANGE_S_UNBUFFERED_IN_Pin;
 80018e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_ORANGE_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001900:	f002 fe14 	bl	800452c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_T_UNBUFFERED_IN_Pin|AUD_BLACK_R1_UNBUFFERED_IN_Pin|VOLUME_ANALOG_IN_Pin;
 8001904:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8001908:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190c:	2303      	movs	r3, #3
 800190e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001918:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800191c:	4619      	mov	r1, r3
 800191e:	480e      	ldr	r0, [pc, #56]	; (8001958 <HAL_ADC_MspInit+0x394>)
 8001920:	f002 fe04 	bl	800452c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_S_UNBUFFERED_IN_Pin;
 8001924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800192c:	2303      	movs	r3, #3
 800192e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_BLACK_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800193c:	4619      	mov	r1, r3
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <HAL_ADC_MspInit+0x398>)
 8001940:	f002 fdf4 	bl	800452c <HAL_GPIO_Init>
}
 8001944:	bf00      	nop
 8001946:	37a0      	adds	r7, #160	; 0xa0
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	50000600 	.word	0x50000600
 8001950:	20000ad4 	.word	0x20000ad4
 8001954:	40021000 	.word	0x40021000
 8001958:	48000c00 	.word	0x48000c00
 800195c:	48001000 	.word	0x48001000

08001960 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	; 0x38
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a63      	ldr	r2, [pc, #396]	; (8001b0c <HAL_DAC_MspInit+0x1ac>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d159      	bne.n	8001a36 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001982:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a62      	ldr	r2, [pc, #392]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b5d      	ldr	r3, [pc, #372]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a5c      	ldr	r2, [pc, #368]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AUD_GREEN_L_PREAMP_AUDIO_Pin|AUD_GREEN_R_PREAMP_AUDIO_Pin;
 80019b2:	2330      	movs	r3, #48	; 0x30
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b6:	2303      	movs	r3, #3
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	4619      	mov	r1, r3
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c8:	f002 fdb0 	bl	800452c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80019cc:	4b51      	ldr	r3, [pc, #324]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 80019ce:	4a52      	ldr	r2, [pc, #328]	; (8001b18 <HAL_DAC_MspInit+0x1b8>)
 80019d0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80019d2:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 80019d4:	2206      	movs	r2, #6
 80019d6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d8:	4b4e      	ldr	r3, [pc, #312]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 80019da:	2210      	movs	r2, #16
 80019dc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019de:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019e4:	4b4b      	ldr	r3, [pc, #300]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019ea:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 80019ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019f2:	4b48      	ldr	r3, [pc, #288]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 80019f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019f8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80019fa:	4b46      	ldr	r3, [pc, #280]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 80019fc:	2220      	movs	r2, #32
 80019fe:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a00:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 8001a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001a08:	4842      	ldr	r0, [pc, #264]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 8001a0a:	f002 fb1d 	bl	8004048 <HAL_DMA_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001a14:	f7ff fda8 	bl	8001568 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3e      	ldr	r2, [pc, #248]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	4a3d      	ldr	r2, [pc, #244]	; (8001b14 <HAL_DAC_MspInit+0x1b4>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2105      	movs	r1, #5
 8001a28:	2036      	movs	r0, #54	; 0x36
 8001a2a:	f001 feb9 	bl	80037a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a2e:	2036      	movs	r0, #54	; 0x36
 8001a30:	f001 fed0 	bl	80037d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8001a34:	e065      	b.n	8001b02 <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a38      	ldr	r2, [pc, #224]	; (8001b1c <HAL_DAC_MspInit+0x1bc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d12d      	bne.n	8001a9c <HAL_DAC_MspInit+0x13c>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001a40:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4c:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5c:	4a2c      	ldr	r2, [pc, #176]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TFT_LED_LVL_Pin;
 8001a70:	2340      	movs	r3, #64	; 0x40
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a74:	2303      	movs	r3, #3
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TFT_LED_LVL_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	4619      	mov	r1, r3
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a86:	f002 fd51 	bl	800452c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	210f      	movs	r1, #15
 8001a8e:	2037      	movs	r0, #55	; 0x37
 8001a90:	f001 fe86 	bl	80037a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001a94:	2037      	movs	r0, #55	; 0x37
 8001a96:	f001 fe9d 	bl	80037d4 <HAL_NVIC_EnableIRQ>
}
 8001a9a:	e032      	b.n	8001b02 <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_DAC_MspInit+0x1c0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d114      	bne.n	8001ad0 <HAL_DAC_MspInit+0x170>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2105      	movs	r1, #5
 8001ac2:	2036      	movs	r0, #54	; 0x36
 8001ac4:	f001 fe6c 	bl	80037a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ac8:	2036      	movs	r0, #54	; 0x36
 8001aca:	f001 fe83 	bl	80037d4 <HAL_NVIC_EnableIRQ>
}
 8001ace:	e018      	b.n	8001b02 <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC4)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <HAL_DAC_MspInit+0x1c4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d113      	bne.n	8001b02 <HAL_DAC_MspInit+0x1a2>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_DAC_MspInit+0x1b0>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	210f      	movs	r1, #15
 8001af6:	2037      	movs	r0, #55	; 0x37
 8001af8:	f001 fe52 	bl	80037a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001afc:	2037      	movs	r0, #55	; 0x37
 8001afe:	f001 fe69 	bl	80037d4 <HAL_NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3738      	adds	r7, #56	; 0x38
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	50000800 	.word	0x50000800
 8001b10:	40021000 	.word	0x40021000
 8001b14:	20000318 	.word	0x20000318
 8001b18:	40020008 	.word	0x40020008
 8001b1c:	50000c00 	.word	0x50000c00
 8001b20:	50001000 	.word	0x50001000
 8001b24:	50001400 	.word	0x50001400

08001b28 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a4d      	ldr	r2, [pc, #308]	; (8001c7c <HAL_OPAMP_MspInit+0x154>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d119      	bne.n	8001b7e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	4a4c      	ldr	r2, [pc, #304]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b56:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	61bb      	str	r3, [r7, #24]
 8001b60:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = AUD_ORANGE_L_PREAMP_AUDIO_Pin;
 8001b62:	2304      	movs	r3, #4
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b66:	2303      	movs	r3, #3
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_L_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b78:	f002 fcd8 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001b7c:	e07a      	b.n	8001c74 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP3)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a40      	ldr	r2, [pc, #256]	; (8001c84 <HAL_OPAMP_MspInit+0x15c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d118      	bne.n	8001bba <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	4a3c      	ldr	r2, [pc, #240]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001b8e:	f043 0302 	orr.w	r3, r3, #2
 8001b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b94:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AUD_ORANGE_PREAMP_AUDIO_Pin;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4835      	ldr	r0, [pc, #212]	; (8001c88 <HAL_OPAMP_MspInit+0x160>)
 8001bb4:	f002 fcba 	bl	800452c <HAL_GPIO_Init>
}
 8001bb8:	e05c      	b.n	8001c74 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP4)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <HAL_OPAMP_MspInit+0x164>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d119      	bne.n	8001bf8 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	4a2d      	ldr	r2, [pc, #180]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be2:	2303      	movs	r3, #3
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4825      	ldr	r0, [pc, #148]	; (8001c88 <HAL_OPAMP_MspInit+0x160>)
 8001bf2:	f002 fc9b 	bl	800452c <HAL_GPIO_Init>
}
 8001bf6:	e03d      	b.n	8001c74 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP5)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <HAL_OPAMP_MspInit+0x168>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d11a      	bne.n	8001c38 <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4a1e      	ldr	r2, [pc, #120]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c20:	2303      	movs	r3, #3
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f002 fc7b 	bl	800452c <HAL_GPIO_Init>
}
 8001c36:	e01d      	b.n	8001c74 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP6)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <HAL_OPAMP_MspInit+0x16c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d118      	bne.n	8001c74 <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_OPAMP_MspInit+0x158>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c60:	2303      	movs	r3, #3
 8001c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <HAL_OPAMP_MspInit+0x160>)
 8001c70:	f002 fc5c 	bl	800452c <HAL_GPIO_Init>
}
 8001c74:	bf00      	nop
 8001c76:	3730      	adds	r7, #48	; 0x30
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40010300 	.word	0x40010300
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010308 	.word	0x40010308
 8001c88:	48000400 	.word	0x48000400
 8001c8c:	4001030c 	.word	0x4001030c
 8001c90:	40010310 	.word	0x40010310
 8001c94:	40010314 	.word	0x40010314

08001c98 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0a0      	sub	sp, #128	; 0x80
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	2254      	movs	r2, #84	; 0x54
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f009 f9eb 	bl	800b094 <memset>
  if(hqspi->Instance==QUADSPI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a3c      	ldr	r2, [pc, #240]	; (8001db4 <HAL_QSPI_MspInit+0x11c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d170      	bne.n	8001daa <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001cc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ccc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd2:	f107 0318 	add.w	r3, r7, #24
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fd80 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 8001ce2:	f7ff fc41 	bl	8001568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ce6:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cea:	4a33      	ldr	r2, [pc, #204]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6513      	str	r3, [r2, #80]	; 0x50
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfe:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a2d      	ldr	r2, [pc, #180]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001d1c:	f043 0320 	orr.w	r3, r3, #32
 8001d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001d34:	f043 0310 	orr.w	r3, r3, #16
 8001d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HAL_QSPI_MspInit+0x120>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    PE15     ------> QUADSPI1_BK1_IO3
    PE11     ------> QUADSPI1_BK1_NCS
    PE14     ------> QUADSPI1_BK1_IO2
    PE13     ------> QUADSPI1_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7
 8001d46:	23f8      	movs	r3, #248	; 0xf8
 8001d48:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d56:	230a      	movs	r3, #10
 8001d58:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4816      	ldr	r0, [pc, #88]	; (8001dbc <HAL_QSPI_MspInit+0x124>)
 8001d62:	f002 fbe3 	bl	800452c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d78:	230a      	movs	r3, #10
 8001d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d80:	4619      	mov	r1, r3
 8001d82:	480f      	ldr	r0, [pc, #60]	; (8001dc0 <HAL_QSPI_MspInit+0x128>)
 8001d84:	f002 fbd2 	bl	800452c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14
 8001d88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d9a:	230a      	movs	r3, #10
 8001d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001da2:	4619      	mov	r1, r3
 8001da4:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <HAL_QSPI_MspInit+0x12c>)
 8001da6:	f002 fbc1 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001daa:	bf00      	nop
 8001dac:	3780      	adds	r7, #128	; 0x80
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	a0001000 	.word	0xa0001000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	48000c00 	.word	0x48000c00
 8001dc0:	48001400 	.word	0x48001400
 8001dc4:	48001000 	.word	0x48001000

08001dc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b090      	sub	sp, #64	; 0x40
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a62      	ldr	r2, [pc, #392]	; (8001f70 <HAL_SPI_MspInit+0x1a8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d146      	bne.n	8001e78 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dea:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	4a61      	ldr	r2, [pc, #388]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6593      	str	r3, [r2, #88]	; 0x58
 8001df6:	4b5f      	ldr	r3, [pc, #380]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e02:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a5b      	ldr	r2, [pc, #364]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0e:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a55      	ldr	r2, [pc, #340]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
    PD15     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001e44:	2306      	movs	r3, #6
 8001e46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	484a      	ldr	r0, [pc, #296]	; (8001f78 <HAL_SPI_MspInit+0x1b0>)
 8001e50:	f002 fb6c 	bl	800452c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8001e54:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e66:	2305      	movs	r3, #5
 8001e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4842      	ldr	r0, [pc, #264]	; (8001f7c <HAL_SPI_MspInit+0x1b4>)
 8001e72:	f002 fb5b 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001e76:	e077      	b.n	8001f68 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <HAL_SPI_MspInit+0x1b8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d145      	bne.n	8001f0e <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e82:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	4a3b      	ldr	r2, [pc, #236]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4a35      	ldr	r2, [pc, #212]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea6:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001eda:	2306      	movs	r3, #6
 8001edc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4825      	ldr	r0, [pc, #148]	; (8001f7c <HAL_SPI_MspInit+0x1b4>)
 8001ee6:	f002 fb21 	bl	800452c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001eea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001efc:	2306      	movs	r3, #6
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f04:	4619      	mov	r1, r3
 8001f06:	481f      	ldr	r0, [pc, #124]	; (8001f84 <HAL_SPI_MspInit+0x1bc>)
 8001f08:	f002 fb10 	bl	800452c <HAL_GPIO_Init>
}
 8001f0c:	e02c      	b.n	8001f68 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI4)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_SPI_MspInit+0x1c0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d127      	bne.n	8001f68 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1c:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f22:	6613      	str	r3, [r2, #96]	; 0x60
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_SPI_MspInit+0x1ac>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_2;
 8001f48:	2374      	movs	r3, #116	; 0x74
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f58:	2305      	movs	r3, #5
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f60:	4619      	mov	r1, r3
 8001f62:	480a      	ldr	r0, [pc, #40]	; (8001f8c <HAL_SPI_MspInit+0x1c4>)
 8001f64:	f002 fae2 	bl	800452c <HAL_GPIO_Init>
}
 8001f68:	bf00      	nop
 8001f6a:	3740      	adds	r7, #64	; 0x40
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40003800 	.word	0x40003800
 8001f74:	40021000 	.word	0x40021000
 8001f78:	48000c00 	.word	0x48000c00
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	40003c00 	.word	0x40003c00
 8001f84:	48000800 	.word	0x48000800
 8001f88:	40013c00 	.word	0x40013c00
 8001f8c:	48001000 	.word	0x48001000

08001f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_TIM_Base_MspInit+0x44>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d113      	bne.n	8001fca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_TIM_Base_MspInit+0x48>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_TIM_Base_MspInit+0x48>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_TIM_Base_MspInit+0x48>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2105      	movs	r1, #5
 8001fbe:	2036      	movs	r0, #54	; 0x36
 8001fc0:	f001 fbee 	bl	80037a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fc4:	2036      	movs	r0, #54	; 0x36
 8001fc6:	f001 fc05 	bl	80037d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40001000 	.word	0x40001000
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b0a0      	sub	sp, #128	; 0x80
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff4:	f107 0318 	add.w	r3, r7, #24
 8001ff8:	2254      	movs	r2, #84	; 0x54
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f009 f849 	bl	800b094 <memset>
  if(huart->Instance==UART5)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2d      	ldr	r2, [pc, #180]	; (80020bc <HAL_UART_MspInit+0xe0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d152      	bne.n	80020b2 <HAL_UART_MspInit+0xd6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800200c:	2310      	movs	r3, #16
 800200e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	4618      	mov	r0, r3
 800201a:	f003 fbdf 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002024:	f7ff faa0 	bl	8001568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_UART_MspInit+0xe4>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <HAL_UART_MspInit+0xe4>)
 800202e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002032:	6593      	str	r3, [r2, #88]	; 0x58
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <HAL_UART_MspInit+0xe4>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <HAL_UART_MspInit+0xe4>)
 8002042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002044:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_UART_MspInit+0xe4>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204c:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <HAL_UART_MspInit+0xe4>)
 800204e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_UART_MspInit+0xe4>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_UART_MspInit+0xe4>)
 800205e:	f043 0308 	orr.w	r3, r3, #8
 8002062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_UART_MspInit+0xe4>)
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002074:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002082:	2305      	movs	r3, #5
 8002084:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800208a:	4619      	mov	r1, r3
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <HAL_UART_MspInit+0xe8>)
 800208e:	f002 fa4d 	bl	800452c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002092:	2304      	movs	r3, #4
 8002094:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80020a2:	2305      	movs	r3, #5
 80020a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020aa:	4619      	mov	r1, r3
 80020ac:	4806      	ldr	r0, [pc, #24]	; (80020c8 <HAL_UART_MspInit+0xec>)
 80020ae:	f002 fa3d 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3780      	adds	r7, #128	; 0x80
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40005000 	.word	0x40005000
 80020c0:	40021000 	.word	0x40021000
 80020c4:	48000800 	.word	0x48000800
 80020c8:	48000c00 	.word	0x48000c00

080020cc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b0a0      	sub	sp, #128	; 0x80
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e4:	f107 0318 	add.w	r3, r7, #24
 80020e8:	2254      	movs	r2, #84	; 0x54
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f008 ffd1 	bl	800b094 <memset>
  if(husart->Instance==USART3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <HAL_USART_MspInit+0xe0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d153      	bne.n	80021a4 <HAL_USART_MspInit+0xd8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020fc:	2304      	movs	r3, #4
 80020fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002100:	2300      	movs	r3, #0
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002104:	f107 0318 	add.w	r3, r7, #24
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fb67 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8002114:	f7ff fa28 	bl	8001568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <HAL_USART_MspInit+0xe4>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <HAL_USART_MspInit+0xe4>)
 800211e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002122:	6593      	str	r3, [r2, #88]	; 0x58
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_USART_MspInit+0xe4>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_USART_MspInit+0xe4>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_USART_MspInit+0xe4>)
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_USART_MspInit+0xe4>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_USART_MspInit+0xe4>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214c:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <HAL_USART_MspInit+0xe4>)
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_USART_MspInit+0xe4>)
 8002156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB9     ------> USART3_TX
    PD10     ------> USART3_CK
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002164:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002172:	2307      	movs	r3, #7
 8002174:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800217a:	4619      	mov	r1, r3
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <HAL_USART_MspInit+0xe8>)
 800217e:	f002 f9d5 	bl	800452c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002182:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002186:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002194:	2307      	movs	r3, #7
 8002196:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002198:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800219c:	4619      	mov	r1, r3
 800219e:	4806      	ldr	r0, [pc, #24]	; (80021b8 <HAL_USART_MspInit+0xec>)
 80021a0:	f002 f9c4 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021a4:	bf00      	nop
 80021a6:	3780      	adds	r7, #128	; 0x80
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40004800 	.word	0x40004800
 80021b0:	40021000 	.word	0x40021000
 80021b4:	48000400 	.word	0x48000400
 80021b8:	48000c00 	.word	0x48000c00

080021bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80021cc:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_InitTick+0xd0>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	4a2e      	ldr	r2, [pc, #184]	; (800228c <HAL_InitTick+0xd0>)
 80021d2:	f043 0320 	orr.w	r3, r3, #32
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <HAL_InitTick+0xd0>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021e4:	f107 020c 	add.w	r2, r7, #12
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fa52 	bl	8005698 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021f4:	f003 fa24 	bl	8005640 <HAL_RCC_GetPCLK1Freq>
 80021f8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <HAL_InitTick+0xd4>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0c9b      	lsrs	r3, r3, #18
 8002204:	3b01      	subs	r3, #1
 8002206:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_InitTick+0xd8>)
 800220a:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_InitTick+0xdc>)
 800220c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <HAL_InitTick+0xd8>)
 8002210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002214:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002216:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <HAL_InitTick+0xd8>)
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_InitTick+0xd8>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002222:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <HAL_InitTick+0xd8>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8002228:	481a      	ldr	r0, [pc, #104]	; (8002294 <HAL_InitTick+0xd8>)
 800222a:	f003 fdd1 	bl	8005dd0 <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002238:	2b00      	cmp	r3, #0
 800223a:	d11b      	bne.n	8002274 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800223c:	4815      	ldr	r0, [pc, #84]	; (8002294 <HAL_InitTick+0xd8>)
 800223e:	f003 fe9b 	bl	8005f78 <HAL_TIM_Base_Start_IT>
 8002242:	4603      	mov	r3, r0
 8002244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800224c:	2b00      	cmp	r3, #0
 800224e:	d111      	bne.n	8002274 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002250:	2037      	movs	r0, #55	; 0x37
 8002252:	f001 fabf 	bl	80037d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b0f      	cmp	r3, #15
 800225a:	d808      	bhi.n	800226e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 800225c:	2200      	movs	r2, #0
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	2037      	movs	r0, #55	; 0x37
 8002262:	f001 fa9d 	bl	80037a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002266:	4a0d      	ldr	r2, [pc, #52]	; (800229c <HAL_InitTick+0xe0>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e002      	b.n	8002274 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim7, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8002274:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <HAL_InitTick+0xe4>)
 8002276:	210e      	movs	r1, #14
 8002278:	4806      	ldr	r0, [pc, #24]	; (8002294 <HAL_InitTick+0xd8>)
 800227a:	f004 f8c9 	bl	8006410 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 800227e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002282:	4618      	mov	r0, r3
 8002284:	3730      	adds	r7, #48	; 0x30
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	431bde83 	.word	0x431bde83
 8002294:	20000ad8 	.word	0x20000ad8
 8002298:	40001400 	.word	0x40001400
 800229c:	20000004 	.word	0x20000004
 80022a0:	080022a5 	.word	0x080022a5

080022a4 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 80022ac:	f000 f8a2 	bl	80023f4 <HAL_IncTick>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80022bc:	f003 fa2e 	bl	800571c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <NMI_Handler+0x8>

080022c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <HardFault_Handler+0x4>

080022c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <MemManage_Handler+0x4>

080022ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d2:	e7fe      	b.n	80022d2 <BusFault_Handler+0x4>

080022d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <UsageFault_Handler+0x4>

080022da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <DMA1_Channel1_IRQHandler+0x10>)
 80022ee:	f001 ffce 	bl	800428e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000318 	.word	0x20000318

080022fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <TIM6_DAC_IRQHandler+0x1c>)
 8002302:	f003 feb1 	bl	8006068 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <TIM6_DAC_IRQHandler+0x20>)
 8002308:	f001 fbd4 	bl	8003ab4 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac3);
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <TIM6_DAC_IRQHandler+0x24>)
 800230e:	f001 fbd1 	bl	8003ab4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000061c 	.word	0x2000061c
 800231c:	200002c8 	.word	0x200002c8
 8002320:	200002f0 	.word	0x200002f0

08002324 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002328:	4805      	ldr	r0, [pc, #20]	; (8002340 <TIM7_DAC_IRQHandler+0x1c>)
 800232a:	f003 fe9d 	bl	8006068 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <TIM7_DAC_IRQHandler+0x20>)
 8002330:	f001 fbc0 	bl	8003ab4 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac4);
 8002334:	4804      	ldr	r0, [pc, #16]	; (8002348 <TIM7_DAC_IRQHandler+0x24>)
 8002336:	f001 fbbd 	bl	8003ab4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000ad8 	.word	0x20000ad8
 8002344:	200002dc 	.word	0x200002dc
 8002348:	20000304 	.word	0x20000304

0800234c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <SystemInit+0x20>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <SystemInit+0x20>)
 8002358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800235c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002372:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002374:	f7ff ffea 	bl	800234c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <LoopForever+0x6>)
  ldr r1, =_edata
 800237a:	490d      	ldr	r1, [pc, #52]	; (80023b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800237c:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <LoopForever+0xe>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002390:	4c0a      	ldr	r4, [pc, #40]	; (80023bc <LoopForever+0x16>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239e:	f008 fe45 	bl	800b02c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023a2:	f7fe f945 	bl	8000630 <main>

080023a6 <LoopForever>:

LoopForever:
    b LoopForever
 80023a6:	e7fe      	b.n	80023a6 <LoopForever>
  ldr   r0, =_estack
 80023a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80023b4:	0800b398 	.word	0x0800b398
  ldr r2, =_sbss
 80023b8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80023bc:	200025d4 	.word	0x200025d4

080023c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023c0:	e7fe      	b.n	80023c0 <ADC1_2_IRQHandler>

080023c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f001 f9dc 	bl	800378a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023d2:	200f      	movs	r0, #15
 80023d4:	f7ff fef2 	bl	80021bc <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	71fb      	strb	r3, [r7, #7]
 80023e2:	e001      	b.n	80023e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023e4:	f7ff f8c6 	bl	8001574 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023e8:	79fb      	ldrb	r3, [r7, #7]

}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_IncTick+0x1c>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_IncTick+0x20>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4413      	add	r3, r2
 8002402:	4a03      	ldr	r2, [pc, #12]	; (8002410 <HAL_IncTick+0x1c>)
 8002404:	6013      	str	r3, [r2, #0]
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	20000ba4 	.word	0x20000ba4
 8002414:	20000008 	.word	0x20000008

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000ba4 	.word	0x20000ba4

08002430 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	609a      	str	r2, [r3, #8]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	609a      	str	r2, [r3, #8]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3360      	adds	r3, #96	; 0x60
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <LL_ADC_SetOffset+0x44>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	03fff000 	.word	0x03fff000

080024e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3360      	adds	r3, #96	; 0x60
 80024ee:	461a      	mov	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3360      	adds	r3, #96	; 0x60
 800251c:	461a      	mov	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	431a      	orrs	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002536:	bf00      	nop
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002542:	b480      	push	{r7}
 8002544:	b087      	sub	sp, #28
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3360      	adds	r3, #96	; 0x60
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	431a      	orrs	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3360      	adds	r3, #96	; 0x60
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	431a      	orrs	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	615a      	str	r2, [r3, #20]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3330      	adds	r3, #48	; 0x30
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	4413      	add	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	211f      	movs	r1, #31
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	401a      	ands	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	f003 011f 	and.w	r1, r3, #31
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	431a      	orrs	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3314      	adds	r3, #20
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0e5b      	lsrs	r3, r3, #25
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	4413      	add	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	0d1b      	lsrs	r3, r3, #20
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2107      	movs	r1, #7
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	401a      	ands	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	0d1b      	lsrs	r3, r3, #20
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	431a      	orrs	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0318 	and.w	r3, r3, #24
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026a8:	40d9      	lsrs	r1, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	400b      	ands	r3, r1
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	431a      	orrs	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	0007ffff 	.word	0x0007ffff

080026cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6093      	str	r3, [r2, #8]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002704:	d101      	bne.n	800270a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800272c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002754:	d101      	bne.n	800275a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <LL_ADC_IsEnabled+0x18>
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <LL_ADC_IsEnabled+0x1a>
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d101      	bne.n	80027a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d101      	bne.n	80027cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e1a9      	b.n	8002b4a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7fe fedd 	bl	80015c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff67 	bl	80026f0 <LL_ADC_IsDeepPowerDownEnabled>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff4d 	bl	80026cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff82 	bl	8002740 <LL_ADC_IsInternalRegulatorEnabled>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d115      	bne.n	800286e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff66 	bl	8002718 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800284c:	4b9c      	ldr	r3, [pc, #624]	; (8002ac0 <HAL_ADC_Init+0x2e4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	099b      	lsrs	r3, r3, #6
 8002852:	4a9c      	ldr	r2, [pc, #624]	; (8002ac4 <HAL_ADC_Init+0x2e8>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	3301      	adds	r3, #1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002860:	e002      	b.n	8002868 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3b01      	subs	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f9      	bne.n	8002862 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff64 	bl	8002740 <LL_ADC_IsInternalRegulatorEnabled>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10d      	bne.n	800289a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	f043 0210 	orr.w	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ff75 	bl	800278e <LL_ADC_REG_IsConversionOngoing>
 80028a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 8142 	bne.w	8002b38 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 813e 	bne.w	8002b38 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028c4:	f043 0202 	orr.w	r2, r3, #2
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff49 	bl	8002768 <LL_ADC_IsEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d141      	bne.n	8002960 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e4:	d004      	beq.n	80028f0 <HAL_ADC_Init+0x114>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a77      	ldr	r2, [pc, #476]	; (8002ac8 <HAL_ADC_Init+0x2ec>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10f      	bne.n	8002910 <HAL_ADC_Init+0x134>
 80028f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028f4:	f7ff ff38 	bl	8002768 <LL_ADC_IsEnabled>
 80028f8:	4604      	mov	r4, r0
 80028fa:	4873      	ldr	r0, [pc, #460]	; (8002ac8 <HAL_ADC_Init+0x2ec>)
 80028fc:	f7ff ff34 	bl	8002768 <LL_ADC_IsEnabled>
 8002900:	4603      	mov	r3, r0
 8002902:	4323      	orrs	r3, r4
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e012      	b.n	8002936 <HAL_ADC_Init+0x15a>
 8002910:	486e      	ldr	r0, [pc, #440]	; (8002acc <HAL_ADC_Init+0x2f0>)
 8002912:	f7ff ff29 	bl	8002768 <LL_ADC_IsEnabled>
 8002916:	4604      	mov	r4, r0
 8002918:	486d      	ldr	r0, [pc, #436]	; (8002ad0 <HAL_ADC_Init+0x2f4>)
 800291a:	f7ff ff25 	bl	8002768 <LL_ADC_IsEnabled>
 800291e:	4603      	mov	r3, r0
 8002920:	431c      	orrs	r4, r3
 8002922:	486c      	ldr	r0, [pc, #432]	; (8002ad4 <HAL_ADC_Init+0x2f8>)
 8002924:	f7ff ff20 	bl	8002768 <LL_ADC_IsEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	4323      	orrs	r3, r4
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d012      	beq.n	8002960 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002942:	d004      	beq.n	800294e <HAL_ADC_Init+0x172>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5f      	ldr	r2, [pc, #380]	; (8002ac8 <HAL_ADC_Init+0x2ec>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Init+0x176>
 800294e:	4a62      	ldr	r2, [pc, #392]	; (8002ad8 <HAL_ADC_Init+0x2fc>)
 8002950:	e000      	b.n	8002954 <HAL_ADC_Init+0x178>
 8002952:	4a62      	ldr	r2, [pc, #392]	; (8002adc <HAL_ADC_Init+0x300>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f7ff fd68 	bl	8002430 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7f5b      	ldrb	r3, [r3, #29]
 8002964:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800296a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002970:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002976:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800297e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800298a:	2b01      	cmp	r3, #1
 800298c:	d106      	bne.n	800299c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	3b01      	subs	r3, #1
 8002994:	045b      	lsls	r3, r3, #17
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	4b48      	ldr	r3, [pc, #288]	; (8002ae0 <HAL_ADC_Init+0x304>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	69b9      	ldr	r1, [r7, #24]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fee4 	bl	80027b4 <LL_ADC_INJ_IsConversionOngoing>
 80029ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d17f      	bne.n	8002af4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d17c      	bne.n	8002af4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a06:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a16:	f023 0302 	bic.w	r3, r3, #2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d017      	beq.n	8002a5c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a44:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6911      	ldr	r1, [r2, #16]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002a5a:	e013      	b.n	8002a84 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a6a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a80:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d12a      	bne.n	8002ae4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aa4:	4311      	orrs	r1, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	611a      	str	r2, [r3, #16]
 8002abe:	e019      	b.n	8002af4 <HAL_ADC_Init+0x318>
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	053e2d63 	.word	0x053e2d63
 8002ac8:	50000100 	.word	0x50000100
 8002acc:	50000400 	.word	0x50000400
 8002ad0:	50000500 	.word	0x50000500
 8002ad4:	50000600 	.word	0x50000600
 8002ad8:	50000300 	.word	0x50000300
 8002adc:	50000700 	.word	0x50000700
 8002ae0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d10c      	bne.n	8002b16 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f023 010f 	bic.w	r1, r3, #15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	1e5a      	subs	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
 8002b14:	e007      	b.n	8002b26 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 020f 	bic.w	r2, r2, #15
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	f023 0303 	bic.w	r3, r3, #3
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b36:	e007      	b.n	8002b48 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	f043 0210 	orr.w	r2, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}
 8002b52:	bf00      	nop

08002b54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b0b6      	sub	sp, #216	; 0xd8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d102      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x24>
 8002b72:	2302      	movs	r3, #2
 8002b74:	f000 bc13 	b.w	800339e <HAL_ADC_ConfigChannel+0x84a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fe02 	bl	800278e <LL_ADC_REG_IsConversionOngoing>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 83f3 	bne.w	8003378 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f7ff fd18 	bl	80025d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fdf0 	bl	800278e <LL_ADC_REG_IsConversionOngoing>
 8002bae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fdfc 	bl	80027b4 <LL_ADC_INJ_IsConversionOngoing>
 8002bbc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 81d9 	bne.w	8002f7c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 81d4 	bne.w	8002f7c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bdc:	d10f      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7ff fd1f 	bl	800262c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fcd9 	bl	80025ae <LL_ADC_SetSamplingTimeCommonConfig>
 8002bfc:	e00e      	b.n	8002c1c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f7ff fd0e 	bl	800262c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fcc9 	bl	80025ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d022      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6919      	ldr	r1, [r3, #16]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c4e:	f7ff fc23 	bl	8002498 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6919      	ldr	r1, [r3, #16]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f7ff fc6f 	bl	8002542 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d102      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x126>
 8002c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c78:	e000      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x128>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f7ff fc7b 	bl	8002578 <LL_ADC_SetOffsetSaturation>
 8002c82:	e17b      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fc28 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x15c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fc1d 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	f003 021f 	and.w	r2, r3, #31
 8002cae:	e01e      	b.n	8002cee <HAL_ADC_ConfigChannel+0x19a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fc12 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e004      	b.n	8002cec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x1b2>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	e018      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x1e4>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	e004      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d106      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2200      	movs	r2, #0
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fbe1 	bl	800250c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2101      	movs	r1, #1
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fbc5 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x222>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fbba 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	e01e      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x260>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fbaf 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e004      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002da8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x278>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0e9b      	lsrs	r3, r3, #26
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	e018      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x2aa>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e004      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d106      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	2101      	movs	r1, #1
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fb7e 	bl	800250c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2102      	movs	r1, #2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fb62 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x2e8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fb57 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	f003 021f 	and.w	r2, r3, #31
 8002e3a:	e01e      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x326>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2102      	movs	r1, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fb4c 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	e004      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x33e>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0e9b      	lsrs	r3, r3, #26
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	e016      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x36c>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	e004      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d106      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2102      	movs	r1, #2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fb1d 	bl	800250c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2103      	movs	r1, #3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fb01 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x3aa>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2103      	movs	r1, #3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff faf6 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	0e9b      	lsrs	r3, r3, #26
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	e017      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x3da>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2103      	movs	r1, #3
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff faeb 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f18:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e003      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d105      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x3f2>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	e011      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x416>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f56:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d106      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	2103      	movs	r1, #3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fac8 	bl	800250c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fbf1 	bl	8002768 <LL_ADC_IsEnabled>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f040 813d 	bne.w	8003208 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f7ff fb72 	bl	8002684 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4aa2      	ldr	r2, [pc, #648]	; (8003230 <HAL_ADC_ConfigChannel+0x6dc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	f040 812e 	bne.w	8003208 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x480>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	0e9b      	lsrs	r3, r3, #26
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	bf94      	ite	ls
 8002fcc:	2301      	movls	r3, #1
 8002fce:	2300      	movhi	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e019      	b.n	8003008 <HAL_ADC_ConfigChannel+0x4b4>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002fec:	2320      	movs	r3, #32
 8002fee:	e003      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2b09      	cmp	r3, #9
 8003000:	bf94      	ite	ls
 8003002:	2301      	movls	r3, #1
 8003004:	2300      	movhi	r3, #0
 8003006:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003008:	2b00      	cmp	r3, #0
 800300a:	d079      	beq.n	8003100 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x4d4>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	3301      	adds	r3, #1
 8003020:	069b      	lsls	r3, r3, #26
 8003022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003026:	e015      	b.n	8003054 <HAL_ADC_ConfigChannel+0x500>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003038:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800303a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003040:	2320      	movs	r3, #32
 8003042:	e003      	b.n	800304c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3301      	adds	r3, #1
 800304e:	069b      	lsls	r3, r3, #26
 8003050:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x520>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0e9b      	lsrs	r3, r3, #26
 8003066:	3301      	adds	r3, #1
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	e017      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x550>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003084:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800308c:	2320      	movs	r3, #32
 800308e:	e003      	b.n	8003098 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	3301      	adds	r3, #1
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	ea42 0103 	orr.w	r1, r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x576>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	0e9b      	lsrs	r3, r3, #26
 80030ba:	3301      	adds	r3, #1
 80030bc:	f003 021f 	and.w	r2, r3, #31
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	051b      	lsls	r3, r3, #20
 80030c8:	e018      	b.n	80030fc <HAL_ADC_ConfigChannel+0x5a8>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80030e2:	2320      	movs	r3, #32
 80030e4:	e003      	b.n	80030ee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80030e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fc:	430b      	orrs	r3, r1
 80030fe:	e07e      	b.n	80031fe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <HAL_ADC_ConfigChannel+0x5c8>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	3301      	adds	r3, #1
 8003114:	069b      	lsls	r3, r3, #26
 8003116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800311a:	e015      	b.n	8003148 <HAL_ADC_ConfigChannel+0x5f4>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003134:	2320      	movs	r3, #32
 8003136:	e003      	b.n	8003140 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	3301      	adds	r3, #1
 8003142:	069b      	lsls	r3, r3, #26
 8003144:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x614>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	3301      	adds	r3, #1
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	2101      	movs	r1, #1
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	e017      	b.n	8003198 <HAL_ADC_ConfigChannel+0x644>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	61fb      	str	r3, [r7, #28]
  return result;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003180:	2320      	movs	r3, #32
 8003182:	e003      	b.n	800318c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	ea42 0103 	orr.w	r1, r2, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10d      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x670>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	3301      	adds	r3, #1
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	3b1e      	subs	r3, #30
 80031bc:	051b      	lsls	r3, r3, #20
 80031be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031c2:	e01b      	b.n	80031fc <HAL_ADC_ConfigChannel+0x6a8>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	613b      	str	r3, [r7, #16]
  return result;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80031dc:	2320      	movs	r3, #32
 80031de:	e003      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 021f 	and.w	r2, r3, #31
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	3b1e      	subs	r3, #30
 80031f6:	051b      	lsls	r3, r3, #20
 80031f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031fc:	430b      	orrs	r3, r1
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	6892      	ldr	r2, [r2, #8]
 8003202:	4619      	mov	r1, r3
 8003204:	f7ff fa12 	bl	800262c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_ADC_ConfigChannel+0x6e0>)
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80be 	beq.w	8003392 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800321e:	d004      	beq.n	800322a <HAL_ADC_ConfigChannel+0x6d6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a04      	ldr	r2, [pc, #16]	; (8003238 <HAL_ADC_ConfigChannel+0x6e4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10a      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x6ec>
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <HAL_ADC_ConfigChannel+0x6e8>)
 800322c:	e009      	b.n	8003242 <HAL_ADC_ConfigChannel+0x6ee>
 800322e:	bf00      	nop
 8003230:	407f0000 	.word	0x407f0000
 8003234:	80080000 	.word	0x80080000
 8003238:	50000100 	.word	0x50000100
 800323c:	50000300 	.word	0x50000300
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_ADC_ConfigChannel+0x854>)
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f91a 	bl	800247c <LL_ADC_GetCommonPathInternalCh>
 8003248:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a56      	ldr	r2, [pc, #344]	; (80033ac <HAL_ADC_ConfigChannel+0x858>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_ADC_ConfigChannel+0x70c>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a55      	ldr	r2, [pc, #340]	; (80033b0 <HAL_ADC_ConfigChannel+0x85c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d13a      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d134      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003274:	d005      	beq.n	8003282 <HAL_ADC_ConfigChannel+0x72e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a4e      	ldr	r2, [pc, #312]	; (80033b4 <HAL_ADC_ConfigChannel+0x860>)
 800327c:	4293      	cmp	r3, r2
 800327e:	f040 8085 	bne.w	800338c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800328a:	d004      	beq.n	8003296 <HAL_ADC_ConfigChannel+0x742>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a49      	ldr	r2, [pc, #292]	; (80033b8 <HAL_ADC_ConfigChannel+0x864>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_ADC_ConfigChannel+0x746>
 8003296:	4a49      	ldr	r2, [pc, #292]	; (80033bc <HAL_ADC_ConfigChannel+0x868>)
 8003298:	e000      	b.n	800329c <HAL_ADC_ConfigChannel+0x748>
 800329a:	4a43      	ldr	r2, [pc, #268]	; (80033a8 <HAL_ADC_ConfigChannel+0x854>)
 800329c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f7ff f8d5 	bl	8002456 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032ac:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <HAL_ADC_ConfigChannel+0x86c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	4a44      	ldr	r2, [pc, #272]	; (80033c4 <HAL_ADC_ConfigChannel+0x870>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	099b      	lsrs	r3, r3, #6
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032c6:	e002      	b.n	80032ce <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f9      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032d4:	e05a      	b.n	800338c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a3b      	ldr	r2, [pc, #236]	; (80033c8 <HAL_ADC_ConfigChannel+0x874>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d125      	bne.n	800332c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d11f      	bne.n	800332c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a31      	ldr	r2, [pc, #196]	; (80033b8 <HAL_ADC_ConfigChannel+0x864>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d104      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x7ac>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a34      	ldr	r2, [pc, #208]	; (80033cc <HAL_ADC_ConfigChannel+0x878>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d047      	beq.n	8003390 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003308:	d004      	beq.n	8003314 <HAL_ADC_ConfigChannel+0x7c0>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <HAL_ADC_ConfigChannel+0x864>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x7c4>
 8003314:	4a29      	ldr	r2, [pc, #164]	; (80033bc <HAL_ADC_ConfigChannel+0x868>)
 8003316:	e000      	b.n	800331a <HAL_ADC_ConfigChannel+0x7c6>
 8003318:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <HAL_ADC_ConfigChannel+0x854>)
 800331a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f7ff f896 	bl	8002456 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800332a:	e031      	b.n	8003390 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a27      	ldr	r2, [pc, #156]	; (80033d0 <HAL_ADC_ConfigChannel+0x87c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d12d      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003336:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d127      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <HAL_ADC_ConfigChannel+0x864>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003354:	d004      	beq.n	8003360 <HAL_ADC_ConfigChannel+0x80c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <HAL_ADC_ConfigChannel+0x864>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x810>
 8003360:	4a16      	ldr	r2, [pc, #88]	; (80033bc <HAL_ADC_ConfigChannel+0x868>)
 8003362:	e000      	b.n	8003366 <HAL_ADC_ConfigChannel+0x812>
 8003364:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <HAL_ADC_ConfigChannel+0x854>)
 8003366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800336a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7ff f870 	bl	8002456 <LL_ADC_SetCommonPathInternalCh>
 8003376:	e00c      	b.n	8003392 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800338a:	e002      	b.n	8003392 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800338c:	bf00      	nop
 800338e:	e000      	b.n	8003392 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003390:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800339a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	37d8      	adds	r7, #216	; 0xd8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	50000700 	.word	0x50000700
 80033ac:	c3210000 	.word	0xc3210000
 80033b0:	90c00010 	.word	0x90c00010
 80033b4:	50000600 	.word	0x50000600
 80033b8:	50000100 	.word	0x50000100
 80033bc:	50000300 	.word	0x50000300
 80033c0:	20000000 	.word	0x20000000
 80033c4:	053e2d63 	.word	0x053e2d63
 80033c8:	c7520000 	.word	0xc7520000
 80033cc:	50000500 	.word	0x50000500
 80033d0:	cb840000 	.word	0xcb840000

080033d4 <LL_ADC_IsEnabled>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <LL_ADC_IsEnabled+0x18>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <LL_ADC_IsEnabled+0x1a>
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <LL_ADC_REG_IsConversionOngoing>:
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d101      	bne.n	8003412 <LL_ADC_REG_IsConversionOngoing+0x18>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b0a1      	sub	sp, #132	; 0x84
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800343a:	2302      	movs	r3, #2
 800343c:	e0e7      	b.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003446:	2300      	movs	r3, #0
 8003448:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800344a:	2300      	movs	r3, #0
 800344c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003456:	d102      	bne.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	e009      	b.n	8003472 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6e      	ldr	r2, [pc, #440]	; (800361c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d102      	bne.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003468:	4b6d      	ldr	r3, [pc, #436]	; (8003620 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	e001      	b.n	8003472 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0be      	b.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ffb1 	bl	80033fa <LL_ADC_REG_IsConversionOngoing>
 8003498:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ffab 	bl	80033fa <LL_ADC_REG_IsConversionOngoing>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 80a0 	bne.w	80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80034ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 809c 	bne.w	80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034bc:	d004      	beq.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a55      	ldr	r2, [pc, #340]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80034c8:	4b56      	ldr	r3, [pc, #344]	; (8003624 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80034ca:	e000      	b.n	80034ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80034cc:	4b56      	ldr	r3, [pc, #344]	; (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80034ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d04b      	beq.n	8003570 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ea:	035b      	lsls	r3, r3, #13
 80034ec:	430b      	orrs	r3, r1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034fc:	d004      	beq.n	8003508 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a45      	ldr	r2, [pc, #276]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10f      	bne.n	8003528 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003508:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800350c:	f7ff ff62 	bl	80033d4 <LL_ADC_IsEnabled>
 8003510:	4604      	mov	r4, r0
 8003512:	4841      	ldr	r0, [pc, #260]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003514:	f7ff ff5e 	bl	80033d4 <LL_ADC_IsEnabled>
 8003518:	4603      	mov	r3, r0
 800351a:	4323      	orrs	r3, r4
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e012      	b.n	800354e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003528:	483c      	ldr	r0, [pc, #240]	; (800361c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800352a:	f7ff ff53 	bl	80033d4 <LL_ADC_IsEnabled>
 800352e:	4604      	mov	r4, r0
 8003530:	483b      	ldr	r0, [pc, #236]	; (8003620 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003532:	f7ff ff4f 	bl	80033d4 <LL_ADC_IsEnabled>
 8003536:	4603      	mov	r3, r0
 8003538:	431c      	orrs	r4, r3
 800353a:	483c      	ldr	r0, [pc, #240]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800353c:	f7ff ff4a 	bl	80033d4 <LL_ADC_IsEnabled>
 8003540:	4603      	mov	r3, r0
 8003542:	4323      	orrs	r3, r4
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d056      	beq.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800355a:	f023 030f 	bic.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	6811      	ldr	r1, [r2, #0]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	6892      	ldr	r2, [r2, #8]
 8003566:	430a      	orrs	r2, r1
 8003568:	431a      	orrs	r2, r3
 800356a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800356e:	e047      	b.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003584:	d004      	beq.n	8003590 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a23      	ldr	r2, [pc, #140]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10f      	bne.n	80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003590:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003594:	f7ff ff1e 	bl	80033d4 <LL_ADC_IsEnabled>
 8003598:	4604      	mov	r4, r0
 800359a:	481f      	ldr	r0, [pc, #124]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800359c:	f7ff ff1a 	bl	80033d4 <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4323      	orrs	r3, r4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e012      	b.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80035b0:	481a      	ldr	r0, [pc, #104]	; (800361c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035b2:	f7ff ff0f 	bl	80033d4 <LL_ADC_IsEnabled>
 80035b6:	4604      	mov	r4, r0
 80035b8:	4819      	ldr	r0, [pc, #100]	; (8003620 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035ba:	f7ff ff0b 	bl	80033d4 <LL_ADC_IsEnabled>
 80035be:	4603      	mov	r3, r0
 80035c0:	431c      	orrs	r4, r3
 80035c2:	481a      	ldr	r0, [pc, #104]	; (800362c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80035c4:	f7ff ff06 	bl	80033d4 <LL_ADC_IsEnabled>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4323      	orrs	r3, r4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d012      	beq.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035e2:	f023 030f 	bic.w	r3, r3, #15
 80035e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035ea:	e009      	b.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80035fe:	e000      	b.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003600:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800360a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800360e:	4618      	mov	r0, r3
 8003610:	3784      	adds	r7, #132	; 0x84
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}
 8003616:	bf00      	nop
 8003618:	50000100 	.word	0x50000100
 800361c:	50000400 	.word	0x50000400
 8003620:	50000500 	.word	0x50000500
 8003624:	50000300 	.word	0x50000300
 8003628:	50000700 	.word	0x50000700
 800362c:	50000600 	.word	0x50000600

08003630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800365c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003662:	4a04      	ldr	r2, [pc, #16]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60d3      	str	r3, [r2, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4907      	ldr	r1, [pc, #28]	; (80036cc <__NVIC_EnableIRQ+0x38>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	db0a      	blt.n	80036fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	490c      	ldr	r1, [pc, #48]	; (800371c <__NVIC_SetPriority+0x4c>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	0112      	lsls	r2, r2, #4
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	440b      	add	r3, r1
 80036f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f8:	e00a      	b.n	8003710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4908      	ldr	r1, [pc, #32]	; (8003720 <__NVIC_SetPriority+0x50>)
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3b04      	subs	r3, #4
 8003708:	0112      	lsls	r2, r2, #4
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	440b      	add	r3, r1
 800370e:	761a      	strb	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000e100 	.word	0xe000e100
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	; 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf28      	it	cs
 8003742:	2304      	movcs	r3, #4
 8003744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3304      	adds	r3, #4
 800374a:	2b06      	cmp	r3, #6
 800374c:	d902      	bls.n	8003754 <NVIC_EncodePriority+0x30>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3b03      	subs	r3, #3
 8003752:	e000      	b.n	8003756 <NVIC_EncodePriority+0x32>
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	401a      	ands	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43d9      	mvns	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	4313      	orrs	r3, r2
         );
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	; 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ff4c 	bl	8003630 <__NVIC_SetPriorityGrouping>
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037ae:	f7ff ff63 	bl	8003678 <__NVIC_GetPriorityGrouping>
 80037b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	6978      	ldr	r0, [r7, #20]
 80037ba:	f7ff ffb3 	bl	8003724 <NVIC_EncodePriority>
 80037be:	4602      	mov	r2, r0
 80037c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff ff82 	bl	80036d0 <__NVIC_SetPriority>
}
 80037cc:	bf00      	nop
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ff56 	bl	8003694 <__NVIC_EnableIRQ>
}
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e014      	b.n	800382c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	791b      	ldrb	r3, [r3, #4]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fe f8a4 	bl	8001960 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e056      	b.n	80038f6 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	795b      	ldrb	r3, [r3, #5]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_DAC_Start+0x20>
 8003850:	2302      	movs	r3, #2
 8003852:	e050      	b.n	80038f6 <HAL_DAC_Start+0xc2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6819      	ldr	r1, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2201      	movs	r2, #1
 800386e:	409a      	lsls	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003878:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_DAC_Start+0xd0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	4a22      	ldr	r2, [pc, #136]	; (8003908 <HAL_DAC_Start+0xd4>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	099b      	lsrs	r3, r3, #6
 8003886:	3301      	adds	r3, #1
 8003888:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800388a:	e002      	b.n	8003892 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3b01      	subs	r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f9      	bne.n	800388c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d11d      	bne.n	80038e8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	e014      	b.n	80038e8 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2102      	movs	r1, #2
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d107      	bne.n	80038e8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0202 	orr.w	r2, r2, #2
 80038e6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000000 	.word	0x20000000
 8003908:	053e2d63 	.word	0x053e2d63

0800390c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b2      	b.n	8003a8a <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	795b      	ldrb	r3, [r3, #5]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_DAC_Start_DMA+0x24>
 800392c:	2302      	movs	r3, #2
 800392e:	e0ac      	b.n	8003a8a <HAL_DAC_Start_DMA+0x17e>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2202      	movs	r2, #2
 800393a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d129      	bne.n	8003996 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4a53      	ldr	r2, [pc, #332]	; (8003a94 <HAL_DAC_Start_DMA+0x188>)
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4a52      	ldr	r2, [pc, #328]	; (8003a98 <HAL_DAC_Start_DMA+0x18c>)
 8003950:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	4a51      	ldr	r2, [pc, #324]	; (8003a9c <HAL_DAC_Start_DMA+0x190>)
 8003958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003968:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_DAC_Start_DMA+0x6c>
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	2b04      	cmp	r3, #4
 8003974:	d005      	beq.n	8003982 <HAL_DAC_Start_DMA+0x76>
 8003976:	e009      	b.n	800398c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	61bb      	str	r3, [r7, #24]
        break;
 8003980:	e033      	b.n	80039ea <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	61bb      	str	r3, [r7, #24]
        break;
 800398a:	e02e      	b.n	80039ea <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3310      	adds	r3, #16
 8003992:	61bb      	str	r3, [r7, #24]
        break;
 8003994:	e029      	b.n	80039ea <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	4a41      	ldr	r2, [pc, #260]	; (8003aa0 <HAL_DAC_Start_DMA+0x194>)
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <HAL_DAC_Start_DMA+0x198>)
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4a3f      	ldr	r2, [pc, #252]	; (8003aa8 <HAL_DAC_Start_DMA+0x19c>)
 80039ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039bc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_DAC_Start_DMA+0xc0>
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d005      	beq.n	80039d6 <HAL_DAC_Start_DMA+0xca>
 80039ca:	e009      	b.n	80039e0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3314      	adds	r3, #20
 80039d2:	61bb      	str	r3, [r7, #24]
        break;
 80039d4:	e009      	b.n	80039ea <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3318      	adds	r3, #24
 80039dc:	61bb      	str	r3, [r7, #24]
        break;
 80039de:	e004      	b.n	80039ea <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	331c      	adds	r3, #28
 80039e6:	61bb      	str	r3, [r7, #24]
        break;
 80039e8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d111      	bne.n	8003a14 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6898      	ldr	r0, [r3, #8]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	f000 fbc5 	bl	8004198 <HAL_DMA_Start_IT>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e010      	b.n	8003a36 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003a22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68d8      	ldr	r0, [r3, #12]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	f000 fbb3 	bl	8004198 <HAL_DMA_Start_IT>
 8003a32:	4603      	mov	r3, r0
 8003a34:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003a3c:	7ffb      	ldrb	r3, [r7, #31]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11c      	bne.n	8003a7c <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6819      	ldr	r1, [r3, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2201      	movs	r2, #1
 8003a50:	409a      	lsls	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a5a:	4b14      	ldr	r3, [pc, #80]	; (8003aac <HAL_DAC_Start_DMA+0x1a0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <HAL_DAC_Start_DMA+0x1a4>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	3301      	adds	r3, #1
 8003a6a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003a6c:	e002      	b.n	8003a74 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f9      	bne.n	8003a6e <HAL_DAC_Start_DMA+0x162>
 8003a7a:	e005      	b.n	8003a88 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f043 0204 	orr.w	r2, r3, #4
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003a88:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	08003f21 	.word	0x08003f21
 8003a98:	08003f43 	.word	0x08003f43
 8003a9c:	08003f5f 	.word	0x08003f5f
 8003aa0:	08003fdd 	.word	0x08003fdd
 8003aa4:	08003fff 	.word	0x08003fff
 8003aa8:	0800401b 	.word	0x0800401b
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	053e2d63 	.word	0x053e2d63

08003ab4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aca:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01d      	beq.n	8003b12 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d018      	beq.n	8003b12 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003afa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f845 	bl	8003b9c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01d      	beq.n	8003b58 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d018      	beq.n	8003b58 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2204      	movs	r2, #4
 8003b2a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f043 0202 	orr.w	r2, r3, #2
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003b50:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa38 	bl	8003fc8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_DAC_ConfigChannel+0x1c>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e19e      	b.n	8003f0e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	795b      	ldrb	r3, [r3, #5]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_DAC_ConfigChannel+0x2c>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e198      	b.n	8003f0e <HAL_DAC_ConfigChannel+0x35e>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2202      	movs	r2, #2
 8003be6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d17a      	bne.n	8003ce6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003bf0:	f7fe fc12 	bl	8002418 <HAL_GetTick>
 8003bf4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d13d      	bne.n	8003c78 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bfc:	e018      	b.n	8003c30 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bfe:	f7fe fc0b 	bl	8002418 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d911      	bls.n	8003c30 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f043 0208 	orr.w	r2, r3, #8
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2203      	movs	r2, #3
 8003c2a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e16e      	b.n	8003f0e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1df      	bne.n	8003bfe <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
 8003c48:	e020      	b.n	8003c8c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c4a:	f7fe fbe5 	bl	8002418 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d90f      	bls.n	8003c78 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da0a      	bge.n	8003c78 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f043 0208 	orr.w	r2, r3, #8
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2203      	movs	r2, #3
 8003c72:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e14a      	b.n	8003f0e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	dbe3      	blt.n	8003c4a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	ea02 0103 	and.w	r1, r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	21ff      	movs	r1, #255	; 0xff
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	ea02 0103 	and.w	r1, r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d11d      	bne.n	8003d2a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	221f      	movs	r2, #31
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d06:	4013      	ands	r3, r2
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2207      	movs	r2, #7
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d42:	4013      	ands	r3, r2
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d102      	bne.n	8003d54 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	623b      	str	r3, [r7, #32]
 8003d52:	e00f      	b.n	8003d74 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d102      	bne.n	8003d62 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	e008      	b.n	8003d74 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	623b      	str	r3, [r7, #32]
 8003d6e:	e001      	b.n	8003d74 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	6a3a      	ldr	r2, [r7, #32]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d96:	4013      	ands	r3, r2
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	791b      	ldrb	r3, [r3, #4]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d102      	bne.n	8003da8 <HAL_DAC_ConfigChannel+0x1f8>
 8003da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003da6:	e000      	b.n	8003daa <HAL_DAC_ConfigChannel+0x1fa>
 8003da8:	2300      	movs	r3, #0
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	795b      	ldrb	r3, [r3, #5]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <HAL_DAC_ConfigChannel+0x224>
 8003dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dd2:	e000      	b.n	8003dd6 <HAL_DAC_ConfigChannel+0x226>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d114      	bne.n	8003e16 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003dec:	f001 fc1c 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8003df0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4a48      	ldr	r2, [pc, #288]	; (8003f18 <HAL_DAC_ConfigChannel+0x368>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d904      	bls.n	8003e04 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
 8003e02:	e00f      	b.n	8003e24 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4a45      	ldr	r2, [pc, #276]	; (8003f1c <HAL_DAC_ConfigChannel+0x36c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d90a      	bls.n	8003e22 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
 8003e14:	e006      	b.n	8003e24 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e20:	e000      	b.n	8003e24 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003e22:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e32:	4313      	orrs	r3, r2
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43da      	mvns	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	400a      	ands	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	4013      	ands	r3, r2
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e98:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	22c0      	movs	r2, #192	; 0xc0
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43da      	mvns	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	089b      	lsrs	r3, r3, #2
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	ea02 0103 	and.w	r1, r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003f0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	; 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	09896800 	.word	0x09896800
 8003f1c:	04c4b400 	.word	0x04c4b400

08003f20 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7ff fe16 	bl	8003b60 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	711a      	strb	r2, [r3, #4]
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f7ff fe0f 	bl	8003b74 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f043 0204 	orr.w	r2, r3, #4
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7ff fe05 	bl	8003b88 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	711a      	strb	r2, [r3, #4]
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff ffce 	bl	8003f8c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	711a      	strb	r2, [r3, #4]
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b084      	sub	sp, #16
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7ff ffc7 	bl	8003fa0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7ff ffbd 	bl	8003fb4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	711a      	strb	r2, [r3, #4]
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e08d      	b.n	8004176 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_DMA_Init+0x138>)
 8004062:	429a      	cmp	r2, r3
 8004064:	d80f      	bhi.n	8004086 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	4b45      	ldr	r3, [pc, #276]	; (8004184 <HAL_DMA_Init+0x13c>)
 800406e:	4413      	add	r3, r2
 8004070:	4a45      	ldr	r2, [pc, #276]	; (8004188 <HAL_DMA_Init+0x140>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	009a      	lsls	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a42      	ldr	r2, [pc, #264]	; (800418c <HAL_DMA_Init+0x144>)
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
 8004084:	e00e      	b.n	80040a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	4b40      	ldr	r3, [pc, #256]	; (8004190 <HAL_DMA_Init+0x148>)
 800408e:	4413      	add	r3, r2
 8004090:	4a3d      	ldr	r2, [pc, #244]	; (8004188 <HAL_DMA_Init+0x140>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	009a      	lsls	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <HAL_DMA_Init+0x14c>)
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f9b6 	bl	8004468 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004104:	d102      	bne.n	800410c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004120:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <HAL_DMA_Init+0x104>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b04      	cmp	r3, #4
 8004130:	d80c      	bhi.n	800414c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f9d6 	bl	80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	e008      	b.n	800415e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40020407 	.word	0x40020407
 8004184:	bffdfff8 	.word	0xbffdfff8
 8004188:	cccccccd 	.word	0xcccccccd
 800418c:	40020000 	.word	0x40020000
 8004190:	bffdfbf8 	.word	0xbffdfbf8
 8004194:	40020400 	.word	0x40020400

08004198 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_DMA_Start_IT+0x20>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e066      	b.n	8004286 <HAL_DMA_Start_IT+0xee>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d155      	bne.n	8004278 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f8fb 	bl	80043ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d008      	beq.n	8004210 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 020e 	orr.w	r2, r2, #14
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e00f      	b.n	8004230 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0204 	bic.w	r2, r2, #4
 800421e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 020a 	orr.w	r2, r2, #10
 800422e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800424c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	2b00      	cmp	r3, #0
 8004254:	d007      	beq.n	8004266 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004264:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e005      	b.n	8004284 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004280:	2302      	movs	r3, #2
 8004282:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	2204      	movs	r2, #4
 80042b0:	409a      	lsls	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d026      	beq.n	8004308 <HAL_DMA_IRQHandler+0x7a>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d021      	beq.n	8004308 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0204 	bic.w	r2, r2, #4
 80042e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	f003 021f 	and.w	r2, r3, #31
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2104      	movs	r1, #4
 80042f0:	fa01 f202 	lsl.w	r2, r1, r2
 80042f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d071      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004306:	e06c      	b.n	80043e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2202      	movs	r2, #2
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02e      	beq.n	800437a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d029      	beq.n	800437a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020a 	bic.w	r2, r2, #10
 8004342:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	f003 021f 	and.w	r2, r3, #31
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2102      	movs	r1, #2
 800435a:	fa01 f202 	lsl.w	r2, r1, r2
 800435e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d038      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004378:	e033      	b.n	80043e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2208      	movs	r2, #8
 8004384:	409a      	lsls	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02a      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d025      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 020e 	bic.w	r2, r2, #14
 80043a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	2101      	movs	r1, #1
 80043b6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
}
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004402:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f003 021f 	and.w	r2, r3, #31
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2101      	movs	r1, #1
 8004424:	fa01 f202 	lsl.w	r2, r1, r2
 8004428:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b10      	cmp	r3, #16
 8004438:	d108      	bne.n	800444c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800444a:	e007      	b.n	800445c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004478:	429a      	cmp	r2, r3
 800447a:	d802      	bhi.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800447c:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e001      	b.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004484:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	3b08      	subs	r3, #8
 8004492:	4a12      	ldr	r2, [pc, #72]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	009a      	lsls	r2, r3, #2
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	461a      	mov	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	2201      	movs	r2, #1
 80044bc:	409a      	lsls	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40020407 	.word	0x40020407
 80044d4:	40020800 	.word	0x40020800
 80044d8:	40020820 	.word	0x40020820
 80044dc:	cccccccd 	.word	0xcccccccd
 80044e0:	40020880 	.word	0x40020880

080044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a08      	ldr	r2, [pc, #32]	; (8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004506:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3b01      	subs	r3, #1
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2201      	movs	r2, #1
 8004512:	409a      	lsls	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	1000823f 	.word	0x1000823f
 8004528:	40020940 	.word	0x40020940

0800452c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800453a:	e15a      	b.n	80047f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	2101      	movs	r1, #1
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	4013      	ands	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 814c 	beq.w	80047ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	2b01      	cmp	r3, #1
 800455e:	d005      	beq.n	800456c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004568:	2b02      	cmp	r3, #2
 800456a:	d130      	bne.n	80045ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	2203      	movs	r2, #3
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045a2:	2201      	movs	r2, #1
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 0201 	and.w	r2, r3, #1
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d017      	beq.n	800460a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	2203      	movs	r2, #3
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43db      	mvns	r3, r3
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d123      	bne.n	800465e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	08da      	lsrs	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3208      	adds	r2, #8
 800461e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004622:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	220f      	movs	r2, #15
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4013      	ands	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	08da      	lsrs	r2, r3, #3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3208      	adds	r2, #8
 8004658:	6939      	ldr	r1, [r7, #16]
 800465a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	2203      	movs	r2, #3
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 0203 	and.w	r2, r3, #3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80a6 	beq.w	80047ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046a0:	4b5b      	ldr	r3, [pc, #364]	; (8004810 <HAL_GPIO_Init+0x2e4>)
 80046a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a4:	4a5a      	ldr	r2, [pc, #360]	; (8004810 <HAL_GPIO_Init+0x2e4>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6613      	str	r3, [r2, #96]	; 0x60
 80046ac:	4b58      	ldr	r3, [pc, #352]	; (8004810 <HAL_GPIO_Init+0x2e4>)
 80046ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b8:	4a56      	ldr	r2, [pc, #344]	; (8004814 <HAL_GPIO_Init+0x2e8>)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	3302      	adds	r3, #2
 80046c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	220f      	movs	r2, #15
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046e2:	d01f      	beq.n	8004724 <HAL_GPIO_Init+0x1f8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a4c      	ldr	r2, [pc, #304]	; (8004818 <HAL_GPIO_Init+0x2ec>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d019      	beq.n	8004720 <HAL_GPIO_Init+0x1f4>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a4b      	ldr	r2, [pc, #300]	; (800481c <HAL_GPIO_Init+0x2f0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <HAL_GPIO_Init+0x1f0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a4a      	ldr	r2, [pc, #296]	; (8004820 <HAL_GPIO_Init+0x2f4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00d      	beq.n	8004718 <HAL_GPIO_Init+0x1ec>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a49      	ldr	r2, [pc, #292]	; (8004824 <HAL_GPIO_Init+0x2f8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <HAL_GPIO_Init+0x1e8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a48      	ldr	r2, [pc, #288]	; (8004828 <HAL_GPIO_Init+0x2fc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <HAL_GPIO_Init+0x1e4>
 800470c:	2305      	movs	r3, #5
 800470e:	e00a      	b.n	8004726 <HAL_GPIO_Init+0x1fa>
 8004710:	2306      	movs	r3, #6
 8004712:	e008      	b.n	8004726 <HAL_GPIO_Init+0x1fa>
 8004714:	2304      	movs	r3, #4
 8004716:	e006      	b.n	8004726 <HAL_GPIO_Init+0x1fa>
 8004718:	2303      	movs	r3, #3
 800471a:	e004      	b.n	8004726 <HAL_GPIO_Init+0x1fa>
 800471c:	2302      	movs	r3, #2
 800471e:	e002      	b.n	8004726 <HAL_GPIO_Init+0x1fa>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <HAL_GPIO_Init+0x1fa>
 8004724:	2300      	movs	r3, #0
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	f002 0203 	and.w	r2, r2, #3
 800472c:	0092      	lsls	r2, r2, #2
 800472e:	4093      	lsls	r3, r2
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004736:	4937      	ldr	r1, [pc, #220]	; (8004814 <HAL_GPIO_Init+0x2e8>)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	089b      	lsrs	r3, r3, #2
 800473c:	3302      	adds	r3, #2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004744:	4b39      	ldr	r3, [pc, #228]	; (800482c <HAL_GPIO_Init+0x300>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	43db      	mvns	r3, r3
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4013      	ands	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004768:	4a30      	ldr	r2, [pc, #192]	; (800482c <HAL_GPIO_Init+0x300>)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800476e:	4b2f      	ldr	r3, [pc, #188]	; (800482c <HAL_GPIO_Init+0x300>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	43db      	mvns	r3, r3
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4013      	ands	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004792:	4a26      	ldr	r2, [pc, #152]	; (800482c <HAL_GPIO_Init+0x300>)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004798:	4b24      	ldr	r3, [pc, #144]	; (800482c <HAL_GPIO_Init+0x300>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4013      	ands	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <HAL_GPIO_Init+0x300>)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047c2:	4b1a      	ldr	r3, [pc, #104]	; (800482c <HAL_GPIO_Init+0x300>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	43db      	mvns	r3, r3
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4013      	ands	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047e6:	4a11      	ldr	r2, [pc, #68]	; (800482c <HAL_GPIO_Init+0x300>)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3301      	adds	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f47f ae9d 	bne.w	800453c <HAL_GPIO_Init+0x10>
  }
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	40021000 	.word	0x40021000
 8004814:	40010000 	.word	0x40010000
 8004818:	48000400 	.word	0x48000400
 800481c:	48000800 	.word	0x48000800
 8004820:	48000c00 	.word	0x48000c00
 8004824:	48001000 	.word	0x48001000
 8004828:	48001400 	.word	0x48001400
 800482c:	40010400 	.word	0x40010400

08004830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	807b      	strh	r3, [r7, #2]
 800483c:	4613      	mov	r3, r2
 800483e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004840:	787b      	ldrb	r3, [r7, #1]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800484c:	e002      	b.n	8004854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800484e:	887a      	ldrh	r2, [r7, #2]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0bb      	b.n	80049ee <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b05      	cmp	r3, #5
 8004880:	d101      	bne.n	8004886 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0b3      	b.n	80049ee <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d101      	bne.n	8004896 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e0ab      	b.n	80049ee <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004896:	4b58      	ldr	r3, [pc, #352]	; (80049f8 <HAL_OPAMP_Init+0x198>)
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	4a57      	ldr	r2, [pc, #348]	; (80049f8 <HAL_OPAMP_Init+0x198>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6613      	str	r3, [r2, #96]	; 0x60
 80048a2:	4b55      	ldr	r3, [pc, #340]	; (80049f8 <HAL_OPAMP_Init+0x198>)
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fd f930 	bl	8001b28 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d003      	beq.n	80048d8 <HAL_OPAMP_Init+0x78>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b60      	cmp	r3, #96	; 0x60
 80048d6:	d133      	bne.n	8004940 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 0110 	bic.w	r1, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b41      	ldr	r3, [pc, #260]	; (80049fc <HAL_OPAMP_Init+0x19c>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6851      	ldr	r1, [r2, #4]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6892      	ldr	r2, [r2, #8]
 8004900:	4311      	orrs	r1, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6912      	ldr	r2, [r2, #16]
 8004906:	430a      	orrs	r2, r1
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	7d09      	ldrb	r1, [r1, #20]
 800490c:	2901      	cmp	r1, #1
 800490e:	d102      	bne.n	8004916 <HAL_OPAMP_Init+0xb6>
 8004910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004914:	e000      	b.n	8004918 <HAL_OPAMP_Init+0xb8>
 8004916:	2100      	movs	r1, #0
 8004918:	4311      	orrs	r1, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004924:	4311      	orrs	r1, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800492a:	04d2      	lsls	r2, r2, #19
 800492c:	4311      	orrs	r1, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004932:	0612      	lsls	r2, r2, #24
 8004934:	4311      	orrs	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	430b      	orrs	r3, r1
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e035      	b.n	80049ac <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 0110 	bic.w	r1, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4b27      	ldr	r3, [pc, #156]	; (80049fc <HAL_OPAMP_Init+0x19c>)
 800495e:	4013      	ands	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6851      	ldr	r1, [r2, #4]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6892      	ldr	r2, [r2, #8]
 8004968:	4311      	orrs	r1, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68d2      	ldr	r2, [r2, #12]
 800496e:	4311      	orrs	r1, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6912      	ldr	r2, [r2, #16]
 8004974:	430a      	orrs	r2, r1
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	7d09      	ldrb	r1, [r1, #20]
 800497a:	2901      	cmp	r1, #1
 800497c:	d102      	bne.n	8004984 <HAL_OPAMP_Init+0x124>
 800497e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004982:	e000      	b.n	8004986 <HAL_OPAMP_Init+0x126>
 8004984:	2100      	movs	r1, #0
 8004986:	4311      	orrs	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800498c:	4311      	orrs	r1, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004992:	4311      	orrs	r1, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004998:	04d2      	lsls	r2, r2, #19
 800499a:	4311      	orrs	r1, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049a0:	0612      	lsls	r2, r2, #24
 80049a2:	4311      	orrs	r1, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	db10      	blt.n	80049d8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699a      	ldr	r2, [r3, #24]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000
 80049fc:	e0003e11 	.word	0xe0003e11

08004a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d141      	bne.n	8004a92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a0e:	4b4b      	ldr	r3, [pc, #300]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1a:	d131      	bne.n	8004a80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a1c:	4b47      	ldr	r3, [pc, #284]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a22:	4a46      	ldr	r2, [pc, #280]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a2c:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a34:	4a41      	ldr	r2, [pc, #260]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a3c:	4b40      	ldr	r3, [pc, #256]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2232      	movs	r2, #50	; 0x32
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	4a3f      	ldr	r2, [pc, #252]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	0c9b      	lsrs	r3, r3, #18
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a52:	e002      	b.n	8004a5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a5a:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d102      	bne.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f2      	bne.n	8004a54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a6e:	4b33      	ldr	r3, [pc, #204]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7a:	d158      	bne.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e057      	b.n	8004b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a80:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a86:	4a2d      	ldr	r2, [pc, #180]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a90:	e04d      	b.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a98:	d141      	bne.n	8004b1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a9a:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa6:	d131      	bne.n	8004b0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aa8:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aae:	4a23      	ldr	r2, [pc, #140]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ab8:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ac0:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ac6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2232      	movs	r2, #50	; 0x32
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	0c9b      	lsrs	r3, r3, #18
 8004ada:	3301      	adds	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ade:	e002      	b.n	8004ae6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae6:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af2:	d102      	bne.n	8004afa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f2      	bne.n	8004ae0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004afa:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d112      	bne.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e011      	b.n	8004b30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b1c:	e007      	b.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b1e:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b26:	4a05      	ldr	r2, [pc, #20]	; (8004b3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40007000 	.word	0x40007000
 8004b40:	20000000 	.word	0x20000000
 8004b44:	431bde83 	.word	0x431bde83

08004b48 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004b50:	f7fd fc62 	bl	8002418 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e069      	b.n	8004c34 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10b      	bne.n	8004b84 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fd f88f 	bl	8001c98 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004b7a:	f241 3188 	movw	r1, #5000	; 0x1388
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f85e 	bl	8004c40 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	021a      	lsls	r2, r3, #8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2120      	movs	r1, #32
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f856 	bl	8004c5c <QSPI_WaitFlagStateUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004bb4:	7afb      	ldrb	r3, [r7, #11]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d137      	bne.n	8004c2a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bc4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6852      	ldr	r2, [r2, #4]
 8004bcc:	0611      	lsls	r1, r2, #24
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68d2      	ldr	r2, [r2, #12]
 8004bd2:	4311      	orrs	r1, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	69d2      	ldr	r2, [r2, #28]
 8004bd8:	4311      	orrs	r1, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6a12      	ldr	r2, [r2, #32]
 8004bde:	4311      	orrs	r1, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <HAL_QSPI_Init+0xf4>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6912      	ldr	r2, [r2, #16]
 8004bf6:	0411      	lsls	r1, r2, #16
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6952      	ldr	r2, [r2, #20]
 8004bfc:	4311      	orrs	r1, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6992      	ldr	r2, [r2, #24]
 8004c02:	4311      	orrs	r1, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004c32:	7afb      	ldrb	r3, [r7, #11]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	ffe0f8fe 	.word	0xffe0f8fe

08004c40 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004c6c:	e01a      	b.n	8004ca4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c74:	d016      	beq.n	8004ca4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fd fbcf 	bl	8002418 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2204      	movs	r2, #4
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e00e      	b.n	8004cc2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bf14      	ite	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	2300      	moveq	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d1d6      	bne.n	8004c6e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e2fe      	b.n	80052dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d075      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cea:	4b97      	ldr	r3, [pc, #604]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cf4:	4b94      	ldr	r3, [pc, #592]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	d102      	bne.n	8004d0a <HAL_RCC_OscConfig+0x3e>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d002      	beq.n	8004d10 <HAL_RCC_OscConfig+0x44>
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d10b      	bne.n	8004d28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	4b8d      	ldr	r3, [pc, #564]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d05b      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x108>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d157      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e2d9      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d30:	d106      	bne.n	8004d40 <HAL_RCC_OscConfig+0x74>
 8004d32:	4b85      	ldr	r3, [pc, #532]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a84      	ldr	r2, [pc, #528]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e01d      	b.n	8004d7c <HAL_RCC_OscConfig+0xb0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d48:	d10c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x98>
 8004d4a:	4b7f      	ldr	r3, [pc, #508]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7e      	ldr	r2, [pc, #504]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	4b7c      	ldr	r3, [pc, #496]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a7b      	ldr	r2, [pc, #492]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e00b      	b.n	8004d7c <HAL_RCC_OscConfig+0xb0>
 8004d64:	4b78      	ldr	r3, [pc, #480]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a77      	ldr	r2, [pc, #476]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	4b75      	ldr	r3, [pc, #468]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a74      	ldr	r2, [pc, #464]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d013      	beq.n	8004dac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fd fb48 	bl	8002418 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7fd fb44 	bl	8002418 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e29e      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d9e:	4b6a      	ldr	r3, [pc, #424]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0xc0>
 8004daa:	e014      	b.n	8004dd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fd fb34 	bl	8002418 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db4:	f7fd fb30 	bl	8002418 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	; 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e28a      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dc6:	4b60      	ldr	r3, [pc, #384]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0xe8>
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d075      	beq.n	8004ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004de2:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dec:	4b56      	ldr	r3, [pc, #344]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	d102      	bne.n	8004e02 <HAL_RCC_OscConfig+0x136>
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d002      	beq.n	8004e08 <HAL_RCC_OscConfig+0x13c>
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d11f      	bne.n	8004e48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e08:	4b4f      	ldr	r3, [pc, #316]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_RCC_OscConfig+0x154>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e25d      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e20:	4b49      	ldr	r3, [pc, #292]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	061b      	lsls	r3, r3, #24
 8004e2e:	4946      	ldr	r1, [pc, #280]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e34:	4b45      	ldr	r3, [pc, #276]	; (8004f4c <HAL_RCC_OscConfig+0x280>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fd f9bf 	bl	80021bc <HAL_InitTick>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d043      	beq.n	8004ecc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e249      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d023      	beq.n	8004e98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e50:	4b3d      	ldr	r3, [pc, #244]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a3c      	ldr	r2, [pc, #240]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fd fadc 	bl	8002418 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e64:	f7fd fad8 	bl	8002418 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e232      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e76:	4b34      	ldr	r3, [pc, #208]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	061b      	lsls	r3, r3, #24
 8004e90:	492d      	ldr	r1, [pc, #180]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	604b      	str	r3, [r1, #4]
 8004e96:	e01a      	b.n	8004ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e98:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7fd fab8 	bl	8002418 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eac:	f7fd fab4 	bl	8002418 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e20e      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ebe:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0x1e0>
 8004eca:	e000      	b.n	8004ece <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ecc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d041      	beq.n	8004f5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01c      	beq.n	8004f1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ee2:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee8:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef2:	f7fd fa91 	bl	8002418 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004efa:	f7fd fa8d 	bl	8002418 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e1e7      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ef      	beq.n	8004efa <HAL_RCC_OscConfig+0x22e>
 8004f1a:	e020      	b.n	8004f5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f22:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2c:	f7fd fa74 	bl	8002418 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f32:	e00d      	b.n	8004f50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f34:	f7fd fa70 	bl	8002418 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d906      	bls.n	8004f50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e1ca      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f50:	4b8c      	ldr	r3, [pc, #560]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8004f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1ea      	bne.n	8004f34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80a6 	beq.w	80050b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f70:	4b84      	ldr	r3, [pc, #528]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8004f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_RCC_OscConfig+0x2b4>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <HAL_RCC_OscConfig+0x2b6>
 8004f80:	2300      	movs	r3, #0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00d      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f86:	4b7f      	ldr	r3, [pc, #508]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8004f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8a:	4a7e      	ldr	r2, [pc, #504]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8004f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f90:	6593      	str	r3, [r2, #88]	; 0x58
 8004f92:	4b7c      	ldr	r3, [pc, #496]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa2:	4b79      	ldr	r3, [pc, #484]	; (8005188 <HAL_RCC_OscConfig+0x4bc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d118      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fae:	4b76      	ldr	r3, [pc, #472]	; (8005188 <HAL_RCC_OscConfig+0x4bc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a75      	ldr	r2, [pc, #468]	; (8005188 <HAL_RCC_OscConfig+0x4bc>)
 8004fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fba:	f7fd fa2d 	bl	8002418 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc2:	f7fd fa29 	bl	8002418 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e183      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd4:	4b6c      	ldr	r3, [pc, #432]	; (8005188 <HAL_RCC_OscConfig+0x4bc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d108      	bne.n	8004ffa <HAL_RCC_OscConfig+0x32e>
 8004fe8:	4b66      	ldr	r3, [pc, #408]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	4a65      	ldr	r2, [pc, #404]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ff8:	e024      	b.n	8005044 <HAL_RCC_OscConfig+0x378>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d110      	bne.n	8005024 <HAL_RCC_OscConfig+0x358>
 8005002:	4b60      	ldr	r3, [pc, #384]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	4a5e      	ldr	r2, [pc, #376]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 800500a:	f043 0304 	orr.w	r3, r3, #4
 800500e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005012:	4b5c      	ldr	r3, [pc, #368]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	4a5a      	ldr	r2, [pc, #360]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005022:	e00f      	b.n	8005044 <HAL_RCC_OscConfig+0x378>
 8005024:	4b57      	ldr	r3, [pc, #348]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	4a56      	ldr	r2, [pc, #344]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005034:	4b53      	ldr	r3, [pc, #332]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	4a52      	ldr	r2, [pc, #328]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 800503c:	f023 0304 	bic.w	r3, r3, #4
 8005040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d016      	beq.n	800507a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504c:	f7fd f9e4 	bl	8002418 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005052:	e00a      	b.n	800506a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005054:	f7fd f9e0 	bl	8002418 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e138      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506a:	4b46      	ldr	r3, [pc, #280]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0ed      	beq.n	8005054 <HAL_RCC_OscConfig+0x388>
 8005078:	e015      	b.n	80050a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507a:	f7fd f9cd 	bl	8002418 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005080:	e00a      	b.n	8005098 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005082:	f7fd f9c9 	bl	8002418 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005090:	4293      	cmp	r3, r2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e121      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005098:	4b3a      	ldr	r3, [pc, #232]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1ed      	bne.n	8005082 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050a6:	7ffb      	ldrb	r3, [r7, #31]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d105      	bne.n	80050b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ac:	4b35      	ldr	r3, [pc, #212]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 80050ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b0:	4a34      	ldr	r2, [pc, #208]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 80050b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d03c      	beq.n	800513e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01c      	beq.n	8005106 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050cc:	4b2d      	ldr	r3, [pc, #180]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 80050ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050d2:	4a2c      	ldr	r2, [pc, #176]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050dc:	f7fd f99c 	bl	8002418 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050e4:	f7fd f998 	bl	8002418 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e0f2      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050f6:	4b23      	ldr	r3, [pc, #140]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 80050f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0ef      	beq.n	80050e4 <HAL_RCC_OscConfig+0x418>
 8005104:	e01b      	b.n	800513e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005106:	4b1f      	ldr	r3, [pc, #124]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8005108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800510c:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fd f97f 	bl	8002418 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800511e:	f7fd f97b 	bl	8002418 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e0d5      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005130:	4b14      	ldr	r3, [pc, #80]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8005132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1ef      	bne.n	800511e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 80c9 	beq.w	80052da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005148:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b0c      	cmp	r3, #12
 8005152:	f000 8083 	beq.w	800525c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d15e      	bne.n	800521c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a08      	ldr	r2, [pc, #32]	; (8005184 <HAL_RCC_OscConfig+0x4b8>)
 8005164:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516a:	f7fd f955 	bl	8002418 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005170:	e00c      	b.n	800518c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005172:	f7fd f951 	bl	8002418 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d905      	bls.n	800518c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e0ab      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
 8005184:	40021000 	.word	0x40021000
 8005188:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518c:	4b55      	ldr	r3, [pc, #340]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ec      	bne.n	8005172 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005198:	4b52      	ldr	r3, [pc, #328]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	4b52      	ldr	r3, [pc, #328]	; (80052e8 <HAL_RCC_OscConfig+0x61c>)
 800519e:	4013      	ands	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6a11      	ldr	r1, [r2, #32]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051a8:	3a01      	subs	r2, #1
 80051aa:	0112      	lsls	r2, r2, #4
 80051ac:	4311      	orrs	r1, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051b2:	0212      	lsls	r2, r2, #8
 80051b4:	4311      	orrs	r1, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051ba:	0852      	lsrs	r2, r2, #1
 80051bc:	3a01      	subs	r2, #1
 80051be:	0552      	lsls	r2, r2, #21
 80051c0:	4311      	orrs	r1, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c6:	0852      	lsrs	r2, r2, #1
 80051c8:	3a01      	subs	r2, #1
 80051ca:	0652      	lsls	r2, r2, #25
 80051cc:	4311      	orrs	r1, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051d2:	06d2      	lsls	r2, r2, #27
 80051d4:	430a      	orrs	r2, r1
 80051d6:	4943      	ldr	r1, [pc, #268]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051dc:	4b41      	ldr	r3, [pc, #260]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a40      	ldr	r2, [pc, #256]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 80051e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051e8:	4b3e      	ldr	r3, [pc, #248]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4a3d      	ldr	r2, [pc, #244]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 80051ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fd f910 	bl	8002418 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fd f90c 	bl	8002418 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e066      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800520e:	4b35      	ldr	r3, [pc, #212]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x530>
 800521a:	e05e      	b.n	80052da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521c:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a30      	ldr	r2, [pc, #192]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fd f8f6 	bl	8002418 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fd f8f2 	bl	8002418 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e04c      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005242:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800524e:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	4924      	ldr	r1, [pc, #144]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 8005254:	4b25      	ldr	r3, [pc, #148]	; (80052ec <HAL_RCC_OscConfig+0x620>)
 8005256:	4013      	ands	r3, r2
 8005258:	60cb      	str	r3, [r1, #12]
 800525a:	e03e      	b.n	80052da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e039      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005268:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <HAL_RCC_OscConfig+0x618>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f003 0203 	and.w	r2, r3, #3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	429a      	cmp	r2, r3
 800527a:	d12c      	bne.n	80052d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	3b01      	subs	r3, #1
 8005288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528a:	429a      	cmp	r2, r3
 800528c:	d123      	bne.n	80052d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d11b      	bne.n	80052d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d113      	bne.n	80052d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	3b01      	subs	r3, #1
 80052bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d109      	bne.n	80052d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	3b01      	subs	r3, #1
 80052d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d001      	beq.n	80052da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3720      	adds	r7, #32
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40021000 	.word	0x40021000
 80052e8:	019f800c 	.word	0x019f800c
 80052ec:	feeefffc 	.word	0xfeeefffc

080052f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e11e      	b.n	8005546 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005308:	4b91      	ldr	r3, [pc, #580]	; (8005550 <HAL_RCC_ClockConfig+0x260>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d910      	bls.n	8005338 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005316:	4b8e      	ldr	r3, [pc, #568]	; (8005550 <HAL_RCC_ClockConfig+0x260>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 020f 	bic.w	r2, r3, #15
 800531e:	498c      	ldr	r1, [pc, #560]	; (8005550 <HAL_RCC_ClockConfig+0x260>)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005326:	4b8a      	ldr	r3, [pc, #552]	; (8005550 <HAL_RCC_ClockConfig+0x260>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e106      	b.n	8005546 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d073      	beq.n	800542c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b03      	cmp	r3, #3
 800534a:	d129      	bne.n	80053a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800534c:	4b81      	ldr	r3, [pc, #516]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0f4      	b.n	8005546 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800535c:	f000 f9fa 	bl	8005754 <RCC_GetSysClockFreqFromPLLSource>
 8005360:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4a7c      	ldr	r2, [pc, #496]	; (8005558 <HAL_RCC_ClockConfig+0x268>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d93f      	bls.n	80053ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800536a:	4b7a      	ldr	r3, [pc, #488]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d009      	beq.n	800538a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800537e:	2b00      	cmp	r3, #0
 8005380:	d033      	beq.n	80053ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005386:	2b00      	cmp	r3, #0
 8005388:	d12f      	bne.n	80053ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800538a:	4b72      	ldr	r3, [pc, #456]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005392:	4a70      	ldr	r2, [pc, #448]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 8005394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005398:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800539a:	2380      	movs	r3, #128	; 0x80
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e024      	b.n	80053ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053a8:	4b6a      	ldr	r3, [pc, #424]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0c6      	b.n	8005546 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053b8:	4b66      	ldr	r3, [pc, #408]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0be      	b.n	8005546 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053c8:	f000 f8ce 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 80053cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4a61      	ldr	r2, [pc, #388]	; (8005558 <HAL_RCC_ClockConfig+0x268>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d909      	bls.n	80053ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053d6:	4b5f      	ldr	r3, [pc, #380]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053de:	4a5d      	ldr	r2, [pc, #372]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 80053e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ea:	4b5a      	ldr	r3, [pc, #360]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f023 0203 	bic.w	r2, r3, #3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	4957      	ldr	r1, [pc, #348]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fc:	f7fd f80c 	bl	8002418 <HAL_GetTick>
 8005400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005402:	e00a      	b.n	800541a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005404:	f7fd f808 	bl	8002418 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005412:	4293      	cmp	r3, r2
 8005414:	d901      	bls.n	800541a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e095      	b.n	8005546 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541a:	4b4e      	ldr	r3, [pc, #312]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 020c 	and.w	r2, r3, #12
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	429a      	cmp	r2, r3
 800542a:	d1eb      	bne.n	8005404 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d023      	beq.n	8005480 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005444:	4b43      	ldr	r3, [pc, #268]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4a42      	ldr	r2, [pc, #264]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 800544a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800544e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800545c:	4b3d      	ldr	r3, [pc, #244]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005464:	4a3b      	ldr	r2, [pc, #236]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 8005466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800546a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800546c:	4b39      	ldr	r3, [pc, #228]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4936      	ldr	r1, [pc, #216]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
 800547e:	e008      	b.n	8005492 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d105      	bne.n	8005492 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005486:	4b33      	ldr	r3, [pc, #204]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	4a32      	ldr	r2, [pc, #200]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 800548c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005490:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005492:	4b2f      	ldr	r3, [pc, #188]	; (8005550 <HAL_RCC_ClockConfig+0x260>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d21d      	bcs.n	80054dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a0:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <HAL_RCC_ClockConfig+0x260>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 020f 	bic.w	r2, r3, #15
 80054a8:	4929      	ldr	r1, [pc, #164]	; (8005550 <HAL_RCC_ClockConfig+0x260>)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054b0:	f7fc ffb2 	bl	8002418 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b8:	f7fc ffae 	bl	8002418 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e03b      	b.n	8005546 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b20      	ldr	r3, [pc, #128]	; (8005550 <HAL_RCC_ClockConfig+0x260>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d1ed      	bne.n	80054b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054e8:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4917      	ldr	r1, [pc, #92]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005506:	4b13      	ldr	r3, [pc, #76]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	490f      	ldr	r1, [pc, #60]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 8005516:	4313      	orrs	r3, r2
 8005518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800551a:	f000 f825 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 800551e:	4602      	mov	r2, r0
 8005520:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <HAL_RCC_ClockConfig+0x264>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	091b      	lsrs	r3, r3, #4
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	490c      	ldr	r1, [pc, #48]	; (800555c <HAL_RCC_ClockConfig+0x26c>)
 800552c:	5ccb      	ldrb	r3, [r1, r3]
 800552e:	f003 031f 	and.w	r3, r3, #31
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <HAL_RCC_ClockConfig+0x270>)
 8005538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800553a:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <HAL_RCC_ClockConfig+0x274>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fc fe3c 	bl	80021bc <HAL_InitTick>
 8005544:	4603      	mov	r3, r0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40022000 	.word	0x40022000
 8005554:	40021000 	.word	0x40021000
 8005558:	04c4b400 	.word	0x04c4b400
 800555c:	0800b2d8 	.word	0x0800b2d8
 8005560:	20000000 	.word	0x20000000
 8005564:	20000004 	.word	0x20000004

08005568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800556e:	4b2c      	ldr	r3, [pc, #176]	; (8005620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
 8005576:	2b04      	cmp	r3, #4
 8005578:	d102      	bne.n	8005580 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800557a:	4b2a      	ldr	r3, [pc, #168]	; (8005624 <HAL_RCC_GetSysClockFreq+0xbc>)
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	e047      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005580:	4b27      	ldr	r3, [pc, #156]	; (8005620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 030c 	and.w	r3, r3, #12
 8005588:	2b08      	cmp	r3, #8
 800558a:	d102      	bne.n	8005592 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800558c:	4b25      	ldr	r3, [pc, #148]	; (8005624 <HAL_RCC_GetSysClockFreq+0xbc>)
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	e03e      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005592:	4b23      	ldr	r3, [pc, #140]	; (8005620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
 800559a:	2b0c      	cmp	r3, #12
 800559c:	d136      	bne.n	800560c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800559e:	4b20      	ldr	r3, [pc, #128]	; (8005620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	3301      	adds	r3, #1
 80055b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d10c      	bne.n	80055d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055bc:	4a19      	ldr	r2, [pc, #100]	; (8005624 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	4a16      	ldr	r2, [pc, #88]	; (8005620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c6:	68d2      	ldr	r2, [r2, #12]
 80055c8:	0a12      	lsrs	r2, r2, #8
 80055ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055ce:	fb02 f303 	mul.w	r3, r2, r3
 80055d2:	617b      	str	r3, [r7, #20]
      break;
 80055d4:	e00c      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055d6:	4a13      	ldr	r2, [pc, #76]	; (8005624 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	fbb2 f3f3 	udiv	r3, r2, r3
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e0:	68d2      	ldr	r2, [r2, #12]
 80055e2:	0a12      	lsrs	r2, r2, #8
 80055e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055e8:	fb02 f303 	mul.w	r3, r2, r3
 80055ec:	617b      	str	r3, [r7, #20]
      break;
 80055ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	0e5b      	lsrs	r3, r3, #25
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	3301      	adds	r3, #1
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	e001      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005610:	693b      	ldr	r3, [r7, #16]
}
 8005612:	4618      	mov	r0, r3
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000
 8005624:	00f42400 	.word	0x00f42400

08005628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <HAL_RCC_GetHCLKFreq+0x14>)
 800562e:	681b      	ldr	r3, [r3, #0]
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000000 	.word	0x20000000

08005640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005644:	f7ff fff0 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8005648:	4602      	mov	r2, r0
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0a1b      	lsrs	r3, r3, #8
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	4904      	ldr	r1, [pc, #16]	; (8005668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005656:	5ccb      	ldrb	r3, [r1, r3]
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005660:	4618      	mov	r0, r3
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000
 8005668:	0800b2e8 	.word	0x0800b2e8

0800566c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005670:	f7ff ffda 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8005674:	4602      	mov	r2, r0
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	0adb      	lsrs	r3, r3, #11
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	4904      	ldr	r1, [pc, #16]	; (8005694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005682:	5ccb      	ldrb	r3, [r1, r3]
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40021000 	.word	0x40021000
 8005694:	0800b2e8 	.word	0x0800b2e8

08005698 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	220f      	movs	r2, #15
 80056a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80056a8:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <HAL_RCC_GetClockConfig+0x5c>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0203 	and.w	r2, r3, #3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80056b4:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <HAL_RCC_GetClockConfig+0x5c>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80056c0:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <HAL_RCC_GetClockConfig+0x5c>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <HAL_RCC_GetClockConfig+0x5c>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	08db      	lsrs	r3, r3, #3
 80056d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80056da:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <HAL_RCC_GetClockConfig+0x60>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 020f 	and.w	r2, r3, #15
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	601a      	str	r2, [r3, #0]
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000
 80056f8:	40022000 	.word	0x40022000

080056fc <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <HAL_RCC_EnableCSS+0x1c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a04      	ldr	r2, [pc, #16]	; (8005718 <HAL_RCC_EnableCSS+0x1c>)
 8005706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800570a:	6013      	str	r3, [r2, #0]
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40021000 	.word	0x40021000

0800571c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572c:	d105      	bne.n	800573a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800572e:	f000 f809 	bl	8005744 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005732:	4b03      	ldr	r3, [pc, #12]	; (8005740 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005738:	621a      	str	r2, [r3, #32]
  }
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000

08005744 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800575a:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005764:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b03      	cmp	r3, #3
 8005776:	d10c      	bne.n	8005792 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005778:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005782:	68d2      	ldr	r2, [r2, #12]
 8005784:	0a12      	lsrs	r2, r2, #8
 8005786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	617b      	str	r3, [r7, #20]
    break;
 8005790:	e00c      	b.n	80057ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005792:	4a11      	ldr	r2, [pc, #68]	; (80057d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	4a0e      	ldr	r2, [pc, #56]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800579c:	68d2      	ldr	r2, [r2, #12]
 800579e:	0a12      	lsrs	r2, r2, #8
 80057a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]
    break;
 80057aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	0e5b      	lsrs	r3, r3, #25
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	3301      	adds	r3, #1
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057c6:	687b      	ldr	r3, [r7, #4]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	40021000 	.word	0x40021000
 80057d8:	00f42400 	.word	0x00f42400

080057dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057e4:	2300      	movs	r3, #0
 80057e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057e8:	2300      	movs	r3, #0
 80057ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8098 	beq.w	800592a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057fa:	2300      	movs	r3, #0
 80057fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057fe:	4b43      	ldr	r3, [pc, #268]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10d      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800580a:	4b40      	ldr	r3, [pc, #256]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580e:	4a3f      	ldr	r2, [pc, #252]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005814:	6593      	str	r3, [r2, #88]	; 0x58
 8005816:	4b3d      	ldr	r3, [pc, #244]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581e:	60bb      	str	r3, [r7, #8]
 8005820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005822:	2301      	movs	r3, #1
 8005824:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005826:	4b3a      	ldr	r3, [pc, #232]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a39      	ldr	r2, [pc, #228]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800582c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005830:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005832:	f7fc fdf1 	bl	8002418 <HAL_GetTick>
 8005836:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005838:	e009      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583a:	f7fc fded 	bl	8002418 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d902      	bls.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	74fb      	strb	r3, [r7, #19]
        break;
 800584c:	e005      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800584e:	4b30      	ldr	r3, [pc, #192]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0ef      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800585a:	7cfb      	ldrb	r3, [r7, #19]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d159      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005860:	4b2a      	ldr	r3, [pc, #168]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01e      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	429a      	cmp	r2, r3
 800587a:	d019      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800587c:	4b23      	ldr	r3, [pc, #140]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005886:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005888:	4b20      	ldr	r3, [pc, #128]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	4a1f      	ldr	r2, [pc, #124]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005898:	4b1c      	ldr	r3, [pc, #112]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589e:	4a1b      	ldr	r2, [pc, #108]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058a8:	4a18      	ldr	r2, [pc, #96]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d016      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ba:	f7fc fdad 	bl	8002418 <HAL_GetTick>
 80058be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c0:	e00b      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fc fda9 	bl	8002418 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d902      	bls.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	74fb      	strb	r3, [r7, #19]
            break;
 80058d8:	e006      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ec      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058e8:	7cfb      	ldrb	r3, [r7, #19]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ee:	4b07      	ldr	r3, [pc, #28]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fc:	4903      	ldr	r1, [pc, #12]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005904:	e008      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005906:	7cfb      	ldrb	r3, [r7, #19]
 8005908:	74bb      	strb	r3, [r7, #18]
 800590a:	e005      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800590c:	40021000 	.word	0x40021000
 8005910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	7cfb      	ldrb	r3, [r7, #19]
 8005916:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005918:	7c7b      	ldrb	r3, [r7, #17]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d105      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800591e:	4ba7      	ldr	r3, [pc, #668]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005922:	4aa6      	ldr	r2, [pc, #664]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005928:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005936:	4ba1      	ldr	r3, [pc, #644]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593c:	f023 0203 	bic.w	r2, r3, #3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	499d      	ldr	r1, [pc, #628]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005958:	4b98      	ldr	r3, [pc, #608]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	f023 020c 	bic.w	r2, r3, #12
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	4995      	ldr	r1, [pc, #596]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800597a:	4b90      	ldr	r3, [pc, #576]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	498c      	ldr	r1, [pc, #560]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800599c:	4b87      	ldr	r3, [pc, #540]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	4984      	ldr	r1, [pc, #528]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059be:	4b7f      	ldr	r3, [pc, #508]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	497b      	ldr	r1, [pc, #492]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059e0:	4b76      	ldr	r3, [pc, #472]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	4973      	ldr	r1, [pc, #460]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a02:	4b6e      	ldr	r3, [pc, #440]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	496a      	ldr	r1, [pc, #424]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a24:	4b65      	ldr	r3, [pc, #404]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	4962      	ldr	r1, [pc, #392]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a46:	4b5d      	ldr	r3, [pc, #372]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	4959      	ldr	r1, [pc, #356]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a68:	4b54      	ldr	r3, [pc, #336]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a6e:	f023 0203 	bic.w	r2, r3, #3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	4951      	ldr	r1, [pc, #324]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a8a:	4b4c      	ldr	r3, [pc, #304]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	4948      	ldr	r1, [pc, #288]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d015      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aac:	4b43      	ldr	r3, [pc, #268]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	4940      	ldr	r1, [pc, #256]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aca:	d105      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005acc:	4b3b      	ldr	r3, [pc, #236]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a3a      	ldr	r2, [pc, #232]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d015      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ae4:	4b35      	ldr	r3, [pc, #212]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	4932      	ldr	r1, [pc, #200]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b02:	d105      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b04:	4b2d      	ldr	r3, [pc, #180]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4a2c      	ldr	r2, [pc, #176]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b0e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d015      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b1c:	4b27      	ldr	r3, [pc, #156]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	4924      	ldr	r1, [pc, #144]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b3c:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d015      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b54:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	4916      	ldr	r1, [pc, #88]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b72:	d105      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4a10      	ldr	r2, [pc, #64]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d019      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	4908      	ldr	r1, [pc, #32]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005baa:	d109      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bac:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4a02      	ldr	r2, [pc, #8]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb6:	60d3      	str	r3, [r2, #12]
 8005bb8:	e002      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d015      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bcc:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	4926      	ldr	r1, [pc, #152]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bea:	d105      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bec:	4b21      	ldr	r3, [pc, #132]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4a20      	ldr	r2, [pc, #128]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d015      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c12:	4918      	ldr	r1, [pc, #96]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c22:	d105      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c24:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d015      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4a:	490a      	ldr	r1, [pc, #40]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c5a:	d105      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c68:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40021000 	.word	0x40021000

08005c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e09d      	b.n	8005dc6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d108      	bne.n	8005ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9a:	d009      	beq.n	8005cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	61da      	str	r2, [r3, #28]
 8005ca2:	e005      	b.n	8005cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fc f87c 	bl	8001dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cf0:	d902      	bls.n	8005cf8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e002      	b.n	8005cfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d06:	d007      	beq.n	8005d18 <HAL_SPI_Init+0xa0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d10:	d002      	beq.n	8005d18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5a:	ea42 0103 	orr.w	r1, r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	0c1b      	lsrs	r3, r3, #16
 8005d74:	f003 0204 	and.w	r2, r3, #4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d94:	ea42 0103 	orr.w	r1, r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e054      	b.n	8005e8c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d111      	bne.n	8005e12 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fd1e 	bl	8006838 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a23      	ldr	r2, [pc, #140]	; (8005e94 <HAL_TIM_Base_Init+0xc4>)
 8005e08:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f000 fc53 	bl	80066d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	08001f91 	.word	0x08001f91

08005e98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d001      	beq.n	8005eb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e04c      	b.n	8005f4a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a26      	ldr	r2, [pc, #152]	; (8005f58 <HAL_TIM_Base_Start+0xc0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d022      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eca:	d01d      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a22      	ldr	r2, [pc, #136]	; (8005f5c <HAL_TIM_Base_Start+0xc4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d018      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a21      	ldr	r2, [pc, #132]	; (8005f60 <HAL_TIM_Base_Start+0xc8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d013      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <HAL_TIM_Base_Start+0xcc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00e      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <HAL_TIM_Base_Start+0xd0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d009      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <HAL_TIM_Base_Start+0xd4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1b      	ldr	r2, [pc, #108]	; (8005f70 <HAL_TIM_Base_Start+0xd8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d115      	bne.n	8005f34 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <HAL_TIM_Base_Start+0xdc>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d015      	beq.n	8005f46 <HAL_TIM_Base_Start+0xae>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f20:	d011      	beq.n	8005f46 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0201 	orr.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f32:	e008      	b.n	8005f46 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e000      	b.n	8005f48 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40013400 	.word	0x40013400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40015000 	.word	0x40015000
 8005f74:	00010007 	.word	0x00010007

08005f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d001      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e054      	b.n	800603a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a26      	ldr	r2, [pc, #152]	; (8006048 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d022      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d01d      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <HAL_TIM_Base_Start_IT+0xd4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a21      	ldr	r2, [pc, #132]	; (8006050 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1f      	ldr	r2, [pc, #124]	; (8006054 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1e      	ldr	r2, [pc, #120]	; (8006058 <HAL_TIM_Base_Start_IT+0xe0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1c      	ldr	r2, [pc, #112]	; (800605c <HAL_TIM_Base_Start_IT+0xe4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x80>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1b      	ldr	r2, [pc, #108]	; (8006060 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d115      	bne.n	8006024 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	4b19      	ldr	r3, [pc, #100]	; (8006064 <HAL_TIM_Base_Start_IT+0xec>)
 8006000:	4013      	ands	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b06      	cmp	r3, #6
 8006008:	d015      	beq.n	8006036 <HAL_TIM_Base_Start_IT+0xbe>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006010:	d011      	beq.n	8006036 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006022:	e008      	b.n	8006036 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e000      	b.n	8006038 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006036:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40000400 	.word	0x40000400
 8006050:	40000800 	.word	0x40000800
 8006054:	40000c00 	.word	0x40000c00
 8006058:	40013400 	.word	0x40013400
 800605c:	40014000 	.word	0x40014000
 8006060:	40015000 	.word	0x40015000
 8006064:	00010007 	.word	0x00010007

08006068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d026      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d021      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0202 	mvn.w	r2, #2
 800609c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	4798      	blx	r3
 80060bc:	e009      	b.n	80060d2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d026      	beq.n	8006130 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d021      	beq.n	8006130 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0204 	mvn.w	r2, #4
 80060f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
 8006114:	e009      	b.n	800612a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d026      	beq.n	8006188 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d021      	beq.n	8006188 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0208 	mvn.w	r2, #8
 800614c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2204      	movs	r2, #4
 8006152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
 800616c:	e009      	b.n	8006182 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	2b00      	cmp	r3, #0
 8006190:	d026      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b00      	cmp	r3, #0
 800619a:	d021      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0210 	mvn.w	r2, #16
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2208      	movs	r2, #8
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
 80061c4:	e009      	b.n	80061da <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00e      	beq.n	8006208 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0201 	mvn.w	r2, #1
 80061fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00e      	beq.n	800623a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800622e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00e      	beq.n	8006262 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d009      	beq.n	8006262 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00e      	beq.n	800628a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800627e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f06f 0220 	mvn.w	r2, #32
 80062a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00e      	beq.n	80062da <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80062ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00e      	beq.n	8006302 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80062f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00e      	beq.n	800632a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d009      	beq.n	800632a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800631e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00e      	beq.n	8006352 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	460b      	mov	r3, r1
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e14a      	b.n	80066c2 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	f040 80dd 	bne.w	80065f4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	2b1f      	cmp	r3, #31
 800643e:	f200 80d6 	bhi.w	80065ee <HAL_TIM_RegisterCallback+0x1de>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <HAL_TIM_RegisterCallback+0x38>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	080064c9 	.word	0x080064c9
 800644c:	080064d1 	.word	0x080064d1
 8006450:	080064d9 	.word	0x080064d9
 8006454:	080064e1 	.word	0x080064e1
 8006458:	080064e9 	.word	0x080064e9
 800645c:	080064f1 	.word	0x080064f1
 8006460:	080064f9 	.word	0x080064f9
 8006464:	08006501 	.word	0x08006501
 8006468:	08006509 	.word	0x08006509
 800646c:	08006511 	.word	0x08006511
 8006470:	08006519 	.word	0x08006519
 8006474:	08006521 	.word	0x08006521
 8006478:	08006529 	.word	0x08006529
 800647c:	08006531 	.word	0x08006531
 8006480:	0800653b 	.word	0x0800653b
 8006484:	08006545 	.word	0x08006545
 8006488:	0800654f 	.word	0x0800654f
 800648c:	08006559 	.word	0x08006559
 8006490:	08006563 	.word	0x08006563
 8006494:	0800656d 	.word	0x0800656d
 8006498:	08006577 	.word	0x08006577
 800649c:	08006581 	.word	0x08006581
 80064a0:	0800658b 	.word	0x0800658b
 80064a4:	08006595 	.word	0x08006595
 80064a8:	0800659f 	.word	0x0800659f
 80064ac:	080065a9 	.word	0x080065a9
 80064b0:	080065b3 	.word	0x080065b3
 80064b4:	080065bd 	.word	0x080065bd
 80064b8:	080065c7 	.word	0x080065c7
 80064bc:	080065d1 	.word	0x080065d1
 80064c0:	080065db 	.word	0x080065db
 80064c4:	080065e5 	.word	0x080065e5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80064ce:	e0f7      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80064d6:	e0f3      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80064de:	e0ef      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80064e6:	e0eb      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80064ee:	e0e7      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80064f6:	e0e3      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80064fe:	e0df      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006506:	e0db      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800650e:	e0d7      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006516:	e0d3      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800651e:	e0cf      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006526:	e0cb      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800652e:	e0c7      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006538:	e0c2      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006542:	e0bd      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800654c:	e0b8      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006556:	e0b3      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006560:	e0ae      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800656a:	e0a9      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006574:	e0a4      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800657e:	e09f      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006588:	e09a      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006592:	e095      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800659c:	e090      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80065a6:	e08b      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80065b0:	e086      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 80065ba:	e081      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 80065c4:	e07c      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 80065ce:	e077      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 80065d8:	e072      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 80065e2:	e06d      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 80065ec:	e068      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	75fb      	strb	r3, [r7, #23]
        break;
 80065f2:	e065      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d15d      	bne.n	80066bc <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8006600:	7afb      	ldrb	r3, [r7, #11]
 8006602:	2b0d      	cmp	r3, #13
 8006604:	d857      	bhi.n	80066b6 <HAL_TIM_RegisterCallback+0x2a6>
 8006606:	a201      	add	r2, pc, #4	; (adr r2, 800660c <HAL_TIM_RegisterCallback+0x1fc>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	08006645 	.word	0x08006645
 8006610:	0800664d 	.word	0x0800664d
 8006614:	08006655 	.word	0x08006655
 8006618:	0800665d 	.word	0x0800665d
 800661c:	08006665 	.word	0x08006665
 8006620:	0800666d 	.word	0x0800666d
 8006624:	08006675 	.word	0x08006675
 8006628:	0800667d 	.word	0x0800667d
 800662c:	08006685 	.word	0x08006685
 8006630:	0800668d 	.word	0x0800668d
 8006634:	08006695 	.word	0x08006695
 8006638:	0800669d 	.word	0x0800669d
 800663c:	080066a5 	.word	0x080066a5
 8006640:	080066ad 	.word	0x080066ad
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800664a:	e039      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006652:	e035      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800665a:	e031      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006662:	e02d      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800666a:	e029      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006672:	e025      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800667a:	e021      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006682:	e01d      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800668a:	e019      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006692:	e015      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800669a:	e011      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80066a2:	e00d      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80066aa:	e009      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80066b4:	e004      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	75fb      	strb	r3, [r7, #23]
        break;
 80066ba:	e001      	b.n	80066c0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop

080066d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a4c      	ldr	r2, [pc, #304]	; (8006814 <TIM_Base_SetConfig+0x144>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d017      	beq.n	8006718 <TIM_Base_SetConfig+0x48>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ee:	d013      	beq.n	8006718 <TIM_Base_SetConfig+0x48>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a49      	ldr	r2, [pc, #292]	; (8006818 <TIM_Base_SetConfig+0x148>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00f      	beq.n	8006718 <TIM_Base_SetConfig+0x48>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a48      	ldr	r2, [pc, #288]	; (800681c <TIM_Base_SetConfig+0x14c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00b      	beq.n	8006718 <TIM_Base_SetConfig+0x48>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a47      	ldr	r2, [pc, #284]	; (8006820 <TIM_Base_SetConfig+0x150>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d007      	beq.n	8006718 <TIM_Base_SetConfig+0x48>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a46      	ldr	r2, [pc, #280]	; (8006824 <TIM_Base_SetConfig+0x154>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d003      	beq.n	8006718 <TIM_Base_SetConfig+0x48>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a45      	ldr	r2, [pc, #276]	; (8006828 <TIM_Base_SetConfig+0x158>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d108      	bne.n	800672a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a39      	ldr	r2, [pc, #228]	; (8006814 <TIM_Base_SetConfig+0x144>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d023      	beq.n	800677a <TIM_Base_SetConfig+0xaa>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006738:	d01f      	beq.n	800677a <TIM_Base_SetConfig+0xaa>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a36      	ldr	r2, [pc, #216]	; (8006818 <TIM_Base_SetConfig+0x148>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01b      	beq.n	800677a <TIM_Base_SetConfig+0xaa>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a35      	ldr	r2, [pc, #212]	; (800681c <TIM_Base_SetConfig+0x14c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d017      	beq.n	800677a <TIM_Base_SetConfig+0xaa>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a34      	ldr	r2, [pc, #208]	; (8006820 <TIM_Base_SetConfig+0x150>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <TIM_Base_SetConfig+0xaa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a33      	ldr	r2, [pc, #204]	; (8006824 <TIM_Base_SetConfig+0x154>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00f      	beq.n	800677a <TIM_Base_SetConfig+0xaa>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a33      	ldr	r2, [pc, #204]	; (800682c <TIM_Base_SetConfig+0x15c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00b      	beq.n	800677a <TIM_Base_SetConfig+0xaa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a32      	ldr	r2, [pc, #200]	; (8006830 <TIM_Base_SetConfig+0x160>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d007      	beq.n	800677a <TIM_Base_SetConfig+0xaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a31      	ldr	r2, [pc, #196]	; (8006834 <TIM_Base_SetConfig+0x164>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_Base_SetConfig+0xaa>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2c      	ldr	r2, [pc, #176]	; (8006828 <TIM_Base_SetConfig+0x158>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d108      	bne.n	800678c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a18      	ldr	r2, [pc, #96]	; (8006814 <TIM_Base_SetConfig+0x144>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d013      	beq.n	80067e0 <TIM_Base_SetConfig+0x110>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a1a      	ldr	r2, [pc, #104]	; (8006824 <TIM_Base_SetConfig+0x154>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00f      	beq.n	80067e0 <TIM_Base_SetConfig+0x110>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a1a      	ldr	r2, [pc, #104]	; (800682c <TIM_Base_SetConfig+0x15c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00b      	beq.n	80067e0 <TIM_Base_SetConfig+0x110>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a19      	ldr	r2, [pc, #100]	; (8006830 <TIM_Base_SetConfig+0x160>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d007      	beq.n	80067e0 <TIM_Base_SetConfig+0x110>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <TIM_Base_SetConfig+0x164>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_Base_SetConfig+0x110>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a13      	ldr	r2, [pc, #76]	; (8006828 <TIM_Base_SetConfig+0x158>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d103      	bne.n	80067e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d105      	bne.n	8006806 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f023 0201 	bic.w	r2, r3, #1
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	611a      	str	r2, [r3, #16]
  }
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40000400 	.word	0x40000400
 800681c:	40000800 	.word	0x40000800
 8006820:	40000c00 	.word	0x40000c00
 8006824:	40013400 	.word	0x40013400
 8006828:	40015000 	.word	0x40015000
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800

08006838 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a26      	ldr	r2, [pc, #152]	; (80068dc <TIM_ResetCallback+0xa4>)
 8006844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a25      	ldr	r2, [pc, #148]	; (80068e0 <TIM_ResetCallback+0xa8>)
 800684c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a24      	ldr	r2, [pc, #144]	; (80068e4 <TIM_ResetCallback+0xac>)
 8006854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a23      	ldr	r2, [pc, #140]	; (80068e8 <TIM_ResetCallback+0xb0>)
 800685c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a22      	ldr	r2, [pc, #136]	; (80068ec <TIM_ResetCallback+0xb4>)
 8006864:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a21      	ldr	r2, [pc, #132]	; (80068f0 <TIM_ResetCallback+0xb8>)
 800686c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a20      	ldr	r2, [pc, #128]	; (80068f4 <TIM_ResetCallback+0xbc>)
 8006874:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a1f      	ldr	r2, [pc, #124]	; (80068f8 <TIM_ResetCallback+0xc0>)
 800687c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a1e      	ldr	r2, [pc, #120]	; (80068fc <TIM_ResetCallback+0xc4>)
 8006884:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a1d      	ldr	r2, [pc, #116]	; (8006900 <TIM_ResetCallback+0xc8>)
 800688c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1c      	ldr	r2, [pc, #112]	; (8006904 <TIM_ResetCallback+0xcc>)
 8006894:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1b      	ldr	r2, [pc, #108]	; (8006908 <TIM_ResetCallback+0xd0>)
 800689c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a1a      	ldr	r2, [pc, #104]	; (800690c <TIM_ResetCallback+0xd4>)
 80068a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a19      	ldr	r2, [pc, #100]	; (8006910 <TIM_ResetCallback+0xd8>)
 80068ac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a18      	ldr	r2, [pc, #96]	; (8006914 <TIM_ResetCallback+0xdc>)
 80068b4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a17      	ldr	r2, [pc, #92]	; (8006918 <TIM_ResetCallback+0xe0>)
 80068bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <TIM_ResetCallback+0xe4>)
 80068c4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a15      	ldr	r2, [pc, #84]	; (8006920 <TIM_ResetCallback+0xe8>)
 80068cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	08001545 	.word	0x08001545
 80068e0:	0800635b 	.word	0x0800635b
 80068e4:	080063d3 	.word	0x080063d3
 80068e8:	080063e7 	.word	0x080063e7
 80068ec:	08006383 	.word	0x08006383
 80068f0:	08006397 	.word	0x08006397
 80068f4:	0800636f 	.word	0x0800636f
 80068f8:	080063ab 	.word	0x080063ab
 80068fc:	080063bf 	.word	0x080063bf
 8006900:	080063fb 	.word	0x080063fb
 8006904:	08006a51 	.word	0x08006a51
 8006908:	08006a65 	.word	0x08006a65
 800690c:	08006a79 	.word	0x08006a79
 8006910:	08006a8d 	.word	0x08006a8d
 8006914:	08006aa1 	.word	0x08006aa1
 8006918:	08006ab5 	.word	0x08006ab5
 800691c:	08006ac9 	.word	0x08006ac9
 8006920:	08006add 	.word	0x08006add

08006924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006938:	2302      	movs	r3, #2
 800693a:	e074      	b.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a34      	ldr	r2, [pc, #208]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a33      	ldr	r2, [pc, #204]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a31      	ldr	r2, [pc, #196]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d108      	bne.n	800698c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006980:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a21      	ldr	r2, [pc, #132]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d022      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069bc:	d01d      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d018      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a15      	ldr	r2, [pc, #84]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a18      	ldr	r2, [pc, #96]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a11      	ldr	r2, [pc, #68]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d10c      	bne.n	8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40012c00 	.word	0x40012c00
 8006a38:	40013400 	.word	0x40013400
 8006a3c:	40015000 	.word	0x40015000
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40000800 	.word	0x40000800
 8006a48:	40000c00 	.word	0x40000c00
 8006a4c:	40014000 	.word	0x40014000

08006a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e042      	b.n	8006b88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7fb fa61 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2224      	movs	r2, #36	; 0x24
 8006b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fb24 	bl	8007188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f825 	bl	8006b90 <UART_SetConfig>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e01b      	b.n	8006b88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fba3 	bl	80072cc <UART_CheckIdleState>
 8006b86:	4603      	mov	r3, r0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b94:	b08c      	sub	sp, #48	; 0x30
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4baa      	ldr	r3, [pc, #680]	; (8006e68 <UART_SetConfig+0x2d8>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a9f      	ldr	r2, [pc, #636]	; (8006e6c <UART_SetConfig+0x2dc>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	f023 010f 	bic.w	r1, r3, #15
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a90      	ldr	r2, [pc, #576]	; (8006e70 <UART_SetConfig+0x2e0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d125      	bne.n	8006c80 <UART_SetConfig+0xf0>
 8006c34:	4b8f      	ldr	r3, [pc, #572]	; (8006e74 <UART_SetConfig+0x2e4>)
 8006c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d81a      	bhi.n	8006c78 <UART_SetConfig+0xe8>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <UART_SetConfig+0xb8>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006c69 	.word	0x08006c69
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c71 	.word	0x08006c71
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5e:	e116      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c66:	e112      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6e:	e10e      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c76:	e10a      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7e:	e106      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a7c      	ldr	r2, [pc, #496]	; (8006e78 <UART_SetConfig+0x2e8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d138      	bne.n	8006cfc <UART_SetConfig+0x16c>
 8006c8a:	4b7a      	ldr	r3, [pc, #488]	; (8006e74 <UART_SetConfig+0x2e4>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c90:	f003 030c 	and.w	r3, r3, #12
 8006c94:	2b0c      	cmp	r3, #12
 8006c96:	d82d      	bhi.n	8006cf4 <UART_SetConfig+0x164>
 8006c98:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <UART_SetConfig+0x110>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cd5 	.word	0x08006cd5
 8006ca4:	08006cf5 	.word	0x08006cf5
 8006ca8:	08006cf5 	.word	0x08006cf5
 8006cac:	08006cf5 	.word	0x08006cf5
 8006cb0:	08006ce5 	.word	0x08006ce5
 8006cb4:	08006cf5 	.word	0x08006cf5
 8006cb8:	08006cf5 	.word	0x08006cf5
 8006cbc:	08006cf5 	.word	0x08006cf5
 8006cc0:	08006cdd 	.word	0x08006cdd
 8006cc4:	08006cf5 	.word	0x08006cf5
 8006cc8:	08006cf5 	.word	0x08006cf5
 8006ccc:	08006cf5 	.word	0x08006cf5
 8006cd0:	08006ced 	.word	0x08006ced
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cda:	e0d8      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce2:	e0d4      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cea:	e0d0      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf2:	e0cc      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfa:	e0c8      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a5e      	ldr	r2, [pc, #376]	; (8006e7c <UART_SetConfig+0x2ec>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d125      	bne.n	8006d52 <UART_SetConfig+0x1c2>
 8006d06:	4b5b      	ldr	r3, [pc, #364]	; (8006e74 <UART_SetConfig+0x2e4>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d10:	2b30      	cmp	r3, #48	; 0x30
 8006d12:	d016      	beq.n	8006d42 <UART_SetConfig+0x1b2>
 8006d14:	2b30      	cmp	r3, #48	; 0x30
 8006d16:	d818      	bhi.n	8006d4a <UART_SetConfig+0x1ba>
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d00a      	beq.n	8006d32 <UART_SetConfig+0x1a2>
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d814      	bhi.n	8006d4a <UART_SetConfig+0x1ba>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <UART_SetConfig+0x19a>
 8006d24:	2b10      	cmp	r3, #16
 8006d26:	d008      	beq.n	8006d3a <UART_SetConfig+0x1aa>
 8006d28:	e00f      	b.n	8006d4a <UART_SetConfig+0x1ba>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d30:	e0ad      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006d32:	2302      	movs	r3, #2
 8006d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d38:	e0a9      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d40:	e0a5      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006d42:	2308      	movs	r3, #8
 8006d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d48:	e0a1      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d50:	e09d      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a4a      	ldr	r2, [pc, #296]	; (8006e80 <UART_SetConfig+0x2f0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d125      	bne.n	8006da8 <UART_SetConfig+0x218>
 8006d5c:	4b45      	ldr	r3, [pc, #276]	; (8006e74 <UART_SetConfig+0x2e4>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d66:	2bc0      	cmp	r3, #192	; 0xc0
 8006d68:	d016      	beq.n	8006d98 <UART_SetConfig+0x208>
 8006d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d6c:	d818      	bhi.n	8006da0 <UART_SetConfig+0x210>
 8006d6e:	2b80      	cmp	r3, #128	; 0x80
 8006d70:	d00a      	beq.n	8006d88 <UART_SetConfig+0x1f8>
 8006d72:	2b80      	cmp	r3, #128	; 0x80
 8006d74:	d814      	bhi.n	8006da0 <UART_SetConfig+0x210>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <UART_SetConfig+0x1f0>
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d008      	beq.n	8006d90 <UART_SetConfig+0x200>
 8006d7e:	e00f      	b.n	8006da0 <UART_SetConfig+0x210>
 8006d80:	2300      	movs	r3, #0
 8006d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d86:	e082      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d8e:	e07e      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006d90:	2304      	movs	r3, #4
 8006d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d96:	e07a      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006d98:	2308      	movs	r3, #8
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d9e:	e076      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006da0:	2310      	movs	r3, #16
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da6:	e072      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a35      	ldr	r2, [pc, #212]	; (8006e84 <UART_SetConfig+0x2f4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d12a      	bne.n	8006e08 <UART_SetConfig+0x278>
 8006db2:	4b30      	ldr	r3, [pc, #192]	; (8006e74 <UART_SetConfig+0x2e4>)
 8006db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc0:	d01a      	beq.n	8006df8 <UART_SetConfig+0x268>
 8006dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc6:	d81b      	bhi.n	8006e00 <UART_SetConfig+0x270>
 8006dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dcc:	d00c      	beq.n	8006de8 <UART_SetConfig+0x258>
 8006dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd2:	d815      	bhi.n	8006e00 <UART_SetConfig+0x270>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <UART_SetConfig+0x250>
 8006dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ddc:	d008      	beq.n	8006df0 <UART_SetConfig+0x260>
 8006dde:	e00f      	b.n	8006e00 <UART_SetConfig+0x270>
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de6:	e052      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006de8:	2302      	movs	r3, #2
 8006dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dee:	e04e      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006df0:	2304      	movs	r3, #4
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df6:	e04a      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfe:	e046      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006e00:	2310      	movs	r3, #16
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e06:	e042      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a17      	ldr	r2, [pc, #92]	; (8006e6c <UART_SetConfig+0x2dc>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d13a      	bne.n	8006e88 <UART_SetConfig+0x2f8>
 8006e12:	4b18      	ldr	r3, [pc, #96]	; (8006e74 <UART_SetConfig+0x2e4>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e20:	d01a      	beq.n	8006e58 <UART_SetConfig+0x2c8>
 8006e22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e26:	d81b      	bhi.n	8006e60 <UART_SetConfig+0x2d0>
 8006e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2c:	d00c      	beq.n	8006e48 <UART_SetConfig+0x2b8>
 8006e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e32:	d815      	bhi.n	8006e60 <UART_SetConfig+0x2d0>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <UART_SetConfig+0x2b0>
 8006e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3c:	d008      	beq.n	8006e50 <UART_SetConfig+0x2c0>
 8006e3e:	e00f      	b.n	8006e60 <UART_SetConfig+0x2d0>
 8006e40:	2300      	movs	r3, #0
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e46:	e022      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4e:	e01e      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006e50:	2304      	movs	r3, #4
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e56:	e01a      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006e58:	2308      	movs	r3, #8
 8006e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5e:	e016      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006e60:	2310      	movs	r3, #16
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e66:	e012      	b.n	8006e8e <UART_SetConfig+0x2fe>
 8006e68:	cfff69f3 	.word	0xcfff69f3
 8006e6c:	40008000 	.word	0x40008000
 8006e70:	40013800 	.word	0x40013800
 8006e74:	40021000 	.word	0x40021000
 8006e78:	40004400 	.word	0x40004400
 8006e7c:	40004800 	.word	0x40004800
 8006e80:	40004c00 	.word	0x40004c00
 8006e84:	40005000 	.word	0x40005000
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4aae      	ldr	r2, [pc, #696]	; (800714c <UART_SetConfig+0x5bc>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	f040 8097 	bne.w	8006fc8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d823      	bhi.n	8006eea <UART_SetConfig+0x35a>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x318>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006eeb 	.word	0x08006eeb
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08006eeb 	.word	0x08006eeb
 8006eb8:	08006edb 	.word	0x08006edb
 8006ebc:	08006eeb 	.word	0x08006eeb
 8006ec0:	08006eeb 	.word	0x08006eeb
 8006ec4:	08006eeb 	.word	0x08006eeb
 8006ec8:	08006ee3 	.word	0x08006ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ecc:	f7fe fbb8 	bl	8005640 <HAL_RCC_GetPCLK1Freq>
 8006ed0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ed2:	e010      	b.n	8006ef6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ed4:	4b9e      	ldr	r3, [pc, #632]	; (8007150 <UART_SetConfig+0x5c0>)
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ed8:	e00d      	b.n	8006ef6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eda:	f7fe fb45 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 8006ede:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ee0:	e009      	b.n	8006ef6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ee8:	e005      	b.n	8006ef6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ef4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8130 	beq.w	800715e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	4a94      	ldr	r2, [pc, #592]	; (8007154 <UART_SetConfig+0x5c4>)
 8006f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	4413      	add	r3, r2
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d305      	bcc.n	8006f2e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d903      	bls.n	8006f36 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f34:	e113      	b.n	800715e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	2200      	movs	r2, #0
 8006f3a:	60bb      	str	r3, [r7, #8]
 8006f3c:	60fa      	str	r2, [r7, #12]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	4a84      	ldr	r2, [pc, #528]	; (8007154 <UART_SetConfig+0x5c4>)
 8006f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	603b      	str	r3, [r7, #0]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f58:	f7f9 f962 	bl	8000220 <__aeabi_uldivmod>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4610      	mov	r0, r2
 8006f62:	4619      	mov	r1, r3
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	020b      	lsls	r3, r1, #8
 8006f6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f72:	0202      	lsls	r2, r0, #8
 8006f74:	6979      	ldr	r1, [r7, #20]
 8006f76:	6849      	ldr	r1, [r1, #4]
 8006f78:	0849      	lsrs	r1, r1, #1
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	4605      	mov	r5, r0
 8006f80:	eb12 0804 	adds.w	r8, r2, r4
 8006f84:	eb43 0905 	adc.w	r9, r3, r5
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	469a      	mov	sl, r3
 8006f90:	4693      	mov	fp, r2
 8006f92:	4652      	mov	r2, sl
 8006f94:	465b      	mov	r3, fp
 8006f96:	4640      	mov	r0, r8
 8006f98:	4649      	mov	r1, r9
 8006f9a:	f7f9 f941 	bl	8000220 <__aeabi_uldivmod>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fac:	d308      	bcc.n	8006fc0 <UART_SetConfig+0x430>
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb4:	d204      	bcs.n	8006fc0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6a3a      	ldr	r2, [r7, #32]
 8006fbc:	60da      	str	r2, [r3, #12]
 8006fbe:	e0ce      	b.n	800715e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fc6:	e0ca      	b.n	800715e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd0:	d166      	bne.n	80070a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006fd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fd6:	2b08      	cmp	r3, #8
 8006fd8:	d827      	bhi.n	800702a <UART_SetConfig+0x49a>
 8006fda:	a201      	add	r2, pc, #4	; (adr r2, 8006fe0 <UART_SetConfig+0x450>)
 8006fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe0:	08007005 	.word	0x08007005
 8006fe4:	0800700d 	.word	0x0800700d
 8006fe8:	08007015 	.word	0x08007015
 8006fec:	0800702b 	.word	0x0800702b
 8006ff0:	0800701b 	.word	0x0800701b
 8006ff4:	0800702b 	.word	0x0800702b
 8006ff8:	0800702b 	.word	0x0800702b
 8006ffc:	0800702b 	.word	0x0800702b
 8007000:	08007023 	.word	0x08007023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007004:	f7fe fb1c 	bl	8005640 <HAL_RCC_GetPCLK1Freq>
 8007008:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800700a:	e014      	b.n	8007036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800700c:	f7fe fb2e 	bl	800566c <HAL_RCC_GetPCLK2Freq>
 8007010:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007012:	e010      	b.n	8007036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007014:	4b4e      	ldr	r3, [pc, #312]	; (8007150 <UART_SetConfig+0x5c0>)
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007018:	e00d      	b.n	8007036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701a:	f7fe faa5 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 800701e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007020:	e009      	b.n	8007036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007028:	e005      	b.n	8007036 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007034:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8090 	beq.w	800715e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	4a44      	ldr	r2, [pc, #272]	; (8007154 <UART_SetConfig+0x5c4>)
 8007044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007048:	461a      	mov	r2, r3
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007050:	005a      	lsls	r2, r3, #1
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	085b      	lsrs	r3, r3, #1
 8007058:	441a      	add	r2, r3
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007062:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d916      	bls.n	8007098 <UART_SetConfig+0x508>
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007070:	d212      	bcs.n	8007098 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f023 030f 	bic.w	r3, r3, #15
 800707a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	b29b      	uxth	r3, r3
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	b29a      	uxth	r2, r3
 8007088:	8bfb      	ldrh	r3, [r7, #30]
 800708a:	4313      	orrs	r3, r2
 800708c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	8bfa      	ldrh	r2, [r7, #30]
 8007094:	60da      	str	r2, [r3, #12]
 8007096:	e062      	b.n	800715e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800709e:	e05e      	b.n	800715e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d828      	bhi.n	80070fa <UART_SetConfig+0x56a>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <UART_SetConfig+0x520>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070dd 	.word	0x080070dd
 80070b8:	080070e5 	.word	0x080070e5
 80070bc:	080070fb 	.word	0x080070fb
 80070c0:	080070eb 	.word	0x080070eb
 80070c4:	080070fb 	.word	0x080070fb
 80070c8:	080070fb 	.word	0x080070fb
 80070cc:	080070fb 	.word	0x080070fb
 80070d0:	080070f3 	.word	0x080070f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d4:	f7fe fab4 	bl	8005640 <HAL_RCC_GetPCLK1Freq>
 80070d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070da:	e014      	b.n	8007106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070dc:	f7fe fac6 	bl	800566c <HAL_RCC_GetPCLK2Freq>
 80070e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070e2:	e010      	b.n	8007106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e4:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <UART_SetConfig+0x5c0>)
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070e8:	e00d      	b.n	8007106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ea:	f7fe fa3d 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 80070ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070f0:	e009      	b.n	8007106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070f8:	e005      	b.n	8007106 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007104:	bf00      	nop
    }

    if (pclk != 0U)
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	2b00      	cmp	r3, #0
 800710a:	d028      	beq.n	800715e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	4a10      	ldr	r2, [pc, #64]	; (8007154 <UART_SetConfig+0x5c4>)
 8007112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007116:	461a      	mov	r2, r3
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	fbb3 f2f2 	udiv	r2, r3, r2
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	085b      	lsrs	r3, r3, #1
 8007124:	441a      	add	r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	fbb2 f3f3 	udiv	r3, r2, r3
 800712e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	2b0f      	cmp	r3, #15
 8007134:	d910      	bls.n	8007158 <UART_SetConfig+0x5c8>
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713c:	d20c      	bcs.n	8007158 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	b29a      	uxth	r2, r3
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60da      	str	r2, [r3, #12]
 8007148:	e009      	b.n	800715e <UART_SetConfig+0x5ce>
 800714a:	bf00      	nop
 800714c:	40008000 	.word	0x40008000
 8007150:	00f42400 	.word	0x00f42400
 8007154:	0800b2f0 	.word	0x0800b2f0
      }
      else
      {
        ret = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2201      	movs	r2, #1
 8007162:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2201      	movs	r2, #1
 800716a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2200      	movs	r2, #0
 8007172:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2200      	movs	r2, #0
 8007178:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800717a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800717e:	4618      	mov	r0, r3
 8007180:	3730      	adds	r7, #48	; 0x30
 8007182:	46bd      	mov	sp, r7
 8007184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	f003 0310 	and.w	r3, r3, #16
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00a      	beq.n	800723a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01a      	beq.n	800729e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007286:	d10a      	bne.n	800729e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	605a      	str	r2, [r3, #4]
  }
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b098      	sub	sp, #96	; 0x60
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072dc:	f7fb f89c 	bl	8002418 <HAL_GetTick>
 80072e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d12f      	bne.n	8007350 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f8:	2200      	movs	r2, #0
 80072fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f88e 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d022      	beq.n	8007350 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731e:	653b      	str	r3, [r7, #80]	; 0x50
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007328:	647b      	str	r3, [r7, #68]	; 0x44
 800732a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800732e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e6      	bne.n	800730a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2220      	movs	r2, #32
 8007340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e063      	b.n	8007418 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b04      	cmp	r3, #4
 800735c:	d149      	bne.n	80073f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800735e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007366:	2200      	movs	r2, #0
 8007368:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f857 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d03c      	beq.n	80073f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	623b      	str	r3, [r7, #32]
   return(result);
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800738c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007396:	633b      	str	r3, [r7, #48]	; 0x30
 8007398:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800739c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e6      	bne.n	8007378 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f023 0301 	bic.w	r3, r3, #1
 80073c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ca:	61fa      	str	r2, [r7, #28]
 80073cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	69b9      	ldr	r1, [r7, #24]
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	617b      	str	r3, [r7, #20]
   return(result);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e5      	bne.n	80073aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e012      	b.n	8007418 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3758      	adds	r7, #88	; 0x58
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	4613      	mov	r3, r2
 800742e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007430:	e04f      	b.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007438:	d04b      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743a:	f7fa ffed 	bl	8002418 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	429a      	cmp	r2, r3
 8007448:	d302      	bcc.n	8007450 <UART_WaitOnFlagUntilTimeout+0x30>
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e04e      	b.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d037      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b80      	cmp	r3, #128	; 0x80
 8007466:	d034      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b40      	cmp	r3, #64	; 0x40
 800746c:	d031      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b08      	cmp	r3, #8
 800747a:	d110      	bne.n	800749e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2208      	movs	r2, #8
 8007482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f838 	bl	80074fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2208      	movs	r2, #8
 800748e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e029      	b.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ac:	d111      	bne.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 f81e 	bl	80074fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e00f      	b.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4013      	ands	r3, r2
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	429a      	cmp	r2, r3
 80074e0:	bf0c      	ite	eq
 80074e2:	2301      	moveq	r3, #1
 80074e4:	2300      	movne	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d0a0      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b095      	sub	sp, #84	; 0x54
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007520:	643b      	str	r3, [r7, #64]	; 0x40
 8007522:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e6      	bne.n	8007502 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	61fb      	str	r3, [r7, #28]
   return(result);
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800754a:	f023 0301 	bic.w	r3, r3, #1
 800754e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800755e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e3      	bne.n	8007534 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d118      	bne.n	80075a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	60bb      	str	r3, [r7, #8]
   return(result);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f023 0310 	bic.w	r3, r3, #16
 8007588:	647b      	str	r3, [r7, #68]	; 0x44
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6979      	ldr	r1, [r7, #20]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	613b      	str	r3, [r7, #16]
   return(result);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e6      	bne.n	8007574 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80075ba:	bf00      	nop
 80075bc:	3754      	adds	r7, #84	; 0x54
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_UARTEx_DisableFifoMode+0x16>
 80075d8:	2302      	movs	r3, #2
 80075da:	e027      	b.n	800762c <HAL_UARTEx_DisableFifoMode+0x66>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2224      	movs	r2, #36	; 0x24
 80075e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0201 	bic.w	r2, r2, #1
 8007602:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800760a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800764c:	2302      	movs	r3, #2
 800764e:	e02d      	b.n	80076ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2224      	movs	r2, #36	; 0x24
 800765c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0201 	bic.w	r2, r2, #1
 8007676:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f84f 	bl	8007730 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e02d      	b.n	8007728 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2224      	movs	r2, #36	; 0x24
 80076d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 0201 	bic.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f811 	bl	8007730 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773c:	2b00      	cmp	r3, #0
 800773e:	d108      	bne.n	8007752 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007750:	e031      	b.n	80077b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007752:	2308      	movs	r3, #8
 8007754:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007756:	2308      	movs	r3, #8
 8007758:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	0e5b      	lsrs	r3, r3, #25
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	0f5b      	lsrs	r3, r3, #29
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	7b3a      	ldrb	r2, [r7, #12]
 800777e:	4911      	ldr	r1, [pc, #68]	; (80077c4 <UARTEx_SetNbDataToProcess+0x94>)
 8007780:	5c8a      	ldrb	r2, [r1, r2]
 8007782:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007786:	7b3a      	ldrb	r2, [r7, #12]
 8007788:	490f      	ldr	r1, [pc, #60]	; (80077c8 <UARTEx_SetNbDataToProcess+0x98>)
 800778a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800778c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007790:	b29a      	uxth	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	7b7a      	ldrb	r2, [r7, #13]
 800779c:	4909      	ldr	r1, [pc, #36]	; (80077c4 <UARTEx_SetNbDataToProcess+0x94>)
 800779e:	5c8a      	ldrb	r2, [r1, r2]
 80077a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077a4:	7b7a      	ldrb	r2, [r7, #13]
 80077a6:	4908      	ldr	r1, [pc, #32]	; (80077c8 <UARTEx_SetNbDataToProcess+0x98>)
 80077a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	0800b308 	.word	0x0800b308
 80077c8:	0800b310 	.word	0x0800b310

080077cc <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e03c      	b.n	8007858 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fa fc6a 	bl	80020cc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f85b 	bl	80078cc <USART_SetConfig>
 8007816:	4603      	mov	r3, r0
 8007818:	2b01      	cmp	r3, #1
 800781a:	d101      	bne.n	8007820 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e01b      	b.n	8007858 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800782e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800783e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0201 	orr.w	r2, r2, #1
 800784e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fb23 	bl	8007e9c <USART_CheckIdleState>
 8007856:	4603      	mov	r3, r0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	4613      	mov	r3, r2
 800786e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007870:	e018      	b.n	80078a4 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007878:	d014      	beq.n	80078a4 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787a:	f7fa fdcd 	bl	8002418 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	429a      	cmp	r2, r3
 8007888:	d302      	bcc.n	8007890 <USART_WaitOnFlagUntilTimeout+0x30>
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e00f      	b.n	80078c4 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69da      	ldr	r2, [r3, #28]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	4013      	ands	r3, r2
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	bf0c      	ite	eq
 80078b4:	2301      	moveq	r3, #1
 80078b6:	2300      	movne	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	79fb      	ldrb	r3, [r7, #7]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d0d7      	beq.n	8007872 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80078d8:	2300      	movs	r3, #0
 80078da:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	431a      	orrs	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	4b96      	ldr	r3, [pc, #600]	; (8007b54 <USART_SetConfig+0x288>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	6979      	ldr	r1, [r7, #20]
 8007902:	430b      	orrs	r3, r1
 8007904:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8007906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800790a:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	4313      	orrs	r3, r2
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	4313      	orrs	r3, r2
 800792e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800793a:	f023 0309 	bic.w	r3, r3, #9
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6812      	ldr	r2, [r2, #0]
 8007942:	6979      	ldr	r1, [r7, #20]
 8007944:	430b      	orrs	r3, r1
 8007946:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	f023 010f 	bic.w	r1, r3, #15
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a7d      	ldr	r2, [pc, #500]	; (8007b58 <USART_SetConfig+0x28c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d120      	bne.n	80079aa <USART_SetConfig+0xde>
 8007968:	4b7c      	ldr	r3, [pc, #496]	; (8007b5c <USART_SetConfig+0x290>)
 800796a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	2b03      	cmp	r3, #3
 8007974:	d816      	bhi.n	80079a4 <USART_SetConfig+0xd8>
 8007976:	a201      	add	r2, pc, #4	; (adr r2, 800797c <USART_SetConfig+0xb0>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	0800798d 	.word	0x0800798d
 8007980:	08007999 	.word	0x08007999
 8007984:	08007993 	.word	0x08007993
 8007988:	0800799f 	.word	0x0800799f
 800798c:	2301      	movs	r3, #1
 800798e:	77fb      	strb	r3, [r7, #31]
 8007990:	e06b      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007992:	2302      	movs	r3, #2
 8007994:	77fb      	strb	r3, [r7, #31]
 8007996:	e068      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007998:	2304      	movs	r3, #4
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	e065      	b.n	8007a6a <USART_SetConfig+0x19e>
 800799e:	2308      	movs	r3, #8
 80079a0:	77fb      	strb	r3, [r7, #31]
 80079a2:	e062      	b.n	8007a6a <USART_SetConfig+0x19e>
 80079a4:	2310      	movs	r3, #16
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	e05f      	b.n	8007a6a <USART_SetConfig+0x19e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a6c      	ldr	r2, [pc, #432]	; (8007b60 <USART_SetConfig+0x294>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d132      	bne.n	8007a1a <USART_SetConfig+0x14e>
 80079b4:	4b69      	ldr	r3, [pc, #420]	; (8007b5c <USART_SetConfig+0x290>)
 80079b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ba:	f003 030c 	and.w	r3, r3, #12
 80079be:	2b0c      	cmp	r3, #12
 80079c0:	d828      	bhi.n	8007a14 <USART_SetConfig+0x148>
 80079c2:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <USART_SetConfig+0xfc>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	080079fd 	.word	0x080079fd
 80079cc:	08007a15 	.word	0x08007a15
 80079d0:	08007a15 	.word	0x08007a15
 80079d4:	08007a15 	.word	0x08007a15
 80079d8:	08007a09 	.word	0x08007a09
 80079dc:	08007a15 	.word	0x08007a15
 80079e0:	08007a15 	.word	0x08007a15
 80079e4:	08007a15 	.word	0x08007a15
 80079e8:	08007a03 	.word	0x08007a03
 80079ec:	08007a15 	.word	0x08007a15
 80079f0:	08007a15 	.word	0x08007a15
 80079f4:	08007a15 	.word	0x08007a15
 80079f8:	08007a0f 	.word	0x08007a0f
 80079fc:	2300      	movs	r3, #0
 80079fe:	77fb      	strb	r3, [r7, #31]
 8007a00:	e033      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007a02:	2302      	movs	r3, #2
 8007a04:	77fb      	strb	r3, [r7, #31]
 8007a06:	e030      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	77fb      	strb	r3, [r7, #31]
 8007a0c:	e02d      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007a0e:	2308      	movs	r3, #8
 8007a10:	77fb      	strb	r3, [r7, #31]
 8007a12:	e02a      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007a14:	2310      	movs	r3, #16
 8007a16:	77fb      	strb	r3, [r7, #31]
 8007a18:	e027      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a51      	ldr	r2, [pc, #324]	; (8007b64 <USART_SetConfig+0x298>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d120      	bne.n	8007a66 <USART_SetConfig+0x19a>
 8007a24:	4b4d      	ldr	r3, [pc, #308]	; (8007b5c <USART_SetConfig+0x290>)
 8007a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a2e:	2b30      	cmp	r3, #48	; 0x30
 8007a30:	d013      	beq.n	8007a5a <USART_SetConfig+0x18e>
 8007a32:	2b30      	cmp	r3, #48	; 0x30
 8007a34:	d814      	bhi.n	8007a60 <USART_SetConfig+0x194>
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d009      	beq.n	8007a4e <USART_SetConfig+0x182>
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d810      	bhi.n	8007a60 <USART_SetConfig+0x194>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <USART_SetConfig+0x17c>
 8007a42:	2b10      	cmp	r3, #16
 8007a44:	d006      	beq.n	8007a54 <USART_SetConfig+0x188>
 8007a46:	e00b      	b.n	8007a60 <USART_SetConfig+0x194>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	77fb      	strb	r3, [r7, #31]
 8007a4c:	e00d      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	77fb      	strb	r3, [r7, #31]
 8007a52:	e00a      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007a54:	2304      	movs	r3, #4
 8007a56:	77fb      	strb	r3, [r7, #31]
 8007a58:	e007      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007a5a:	2308      	movs	r3, #8
 8007a5c:	77fb      	strb	r3, [r7, #31]
 8007a5e:	e004      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007a60:	2310      	movs	r3, #16
 8007a62:	77fb      	strb	r3, [r7, #31]
 8007a64:	e001      	b.n	8007a6a <USART_SetConfig+0x19e>
 8007a66:	2310      	movs	r3, #16
 8007a68:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8007a6a:	7ffb      	ldrb	r3, [r7, #31]
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	f200 81e2 	bhi.w	8007e36 <USART_SetConfig+0x56a>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <USART_SetConfig+0x1ac>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a9d 	.word	0x08007a9d
 8007a7c:	08007b69 	.word	0x08007b69
 8007a80:	08007c1f 	.word	0x08007c1f
 8007a84:	08007e37 	.word	0x08007e37
 8007a88:	08007ccf 	.word	0x08007ccf
 8007a8c:	08007e37 	.word	0x08007e37
 8007a90:	08007e37 	.word	0x08007e37
 8007a94:	08007e37 	.word	0x08007e37
 8007a98:	08007d85 	.word	0x08007d85
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a9c:	f7fd fdd0 	bl	8005640 <HAL_RCC_GetPCLK1Freq>
 8007aa0:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d044      	beq.n	8007b34 <USART_SetConfig+0x268>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d03e      	beq.n	8007b30 <USART_SetConfig+0x264>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d038      	beq.n	8007b2c <USART_SetConfig+0x260>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d032      	beq.n	8007b28 <USART_SetConfig+0x25c>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d02c      	beq.n	8007b24 <USART_SetConfig+0x258>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d026      	beq.n	8007b20 <USART_SetConfig+0x254>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b06      	cmp	r3, #6
 8007ad8:	d020      	beq.n	8007b1c <USART_SetConfig+0x250>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b07      	cmp	r3, #7
 8007ae0:	d01a      	beq.n	8007b18 <USART_SetConfig+0x24c>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d014      	beq.n	8007b14 <USART_SetConfig+0x248>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b09      	cmp	r3, #9
 8007af0:	d00e      	beq.n	8007b10 <USART_SetConfig+0x244>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b0a      	cmp	r3, #10
 8007af8:	d008      	beq.n	8007b0c <USART_SetConfig+0x240>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b0b      	cmp	r3, #11
 8007b00:	d102      	bne.n	8007b08 <USART_SetConfig+0x23c>
 8007b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b06:	e016      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e014      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b0c:	2380      	movs	r3, #128	; 0x80
 8007b0e:	e012      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b10:	2340      	movs	r3, #64	; 0x40
 8007b12:	e010      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b14:	2320      	movs	r3, #32
 8007b16:	e00e      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	e00c      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	e00a      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b20:	230a      	movs	r3, #10
 8007b22:	e008      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b24:	2308      	movs	r3, #8
 8007b26:	e006      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b28:	2306      	movs	r3, #6
 8007b2a:	e004      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b2c:	2304      	movs	r3, #4
 8007b2e:	e002      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e000      	b.n	8007b36 <USART_SetConfig+0x26a>
 8007b34:	2301      	movs	r3, #1
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3c:	005a      	lsls	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	085b      	lsrs	r3, r3, #1
 8007b44:	441a      	add	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4e:	61bb      	str	r3, [r7, #24]
      break;
 8007b50:	e174      	b.n	8007e3c <USART_SetConfig+0x570>
 8007b52:	bf00      	nop
 8007b54:	cfff69f3 	.word	0xcfff69f3
 8007b58:	40013800 	.word	0x40013800
 8007b5c:	40021000 	.word	0x40021000
 8007b60:	40004400 	.word	0x40004400
 8007b64:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b68:	f7fd fd80 	bl	800566c <HAL_RCC_GetPCLK2Freq>
 8007b6c:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d044      	beq.n	8007c00 <USART_SetConfig+0x334>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d03e      	beq.n	8007bfc <USART_SetConfig+0x330>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d038      	beq.n	8007bf8 <USART_SetConfig+0x32c>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d032      	beq.n	8007bf4 <USART_SetConfig+0x328>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d02c      	beq.n	8007bf0 <USART_SetConfig+0x324>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	d026      	beq.n	8007bec <USART_SetConfig+0x320>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	2b06      	cmp	r3, #6
 8007ba4:	d020      	beq.n	8007be8 <USART_SetConfig+0x31c>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	2b07      	cmp	r3, #7
 8007bac:	d01a      	beq.n	8007be4 <USART_SetConfig+0x318>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	d014      	beq.n	8007be0 <USART_SetConfig+0x314>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	2b09      	cmp	r3, #9
 8007bbc:	d00e      	beq.n	8007bdc <USART_SetConfig+0x310>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	2b0a      	cmp	r3, #10
 8007bc4:	d008      	beq.n	8007bd8 <USART_SetConfig+0x30c>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	2b0b      	cmp	r3, #11
 8007bcc:	d102      	bne.n	8007bd4 <USART_SetConfig+0x308>
 8007bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bd2:	e016      	b.n	8007c02 <USART_SetConfig+0x336>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e014      	b.n	8007c02 <USART_SetConfig+0x336>
 8007bd8:	2380      	movs	r3, #128	; 0x80
 8007bda:	e012      	b.n	8007c02 <USART_SetConfig+0x336>
 8007bdc:	2340      	movs	r3, #64	; 0x40
 8007bde:	e010      	b.n	8007c02 <USART_SetConfig+0x336>
 8007be0:	2320      	movs	r3, #32
 8007be2:	e00e      	b.n	8007c02 <USART_SetConfig+0x336>
 8007be4:	2310      	movs	r3, #16
 8007be6:	e00c      	b.n	8007c02 <USART_SetConfig+0x336>
 8007be8:	230c      	movs	r3, #12
 8007bea:	e00a      	b.n	8007c02 <USART_SetConfig+0x336>
 8007bec:	230a      	movs	r3, #10
 8007bee:	e008      	b.n	8007c02 <USART_SetConfig+0x336>
 8007bf0:	2308      	movs	r3, #8
 8007bf2:	e006      	b.n	8007c02 <USART_SetConfig+0x336>
 8007bf4:	2306      	movs	r3, #6
 8007bf6:	e004      	b.n	8007c02 <USART_SetConfig+0x336>
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	e002      	b.n	8007c02 <USART_SetConfig+0x336>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e000      	b.n	8007c02 <USART_SetConfig+0x336>
 8007c00:	2301      	movs	r3, #1
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c08:	005a      	lsls	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	085b      	lsrs	r3, r3, #1
 8007c10:	441a      	add	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1a:	61bb      	str	r3, [r7, #24]
      break;
 8007c1c:	e10e      	b.n	8007e3c <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d044      	beq.n	8007cb0 <USART_SetConfig+0x3e4>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d03e      	beq.n	8007cac <USART_SetConfig+0x3e0>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d038      	beq.n	8007ca8 <USART_SetConfig+0x3dc>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d032      	beq.n	8007ca4 <USART_SetConfig+0x3d8>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d02c      	beq.n	8007ca0 <USART_SetConfig+0x3d4>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	2b05      	cmp	r3, #5
 8007c4c:	d026      	beq.n	8007c9c <USART_SetConfig+0x3d0>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	2b06      	cmp	r3, #6
 8007c54:	d020      	beq.n	8007c98 <USART_SetConfig+0x3cc>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	2b07      	cmp	r3, #7
 8007c5c:	d01a      	beq.n	8007c94 <USART_SetConfig+0x3c8>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	2b08      	cmp	r3, #8
 8007c64:	d014      	beq.n	8007c90 <USART_SetConfig+0x3c4>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	2b09      	cmp	r3, #9
 8007c6c:	d00e      	beq.n	8007c8c <USART_SetConfig+0x3c0>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	2b0a      	cmp	r3, #10
 8007c74:	d008      	beq.n	8007c88 <USART_SetConfig+0x3bc>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	2b0b      	cmp	r3, #11
 8007c7c:	d102      	bne.n	8007c84 <USART_SetConfig+0x3b8>
 8007c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c82:	e016      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007c84:	2301      	movs	r3, #1
 8007c86:	e014      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007c88:	2380      	movs	r3, #128	; 0x80
 8007c8a:	e012      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007c8c:	2340      	movs	r3, #64	; 0x40
 8007c8e:	e010      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007c90:	2320      	movs	r3, #32
 8007c92:	e00e      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007c94:	2310      	movs	r3, #16
 8007c96:	e00c      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007c98:	230c      	movs	r3, #12
 8007c9a:	e00a      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007c9c:	230a      	movs	r3, #10
 8007c9e:	e008      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007ca0:	2308      	movs	r3, #8
 8007ca2:	e006      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007ca4:	2306      	movs	r3, #6
 8007ca6:	e004      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	e002      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e000      	b.n	8007cb2 <USART_SetConfig+0x3e6>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4a79      	ldr	r2, [pc, #484]	; (8007e98 <USART_SetConfig+0x5cc>)
 8007cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb8:	005a      	lsls	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	085b      	lsrs	r3, r3, #1
 8007cc0:	441a      	add	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cca:	61bb      	str	r3, [r7, #24]
      break;
 8007ccc:	e0b6      	b.n	8007e3c <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8007cce:	f7fd fc4b 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 8007cd2:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d044      	beq.n	8007d66 <USART_SetConfig+0x49a>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d03e      	beq.n	8007d62 <USART_SetConfig+0x496>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d038      	beq.n	8007d5e <USART_SetConfig+0x492>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d032      	beq.n	8007d5a <USART_SetConfig+0x48e>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d02c      	beq.n	8007d56 <USART_SetConfig+0x48a>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	2b05      	cmp	r3, #5
 8007d02:	d026      	beq.n	8007d52 <USART_SetConfig+0x486>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	2b06      	cmp	r3, #6
 8007d0a:	d020      	beq.n	8007d4e <USART_SetConfig+0x482>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	2b07      	cmp	r3, #7
 8007d12:	d01a      	beq.n	8007d4a <USART_SetConfig+0x47e>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d014      	beq.n	8007d46 <USART_SetConfig+0x47a>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	2b09      	cmp	r3, #9
 8007d22:	d00e      	beq.n	8007d42 <USART_SetConfig+0x476>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	2b0a      	cmp	r3, #10
 8007d2a:	d008      	beq.n	8007d3e <USART_SetConfig+0x472>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	2b0b      	cmp	r3, #11
 8007d32:	d102      	bne.n	8007d3a <USART_SetConfig+0x46e>
 8007d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d38:	e016      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e014      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d3e:	2380      	movs	r3, #128	; 0x80
 8007d40:	e012      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	e010      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d46:	2320      	movs	r3, #32
 8007d48:	e00e      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d4a:	2310      	movs	r3, #16
 8007d4c:	e00c      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	e00a      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d52:	230a      	movs	r3, #10
 8007d54:	e008      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d56:	2308      	movs	r3, #8
 8007d58:	e006      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d5a:	2306      	movs	r3, #6
 8007d5c:	e004      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d5e:	2304      	movs	r3, #4
 8007d60:	e002      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d62:	2302      	movs	r3, #2
 8007d64:	e000      	b.n	8007d68 <USART_SetConfig+0x49c>
 8007d66:	2301      	movs	r3, #1
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6e:	005a      	lsls	r2, r3, #1
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	085b      	lsrs	r3, r3, #1
 8007d76:	441a      	add	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	61bb      	str	r3, [r7, #24]
      break;
 8007d82:	e05b      	b.n	8007e3c <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d044      	beq.n	8007e16 <USART_SetConfig+0x54a>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d03e      	beq.n	8007e12 <USART_SetConfig+0x546>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d038      	beq.n	8007e0e <USART_SetConfig+0x542>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d032      	beq.n	8007e0a <USART_SetConfig+0x53e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d02c      	beq.n	8007e06 <USART_SetConfig+0x53a>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	2b05      	cmp	r3, #5
 8007db2:	d026      	beq.n	8007e02 <USART_SetConfig+0x536>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	2b06      	cmp	r3, #6
 8007dba:	d020      	beq.n	8007dfe <USART_SetConfig+0x532>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	2b07      	cmp	r3, #7
 8007dc2:	d01a      	beq.n	8007dfa <USART_SetConfig+0x52e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d014      	beq.n	8007df6 <USART_SetConfig+0x52a>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	2b09      	cmp	r3, #9
 8007dd2:	d00e      	beq.n	8007df2 <USART_SetConfig+0x526>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	2b0a      	cmp	r3, #10
 8007dda:	d008      	beq.n	8007dee <USART_SetConfig+0x522>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	2b0b      	cmp	r3, #11
 8007de2:	d102      	bne.n	8007dea <USART_SetConfig+0x51e>
 8007de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007de8:	e016      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e014      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007dee:	2380      	movs	r3, #128	; 0x80
 8007df0:	e012      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007df2:	2340      	movs	r3, #64	; 0x40
 8007df4:	e010      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007df6:	2320      	movs	r3, #32
 8007df8:	e00e      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007dfa:	2310      	movs	r3, #16
 8007dfc:	e00c      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	e00a      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007e02:	230a      	movs	r3, #10
 8007e04:	e008      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007e06:	2308      	movs	r3, #8
 8007e08:	e006      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007e0a:	2306      	movs	r3, #6
 8007e0c:	e004      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007e0e:	2304      	movs	r3, #4
 8007e10:	e002      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e000      	b.n	8007e18 <USART_SetConfig+0x54c>
 8007e16:	2301      	movs	r3, #1
 8007e18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e20:	005a      	lsls	r2, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	441a      	add	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e32:	61bb      	str	r3, [r7, #24]
      break;
 8007e34:	e002      	b.n	8007e3c <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	77bb      	strb	r3, [r7, #30]
      break;
 8007e3a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	2b0f      	cmp	r3, #15
 8007e40:	d916      	bls.n	8007e70 <USART_SetConfig+0x5a4>
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e48:	d212      	bcs.n	8007e70 <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f023 030f 	bic.w	r3, r3, #15
 8007e52:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	085b      	lsrs	r3, r3, #1
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	89fb      	ldrh	r3, [r7, #14]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	89fa      	ldrh	r2, [r7, #14]
 8007e6c:	60da      	str	r2, [r3, #12]
 8007e6e:	e001      	b.n	8007e74 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8007e8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3720      	adds	r7, #32
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	00f42400 	.word	0x00f42400

08007e9c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007eaa:	f7fa fab5 	bl	8002418 <HAL_GetTick>
 8007eae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0308 	and.w	r3, r3, #8
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d10e      	bne.n	8007edc <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff fcc7 	bl	8007860 <USART_WaitOnFlagUntilTimeout>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e01e      	b.n	8007f1a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d10e      	bne.n	8007f08 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fcb1 	bl	8007860 <USART_WaitOnFlagUntilTimeout>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e008      	b.n	8007f1a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b085      	sub	sp, #20
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_USARTEx_DisableFifoMode+0x16>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e027      	b.n	8007f88 <HAL_USARTEx_DisableFifoMode+0x66>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0201 	bic.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f66:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d101      	bne.n	8007fac <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e02d      	b.n	8008008 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0201 	bic.w	r2, r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f84f 	bl	800808c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8008024:	2302      	movs	r3, #2
 8008026:	e02d      	b.n	8008084 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0201 	bic.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f811 	bl	800808c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008098:	2b00      	cmp	r3, #0
 800809a:	d106      	bne.n	80080aa <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080a8:	e02f      	b.n	800810a <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080aa:	2308      	movs	r3, #8
 80080ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080ae:	2308      	movs	r3, #8
 80080b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80080b8:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80080c8:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 0307 	and.w	r3, r3, #7
 80080d0:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	7b3a      	ldrb	r2, [r7, #12]
 80080d6:	4910      	ldr	r1, [pc, #64]	; (8008118 <USARTEx_SetNbDataToProcess+0x8c>)
 80080d8:	5c8a      	ldrb	r2, [r1, r2]
 80080da:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 80080de:	7b3a      	ldrb	r2, [r7, #12]
 80080e0:	490e      	ldr	r1, [pc, #56]	; (800811c <USARTEx_SetNbDataToProcess+0x90>)
 80080e2:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	7b7a      	ldrb	r2, [r7, #13]
 80080f2:	4909      	ldr	r1, [pc, #36]	; (8008118 <USARTEx_SetNbDataToProcess+0x8c>)
 80080f4:	5c8a      	ldrb	r2, [r1, r2]
 80080f6:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80080fa:	7b7a      	ldrb	r2, [r7, #13]
 80080fc:	4907      	ldr	r1, [pc, #28]	; (800811c <USARTEx_SetNbDataToProcess+0x90>)
 80080fe:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008100:	fb93 f3f2 	sdiv	r3, r3, r2
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800810a:	bf00      	nop
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	0800b318 	.word	0x0800b318
 800811c:	0800b320 	.word	0x0800b320

08008120 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8008124:	4907      	ldr	r1, [pc, #28]	; (8008144 <MX_FATFS_Init+0x24>)
 8008126:	4808      	ldr	r0, [pc, #32]	; (8008148 <MX_FATFS_Init+0x28>)
 8008128:	f000 f8b6 	bl	8008298 <FATFS_LinkDriver>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8008132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008136:	e003      	b.n	8008140 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8008138:	4b04      	ldr	r3, [pc, #16]	; (800814c <MX_FATFS_Init+0x2c>)
 800813a:	2201      	movs	r2, #1
 800813c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800813e:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8008140:	4618      	mov	r0, r3
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20000ba8 	.word	0x20000ba8
 8008148:	20000010 	.word	0x20000010
 800814c:	20000bac 	.word	0x20000bac

08008150 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800815a:	4b06      	ldr	r3, [pc, #24]	; (8008174 <USER_initialize+0x24>)
 800815c:	2201      	movs	r2, #1
 800815e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008160:	4b04      	ldr	r3, [pc, #16]	; (8008174 <USER_initialize+0x24>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008166:	4618      	mov	r0, r3
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	2000000c 	.word	0x2000000c

08008178 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008182:	4b06      	ldr	r3, [pc, #24]	; (800819c <USER_status+0x24>)
 8008184:	2201      	movs	r2, #1
 8008186:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008188:	4b04      	ldr	r3, [pc, #16]	; (800819c <USER_status+0x24>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	2000000c 	.word	0x2000000c

080081a0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80081b0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80081be:	b480      	push	{r7}
 80081c0:	b085      	sub	sp, #20
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
 80081ca:	4603      	mov	r3, r0
 80081cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80081ce:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	603a      	str	r2, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
 80081e8:	460b      	mov	r3, r1
 80081ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
    return res;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
	...

08008200 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800820e:	2301      	movs	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008216:	4b1f      	ldr	r3, [pc, #124]	; (8008294 <FATFS_LinkDriverEx+0x94>)
 8008218:	7a5b      	ldrb	r3, [r3, #9]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	d131      	bne.n	8008284 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008220:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <FATFS_LinkDriverEx+0x94>)
 8008222:	7a5b      	ldrb	r3, [r3, #9]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <FATFS_LinkDriverEx+0x94>)
 800822a:	2100      	movs	r1, #0
 800822c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800822e:	4b19      	ldr	r3, [pc, #100]	; (8008294 <FATFS_LinkDriverEx+0x94>)
 8008230:	7a5b      	ldrb	r3, [r3, #9]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	4a17      	ldr	r2, [pc, #92]	; (8008294 <FATFS_LinkDriverEx+0x94>)
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800823e:	4b15      	ldr	r3, [pc, #84]	; (8008294 <FATFS_LinkDriverEx+0x94>)
 8008240:	7a5b      	ldrb	r3, [r3, #9]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	4b13      	ldr	r3, [pc, #76]	; (8008294 <FATFS_LinkDriverEx+0x94>)
 8008248:	4413      	add	r3, r2
 800824a:	79fa      	ldrb	r2, [r7, #7]
 800824c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800824e:	4b11      	ldr	r3, [pc, #68]	; (8008294 <FATFS_LinkDriverEx+0x94>)
 8008250:	7a5b      	ldrb	r3, [r3, #9]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	b2d1      	uxtb	r1, r2
 8008258:	4a0e      	ldr	r2, [pc, #56]	; (8008294 <FATFS_LinkDriverEx+0x94>)
 800825a:	7251      	strb	r1, [r2, #9]
 800825c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800825e:	7dbb      	ldrb	r3, [r7, #22]
 8008260:	3330      	adds	r3, #48	; 0x30
 8008262:	b2da      	uxtb	r2, r3
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3301      	adds	r3, #1
 800826c:	223a      	movs	r2, #58	; 0x3a
 800826e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	3302      	adds	r3, #2
 8008274:	222f      	movs	r2, #47	; 0x2f
 8008276:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	3303      	adds	r3, #3
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008284:	7dfb      	ldrb	r3, [r7, #23]
}
 8008286:	4618      	mov	r0, r3
 8008288:	371c      	adds	r7, #28
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	20000bb0 	.word	0x20000bb0

08008298 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80082a2:	2200      	movs	r2, #0
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff ffaa 	bl	8008200 <FATFS_LinkDriverEx>
 80082ac:	4603      	mov	r3, r0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <__NVIC_SetPriority>:
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	db0a      	blt.n	80082e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	490c      	ldr	r1, [pc, #48]	; (8008304 <__NVIC_SetPriority+0x4c>)
 80082d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082d6:	0112      	lsls	r2, r2, #4
 80082d8:	b2d2      	uxtb	r2, r2
 80082da:	440b      	add	r3, r1
 80082dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80082e0:	e00a      	b.n	80082f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	4908      	ldr	r1, [pc, #32]	; (8008308 <__NVIC_SetPriority+0x50>)
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	f003 030f 	and.w	r3, r3, #15
 80082ee:	3b04      	subs	r3, #4
 80082f0:	0112      	lsls	r2, r2, #4
 80082f2:	b2d2      	uxtb	r2, r2
 80082f4:	440b      	add	r3, r1
 80082f6:	761a      	strb	r2, [r3, #24]
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	e000e100 	.word	0xe000e100
 8008308:	e000ed00 	.word	0xe000ed00

0800830c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008310:	4b05      	ldr	r3, [pc, #20]	; (8008328 <SysTick_Handler+0x1c>)
 8008312:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008314:	f001 fe20 	bl	8009f58 <xTaskGetSchedulerState>
 8008318:	4603      	mov	r3, r0
 800831a:	2b01      	cmp	r3, #1
 800831c:	d001      	beq.n	8008322 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800831e:	f002 fc0b 	bl	800ab38 <xPortSysTickHandler>
  }
}
 8008322:	bf00      	nop
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	e000e010 	.word	0xe000e010

0800832c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008330:	2100      	movs	r1, #0
 8008332:	f06f 0004 	mvn.w	r0, #4
 8008336:	f7ff ffbf 	bl	80082b8 <__NVIC_SetPriority>
#endif
}
 800833a:	bf00      	nop
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008346:	f3ef 8305 	mrs	r3, IPSR
 800834a:	603b      	str	r3, [r7, #0]
  return(result);
 800834c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008352:	f06f 0305 	mvn.w	r3, #5
 8008356:	607b      	str	r3, [r7, #4]
 8008358:	e00c      	b.n	8008374 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800835a:	4b0a      	ldr	r3, [pc, #40]	; (8008384 <osKernelInitialize+0x44>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d105      	bne.n	800836e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008362:	4b08      	ldr	r3, [pc, #32]	; (8008384 <osKernelInitialize+0x44>)
 8008364:	2201      	movs	r2, #1
 8008366:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008368:	2300      	movs	r3, #0
 800836a:	607b      	str	r3, [r7, #4]
 800836c:	e002      	b.n	8008374 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800836e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008372:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008374:	687b      	ldr	r3, [r7, #4]
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000bbc 	.word	0x20000bbc

08008388 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800838e:	f3ef 8305 	mrs	r3, IPSR
 8008392:	603b      	str	r3, [r7, #0]
  return(result);
 8008394:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800839a:	f06f 0305 	mvn.w	r3, #5
 800839e:	607b      	str	r3, [r7, #4]
 80083a0:	e010      	b.n	80083c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083a2:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <osKernelStart+0x48>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d109      	bne.n	80083be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083aa:	f7ff ffbf 	bl	800832c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083ae:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <osKernelStart+0x48>)
 80083b0:	2202      	movs	r2, #2
 80083b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083b4:	f001 f964 	bl	8009680 <vTaskStartScheduler>
      stat = osOK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	607b      	str	r3, [r7, #4]
 80083bc:	e002      	b.n	80083c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80083be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083c4:	687b      	ldr	r3, [r7, #4]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000bbc 	.word	0x20000bbc

080083d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08e      	sub	sp, #56	; 0x38
 80083d8:	af04      	add	r7, sp, #16
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083e4:	f3ef 8305 	mrs	r3, IPSR
 80083e8:	617b      	str	r3, [r7, #20]
  return(result);
 80083ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d17e      	bne.n	80084ee <osThreadNew+0x11a>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d07b      	beq.n	80084ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80083f6:	2380      	movs	r3, #128	; 0x80
 80083f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80083fa:	2318      	movs	r3, #24
 80083fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80083fe:	2300      	movs	r3, #0
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008406:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d045      	beq.n	800849a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <osThreadNew+0x48>
        name = attr->name;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d008      	beq.n	8008442 <osThreadNew+0x6e>
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	2b38      	cmp	r3, #56	; 0x38
 8008434:	d805      	bhi.n	8008442 <osThreadNew+0x6e>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <osThreadNew+0x72>
        return (NULL);
 8008442:	2300      	movs	r3, #0
 8008444:	e054      	b.n	80084f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	089b      	lsrs	r3, r3, #2
 8008454:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00e      	beq.n	800847c <osThreadNew+0xa8>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	2bbb      	cmp	r3, #187	; 0xbb
 8008464:	d90a      	bls.n	800847c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800846a:	2b00      	cmp	r3, #0
 800846c:	d006      	beq.n	800847c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <osThreadNew+0xa8>
        mem = 1;
 8008476:	2301      	movs	r3, #1
 8008478:	61bb      	str	r3, [r7, #24]
 800847a:	e010      	b.n	800849e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10c      	bne.n	800849e <osThreadNew+0xca>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <osThreadNew+0xca>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d104      	bne.n	800849e <osThreadNew+0xca>
          mem = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	61bb      	str	r3, [r7, #24]
 8008498:	e001      	b.n	800849e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d110      	bne.n	80084c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084ac:	9202      	str	r2, [sp, #8]
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	6a3a      	ldr	r2, [r7, #32]
 80084b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 fe0c 	bl	80090d8 <xTaskCreateStatic>
 80084c0:	4603      	mov	r3, r0
 80084c2:	613b      	str	r3, [r7, #16]
 80084c4:	e013      	b.n	80084ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d110      	bne.n	80084ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	f107 0310 	add.w	r3, r7, #16
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 fe57 	bl	8009192 <xTaskCreate>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d001      	beq.n	80084ee <osThreadNew+0x11a>
            hTask = NULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80084ee:	693b      	ldr	r3, [r7, #16]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3728      	adds	r7, #40	; 0x28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008500:	f3ef 8305 	mrs	r3, IPSR
 8008504:	60bb      	str	r3, [r7, #8]
  return(result);
 8008506:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <osDelay+0x1c>
    stat = osErrorISR;
 800850c:	f06f 0305 	mvn.w	r3, #5
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	e007      	b.n	8008524 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <osDelay+0x2c>
      vTaskDelay(ticks);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f001 f804 	bl	800952c <vTaskDelay>
    }
  }

  return (stat);
 8008524:	68fb      	ldr	r3, [r7, #12]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4a07      	ldr	r2, [pc, #28]	; (800855c <vApplicationGetIdleTaskMemory+0x2c>)
 8008540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	4a06      	ldr	r2, [pc, #24]	; (8008560 <vApplicationGetIdleTaskMemory+0x30>)
 8008546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2280      	movs	r2, #128	; 0x80
 800854c:	601a      	str	r2, [r3, #0]
}
 800854e:	bf00      	nop
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20000bc0 	.word	0x20000bc0
 8008560:	20000c7c 	.word	0x20000c7c

08008564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4a07      	ldr	r2, [pc, #28]	; (8008590 <vApplicationGetTimerTaskMemory+0x2c>)
 8008574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	4a06      	ldr	r2, [pc, #24]	; (8008594 <vApplicationGetTimerTaskMemory+0x30>)
 800857a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008582:	601a      	str	r2, [r3, #0]
}
 8008584:	bf00      	nop
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	20000e7c 	.word	0x20000e7c
 8008594:	20000f38 	.word	0x20000f38

08008598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f103 0208 	add.w	r2, r3, #8
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f103 0208 	add.w	r2, r3, #8
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f103 0208 	add.w	r2, r3, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085f2:	b480      	push	{r7}
 80085f4:	b085      	sub	sp, #20
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	601a      	str	r2, [r3, #0]
}
 800862e:	bf00      	nop
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008650:	d103      	bne.n	800865a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e00c      	b.n	8008674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	3308      	adds	r3, #8
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	e002      	b.n	8008668 <vListInsert+0x2e>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	429a      	cmp	r2, r3
 8008672:	d2f6      	bcs.n	8008662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	601a      	str	r2, [r3, #0]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	6892      	ldr	r2, [r2, #8]
 80086c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	6852      	ldr	r2, [r2, #4]
 80086cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d103      	bne.n	80086e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	1e5a      	subs	r2, r3, #1
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10a      	bne.n	800872a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008726:	bf00      	nop
 8008728:	e7fe      	b.n	8008728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800872a:	f002 f973 	bl	800aa14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008736:	68f9      	ldr	r1, [r7, #12]
 8008738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800873a:	fb01 f303 	mul.w	r3, r1, r3
 800873e:	441a      	add	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800875a:	3b01      	subs	r3, #1
 800875c:	68f9      	ldr	r1, [r7, #12]
 800875e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008760:	fb01 f303 	mul.w	r3, r1, r3
 8008764:	441a      	add	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	22ff      	movs	r2, #255	; 0xff
 800876e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	22ff      	movs	r2, #255	; 0xff
 8008776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d114      	bne.n	80087aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d01a      	beq.n	80087be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3310      	adds	r3, #16
 800878c:	4618      	mov	r0, r3
 800878e:	f001 fa11 	bl	8009bb4 <xTaskRemoveFromEventList>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d012      	beq.n	80087be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008798:	4b0c      	ldr	r3, [pc, #48]	; (80087cc <xQueueGenericReset+0xcc>)
 800879a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	e009      	b.n	80087be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3310      	adds	r3, #16
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff fef2 	bl	8008598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3324      	adds	r3, #36	; 0x24
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff feed 	bl	8008598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087be:	f002 f959 	bl	800aa74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087c2:	2301      	movs	r3, #1
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08e      	sub	sp, #56	; 0x38
 80087d4:	af02      	add	r7, sp, #8
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10a      	bne.n	80087fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10a      	bne.n	8008816 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <xQueueGenericCreateStatic+0x52>
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <xQueueGenericCreateStatic+0x56>
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <xQueueGenericCreateStatic+0x58>
 8008826:	2300      	movs	r3, #0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	623b      	str	r3, [r7, #32]
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d102      	bne.n	800884e <xQueueGenericCreateStatic+0x7e>
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <xQueueGenericCreateStatic+0x82>
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <xQueueGenericCreateStatic+0x84>
 8008852:	2300      	movs	r3, #0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10a      	bne.n	800886e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	61fb      	str	r3, [r7, #28]
}
 800886a:	bf00      	nop
 800886c:	e7fe      	b.n	800886c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800886e:	2350      	movs	r3, #80	; 0x50
 8008870:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b50      	cmp	r3, #80	; 0x50
 8008876:	d00a      	beq.n	800888e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	61bb      	str	r3, [r7, #24]
}
 800888a:	bf00      	nop
 800888c:	e7fe      	b.n	800888c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800888e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00d      	beq.n	80088b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	4613      	mov	r3, r2
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f805 	bl	80088c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3730      	adds	r7, #48	; 0x30
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
 80088cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d103      	bne.n	80088dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e002      	b.n	80088e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088ee:	2101      	movs	r1, #1
 80088f0:	69b8      	ldr	r0, [r7, #24]
 80088f2:	f7ff ff05 	bl	8008700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08e      	sub	sp, #56	; 0x38
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008916:	2300      	movs	r3, #0
 8008918:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <xQueueGenericSend+0x32>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008936:	bf00      	nop
 8008938:	e7fe      	b.n	8008938 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <xQueueGenericSend+0x40>
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <xQueueGenericSend+0x44>
 8008948:	2301      	movs	r3, #1
 800894a:	e000      	b.n	800894e <xQueueGenericSend+0x46>
 800894c:	2300      	movs	r3, #0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <xQueueGenericSend+0x60>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d103      	bne.n	8008976 <xQueueGenericSend+0x6e>
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <xQueueGenericSend+0x72>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xQueueGenericSend+0x74>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <xQueueGenericSend+0x8e>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	623b      	str	r3, [r7, #32]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008996:	f001 fadf 	bl	8009f58 <xTaskGetSchedulerState>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <xQueueGenericSend+0x9e>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <xQueueGenericSend+0xa2>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e000      	b.n	80089ac <xQueueGenericSend+0xa4>
 80089aa:	2300      	movs	r3, #0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10a      	bne.n	80089c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	61fb      	str	r3, [r7, #28]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089c6:	f002 f825 	bl	800aa14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d302      	bcc.n	80089dc <xQueueGenericSend+0xd4>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d129      	bne.n	8008a30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089e2:	f000 fa0b 	bl	8008dfc <prvCopyDataToQueue>
 80089e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d010      	beq.n	8008a12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	3324      	adds	r3, #36	; 0x24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 f8dd 	bl	8009bb4 <xTaskRemoveFromEventList>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d013      	beq.n	8008a28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a00:	4b3f      	ldr	r3, [pc, #252]	; (8008b00 <xQueueGenericSend+0x1f8>)
 8008a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	e00a      	b.n	8008a28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d007      	beq.n	8008a28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a18:	4b39      	ldr	r3, [pc, #228]	; (8008b00 <xQueueGenericSend+0x1f8>)
 8008a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a28:	f002 f824 	bl	800aa74 <vPortExitCritical>
				return pdPASS;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e063      	b.n	8008af8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d103      	bne.n	8008a3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a36:	f002 f81d 	bl	800aa74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e05c      	b.n	8008af8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d106      	bne.n	8008a52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a44:	f107 0314 	add.w	r3, r7, #20
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f001 f917 	bl	8009c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a52:	f002 f80f 	bl	800aa74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a56:	f000 fe83 	bl	8009760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a5a:	f001 ffdb 	bl	800aa14 <vPortEnterCritical>
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a64:	b25b      	sxtb	r3, r3
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a6a:	d103      	bne.n	8008a74 <xQueueGenericSend+0x16c>
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a7a:	b25b      	sxtb	r3, r3
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a80:	d103      	bne.n	8008a8a <xQueueGenericSend+0x182>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a8a:	f001 fff3 	bl	800aa74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a8e:	1d3a      	adds	r2, r7, #4
 8008a90:	f107 0314 	add.w	r3, r7, #20
 8008a94:	4611      	mov	r1, r2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 f906 	bl	8009ca8 <xTaskCheckForTimeOut>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d124      	bne.n	8008aec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008aa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aa4:	f000 faa2 	bl	8008fec <prvIsQueueFull>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d018      	beq.n	8008ae0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	3310      	adds	r3, #16
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f001 f82c 	bl	8009b14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008abe:	f000 fa2d 	bl	8008f1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ac2:	f000 fe5b 	bl	800977c <xTaskResumeAll>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f47f af7c 	bne.w	80089c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008ace:	4b0c      	ldr	r3, [pc, #48]	; (8008b00 <xQueueGenericSend+0x1f8>)
 8008ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	e772      	b.n	80089c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ae2:	f000 fa1b 	bl	8008f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ae6:	f000 fe49 	bl	800977c <xTaskResumeAll>
 8008aea:	e76c      	b.n	80089c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aee:	f000 fa15 	bl	8008f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008af2:	f000 fe43 	bl	800977c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008af6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3738      	adds	r7, #56	; 0x38
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	e000ed04 	.word	0xe000ed04

08008b04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b090      	sub	sp, #64	; 0x40
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10a      	bne.n	8008b32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d103      	bne.n	8008b40 <xQueueGenericSendFromISR+0x3c>
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <xQueueGenericSendFromISR+0x40>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e000      	b.n	8008b46 <xQueueGenericSendFromISR+0x42>
 8008b44:	2300      	movs	r3, #0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10a      	bne.n	8008b60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d103      	bne.n	8008b6e <xQueueGenericSendFromISR+0x6a>
 8008b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d101      	bne.n	8008b72 <xQueueGenericSendFromISR+0x6e>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <xQueueGenericSendFromISR+0x70>
 8008b72:	2300      	movs	r3, #0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	623b      	str	r3, [r7, #32]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b8e:	f002 f823 	bl	800abd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b92:	f3ef 8211 	mrs	r2, BASEPRI
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	61fa      	str	r2, [r7, #28]
 8008ba8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008baa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d302      	bcc.n	8008bc0 <xQueueGenericSendFromISR+0xbc>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d12f      	bne.n	8008c20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bd6:	f000 f911 	bl	8008dfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be2:	d112      	bne.n	8008c0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d016      	beq.n	8008c1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bee:	3324      	adds	r3, #36	; 0x24
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 ffdf 	bl	8009bb4 <xTaskRemoveFromEventList>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00e      	beq.n	8008c1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	e007      	b.n	8008c1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c0e:	3301      	adds	r3, #1
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	b25a      	sxtb	r2, r3
 8008c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008c1e:	e001      	b.n	8008c24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c20:	2300      	movs	r3, #0
 8008c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c26:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3740      	adds	r7, #64	; 0x40
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08c      	sub	sp, #48	; 0x30
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <xQueueReceive+0x30>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	623b      	str	r3, [r7, #32]
}
 8008c68:	bf00      	nop
 8008c6a:	e7fe      	b.n	8008c6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d103      	bne.n	8008c7a <xQueueReceive+0x3e>
 8008c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <xQueueReceive+0x42>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <xQueueReceive+0x44>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10a      	bne.n	8008c9a <xQueueReceive+0x5e>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	61fb      	str	r3, [r7, #28]
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c9a:	f001 f95d 	bl	8009f58 <xTaskGetSchedulerState>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <xQueueReceive+0x6e>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <xQueueReceive+0x72>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e000      	b.n	8008cb0 <xQueueReceive+0x74>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <xQueueReceive+0x8e>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	61bb      	str	r3, [r7, #24]
}
 8008cc6:	bf00      	nop
 8008cc8:	e7fe      	b.n	8008cc8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cca:	f001 fea3 	bl	800aa14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d01f      	beq.n	8008d1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cde:	f000 f8f7 	bl	8008ed0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	1e5a      	subs	r2, r3, #1
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00f      	beq.n	8008d12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	3310      	adds	r3, #16
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 ff5c 	bl	8009bb4 <xTaskRemoveFromEventList>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d007      	beq.n	8008d12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d02:	4b3d      	ldr	r3, [pc, #244]	; (8008df8 <xQueueReceive+0x1bc>)
 8008d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d12:	f001 feaf 	bl	800aa74 <vPortExitCritical>
				return pdPASS;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e069      	b.n	8008dee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d103      	bne.n	8008d28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d20:	f001 fea8 	bl	800aa74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d24:	2300      	movs	r3, #0
 8008d26:	e062      	b.n	8008dee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d2e:	f107 0310 	add.w	r3, r7, #16
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 ffa2 	bl	8009c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d3c:	f001 fe9a 	bl	800aa74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d40:	f000 fd0e 	bl	8009760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d44:	f001 fe66 	bl	800aa14 <vPortEnterCritical>
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d4e:	b25b      	sxtb	r3, r3
 8008d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d54:	d103      	bne.n	8008d5e <xQueueReceive+0x122>
 8008d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d64:	b25b      	sxtb	r3, r3
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d6a:	d103      	bne.n	8008d74 <xQueueReceive+0x138>
 8008d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d74:	f001 fe7e 	bl	800aa74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d78:	1d3a      	adds	r2, r7, #4
 8008d7a:	f107 0310 	add.w	r3, r7, #16
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 ff91 	bl	8009ca8 <xTaskCheckForTimeOut>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d123      	bne.n	8008dd4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d8e:	f000 f917 	bl	8008fc0 <prvIsQueueEmpty>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d017      	beq.n	8008dc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9a:	3324      	adds	r3, #36	; 0x24
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 feb7 	bl	8009b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da8:	f000 f8b8 	bl	8008f1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dac:	f000 fce6 	bl	800977c <xTaskResumeAll>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d189      	bne.n	8008cca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008db6:	4b10      	ldr	r3, [pc, #64]	; (8008df8 <xQueueReceive+0x1bc>)
 8008db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	e780      	b.n	8008cca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dca:	f000 f8a7 	bl	8008f1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dce:	f000 fcd5 	bl	800977c <xTaskResumeAll>
 8008dd2:	e77a      	b.n	8008cca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd6:	f000 f8a1 	bl	8008f1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dda:	f000 fccf 	bl	800977c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de0:	f000 f8ee 	bl	8008fc0 <prvIsQueueEmpty>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f43f af6f 	beq.w	8008cca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3730      	adds	r7, #48	; 0x30
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10d      	bne.n	8008e36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d14d      	bne.n	8008ebe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 f8b4 	bl	8009f94 <xTaskPriorityDisinherit>
 8008e2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	609a      	str	r2, [r3, #8]
 8008e34:	e043      	b.n	8008ebe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d119      	bne.n	8008e70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6858      	ldr	r0, [r3, #4]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e44:	461a      	mov	r2, r3
 8008e46:	68b9      	ldr	r1, [r7, #8]
 8008e48:	f002 f916 	bl	800b078 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e54:	441a      	add	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d32b      	bcc.n	8008ebe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	605a      	str	r2, [r3, #4]
 8008e6e:	e026      	b.n	8008ebe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	68d8      	ldr	r0, [r3, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	461a      	mov	r2, r3
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	f002 f8fc 	bl	800b078 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e88:	425b      	negs	r3, r3
 8008e8a:	441a      	add	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	68da      	ldr	r2, [r3, #12]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d207      	bcs.n	8008eac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea4:	425b      	negs	r3, r3
 8008ea6:	441a      	add	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d105      	bne.n	8008ebe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ec6:	697b      	ldr	r3, [r7, #20]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d018      	beq.n	8008f14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	441a      	add	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d303      	bcc.n	8008f04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68d9      	ldr	r1, [r3, #12]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6838      	ldr	r0, [r7, #0]
 8008f10:	f002 f8b2 	bl	800b078 <memcpy>
	}
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f24:	f001 fd76 	bl	800aa14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f30:	e011      	b.n	8008f56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d012      	beq.n	8008f60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3324      	adds	r3, #36	; 0x24
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fe38 	bl	8009bb4 <xTaskRemoveFromEventList>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f4a:	f000 ff0f 	bl	8009d6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	dce9      	bgt.n	8008f32 <prvUnlockQueue+0x16>
 8008f5e:	e000      	b.n	8008f62 <prvUnlockQueue+0x46>
					break;
 8008f60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	22ff      	movs	r2, #255	; 0xff
 8008f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f6a:	f001 fd83 	bl	800aa74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f6e:	f001 fd51 	bl	800aa14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f7a:	e011      	b.n	8008fa0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d012      	beq.n	8008faa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	3310      	adds	r3, #16
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 fe13 	bl	8009bb4 <xTaskRemoveFromEventList>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f94:	f000 feea 	bl	8009d6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	dce9      	bgt.n	8008f7c <prvUnlockQueue+0x60>
 8008fa8:	e000      	b.n	8008fac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008faa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	22ff      	movs	r2, #255	; 0xff
 8008fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008fb4:	f001 fd5e 	bl	800aa74 <vPortExitCritical>
}
 8008fb8:	bf00      	nop
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fc8:	f001 fd24 	bl	800aa14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d102      	bne.n	8008fda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	e001      	b.n	8008fde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fde:	f001 fd49 	bl	800aa74 <vPortExitCritical>

	return xReturn;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ff4:	f001 fd0e 	bl	800aa14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009000:	429a      	cmp	r2, r3
 8009002:	d102      	bne.n	800900a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009004:	2301      	movs	r3, #1
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e001      	b.n	800900e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800900a:	2300      	movs	r3, #0
 800900c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800900e:	f001 fd31 	bl	800aa74 <vPortExitCritical>

	return xReturn;
 8009012:	68fb      	ldr	r3, [r7, #12]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009026:	2300      	movs	r3, #0
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	e014      	b.n	8009056 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800902c:	4a0f      	ldr	r2, [pc, #60]	; (800906c <vQueueAddToRegistry+0x50>)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10b      	bne.n	8009050 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009038:	490c      	ldr	r1, [pc, #48]	; (800906c <vQueueAddToRegistry+0x50>)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009042:	4a0a      	ldr	r2, [pc, #40]	; (800906c <vQueueAddToRegistry+0x50>)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	00db      	lsls	r3, r3, #3
 8009048:	4413      	add	r3, r2
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800904e:	e006      	b.n	800905e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b07      	cmp	r3, #7
 800905a:	d9e7      	bls.n	800902c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800905c:	bf00      	nop
 800905e:	bf00      	nop
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	20001338 	.word	0x20001338

08009070 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009080:	f001 fcc8 	bl	800aa14 <vPortEnterCritical>
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800908a:	b25b      	sxtb	r3, r3
 800908c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009090:	d103      	bne.n	800909a <vQueueWaitForMessageRestricted+0x2a>
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090a0:	b25b      	sxtb	r3, r3
 80090a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090a6:	d103      	bne.n	80090b0 <vQueueWaitForMessageRestricted+0x40>
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090b0:	f001 fce0 	bl	800aa74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d106      	bne.n	80090ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	3324      	adds	r3, #36	; 0x24
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	68b9      	ldr	r1, [r7, #8]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fd49 	bl	8009b5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80090ca:	6978      	ldr	r0, [r7, #20]
 80090cc:	f7ff ff26 	bl	8008f1c <prvUnlockQueue>
	}
 80090d0:	bf00      	nop
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08e      	sub	sp, #56	; 0x38
 80090dc:	af04      	add	r7, sp, #16
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <xTaskCreateStatic+0x2a>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	623b      	str	r3, [r7, #32]
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10a      	bne.n	800911e <xTaskCreateStatic+0x46>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	61fb      	str	r3, [r7, #28]
}
 800911a:	bf00      	nop
 800911c:	e7fe      	b.n	800911c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800911e:	23bc      	movs	r3, #188	; 0xbc
 8009120:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2bbc      	cmp	r3, #188	; 0xbc
 8009126:	d00a      	beq.n	800913e <xTaskCreateStatic+0x66>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	61bb      	str	r3, [r7, #24]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800913e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	2b00      	cmp	r3, #0
 8009144:	d01e      	beq.n	8009184 <xTaskCreateStatic+0xac>
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01b      	beq.n	8009184 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009154:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	2202      	movs	r2, #2
 800915a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800915e:	2300      	movs	r3, #0
 8009160:	9303      	str	r3, [sp, #12]
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	9302      	str	r3, [sp, #8]
 8009166:	f107 0314 	add.w	r3, r7, #20
 800916a:	9301      	str	r3, [sp, #4]
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 f850 	bl	800921c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800917c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800917e:	f000 f8f3 	bl	8009368 <prvAddNewTaskToReadyList>
 8009182:	e001      	b.n	8009188 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009188:	697b      	ldr	r3, [r7, #20]
	}
 800918a:	4618      	mov	r0, r3
 800918c:	3728      	adds	r7, #40	; 0x28
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009192:	b580      	push	{r7, lr}
 8009194:	b08c      	sub	sp, #48	; 0x30
 8009196:	af04      	add	r7, sp, #16
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	603b      	str	r3, [r7, #0]
 800919e:	4613      	mov	r3, r2
 80091a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091a2:	88fb      	ldrh	r3, [r7, #6]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f001 fd56 	bl	800ac58 <pvPortMalloc>
 80091ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00e      	beq.n	80091d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091b4:	20bc      	movs	r0, #188	; 0xbc
 80091b6:	f001 fd4f 	bl	800ac58 <pvPortMalloc>
 80091ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	631a      	str	r2, [r3, #48]	; 0x30
 80091c8:	e005      	b.n	80091d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80091ca:	6978      	ldr	r0, [r7, #20]
 80091cc:	f001 fe10 	bl	800adf0 <vPortFree>
 80091d0:	e001      	b.n	80091d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d017      	beq.n	800920c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091e4:	88fa      	ldrh	r2, [r7, #6]
 80091e6:	2300      	movs	r3, #0
 80091e8:	9303      	str	r3, [sp, #12]
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	9302      	str	r3, [sp, #8]
 80091ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 f80e 	bl	800921c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009200:	69f8      	ldr	r0, [r7, #28]
 8009202:	f000 f8b1 	bl	8009368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009206:	2301      	movs	r3, #1
 8009208:	61bb      	str	r3, [r7, #24]
 800920a:	e002      	b.n	8009212 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800920c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009210:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009212:	69bb      	ldr	r3, [r7, #24]
	}
 8009214:	4618      	mov	r0, r3
 8009216:	3720      	adds	r7, #32
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800922a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	461a      	mov	r2, r3
 8009234:	21a5      	movs	r1, #165	; 0xa5
 8009236:	f001 ff2d 	bl	800b094 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009244:	3b01      	subs	r3, #1
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	f023 0307 	bic.w	r3, r3, #7
 8009252:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	f003 0307 	and.w	r3, r3, #7
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <prvInitialiseNewTask+0x58>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	617b      	str	r3, [r7, #20]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d01f      	beq.n	80092ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800927a:	2300      	movs	r3, #0
 800927c:	61fb      	str	r3, [r7, #28]
 800927e:	e012      	b.n	80092a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	4413      	add	r3, r2
 8009286:	7819      	ldrb	r1, [r3, #0]
 8009288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	4413      	add	r3, r2
 800928e:	3334      	adds	r3, #52	; 0x34
 8009290:	460a      	mov	r2, r1
 8009292:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	4413      	add	r3, r2
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d006      	beq.n	80092ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	3301      	adds	r3, #1
 80092a4:	61fb      	str	r3, [r7, #28]
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	2b0f      	cmp	r3, #15
 80092aa:	d9e9      	bls.n	8009280 <prvInitialiseNewTask+0x64>
 80092ac:	e000      	b.n	80092b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80092ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092b8:	e003      	b.n	80092c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	2b37      	cmp	r3, #55	; 0x37
 80092c6:	d901      	bls.n	80092cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092c8:	2337      	movs	r3, #55	; 0x37
 80092ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	2200      	movs	r2, #0
 80092dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	3304      	adds	r3, #4
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff f978 	bl	80085d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ea:	3318      	adds	r3, #24
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7ff f973 	bl	80085d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009306:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	2200      	movs	r2, #0
 800930c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009312:	2200      	movs	r2, #0
 8009314:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	3354      	adds	r3, #84	; 0x54
 800931c:	2260      	movs	r2, #96	; 0x60
 800931e:	2100      	movs	r1, #0
 8009320:	4618      	mov	r0, r3
 8009322:	f001 feb7 	bl	800b094 <memset>
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	4a0c      	ldr	r2, [pc, #48]	; (800935c <prvInitialiseNewTask+0x140>)
 800932a:	659a      	str	r2, [r3, #88]	; 0x58
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	4a0c      	ldr	r2, [pc, #48]	; (8009360 <prvInitialiseNewTask+0x144>)
 8009330:	65da      	str	r2, [r3, #92]	; 0x5c
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	4a0b      	ldr	r2, [pc, #44]	; (8009364 <prvInitialiseNewTask+0x148>)
 8009336:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	68f9      	ldr	r1, [r7, #12]
 800933c:	69b8      	ldr	r0, [r7, #24]
 800933e:	f001 fa39 	bl	800a7b4 <pxPortInitialiseStack>
 8009342:	4602      	mov	r2, r0
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934a:	2b00      	cmp	r3, #0
 800934c:	d002      	beq.n	8009354 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800934e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009352:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009354:	bf00      	nop
 8009356:	3720      	adds	r7, #32
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	0800b348 	.word	0x0800b348
 8009360:	0800b368 	.word	0x0800b368
 8009364:	0800b328 	.word	0x0800b328

08009368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009370:	f001 fb50 	bl	800aa14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009374:	4b2d      	ldr	r3, [pc, #180]	; (800942c <prvAddNewTaskToReadyList+0xc4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3301      	adds	r3, #1
 800937a:	4a2c      	ldr	r2, [pc, #176]	; (800942c <prvAddNewTaskToReadyList+0xc4>)
 800937c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800937e:	4b2c      	ldr	r3, [pc, #176]	; (8009430 <prvAddNewTaskToReadyList+0xc8>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d109      	bne.n	800939a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009386:	4a2a      	ldr	r2, [pc, #168]	; (8009430 <prvAddNewTaskToReadyList+0xc8>)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800938c:	4b27      	ldr	r3, [pc, #156]	; (800942c <prvAddNewTaskToReadyList+0xc4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d110      	bne.n	80093b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009394:	f000 fd0e 	bl	8009db4 <prvInitialiseTaskLists>
 8009398:	e00d      	b.n	80093b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800939a:	4b26      	ldr	r3, [pc, #152]	; (8009434 <prvAddNewTaskToReadyList+0xcc>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d109      	bne.n	80093b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093a2:	4b23      	ldr	r3, [pc, #140]	; (8009430 <prvAddNewTaskToReadyList+0xc8>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d802      	bhi.n	80093b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093b0:	4a1f      	ldr	r2, [pc, #124]	; (8009430 <prvAddNewTaskToReadyList+0xc8>)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093b6:	4b20      	ldr	r3, [pc, #128]	; (8009438 <prvAddNewTaskToReadyList+0xd0>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3301      	adds	r3, #1
 80093bc:	4a1e      	ldr	r2, [pc, #120]	; (8009438 <prvAddNewTaskToReadyList+0xd0>)
 80093be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093c0:	4b1d      	ldr	r3, [pc, #116]	; (8009438 <prvAddNewTaskToReadyList+0xd0>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093cc:	4b1b      	ldr	r3, [pc, #108]	; (800943c <prvAddNewTaskToReadyList+0xd4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d903      	bls.n	80093dc <prvAddNewTaskToReadyList+0x74>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d8:	4a18      	ldr	r2, [pc, #96]	; (800943c <prvAddNewTaskToReadyList+0xd4>)
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e0:	4613      	mov	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4a15      	ldr	r2, [pc, #84]	; (8009440 <prvAddNewTaskToReadyList+0xd8>)
 80093ea:	441a      	add	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3304      	adds	r3, #4
 80093f0:	4619      	mov	r1, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	f7ff f8fd 	bl	80085f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093f8:	f001 fb3c 	bl	800aa74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093fc:	4b0d      	ldr	r3, [pc, #52]	; (8009434 <prvAddNewTaskToReadyList+0xcc>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00e      	beq.n	8009422 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009404:	4b0a      	ldr	r3, [pc, #40]	; (8009430 <prvAddNewTaskToReadyList+0xc8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	429a      	cmp	r2, r3
 8009410:	d207      	bcs.n	8009422 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009412:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <prvAddNewTaskToReadyList+0xdc>)
 8009414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009422:	bf00      	nop
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	2000184c 	.word	0x2000184c
 8009430:	20001378 	.word	0x20001378
 8009434:	20001858 	.word	0x20001858
 8009438:	20001868 	.word	0x20001868
 800943c:	20001854 	.word	0x20001854
 8009440:	2000137c 	.word	0x2000137c
 8009444:	e000ed04 	.word	0xe000ed04

08009448 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009450:	f001 fae0 	bl	800aa14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d102      	bne.n	8009460 <vTaskDelete+0x18>
 800945a:	4b2c      	ldr	r3, [pc, #176]	; (800950c <vTaskDelete+0xc4>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	e000      	b.n	8009462 <vTaskDelete+0x1a>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3304      	adds	r3, #4
 8009468:	4618      	mov	r0, r3
 800946a:	f7ff f91f 	bl	80086ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009472:	2b00      	cmp	r3, #0
 8009474:	d004      	beq.n	8009480 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3318      	adds	r3, #24
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff f916 	bl	80086ac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009480:	4b23      	ldr	r3, [pc, #140]	; (8009510 <vTaskDelete+0xc8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3301      	adds	r3, #1
 8009486:	4a22      	ldr	r2, [pc, #136]	; (8009510 <vTaskDelete+0xc8>)
 8009488:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800948a:	4b20      	ldr	r3, [pc, #128]	; (800950c <vTaskDelete+0xc4>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	429a      	cmp	r2, r3
 8009492:	d10b      	bne.n	80094ac <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3304      	adds	r3, #4
 8009498:	4619      	mov	r1, r3
 800949a:	481e      	ldr	r0, [pc, #120]	; (8009514 <vTaskDelete+0xcc>)
 800949c:	f7ff f8a9 	bl	80085f2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80094a0:	4b1d      	ldr	r3, [pc, #116]	; (8009518 <vTaskDelete+0xd0>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3301      	adds	r3, #1
 80094a6:	4a1c      	ldr	r2, [pc, #112]	; (8009518 <vTaskDelete+0xd0>)
 80094a8:	6013      	str	r3, [r2, #0]
 80094aa:	e009      	b.n	80094c0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80094ac:	4b1b      	ldr	r3, [pc, #108]	; (800951c <vTaskDelete+0xd4>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	4a1a      	ldr	r2, [pc, #104]	; (800951c <vTaskDelete+0xd4>)
 80094b4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 fcea 	bl	8009e90 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80094bc:	f000 fd1c 	bl	8009ef8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80094c0:	f001 fad8 	bl	800aa74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80094c4:	4b16      	ldr	r3, [pc, #88]	; (8009520 <vTaskDelete+0xd8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01b      	beq.n	8009504 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80094cc:	4b0f      	ldr	r3, [pc, #60]	; (800950c <vTaskDelete+0xc4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d116      	bne.n	8009504 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80094d6:	4b13      	ldr	r3, [pc, #76]	; (8009524 <vTaskDelete+0xdc>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <vTaskDelete+0xac>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	60bb      	str	r3, [r7, #8]
}
 80094f0:	bf00      	nop
 80094f2:	e7fe      	b.n	80094f2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80094f4:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <vTaskDelete+0xe0>)
 80094f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20001378 	.word	0x20001378
 8009510:	20001868 	.word	0x20001868
 8009514:	20001820 	.word	0x20001820
 8009518:	20001834 	.word	0x20001834
 800951c:	2000184c 	.word	0x2000184c
 8009520:	20001858 	.word	0x20001858
 8009524:	20001874 	.word	0x20001874
 8009528:	e000ed04 	.word	0xe000ed04

0800952c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009534:	2300      	movs	r3, #0
 8009536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d017      	beq.n	800956e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800953e:	4b13      	ldr	r3, [pc, #76]	; (800958c <vTaskDelay+0x60>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <vTaskDelay+0x30>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	60bb      	str	r3, [r7, #8]
}
 8009558:	bf00      	nop
 800955a:	e7fe      	b.n	800955a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800955c:	f000 f900 	bl	8009760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009560:	2100      	movs	r1, #0
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fd84 	bl	800a070 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009568:	f000 f908 	bl	800977c <xTaskResumeAll>
 800956c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d107      	bne.n	8009584 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009574:	4b06      	ldr	r3, [pc, #24]	; (8009590 <vTaskDelay+0x64>)
 8009576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	20001874 	.word	0x20001874
 8009590:	e000ed04 	.word	0xe000ed04

08009594 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800959c:	f001 fa3a 	bl	800aa14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d102      	bne.n	80095ac <vTaskSuspend+0x18>
 80095a6:	4b30      	ldr	r3, [pc, #192]	; (8009668 <vTaskSuspend+0xd4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	e000      	b.n	80095ae <vTaskSuspend+0x1a>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3304      	adds	r3, #4
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff f879 	bl	80086ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d004      	beq.n	80095cc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3318      	adds	r3, #24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff f870 	bl	80086ac <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3304      	adds	r3, #4
 80095d0:	4619      	mov	r1, r3
 80095d2:	4826      	ldr	r0, [pc, #152]	; (800966c <vTaskSuspend+0xd8>)
 80095d4:	f7ff f80d 	bl	80085f2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d103      	bne.n	80095ec <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80095ec:	f001 fa42 	bl	800aa74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80095f0:	4b1f      	ldr	r3, [pc, #124]	; (8009670 <vTaskSuspend+0xdc>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d005      	beq.n	8009604 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80095f8:	f001 fa0c 	bl	800aa14 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80095fc:	f000 fc7c 	bl	8009ef8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009600:	f001 fa38 	bl	800aa74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009604:	4b18      	ldr	r3, [pc, #96]	; (8009668 <vTaskSuspend+0xd4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	429a      	cmp	r2, r3
 800960c:	d127      	bne.n	800965e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800960e:	4b18      	ldr	r3, [pc, #96]	; (8009670 <vTaskSuspend+0xdc>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d017      	beq.n	8009646 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009616:	4b17      	ldr	r3, [pc, #92]	; (8009674 <vTaskSuspend+0xe0>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <vTaskSuspend+0xa0>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	60bb      	str	r3, [r7, #8]
}
 8009630:	bf00      	nop
 8009632:	e7fe      	b.n	8009632 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8009634:	4b10      	ldr	r3, [pc, #64]	; (8009678 <vTaskSuspend+0xe4>)
 8009636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009644:	e00b      	b.n	800965e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009646:	4b09      	ldr	r3, [pc, #36]	; (800966c <vTaskSuspend+0xd8>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b0c      	ldr	r3, [pc, #48]	; (800967c <vTaskSuspend+0xe8>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	d103      	bne.n	800965a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8009652:	4b05      	ldr	r3, [pc, #20]	; (8009668 <vTaskSuspend+0xd4>)
 8009654:	2200      	movs	r2, #0
 8009656:	601a      	str	r2, [r3, #0]
	}
 8009658:	e001      	b.n	800965e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800965a:	f000 f9f7 	bl	8009a4c <vTaskSwitchContext>
	}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20001378 	.word	0x20001378
 800966c:	20001838 	.word	0x20001838
 8009670:	20001858 	.word	0x20001858
 8009674:	20001874 	.word	0x20001874
 8009678:	e000ed04 	.word	0xe000ed04
 800967c:	2000184c 	.word	0x2000184c

08009680 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08a      	sub	sp, #40	; 0x28
 8009684:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009686:	2300      	movs	r3, #0
 8009688:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800968e:	463a      	mov	r2, r7
 8009690:	1d39      	adds	r1, r7, #4
 8009692:	f107 0308 	add.w	r3, r7, #8
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe ff4a 	bl	8008530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	9202      	str	r2, [sp, #8]
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	2300      	movs	r3, #0
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	2300      	movs	r3, #0
 80096ac:	460a      	mov	r2, r1
 80096ae:	4924      	ldr	r1, [pc, #144]	; (8009740 <vTaskStartScheduler+0xc0>)
 80096b0:	4824      	ldr	r0, [pc, #144]	; (8009744 <vTaskStartScheduler+0xc4>)
 80096b2:	f7ff fd11 	bl	80090d8 <xTaskCreateStatic>
 80096b6:	4603      	mov	r3, r0
 80096b8:	4a23      	ldr	r2, [pc, #140]	; (8009748 <vTaskStartScheduler+0xc8>)
 80096ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096bc:	4b22      	ldr	r3, [pc, #136]	; (8009748 <vTaskStartScheduler+0xc8>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096c4:	2301      	movs	r3, #1
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	e001      	b.n	80096ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d102      	bne.n	80096da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096d4:	f000 fd20 	bl	800a118 <xTimerCreateTimerTask>
 80096d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d11b      	bne.n	8009718 <vTaskStartScheduler+0x98>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	613b      	str	r3, [r7, #16]
}
 80096f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096f4:	4b15      	ldr	r3, [pc, #84]	; (800974c <vTaskStartScheduler+0xcc>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3354      	adds	r3, #84	; 0x54
 80096fa:	4a15      	ldr	r2, [pc, #84]	; (8009750 <vTaskStartScheduler+0xd0>)
 80096fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096fe:	4b15      	ldr	r3, [pc, #84]	; (8009754 <vTaskStartScheduler+0xd4>)
 8009700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009704:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009706:	4b14      	ldr	r3, [pc, #80]	; (8009758 <vTaskStartScheduler+0xd8>)
 8009708:	2201      	movs	r2, #1
 800970a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800970c:	4b13      	ldr	r3, [pc, #76]	; (800975c <vTaskStartScheduler+0xdc>)
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009712:	f001 f8dd 	bl	800a8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009716:	e00e      	b.n	8009736 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800971e:	d10a      	bne.n	8009736 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	60fb      	str	r3, [r7, #12]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <vTaskStartScheduler+0xb4>
}
 8009736:	bf00      	nop
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	0800b29c 	.word	0x0800b29c
 8009744:	08009d85 	.word	0x08009d85
 8009748:	20001870 	.word	0x20001870
 800974c:	20001378 	.word	0x20001378
 8009750:	20000028 	.word	0x20000028
 8009754:	2000186c 	.word	0x2000186c
 8009758:	20001858 	.word	0x20001858
 800975c:	20001850 	.word	0x20001850

08009760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009760:	b480      	push	{r7}
 8009762:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009764:	4b04      	ldr	r3, [pc, #16]	; (8009778 <vTaskSuspendAll+0x18>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	4a03      	ldr	r2, [pc, #12]	; (8009778 <vTaskSuspendAll+0x18>)
 800976c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800976e:	bf00      	nop
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20001874 	.word	0x20001874

0800977c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009786:	2300      	movs	r3, #0
 8009788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800978a:	4b42      	ldr	r3, [pc, #264]	; (8009894 <xTaskResumeAll+0x118>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10a      	bne.n	80097a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	603b      	str	r3, [r7, #0]
}
 80097a4:	bf00      	nop
 80097a6:	e7fe      	b.n	80097a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097a8:	f001 f934 	bl	800aa14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097ac:	4b39      	ldr	r3, [pc, #228]	; (8009894 <xTaskResumeAll+0x118>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	4a38      	ldr	r2, [pc, #224]	; (8009894 <xTaskResumeAll+0x118>)
 80097b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097b6:	4b37      	ldr	r3, [pc, #220]	; (8009894 <xTaskResumeAll+0x118>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d162      	bne.n	8009884 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097be:	4b36      	ldr	r3, [pc, #216]	; (8009898 <xTaskResumeAll+0x11c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d05e      	beq.n	8009884 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097c6:	e02f      	b.n	8009828 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c8:	4b34      	ldr	r3, [pc, #208]	; (800989c <xTaskResumeAll+0x120>)
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3318      	adds	r3, #24
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe ff69 	bl	80086ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3304      	adds	r3, #4
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe ff64 	bl	80086ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e8:	4b2d      	ldr	r3, [pc, #180]	; (80098a0 <xTaskResumeAll+0x124>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d903      	bls.n	80097f8 <xTaskResumeAll+0x7c>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	4a2a      	ldr	r2, [pc, #168]	; (80098a0 <xTaskResumeAll+0x124>)
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4a27      	ldr	r2, [pc, #156]	; (80098a4 <xTaskResumeAll+0x128>)
 8009806:	441a      	add	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3304      	adds	r3, #4
 800980c:	4619      	mov	r1, r3
 800980e:	4610      	mov	r0, r2
 8009810:	f7fe feef 	bl	80085f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009818:	4b23      	ldr	r3, [pc, #140]	; (80098a8 <xTaskResumeAll+0x12c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981e:	429a      	cmp	r2, r3
 8009820:	d302      	bcc.n	8009828 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009822:	4b22      	ldr	r3, [pc, #136]	; (80098ac <xTaskResumeAll+0x130>)
 8009824:	2201      	movs	r2, #1
 8009826:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009828:	4b1c      	ldr	r3, [pc, #112]	; (800989c <xTaskResumeAll+0x120>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1cb      	bne.n	80097c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009836:	f000 fb5f 	bl	8009ef8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800983a:	4b1d      	ldr	r3, [pc, #116]	; (80098b0 <xTaskResumeAll+0x134>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d010      	beq.n	8009868 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009846:	f000 f847 	bl	80098d8 <xTaskIncrementTick>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009850:	4b16      	ldr	r3, [pc, #88]	; (80098ac <xTaskResumeAll+0x130>)
 8009852:	2201      	movs	r2, #1
 8009854:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3b01      	subs	r3, #1
 800985a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1f1      	bne.n	8009846 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009862:	4b13      	ldr	r3, [pc, #76]	; (80098b0 <xTaskResumeAll+0x134>)
 8009864:	2200      	movs	r2, #0
 8009866:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009868:	4b10      	ldr	r3, [pc, #64]	; (80098ac <xTaskResumeAll+0x130>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d009      	beq.n	8009884 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009870:	2301      	movs	r3, #1
 8009872:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009874:	4b0f      	ldr	r3, [pc, #60]	; (80098b4 <xTaskResumeAll+0x138>)
 8009876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009884:	f001 f8f6 	bl	800aa74 <vPortExitCritical>

	return xAlreadyYielded;
 8009888:	68bb      	ldr	r3, [r7, #8]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20001874 	.word	0x20001874
 8009898:	2000184c 	.word	0x2000184c
 800989c:	2000180c 	.word	0x2000180c
 80098a0:	20001854 	.word	0x20001854
 80098a4:	2000137c 	.word	0x2000137c
 80098a8:	20001378 	.word	0x20001378
 80098ac:	20001860 	.word	0x20001860
 80098b0:	2000185c 	.word	0x2000185c
 80098b4:	e000ed04 	.word	0xe000ed04

080098b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098be:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <xTaskGetTickCount+0x1c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098c4:	687b      	ldr	r3, [r7, #4]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20001850 	.word	0x20001850

080098d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098de:	2300      	movs	r3, #0
 80098e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098e2:	4b4f      	ldr	r3, [pc, #316]	; (8009a20 <xTaskIncrementTick+0x148>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f040 808f 	bne.w	8009a0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098ec:	4b4d      	ldr	r3, [pc, #308]	; (8009a24 <xTaskIncrementTick+0x14c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3301      	adds	r3, #1
 80098f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098f4:	4a4b      	ldr	r2, [pc, #300]	; (8009a24 <xTaskIncrementTick+0x14c>)
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d120      	bne.n	8009942 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009900:	4b49      	ldr	r3, [pc, #292]	; (8009a28 <xTaskIncrementTick+0x150>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00a      	beq.n	8009920 <xTaskIncrementTick+0x48>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	603b      	str	r3, [r7, #0]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <xTaskIncrementTick+0x46>
 8009920:	4b41      	ldr	r3, [pc, #260]	; (8009a28 <xTaskIncrementTick+0x150>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	4b41      	ldr	r3, [pc, #260]	; (8009a2c <xTaskIncrementTick+0x154>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a3f      	ldr	r2, [pc, #252]	; (8009a28 <xTaskIncrementTick+0x150>)
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	4a3f      	ldr	r2, [pc, #252]	; (8009a2c <xTaskIncrementTick+0x154>)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6013      	str	r3, [r2, #0]
 8009934:	4b3e      	ldr	r3, [pc, #248]	; (8009a30 <xTaskIncrementTick+0x158>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3301      	adds	r3, #1
 800993a:	4a3d      	ldr	r2, [pc, #244]	; (8009a30 <xTaskIncrementTick+0x158>)
 800993c:	6013      	str	r3, [r2, #0]
 800993e:	f000 fadb 	bl	8009ef8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009942:	4b3c      	ldr	r3, [pc, #240]	; (8009a34 <xTaskIncrementTick+0x15c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	429a      	cmp	r2, r3
 800994a:	d349      	bcc.n	80099e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800994c:	4b36      	ldr	r3, [pc, #216]	; (8009a28 <xTaskIncrementTick+0x150>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d104      	bne.n	8009960 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009956:	4b37      	ldr	r3, [pc, #220]	; (8009a34 <xTaskIncrementTick+0x15c>)
 8009958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800995c:	601a      	str	r2, [r3, #0]
					break;
 800995e:	e03f      	b.n	80099e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009960:	4b31      	ldr	r3, [pc, #196]	; (8009a28 <xTaskIncrementTick+0x150>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	429a      	cmp	r2, r3
 8009976:	d203      	bcs.n	8009980 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009978:	4a2e      	ldr	r2, [pc, #184]	; (8009a34 <xTaskIncrementTick+0x15c>)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800997e:	e02f      	b.n	80099e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	3304      	adds	r3, #4
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fe91 	bl	80086ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998e:	2b00      	cmp	r3, #0
 8009990:	d004      	beq.n	800999c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	3318      	adds	r3, #24
 8009996:	4618      	mov	r0, r3
 8009998:	f7fe fe88 	bl	80086ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a0:	4b25      	ldr	r3, [pc, #148]	; (8009a38 <xTaskIncrementTick+0x160>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d903      	bls.n	80099b0 <xTaskIncrementTick+0xd8>
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	4a22      	ldr	r2, [pc, #136]	; (8009a38 <xTaskIncrementTick+0x160>)
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4a1f      	ldr	r2, [pc, #124]	; (8009a3c <xTaskIncrementTick+0x164>)
 80099be:	441a      	add	r2, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f7fe fe13 	bl	80085f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d0:	4b1b      	ldr	r3, [pc, #108]	; (8009a40 <xTaskIncrementTick+0x168>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d3b8      	bcc.n	800994c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80099da:	2301      	movs	r3, #1
 80099dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099de:	e7b5      	b.n	800994c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099e0:	4b17      	ldr	r3, [pc, #92]	; (8009a40 <xTaskIncrementTick+0x168>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e6:	4915      	ldr	r1, [pc, #84]	; (8009a3c <xTaskIncrementTick+0x164>)
 80099e8:	4613      	mov	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	440b      	add	r3, r1
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d901      	bls.n	80099fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80099f8:	2301      	movs	r3, #1
 80099fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099fc:	4b11      	ldr	r3, [pc, #68]	; (8009a44 <xTaskIncrementTick+0x16c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d007      	beq.n	8009a14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009a04:	2301      	movs	r3, #1
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	e004      	b.n	8009a14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a0a:	4b0f      	ldr	r3, [pc, #60]	; (8009a48 <xTaskIncrementTick+0x170>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	4a0d      	ldr	r2, [pc, #52]	; (8009a48 <xTaskIncrementTick+0x170>)
 8009a12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a14:	697b      	ldr	r3, [r7, #20]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20001874 	.word	0x20001874
 8009a24:	20001850 	.word	0x20001850
 8009a28:	20001804 	.word	0x20001804
 8009a2c:	20001808 	.word	0x20001808
 8009a30:	20001864 	.word	0x20001864
 8009a34:	2000186c 	.word	0x2000186c
 8009a38:	20001854 	.word	0x20001854
 8009a3c:	2000137c 	.word	0x2000137c
 8009a40:	20001378 	.word	0x20001378
 8009a44:	20001860 	.word	0x20001860
 8009a48:	2000185c 	.word	0x2000185c

08009a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a52:	4b2a      	ldr	r3, [pc, #168]	; (8009afc <vTaskSwitchContext+0xb0>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a5a:	4b29      	ldr	r3, [pc, #164]	; (8009b00 <vTaskSwitchContext+0xb4>)
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a60:	e046      	b.n	8009af0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009a62:	4b27      	ldr	r3, [pc, #156]	; (8009b00 <vTaskSwitchContext+0xb4>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a68:	4b26      	ldr	r3, [pc, #152]	; (8009b04 <vTaskSwitchContext+0xb8>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	e010      	b.n	8009a92 <vTaskSwitchContext+0x46>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10a      	bne.n	8009a8c <vTaskSwitchContext+0x40>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	607b      	str	r3, [r7, #4]
}
 8009a88:	bf00      	nop
 8009a8a:	e7fe      	b.n	8009a8a <vTaskSwitchContext+0x3e>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]
 8009a92:	491d      	ldr	r1, [pc, #116]	; (8009b08 <vTaskSwitchContext+0xbc>)
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	440b      	add	r3, r1
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0e4      	beq.n	8009a70 <vTaskSwitchContext+0x24>
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4a15      	ldr	r2, [pc, #84]	; (8009b08 <vTaskSwitchContext+0xbc>)
 8009ab2:	4413      	add	r3, r2
 8009ab4:	60bb      	str	r3, [r7, #8]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	605a      	str	r2, [r3, #4]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d104      	bne.n	8009ad6 <vTaskSwitchContext+0x8a>
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	605a      	str	r2, [r3, #4]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	4a0b      	ldr	r2, [pc, #44]	; (8009b0c <vTaskSwitchContext+0xc0>)
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	4a08      	ldr	r2, [pc, #32]	; (8009b04 <vTaskSwitchContext+0xb8>)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ae6:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <vTaskSwitchContext+0xc0>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3354      	adds	r3, #84	; 0x54
 8009aec:	4a08      	ldr	r2, [pc, #32]	; (8009b10 <vTaskSwitchContext+0xc4>)
 8009aee:	6013      	str	r3, [r2, #0]
}
 8009af0:	bf00      	nop
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	20001874 	.word	0x20001874
 8009b00:	20001860 	.word	0x20001860
 8009b04:	20001854 	.word	0x20001854
 8009b08:	2000137c 	.word	0x2000137c
 8009b0c:	20001378 	.word	0x20001378
 8009b10:	20000028 	.word	0x20000028

08009b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	60fb      	str	r3, [r7, #12]
}
 8009b36:	bf00      	nop
 8009b38:	e7fe      	b.n	8009b38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b3a:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <vTaskPlaceOnEventList+0x44>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3318      	adds	r3, #24
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7fe fd79 	bl	800863a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b48:	2101      	movs	r1, #1
 8009b4a:	6838      	ldr	r0, [r7, #0]
 8009b4c:	f000 fa90 	bl	800a070 <prvAddCurrentTaskToDelayedList>
}
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	20001378 	.word	0x20001378

08009b5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10a      	bne.n	8009b84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	617b      	str	r3, [r7, #20]
}
 8009b80:	bf00      	nop
 8009b82:	e7fe      	b.n	8009b82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b84:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3318      	adds	r3, #24
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f7fe fd30 	bl	80085f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	68b8      	ldr	r0, [r7, #8]
 8009ba2:	f000 fa65 	bl	800a070 <prvAddCurrentTaskToDelayedList>
	}
 8009ba6:	bf00      	nop
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20001378 	.word	0x20001378

08009bb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10a      	bne.n	8009be0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	60fb      	str	r3, [r7, #12]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	3318      	adds	r3, #24
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe fd61 	bl	80086ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bea:	4b1e      	ldr	r3, [pc, #120]	; (8009c64 <xTaskRemoveFromEventList+0xb0>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d11d      	bne.n	8009c2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fd58 	bl	80086ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c00:	4b19      	ldr	r3, [pc, #100]	; (8009c68 <xTaskRemoveFromEventList+0xb4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d903      	bls.n	8009c10 <xTaskRemoveFromEventList+0x5c>
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0c:	4a16      	ldr	r2, [pc, #88]	; (8009c68 <xTaskRemoveFromEventList+0xb4>)
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c14:	4613      	mov	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4a13      	ldr	r2, [pc, #76]	; (8009c6c <xTaskRemoveFromEventList+0xb8>)
 8009c1e:	441a      	add	r2, r3
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	3304      	adds	r3, #4
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	f7fe fce3 	bl	80085f2 <vListInsertEnd>
 8009c2c:	e005      	b.n	8009c3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	3318      	adds	r3, #24
 8009c32:	4619      	mov	r1, r3
 8009c34:	480e      	ldr	r0, [pc, #56]	; (8009c70 <xTaskRemoveFromEventList+0xbc>)
 8009c36:	f7fe fcdc 	bl	80085f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3e:	4b0d      	ldr	r3, [pc, #52]	; (8009c74 <xTaskRemoveFromEventList+0xc0>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d905      	bls.n	8009c54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <xTaskRemoveFromEventList+0xc4>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	e001      	b.n	8009c58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c54:	2300      	movs	r3, #0
 8009c56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c58:	697b      	ldr	r3, [r7, #20]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20001874 	.word	0x20001874
 8009c68:	20001854 	.word	0x20001854
 8009c6c:	2000137c 	.word	0x2000137c
 8009c70:	2000180c 	.word	0x2000180c
 8009c74:	20001378 	.word	0x20001378
 8009c78:	20001860 	.word	0x20001860

08009c7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c84:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <vTaskInternalSetTimeOutState+0x24>)
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c8c:	4b05      	ldr	r3, [pc, #20]	; (8009ca4 <vTaskInternalSetTimeOutState+0x28>)
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	605a      	str	r2, [r3, #4]
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	20001864 	.word	0x20001864
 8009ca4:	20001850 	.word	0x20001850

08009ca8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	613b      	str	r3, [r7, #16]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	60fb      	str	r3, [r7, #12]
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009cea:	f000 fe93 	bl	800aa14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009cee:	4b1d      	ldr	r3, [pc, #116]	; (8009d64 <xTaskCheckForTimeOut+0xbc>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	69ba      	ldr	r2, [r7, #24]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d06:	d102      	bne.n	8009d0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	61fb      	str	r3, [r7, #28]
 8009d0c:	e023      	b.n	8009d56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <xTaskCheckForTimeOut+0xc0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d007      	beq.n	8009d2a <xTaskCheckForTimeOut+0x82>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	69ba      	ldr	r2, [r7, #24]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d302      	bcc.n	8009d2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d24:	2301      	movs	r3, #1
 8009d26:	61fb      	str	r3, [r7, #28]
 8009d28:	e015      	b.n	8009d56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d20b      	bcs.n	8009d4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	1ad2      	subs	r2, r2, r3
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7ff ff9b 	bl	8009c7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d46:	2300      	movs	r3, #0
 8009d48:	61fb      	str	r3, [r7, #28]
 8009d4a:	e004      	b.n	8009d56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d52:	2301      	movs	r3, #1
 8009d54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d56:	f000 fe8d 	bl	800aa74 <vPortExitCritical>

	return xReturn;
 8009d5a:	69fb      	ldr	r3, [r7, #28]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3720      	adds	r7, #32
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	20001850 	.word	0x20001850
 8009d68:	20001864 	.word	0x20001864

08009d6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d70:	4b03      	ldr	r3, [pc, #12]	; (8009d80 <vTaskMissedYield+0x14>)
 8009d72:	2201      	movs	r2, #1
 8009d74:	601a      	str	r2, [r3, #0]
}
 8009d76:	bf00      	nop
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	20001860 	.word	0x20001860

08009d84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d8c:	f000 f852 	bl	8009e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d90:	4b06      	ldr	r3, [pc, #24]	; (8009dac <prvIdleTask+0x28>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d9f9      	bls.n	8009d8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d98:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <prvIdleTask+0x2c>)
 8009d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9e:	601a      	str	r2, [r3, #0]
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009da8:	e7f0      	b.n	8009d8c <prvIdleTask+0x8>
 8009daa:	bf00      	nop
 8009dac:	2000137c 	.word	0x2000137c
 8009db0:	e000ed04 	.word	0xe000ed04

08009db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dba:	2300      	movs	r3, #0
 8009dbc:	607b      	str	r3, [r7, #4]
 8009dbe:	e00c      	b.n	8009dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4a12      	ldr	r2, [pc, #72]	; (8009e14 <prvInitialiseTaskLists+0x60>)
 8009dcc:	4413      	add	r3, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe fbe2 	bl	8008598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	607b      	str	r3, [r7, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b37      	cmp	r3, #55	; 0x37
 8009dde:	d9ef      	bls.n	8009dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009de0:	480d      	ldr	r0, [pc, #52]	; (8009e18 <prvInitialiseTaskLists+0x64>)
 8009de2:	f7fe fbd9 	bl	8008598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009de6:	480d      	ldr	r0, [pc, #52]	; (8009e1c <prvInitialiseTaskLists+0x68>)
 8009de8:	f7fe fbd6 	bl	8008598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009dec:	480c      	ldr	r0, [pc, #48]	; (8009e20 <prvInitialiseTaskLists+0x6c>)
 8009dee:	f7fe fbd3 	bl	8008598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009df2:	480c      	ldr	r0, [pc, #48]	; (8009e24 <prvInitialiseTaskLists+0x70>)
 8009df4:	f7fe fbd0 	bl	8008598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009df8:	480b      	ldr	r0, [pc, #44]	; (8009e28 <prvInitialiseTaskLists+0x74>)
 8009dfa:	f7fe fbcd 	bl	8008598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009dfe:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <prvInitialiseTaskLists+0x78>)
 8009e00:	4a05      	ldr	r2, [pc, #20]	; (8009e18 <prvInitialiseTaskLists+0x64>)
 8009e02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e04:	4b0a      	ldr	r3, [pc, #40]	; (8009e30 <prvInitialiseTaskLists+0x7c>)
 8009e06:	4a05      	ldr	r2, [pc, #20]	; (8009e1c <prvInitialiseTaskLists+0x68>)
 8009e08:	601a      	str	r2, [r3, #0]
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	2000137c 	.word	0x2000137c
 8009e18:	200017dc 	.word	0x200017dc
 8009e1c:	200017f0 	.word	0x200017f0
 8009e20:	2000180c 	.word	0x2000180c
 8009e24:	20001820 	.word	0x20001820
 8009e28:	20001838 	.word	0x20001838
 8009e2c:	20001804 	.word	0x20001804
 8009e30:	20001808 	.word	0x20001808

08009e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e3a:	e019      	b.n	8009e70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e3c:	f000 fdea 	bl	800aa14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e40:	4b10      	ldr	r3, [pc, #64]	; (8009e84 <prvCheckTasksWaitingTermination+0x50>)
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe fc2d 	bl	80086ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e52:	4b0d      	ldr	r3, [pc, #52]	; (8009e88 <prvCheckTasksWaitingTermination+0x54>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	4a0b      	ldr	r2, [pc, #44]	; (8009e88 <prvCheckTasksWaitingTermination+0x54>)
 8009e5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e5c:	4b0b      	ldr	r3, [pc, #44]	; (8009e8c <prvCheckTasksWaitingTermination+0x58>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	4a0a      	ldr	r2, [pc, #40]	; (8009e8c <prvCheckTasksWaitingTermination+0x58>)
 8009e64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e66:	f000 fe05 	bl	800aa74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f810 	bl	8009e90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e70:	4b06      	ldr	r3, [pc, #24]	; (8009e8c <prvCheckTasksWaitingTermination+0x58>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e1      	bne.n	8009e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e78:	bf00      	nop
 8009e7a:	bf00      	nop
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20001820 	.word	0x20001820
 8009e88:	2000184c 	.word	0x2000184c
 8009e8c:	20001834 	.word	0x20001834

08009e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3354      	adds	r3, #84	; 0x54
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 f90f 	bl	800b0c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d108      	bne.n	8009ebe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 ff9d 	bl	800adf0 <vPortFree>
				vPortFree( pxTCB );
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 ff9a 	bl	800adf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ebc:	e018      	b.n	8009ef0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d103      	bne.n	8009ed0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 ff91 	bl	800adf0 <vPortFree>
	}
 8009ece:	e00f      	b.n	8009ef0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d00a      	beq.n	8009ef0 <prvDeleteTCB+0x60>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	60fb      	str	r3, [r7, #12]
}
 8009eec:	bf00      	nop
 8009eee:	e7fe      	b.n	8009eee <prvDeleteTCB+0x5e>
	}
 8009ef0:	bf00      	nop
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009efe:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <prvResetNextTaskUnblockTime+0x38>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d104      	bne.n	8009f12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f08:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <prvResetNextTaskUnblockTime+0x3c>)
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f10:	e008      	b.n	8009f24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f12:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <prvResetNextTaskUnblockTime+0x38>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <prvResetNextTaskUnblockTime+0x3c>)
 8009f22:	6013      	str	r3, [r2, #0]
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	20001804 	.word	0x20001804
 8009f34:	2000186c 	.word	0x2000186c

08009f38 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009f3e:	4b05      	ldr	r3, [pc, #20]	; (8009f54 <xTaskGetCurrentTaskHandle+0x1c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009f44:	687b      	ldr	r3, [r7, #4]
	}
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20001378 	.word	0x20001378

08009f58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f5e:	4b0b      	ldr	r3, [pc, #44]	; (8009f8c <xTaskGetSchedulerState+0x34>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d102      	bne.n	8009f6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f66:	2301      	movs	r3, #1
 8009f68:	607b      	str	r3, [r7, #4]
 8009f6a:	e008      	b.n	8009f7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f6c:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <xTaskGetSchedulerState+0x38>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d102      	bne.n	8009f7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f74:	2302      	movs	r3, #2
 8009f76:	607b      	str	r3, [r7, #4]
 8009f78:	e001      	b.n	8009f7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f7e:	687b      	ldr	r3, [r7, #4]
	}
 8009f80:	4618      	mov	r0, r3
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	20001858 	.word	0x20001858
 8009f90:	20001874 	.word	0x20001874

08009f94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d056      	beq.n	800a058 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009faa:	4b2e      	ldr	r3, [pc, #184]	; (800a064 <xTaskPriorityDisinherit+0xd0>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d00a      	beq.n	8009fca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	60fb      	str	r3, [r7, #12]
}
 8009fc6:	bf00      	nop
 8009fc8:	e7fe      	b.n	8009fc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10a      	bne.n	8009fe8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	60bb      	str	r3, [r7, #8]
}
 8009fe4:	bf00      	nop
 8009fe6:	e7fe      	b.n	8009fe6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fec:	1e5a      	subs	r2, r3, #1
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d02c      	beq.n	800a058 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a002:	2b00      	cmp	r3, #0
 800a004:	d128      	bne.n	800a058 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	3304      	adds	r3, #4
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fb4e 	bl	80086ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a028:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <xTaskPriorityDisinherit+0xd4>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d903      	bls.n	800a038 <xTaskPriorityDisinherit+0xa4>
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a034:	4a0c      	ldr	r2, [pc, #48]	; (800a068 <xTaskPriorityDisinherit+0xd4>)
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03c:	4613      	mov	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4a09      	ldr	r2, [pc, #36]	; (800a06c <xTaskPriorityDisinherit+0xd8>)
 800a046:	441a      	add	r2, r3
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	3304      	adds	r3, #4
 800a04c:	4619      	mov	r1, r3
 800a04e:	4610      	mov	r0, r2
 800a050:	f7fe facf 	bl	80085f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a054:	2301      	movs	r3, #1
 800a056:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a058:	697b      	ldr	r3, [r7, #20]
	}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20001378 	.word	0x20001378
 800a068:	20001854 	.word	0x20001854
 800a06c:	2000137c 	.word	0x2000137c

0800a070 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a07a:	4b21      	ldr	r3, [pc, #132]	; (800a100 <prvAddCurrentTaskToDelayedList+0x90>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a080:	4b20      	ldr	r3, [pc, #128]	; (800a104 <prvAddCurrentTaskToDelayedList+0x94>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3304      	adds	r3, #4
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe fb10 	bl	80086ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a092:	d10a      	bne.n	800a0aa <prvAddCurrentTaskToDelayedList+0x3a>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d007      	beq.n	800a0aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a09a:	4b1a      	ldr	r3, [pc, #104]	; (800a104 <prvAddCurrentTaskToDelayedList+0x94>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4819      	ldr	r0, [pc, #100]	; (800a108 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0a4:	f7fe faa5 	bl	80085f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0a8:	e026      	b.n	800a0f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0b2:	4b14      	ldr	r3, [pc, #80]	; (800a104 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d209      	bcs.n	800a0d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0c2:	4b12      	ldr	r3, [pc, #72]	; (800a10c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	4b0f      	ldr	r3, [pc, #60]	; (800a104 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f7fe fab3 	bl	800863a <vListInsert>
}
 800a0d4:	e010      	b.n	800a0f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0d6:	4b0e      	ldr	r3, [pc, #56]	; (800a110 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	f7fe faa9 	bl	800863a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0e8:	4b0a      	ldr	r3, [pc, #40]	; (800a114 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d202      	bcs.n	800a0f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0f2:	4a08      	ldr	r2, [pc, #32]	; (800a114 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	6013      	str	r3, [r2, #0]
}
 800a0f8:	bf00      	nop
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	20001850 	.word	0x20001850
 800a104:	20001378 	.word	0x20001378
 800a108:	20001838 	.word	0x20001838
 800a10c:	20001808 	.word	0x20001808
 800a110:	20001804 	.word	0x20001804
 800a114:	2000186c 	.word	0x2000186c

0800a118 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08a      	sub	sp, #40	; 0x28
 800a11c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a11e:	2300      	movs	r3, #0
 800a120:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a122:	f000 fb07 	bl	800a734 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a126:	4b1c      	ldr	r3, [pc, #112]	; (800a198 <xTimerCreateTimerTask+0x80>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d021      	beq.n	800a172 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a12e:	2300      	movs	r3, #0
 800a130:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a136:	1d3a      	adds	r2, r7, #4
 800a138:	f107 0108 	add.w	r1, r7, #8
 800a13c:	f107 030c 	add.w	r3, r7, #12
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe fa0f 	bl	8008564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a146:	6879      	ldr	r1, [r7, #4]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	9202      	str	r2, [sp, #8]
 800a14e:	9301      	str	r3, [sp, #4]
 800a150:	2302      	movs	r3, #2
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	2300      	movs	r3, #0
 800a156:	460a      	mov	r2, r1
 800a158:	4910      	ldr	r1, [pc, #64]	; (800a19c <xTimerCreateTimerTask+0x84>)
 800a15a:	4811      	ldr	r0, [pc, #68]	; (800a1a0 <xTimerCreateTimerTask+0x88>)
 800a15c:	f7fe ffbc 	bl	80090d8 <xTaskCreateStatic>
 800a160:	4603      	mov	r3, r0
 800a162:	4a10      	ldr	r2, [pc, #64]	; (800a1a4 <xTimerCreateTimerTask+0x8c>)
 800a164:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a166:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <xTimerCreateTimerTask+0x8c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a16e:	2301      	movs	r3, #1
 800a170:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10a      	bne.n	800a18e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	613b      	str	r3, [r7, #16]
}
 800a18a:	bf00      	nop
 800a18c:	e7fe      	b.n	800a18c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a18e:	697b      	ldr	r3, [r7, #20]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	200018a8 	.word	0x200018a8
 800a19c:	0800b2a4 	.word	0x0800b2a4
 800a1a0:	0800a2dd 	.word	0x0800a2dd
 800a1a4:	200018ac 	.word	0x200018ac

0800a1a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08a      	sub	sp, #40	; 0x28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10a      	bne.n	800a1d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	623b      	str	r3, [r7, #32]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1d6:	4b1a      	ldr	r3, [pc, #104]	; (800a240 <xTimerGenericCommand+0x98>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d02a      	beq.n	800a234 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b05      	cmp	r3, #5
 800a1ee:	dc18      	bgt.n	800a222 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1f0:	f7ff feb2 	bl	8009f58 <xTaskGetSchedulerState>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d109      	bne.n	800a20e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1fa:	4b11      	ldr	r3, [pc, #68]	; (800a240 <xTimerGenericCommand+0x98>)
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	f107 0110 	add.w	r1, r7, #16
 800a202:	2300      	movs	r3, #0
 800a204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a206:	f7fe fb7f 	bl	8008908 <xQueueGenericSend>
 800a20a:	6278      	str	r0, [r7, #36]	; 0x24
 800a20c:	e012      	b.n	800a234 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a20e:	4b0c      	ldr	r3, [pc, #48]	; (800a240 <xTimerGenericCommand+0x98>)
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	f107 0110 	add.w	r1, r7, #16
 800a216:	2300      	movs	r3, #0
 800a218:	2200      	movs	r2, #0
 800a21a:	f7fe fb75 	bl	8008908 <xQueueGenericSend>
 800a21e:	6278      	str	r0, [r7, #36]	; 0x24
 800a220:	e008      	b.n	800a234 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a222:	4b07      	ldr	r3, [pc, #28]	; (800a240 <xTimerGenericCommand+0x98>)
 800a224:	6818      	ldr	r0, [r3, #0]
 800a226:	f107 0110 	add.w	r1, r7, #16
 800a22a:	2300      	movs	r3, #0
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	f7fe fc69 	bl	8008b04 <xQueueGenericSendFromISR>
 800a232:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a236:	4618      	mov	r0, r3
 800a238:	3728      	adds	r7, #40	; 0x28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	200018a8 	.word	0x200018a8

0800a244 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af02      	add	r7, sp, #8
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a24e:	4b22      	ldr	r3, [pc, #136]	; (800a2d8 <prvProcessExpiredTimer+0x94>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fe fa25 	bl	80086ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a268:	f003 0304 	and.w	r3, r3, #4
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d022      	beq.n	800a2b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	699a      	ldr	r2, [r3, #24]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	18d1      	adds	r1, r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	6978      	ldr	r0, [r7, #20]
 800a27e:	f000 f8d1 	bl	800a424 <prvInsertTimerInActiveList>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01f      	beq.n	800a2c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a288:	2300      	movs	r3, #0
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	2300      	movs	r3, #0
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	2100      	movs	r1, #0
 800a292:	6978      	ldr	r0, [r7, #20]
 800a294:	f7ff ff88 	bl	800a1a8 <xTimerGenericCommand>
 800a298:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d113      	bne.n	800a2c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	60fb      	str	r3, [r7, #12]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2bc:	f023 0301 	bic.w	r3, r3, #1
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	6a1b      	ldr	r3, [r3, #32]
 800a2cc:	6978      	ldr	r0, [r7, #20]
 800a2ce:	4798      	blx	r3
}
 800a2d0:	bf00      	nop
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	200018a0 	.word	0x200018a0

0800a2dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2e4:	f107 0308 	add.w	r3, r7, #8
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 f857 	bl	800a39c <prvGetNextExpireTime>
 800a2ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f803 	bl	800a300 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2fa:	f000 f8d5 	bl	800a4a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2fe:	e7f1      	b.n	800a2e4 <prvTimerTask+0x8>

0800a300 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a30a:	f7ff fa29 	bl	8009760 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a30e:	f107 0308 	add.w	r3, r7, #8
 800a312:	4618      	mov	r0, r3
 800a314:	f000 f866 	bl	800a3e4 <prvSampleTimeNow>
 800a318:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d130      	bne.n	800a382 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10a      	bne.n	800a33c <prvProcessTimerOrBlockTask+0x3c>
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d806      	bhi.n	800a33c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a32e:	f7ff fa25 	bl	800977c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a332:	68f9      	ldr	r1, [r7, #12]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7ff ff85 	bl	800a244 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a33a:	e024      	b.n	800a386 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d008      	beq.n	800a354 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a342:	4b13      	ldr	r3, [pc, #76]	; (800a390 <prvProcessTimerOrBlockTask+0x90>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <prvProcessTimerOrBlockTask+0x50>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <prvProcessTimerOrBlockTask+0x52>
 800a350:	2300      	movs	r3, #0
 800a352:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a354:	4b0f      	ldr	r3, [pc, #60]	; (800a394 <prvProcessTimerOrBlockTask+0x94>)
 800a356:	6818      	ldr	r0, [r3, #0]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	4619      	mov	r1, r3
 800a362:	f7fe fe85 	bl	8009070 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a366:	f7ff fa09 	bl	800977c <xTaskResumeAll>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10a      	bne.n	800a386 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a370:	4b09      	ldr	r3, [pc, #36]	; (800a398 <prvProcessTimerOrBlockTask+0x98>)
 800a372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	f3bf 8f6f 	isb	sy
}
 800a380:	e001      	b.n	800a386 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a382:	f7ff f9fb 	bl	800977c <xTaskResumeAll>
}
 800a386:	bf00      	nop
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	200018a4 	.word	0x200018a4
 800a394:	200018a8 	.word	0x200018a8
 800a398:	e000ed04 	.word	0xe000ed04

0800a39c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3a4:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <prvGetNextExpireTime+0x44>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <prvGetNextExpireTime+0x16>
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	e000      	b.n	800a3b4 <prvGetNextExpireTime+0x18>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d105      	bne.n	800a3cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3c0:	4b07      	ldr	r3, [pc, #28]	; (800a3e0 <prvGetNextExpireTime+0x44>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	e001      	b.n	800a3d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	200018a0 	.word	0x200018a0

0800a3e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3ec:	f7ff fa64 	bl	80098b8 <xTaskGetTickCount>
 800a3f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3f2:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <prvSampleTimeNow+0x3c>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d205      	bcs.n	800a408 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a3fc:	f000 f936 	bl	800a66c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	e002      	b.n	800a40e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a40e:	4a04      	ldr	r2, [pc, #16]	; (800a420 <prvSampleTimeNow+0x3c>)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a414:	68fb      	ldr	r3, [r7, #12]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	200018b0 	.word	0x200018b0

0800a424 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
 800a430:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	429a      	cmp	r2, r3
 800a448:	d812      	bhi.n	800a470 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	1ad2      	subs	r2, r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	429a      	cmp	r2, r3
 800a456:	d302      	bcc.n	800a45e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a458:	2301      	movs	r3, #1
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	e01b      	b.n	800a496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a45e:	4b10      	ldr	r3, [pc, #64]	; (800a4a0 <prvInsertTimerInActiveList+0x7c>)
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	3304      	adds	r3, #4
 800a466:	4619      	mov	r1, r3
 800a468:	4610      	mov	r0, r2
 800a46a:	f7fe f8e6 	bl	800863a <vListInsert>
 800a46e:	e012      	b.n	800a496 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	429a      	cmp	r2, r3
 800a476:	d206      	bcs.n	800a486 <prvInsertTimerInActiveList+0x62>
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d302      	bcc.n	800a486 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a480:	2301      	movs	r3, #1
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	e007      	b.n	800a496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a486:	4b07      	ldr	r3, [pc, #28]	; (800a4a4 <prvInsertTimerInActiveList+0x80>)
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3304      	adds	r3, #4
 800a48e:	4619      	mov	r1, r3
 800a490:	4610      	mov	r0, r2
 800a492:	f7fe f8d2 	bl	800863a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a496:	697b      	ldr	r3, [r7, #20]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	200018a4 	.word	0x200018a4
 800a4a4:	200018a0 	.word	0x200018a0

0800a4a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b08e      	sub	sp, #56	; 0x38
 800a4ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4ae:	e0ca      	b.n	800a646 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	da18      	bge.n	800a4e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4b6:	1d3b      	adds	r3, r7, #4
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10a      	bne.n	800a4d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	61fb      	str	r3, [r7, #28]
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4de:	6850      	ldr	r0, [r2, #4]
 800a4e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4e2:	6892      	ldr	r2, [r2, #8]
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f2c0 80aa 	blt.w	800a644 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d004      	beq.n	800a506 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fe:	3304      	adds	r3, #4
 800a500:	4618      	mov	r0, r3
 800a502:	f7fe f8d3 	bl	80086ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a506:	463b      	mov	r3, r7
 800a508:	4618      	mov	r0, r3
 800a50a:	f7ff ff6b 	bl	800a3e4 <prvSampleTimeNow>
 800a50e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b09      	cmp	r3, #9
 800a514:	f200 8097 	bhi.w	800a646 <prvProcessReceivedCommands+0x19e>
 800a518:	a201      	add	r2, pc, #4	; (adr r2, 800a520 <prvProcessReceivedCommands+0x78>)
 800a51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51e:	bf00      	nop
 800a520:	0800a549 	.word	0x0800a549
 800a524:	0800a549 	.word	0x0800a549
 800a528:	0800a549 	.word	0x0800a549
 800a52c:	0800a5bd 	.word	0x0800a5bd
 800a530:	0800a5d1 	.word	0x0800a5d1
 800a534:	0800a61b 	.word	0x0800a61b
 800a538:	0800a549 	.word	0x0800a549
 800a53c:	0800a549 	.word	0x0800a549
 800a540:	0800a5bd 	.word	0x0800a5bd
 800a544:	0800a5d1 	.word	0x0800a5d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a54e:	f043 0301 	orr.w	r3, r3, #1
 800a552:	b2da      	uxtb	r2, r3
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	18d1      	adds	r1, r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a568:	f7ff ff5c 	bl	800a424 <prvInsertTimerInActiveList>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d069      	beq.n	800a646 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a578:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d05e      	beq.n	800a646 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	441a      	add	r2, r3
 800a590:	2300      	movs	r3, #0
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	2300      	movs	r3, #0
 800a596:	2100      	movs	r1, #0
 800a598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a59a:	f7ff fe05 	bl	800a1a8 <xTimerGenericCommand>
 800a59e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d14f      	bne.n	800a646 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	61bb      	str	r3, [r7, #24]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5c2:	f023 0301 	bic.w	r3, r3, #1
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a5ce:	e03a      	b.n	800a646 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5d6:	f043 0301 	orr.w	r3, r3, #1
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10a      	bne.n	800a606 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	617b      	str	r3, [r7, #20]
}
 800a602:	bf00      	nop
 800a604:	e7fe      	b.n	800a604 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	699a      	ldr	r2, [r3, #24]
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	18d1      	adds	r1, r2, r3
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a614:	f7ff ff06 	bl	800a424 <prvInsertTimerInActiveList>
					break;
 800a618:	e015      	b.n	800a646 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a620:	f003 0302 	and.w	r3, r3, #2
 800a624:	2b00      	cmp	r3, #0
 800a626:	d103      	bne.n	800a630 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a62a:	f000 fbe1 	bl	800adf0 <vPortFree>
 800a62e:	e00a      	b.n	800a646 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a636:	f023 0301 	bic.w	r3, r3, #1
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a642:	e000      	b.n	800a646 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a644:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a646:	4b08      	ldr	r3, [pc, #32]	; (800a668 <prvProcessReceivedCommands+0x1c0>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	1d39      	adds	r1, r7, #4
 800a64c:	2200      	movs	r2, #0
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe faf4 	bl	8008c3c <xQueueReceive>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	f47f af2a 	bne.w	800a4b0 <prvProcessReceivedCommands+0x8>
	}
}
 800a65c:	bf00      	nop
 800a65e:	bf00      	nop
 800a660:	3730      	adds	r7, #48	; 0x30
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	200018a8 	.word	0x200018a8

0800a66c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b088      	sub	sp, #32
 800a670:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a672:	e048      	b.n	800a706 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a674:	4b2d      	ldr	r3, [pc, #180]	; (800a72c <prvSwitchTimerLists+0xc0>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a67e:	4b2b      	ldr	r3, [pc, #172]	; (800a72c <prvSwitchTimerLists+0xc0>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3304      	adds	r3, #4
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe f80d 	bl	80086ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6a0:	f003 0304 	and.w	r3, r3, #4
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d02e      	beq.n	800a706 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d90e      	bls.n	800a6d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6c6:	4b19      	ldr	r3, [pc, #100]	; (800a72c <prvSwitchTimerLists+0xc0>)
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f7fd ffb2 	bl	800863a <vListInsert>
 800a6d6:	e016      	b.n	800a706 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f7ff fd60 	bl	800a1a8 <xTimerGenericCommand>
 800a6e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	603b      	str	r3, [r7, #0]
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a706:	4b09      	ldr	r3, [pc, #36]	; (800a72c <prvSwitchTimerLists+0xc0>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1b1      	bne.n	800a674 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a710:	4b06      	ldr	r3, [pc, #24]	; (800a72c <prvSwitchTimerLists+0xc0>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a716:	4b06      	ldr	r3, [pc, #24]	; (800a730 <prvSwitchTimerLists+0xc4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a04      	ldr	r2, [pc, #16]	; (800a72c <prvSwitchTimerLists+0xc0>)
 800a71c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a71e:	4a04      	ldr	r2, [pc, #16]	; (800a730 <prvSwitchTimerLists+0xc4>)
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	6013      	str	r3, [r2, #0]
}
 800a724:	bf00      	nop
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	200018a0 	.word	0x200018a0
 800a730:	200018a4 	.word	0x200018a4

0800a734 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a73a:	f000 f96b 	bl	800aa14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a73e:	4b15      	ldr	r3, [pc, #84]	; (800a794 <prvCheckForValidListAndQueue+0x60>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d120      	bne.n	800a788 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a746:	4814      	ldr	r0, [pc, #80]	; (800a798 <prvCheckForValidListAndQueue+0x64>)
 800a748:	f7fd ff26 	bl	8008598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a74c:	4813      	ldr	r0, [pc, #76]	; (800a79c <prvCheckForValidListAndQueue+0x68>)
 800a74e:	f7fd ff23 	bl	8008598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a752:	4b13      	ldr	r3, [pc, #76]	; (800a7a0 <prvCheckForValidListAndQueue+0x6c>)
 800a754:	4a10      	ldr	r2, [pc, #64]	; (800a798 <prvCheckForValidListAndQueue+0x64>)
 800a756:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a758:	4b12      	ldr	r3, [pc, #72]	; (800a7a4 <prvCheckForValidListAndQueue+0x70>)
 800a75a:	4a10      	ldr	r2, [pc, #64]	; (800a79c <prvCheckForValidListAndQueue+0x68>)
 800a75c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a75e:	2300      	movs	r3, #0
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	4b11      	ldr	r3, [pc, #68]	; (800a7a8 <prvCheckForValidListAndQueue+0x74>)
 800a764:	4a11      	ldr	r2, [pc, #68]	; (800a7ac <prvCheckForValidListAndQueue+0x78>)
 800a766:	2110      	movs	r1, #16
 800a768:	200a      	movs	r0, #10
 800a76a:	f7fe f831 	bl	80087d0 <xQueueGenericCreateStatic>
 800a76e:	4603      	mov	r3, r0
 800a770:	4a08      	ldr	r2, [pc, #32]	; (800a794 <prvCheckForValidListAndQueue+0x60>)
 800a772:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a774:	4b07      	ldr	r3, [pc, #28]	; (800a794 <prvCheckForValidListAndQueue+0x60>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d005      	beq.n	800a788 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a77c:	4b05      	ldr	r3, [pc, #20]	; (800a794 <prvCheckForValidListAndQueue+0x60>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	490b      	ldr	r1, [pc, #44]	; (800a7b0 <prvCheckForValidListAndQueue+0x7c>)
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fc4a 	bl	800901c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a788:	f000 f974 	bl	800aa74 <vPortExitCritical>
}
 800a78c:	bf00      	nop
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	200018a8 	.word	0x200018a8
 800a798:	20001878 	.word	0x20001878
 800a79c:	2000188c 	.word	0x2000188c
 800a7a0:	200018a0 	.word	0x200018a0
 800a7a4:	200018a4 	.word	0x200018a4
 800a7a8:	20001954 	.word	0x20001954
 800a7ac:	200018b4 	.word	0x200018b4
 800a7b0:	0800b2ac 	.word	0x0800b2ac

0800a7b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3b04      	subs	r3, #4
 800a7c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a7cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3b04      	subs	r3, #4
 800a7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	f023 0201 	bic.w	r2, r3, #1
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3b04      	subs	r3, #4
 800a7e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7e4:	4a0c      	ldr	r2, [pc, #48]	; (800a818 <pxPortInitialiseStack+0x64>)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3b14      	subs	r3, #20
 800a7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	3b04      	subs	r3, #4
 800a7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f06f 0202 	mvn.w	r2, #2
 800a802:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3b20      	subs	r3, #32
 800a808:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a80a:	68fb      	ldr	r3, [r7, #12]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	0800a81d 	.word	0x0800a81d

0800a81c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a826:	4b12      	ldr	r3, [pc, #72]	; (800a870 <prvTaskExitError+0x54>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a82e:	d00a      	beq.n	800a846 <prvTaskExitError+0x2a>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	60fb      	str	r3, [r7, #12]
}
 800a842:	bf00      	nop
 800a844:	e7fe      	b.n	800a844 <prvTaskExitError+0x28>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	60bb      	str	r3, [r7, #8]
}
 800a858:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a85a:	bf00      	nop
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d0fc      	beq.n	800a85c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a862:	bf00      	nop
 800a864:	bf00      	nop
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	20000024 	.word	0x20000024
	...

0800a880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a880:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <pxCurrentTCBConst2>)
 800a882:	6819      	ldr	r1, [r3, #0]
 800a884:	6808      	ldr	r0, [r1, #0]
 800a886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88a:	f380 8809 	msr	PSP, r0
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f04f 0000 	mov.w	r0, #0
 800a896:	f380 8811 	msr	BASEPRI, r0
 800a89a:	4770      	bx	lr
 800a89c:	f3af 8000 	nop.w

0800a8a0 <pxCurrentTCBConst2>:
 800a8a0:	20001378 	.word	0x20001378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop

0800a8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a8a8:	4808      	ldr	r0, [pc, #32]	; (800a8cc <prvPortStartFirstTask+0x24>)
 800a8aa:	6800      	ldr	r0, [r0, #0]
 800a8ac:	6800      	ldr	r0, [r0, #0]
 800a8ae:	f380 8808 	msr	MSP, r0
 800a8b2:	f04f 0000 	mov.w	r0, #0
 800a8b6:	f380 8814 	msr	CONTROL, r0
 800a8ba:	b662      	cpsie	i
 800a8bc:	b661      	cpsie	f
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	df00      	svc	0
 800a8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8ca:	bf00      	nop
 800a8cc:	e000ed08 	.word	0xe000ed08

0800a8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a8d6:	4b46      	ldr	r3, [pc, #280]	; (800a9f0 <xPortStartScheduler+0x120>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a46      	ldr	r2, [pc, #280]	; (800a9f4 <xPortStartScheduler+0x124>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d10a      	bne.n	800a8f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	613b      	str	r3, [r7, #16]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8f6:	4b3e      	ldr	r3, [pc, #248]	; (800a9f0 <xPortStartScheduler+0x120>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a3f      	ldr	r2, [pc, #252]	; (800a9f8 <xPortStartScheduler+0x128>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d10a      	bne.n	800a916 <xPortStartScheduler+0x46>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	60fb      	str	r3, [r7, #12]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a916:	4b39      	ldr	r3, [pc, #228]	; (800a9fc <xPortStartScheduler+0x12c>)
 800a918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	22ff      	movs	r2, #255	; 0xff
 800a926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a930:	78fb      	ldrb	r3, [r7, #3]
 800a932:	b2db      	uxtb	r3, r3
 800a934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	4b31      	ldr	r3, [pc, #196]	; (800aa00 <xPortStartScheduler+0x130>)
 800a93c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a93e:	4b31      	ldr	r3, [pc, #196]	; (800aa04 <xPortStartScheduler+0x134>)
 800a940:	2207      	movs	r2, #7
 800a942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a944:	e009      	b.n	800a95a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a946:	4b2f      	ldr	r3, [pc, #188]	; (800aa04 <xPortStartScheduler+0x134>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	4a2d      	ldr	r2, [pc, #180]	; (800aa04 <xPortStartScheduler+0x134>)
 800a94e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a950:	78fb      	ldrb	r3, [r7, #3]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	b2db      	uxtb	r3, r3
 800a958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a95a:	78fb      	ldrb	r3, [r7, #3]
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a962:	2b80      	cmp	r3, #128	; 0x80
 800a964:	d0ef      	beq.n	800a946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a966:	4b27      	ldr	r3, [pc, #156]	; (800aa04 <xPortStartScheduler+0x134>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f1c3 0307 	rsb	r3, r3, #7
 800a96e:	2b04      	cmp	r3, #4
 800a970:	d00a      	beq.n	800a988 <xPortStartScheduler+0xb8>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	60bb      	str	r3, [r7, #8]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a988:	4b1e      	ldr	r3, [pc, #120]	; (800aa04 <xPortStartScheduler+0x134>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	021b      	lsls	r3, r3, #8
 800a98e:	4a1d      	ldr	r2, [pc, #116]	; (800aa04 <xPortStartScheduler+0x134>)
 800a990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a992:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <xPortStartScheduler+0x134>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a99a:	4a1a      	ldr	r2, [pc, #104]	; (800aa04 <xPortStartScheduler+0x134>)
 800a99c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9a6:	4b18      	ldr	r3, [pc, #96]	; (800aa08 <xPortStartScheduler+0x138>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a17      	ldr	r2, [pc, #92]	; (800aa08 <xPortStartScheduler+0x138>)
 800a9ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9b2:	4b15      	ldr	r3, [pc, #84]	; (800aa08 <xPortStartScheduler+0x138>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a14      	ldr	r2, [pc, #80]	; (800aa08 <xPortStartScheduler+0x138>)
 800a9b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a9bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9be:	f000 f8dd 	bl	800ab7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9c2:	4b12      	ldr	r3, [pc, #72]	; (800aa0c <xPortStartScheduler+0x13c>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9c8:	f000 f8fc 	bl	800abc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a9cc:	4b10      	ldr	r3, [pc, #64]	; (800aa10 <xPortStartScheduler+0x140>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a0f      	ldr	r2, [pc, #60]	; (800aa10 <xPortStartScheduler+0x140>)
 800a9d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a9d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9d8:	f7ff ff66 	bl	800a8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9dc:	f7ff f836 	bl	8009a4c <vTaskSwitchContext>
	prvTaskExitError();
 800a9e0:	f7ff ff1c 	bl	800a81c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	e000ed00 	.word	0xe000ed00
 800a9f4:	410fc271 	.word	0x410fc271
 800a9f8:	410fc270 	.word	0x410fc270
 800a9fc:	e000e400 	.word	0xe000e400
 800aa00:	200019a4 	.word	0x200019a4
 800aa04:	200019a8 	.word	0x200019a8
 800aa08:	e000ed20 	.word	0xe000ed20
 800aa0c:	20000024 	.word	0x20000024
 800aa10:	e000ef34 	.word	0xe000ef34

0800aa14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	607b      	str	r3, [r7, #4]
}
 800aa2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa2e:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <vPortEnterCritical+0x58>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3301      	adds	r3, #1
 800aa34:	4a0d      	ldr	r2, [pc, #52]	; (800aa6c <vPortEnterCritical+0x58>)
 800aa36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa38:	4b0c      	ldr	r3, [pc, #48]	; (800aa6c <vPortEnterCritical+0x58>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d10f      	bne.n	800aa60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa40:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <vPortEnterCritical+0x5c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00a      	beq.n	800aa60 <vPortEnterCritical+0x4c>
	__asm volatile
 800aa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	603b      	str	r3, [r7, #0]
}
 800aa5c:	bf00      	nop
 800aa5e:	e7fe      	b.n	800aa5e <vPortEnterCritical+0x4a>
	}
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	20000024 	.word	0x20000024
 800aa70:	e000ed04 	.word	0xe000ed04

0800aa74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa7a:	4b12      	ldr	r3, [pc, #72]	; (800aac4 <vPortExitCritical+0x50>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <vPortExitCritical+0x24>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	607b      	str	r3, [r7, #4]
}
 800aa94:	bf00      	nop
 800aa96:	e7fe      	b.n	800aa96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <vPortExitCritical+0x50>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	4a09      	ldr	r2, [pc, #36]	; (800aac4 <vPortExitCritical+0x50>)
 800aaa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aaa2:	4b08      	ldr	r3, [pc, #32]	; (800aac4 <vPortExitCritical+0x50>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d105      	bne.n	800aab6 <vPortExitCritical+0x42>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	f383 8811 	msr	BASEPRI, r3
}
 800aab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aab6:	bf00      	nop
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	20000024 	.word	0x20000024
	...

0800aad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aad0:	f3ef 8009 	mrs	r0, PSP
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	4b15      	ldr	r3, [pc, #84]	; (800ab30 <pxCurrentTCBConst>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	f01e 0f10 	tst.w	lr, #16
 800aae0:	bf08      	it	eq
 800aae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaea:	6010      	str	r0, [r2, #0]
 800aaec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aaf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aaf4:	f380 8811 	msr	BASEPRI, r0
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f7fe ffa4 	bl	8009a4c <vTaskSwitchContext>
 800ab04:	f04f 0000 	mov.w	r0, #0
 800ab08:	f380 8811 	msr	BASEPRI, r0
 800ab0c:	bc09      	pop	{r0, r3}
 800ab0e:	6819      	ldr	r1, [r3, #0]
 800ab10:	6808      	ldr	r0, [r1, #0]
 800ab12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab16:	f01e 0f10 	tst.w	lr, #16
 800ab1a:	bf08      	it	eq
 800ab1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab20:	f380 8809 	msr	PSP, r0
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	f3af 8000 	nop.w

0800ab30 <pxCurrentTCBConst>:
 800ab30:	20001378 	.word	0x20001378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop

0800ab38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	607b      	str	r3, [r7, #4]
}
 800ab50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab52:	f7fe fec1 	bl	80098d8 <xTaskIncrementTick>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab5c:	4b06      	ldr	r3, [pc, #24]	; (800ab78 <xPortSysTickHandler+0x40>)
 800ab5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	2300      	movs	r3, #0
 800ab66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	f383 8811 	msr	BASEPRI, r3
}
 800ab6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	e000ed04 	.word	0xe000ed04

0800ab7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab80:	4b0b      	ldr	r3, [pc, #44]	; (800abb0 <vPortSetupTimerInterrupt+0x34>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab86:	4b0b      	ldr	r3, [pc, #44]	; (800abb4 <vPortSetupTimerInterrupt+0x38>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab8c:	4b0a      	ldr	r3, [pc, #40]	; (800abb8 <vPortSetupTimerInterrupt+0x3c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a0a      	ldr	r2, [pc, #40]	; (800abbc <vPortSetupTimerInterrupt+0x40>)
 800ab92:	fba2 2303 	umull	r2, r3, r2, r3
 800ab96:	099b      	lsrs	r3, r3, #6
 800ab98:	4a09      	ldr	r2, [pc, #36]	; (800abc0 <vPortSetupTimerInterrupt+0x44>)
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab9e:	4b04      	ldr	r3, [pc, #16]	; (800abb0 <vPortSetupTimerInterrupt+0x34>)
 800aba0:	2207      	movs	r2, #7
 800aba2:	601a      	str	r2, [r3, #0]
}
 800aba4:	bf00      	nop
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	e000e010 	.word	0xe000e010
 800abb4:	e000e018 	.word	0xe000e018
 800abb8:	20000000 	.word	0x20000000
 800abbc:	10624dd3 	.word	0x10624dd3
 800abc0:	e000e014 	.word	0xe000e014

0800abc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800abc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800abd4 <vPortEnableVFP+0x10>
 800abc8:	6801      	ldr	r1, [r0, #0]
 800abca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800abce:	6001      	str	r1, [r0, #0]
 800abd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800abd2:	bf00      	nop
 800abd4:	e000ed88 	.word	0xe000ed88

0800abd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800abde:	f3ef 8305 	mrs	r3, IPSR
 800abe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b0f      	cmp	r3, #15
 800abe8:	d914      	bls.n	800ac14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abea:	4a17      	ldr	r2, [pc, #92]	; (800ac48 <vPortValidateInterruptPriority+0x70>)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abf4:	4b15      	ldr	r3, [pc, #84]	; (800ac4c <vPortValidateInterruptPriority+0x74>)
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	7afa      	ldrb	r2, [r7, #11]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d20a      	bcs.n	800ac14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	607b      	str	r3, [r7, #4]
}
 800ac10:	bf00      	nop
 800ac12:	e7fe      	b.n	800ac12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac14:	4b0e      	ldr	r3, [pc, #56]	; (800ac50 <vPortValidateInterruptPriority+0x78>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac1c:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <vPortValidateInterruptPriority+0x7c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d90a      	bls.n	800ac3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	603b      	str	r3, [r7, #0]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <vPortValidateInterruptPriority+0x60>
	}
 800ac3a:	bf00      	nop
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	e000e3f0 	.word	0xe000e3f0
 800ac4c:	200019a4 	.word	0x200019a4
 800ac50:	e000ed0c 	.word	0xe000ed0c
 800ac54:	200019a8 	.word	0x200019a8

0800ac58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08a      	sub	sp, #40	; 0x28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac64:	f7fe fd7c 	bl	8009760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac68:	4b5b      	ldr	r3, [pc, #364]	; (800add8 <pvPortMalloc+0x180>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac70:	f000 f920 	bl	800aeb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac74:	4b59      	ldr	r3, [pc, #356]	; (800addc <pvPortMalloc+0x184>)
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f040 8093 	bne.w	800ada8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d01d      	beq.n	800acc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ac88:	2208      	movs	r2, #8
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f003 0307 	and.w	r3, r3, #7
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d014      	beq.n	800acc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f023 0307 	bic.w	r3, r3, #7
 800aca0:	3308      	adds	r3, #8
 800aca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f003 0307 	and.w	r3, r3, #7
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <pvPortMalloc+0x6c>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	617b      	str	r3, [r7, #20]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d06e      	beq.n	800ada8 <pvPortMalloc+0x150>
 800acca:	4b45      	ldr	r3, [pc, #276]	; (800ade0 <pvPortMalloc+0x188>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d869      	bhi.n	800ada8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800acd4:	4b43      	ldr	r3, [pc, #268]	; (800ade4 <pvPortMalloc+0x18c>)
 800acd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800acd8:	4b42      	ldr	r3, [pc, #264]	; (800ade4 <pvPortMalloc+0x18c>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acde:	e004      	b.n	800acea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d903      	bls.n	800acfc <pvPortMalloc+0xa4>
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1f1      	bne.n	800ace0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acfc:	4b36      	ldr	r3, [pc, #216]	; (800add8 <pvPortMalloc+0x180>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d050      	beq.n	800ada8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2208      	movs	r2, #8
 800ad0c:	4413      	add	r3, r2
 800ad0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	1ad2      	subs	r2, r2, r3
 800ad20:	2308      	movs	r3, #8
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d91f      	bls.n	800ad68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <pvPortMalloc+0xf8>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	613b      	str	r3, [r7, #16]
}
 800ad4c:	bf00      	nop
 800ad4e:	e7fe      	b.n	800ad4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	1ad2      	subs	r2, r2, r3
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad62:	69b8      	ldr	r0, [r7, #24]
 800ad64:	f000 f908 	bl	800af78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad68:	4b1d      	ldr	r3, [pc, #116]	; (800ade0 <pvPortMalloc+0x188>)
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	4a1b      	ldr	r2, [pc, #108]	; (800ade0 <pvPortMalloc+0x188>)
 800ad74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad76:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <pvPortMalloc+0x188>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4b1b      	ldr	r3, [pc, #108]	; (800ade8 <pvPortMalloc+0x190>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d203      	bcs.n	800ad8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad82:	4b17      	ldr	r3, [pc, #92]	; (800ade0 <pvPortMalloc+0x188>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a18      	ldr	r2, [pc, #96]	; (800ade8 <pvPortMalloc+0x190>)
 800ad88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	685a      	ldr	r2, [r3, #4]
 800ad8e:	4b13      	ldr	r3, [pc, #76]	; (800addc <pvPortMalloc+0x184>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	431a      	orrs	r2, r3
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad9e:	4b13      	ldr	r3, [pc, #76]	; (800adec <pvPortMalloc+0x194>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3301      	adds	r3, #1
 800ada4:	4a11      	ldr	r2, [pc, #68]	; (800adec <pvPortMalloc+0x194>)
 800ada6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ada8:	f7fe fce8 	bl	800977c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	f003 0307 	and.w	r3, r3, #7
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00a      	beq.n	800adcc <pvPortMalloc+0x174>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	60fb      	str	r3, [r7, #12]
}
 800adc8:	bf00      	nop
 800adca:	e7fe      	b.n	800adca <pvPortMalloc+0x172>
	return pvReturn;
 800adcc:	69fb      	ldr	r3, [r7, #28]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3728      	adds	r7, #40	; 0x28
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	200025b4 	.word	0x200025b4
 800addc:	200025c8 	.word	0x200025c8
 800ade0:	200025b8 	.word	0x200025b8
 800ade4:	200025ac 	.word	0x200025ac
 800ade8:	200025bc 	.word	0x200025bc
 800adec:	200025c0 	.word	0x200025c0

0800adf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d04d      	beq.n	800ae9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae02:	2308      	movs	r3, #8
 800ae04:	425b      	negs	r3, r3
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	4413      	add	r3, r2
 800ae0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	4b24      	ldr	r3, [pc, #144]	; (800aea8 <vPortFree+0xb8>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4013      	ands	r3, r2
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10a      	bne.n	800ae34 <vPortFree+0x44>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	60fb      	str	r3, [r7, #12]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00a      	beq.n	800ae52 <vPortFree+0x62>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	60bb      	str	r3, [r7, #8]
}
 800ae4e:	bf00      	nop
 800ae50:	e7fe      	b.n	800ae50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	4b14      	ldr	r3, [pc, #80]	; (800aea8 <vPortFree+0xb8>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01e      	beq.n	800ae9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d11a      	bne.n	800ae9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	4b0e      	ldr	r3, [pc, #56]	; (800aea8 <vPortFree+0xb8>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	43db      	mvns	r3, r3
 800ae72:	401a      	ands	r2, r3
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae78:	f7fe fc72 	bl	8009760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	685a      	ldr	r2, [r3, #4]
 800ae80:	4b0a      	ldr	r3, [pc, #40]	; (800aeac <vPortFree+0xbc>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4413      	add	r3, r2
 800ae86:	4a09      	ldr	r2, [pc, #36]	; (800aeac <vPortFree+0xbc>)
 800ae88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae8a:	6938      	ldr	r0, [r7, #16]
 800ae8c:	f000 f874 	bl	800af78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae90:	4b07      	ldr	r3, [pc, #28]	; (800aeb0 <vPortFree+0xc0>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3301      	adds	r3, #1
 800ae96:	4a06      	ldr	r2, [pc, #24]	; (800aeb0 <vPortFree+0xc0>)
 800ae98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae9a:	f7fe fc6f 	bl	800977c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae9e:	bf00      	nop
 800aea0:	3718      	adds	r7, #24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	200025c8 	.word	0x200025c8
 800aeac:	200025b8 	.word	0x200025b8
 800aeb0:	200025c4 	.word	0x200025c4

0800aeb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aeba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800aebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aec0:	4b27      	ldr	r3, [pc, #156]	; (800af60 <prvHeapInit+0xac>)
 800aec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f003 0307 	and.w	r3, r3, #7
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00c      	beq.n	800aee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3307      	adds	r3, #7
 800aed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f023 0307 	bic.w	r3, r3, #7
 800aeda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	4a1f      	ldr	r2, [pc, #124]	; (800af60 <prvHeapInit+0xac>)
 800aee4:	4413      	add	r3, r2
 800aee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aeec:	4a1d      	ldr	r2, [pc, #116]	; (800af64 <prvHeapInit+0xb0>)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aef2:	4b1c      	ldr	r3, [pc, #112]	; (800af64 <prvHeapInit+0xb0>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	4413      	add	r3, r2
 800aefe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af00:	2208      	movs	r2, #8
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	1a9b      	subs	r3, r3, r2
 800af06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f023 0307 	bic.w	r3, r3, #7
 800af0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4a15      	ldr	r2, [pc, #84]	; (800af68 <prvHeapInit+0xb4>)
 800af14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af16:	4b14      	ldr	r3, [pc, #80]	; (800af68 <prvHeapInit+0xb4>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2200      	movs	r2, #0
 800af1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af1e:	4b12      	ldr	r3, [pc, #72]	; (800af68 <prvHeapInit+0xb4>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2200      	movs	r2, #0
 800af24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	1ad2      	subs	r2, r2, r3
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af34:	4b0c      	ldr	r3, [pc, #48]	; (800af68 <prvHeapInit+0xb4>)
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	4a0a      	ldr	r2, [pc, #40]	; (800af6c <prvHeapInit+0xb8>)
 800af42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	4a09      	ldr	r2, [pc, #36]	; (800af70 <prvHeapInit+0xbc>)
 800af4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af4c:	4b09      	ldr	r3, [pc, #36]	; (800af74 <prvHeapInit+0xc0>)
 800af4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af52:	601a      	str	r2, [r3, #0]
}
 800af54:	bf00      	nop
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	200019ac 	.word	0x200019ac
 800af64:	200025ac 	.word	0x200025ac
 800af68:	200025b4 	.word	0x200025b4
 800af6c:	200025bc 	.word	0x200025bc
 800af70:	200025b8 	.word	0x200025b8
 800af74:	200025c8 	.word	0x200025c8

0800af78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af80:	4b28      	ldr	r3, [pc, #160]	; (800b024 <prvInsertBlockIntoFreeList+0xac>)
 800af82:	60fb      	str	r3, [r7, #12]
 800af84:	e002      	b.n	800af8c <prvInsertBlockIntoFreeList+0x14>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	429a      	cmp	r2, r3
 800af94:	d8f7      	bhi.n	800af86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	4413      	add	r3, r2
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d108      	bne.n	800afba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	441a      	add	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	441a      	add	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d118      	bne.n	800b000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	4b15      	ldr	r3, [pc, #84]	; (800b028 <prvInsertBlockIntoFreeList+0xb0>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d00d      	beq.n	800aff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	441a      	add	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	e008      	b.n	800b008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aff6:	4b0c      	ldr	r3, [pc, #48]	; (800b028 <prvInsertBlockIntoFreeList+0xb0>)
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	e003      	b.n	800b008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d002      	beq.n	800b016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b016:	bf00      	nop
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	200025ac 	.word	0x200025ac
 800b028:	200025b4 	.word	0x200025b4

0800b02c <__libc_init_array>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	4d0d      	ldr	r5, [pc, #52]	; (800b064 <__libc_init_array+0x38>)
 800b030:	4c0d      	ldr	r4, [pc, #52]	; (800b068 <__libc_init_array+0x3c>)
 800b032:	1b64      	subs	r4, r4, r5
 800b034:	10a4      	asrs	r4, r4, #2
 800b036:	2600      	movs	r6, #0
 800b038:	42a6      	cmp	r6, r4
 800b03a:	d109      	bne.n	800b050 <__libc_init_array+0x24>
 800b03c:	4d0b      	ldr	r5, [pc, #44]	; (800b06c <__libc_init_array+0x40>)
 800b03e:	4c0c      	ldr	r4, [pc, #48]	; (800b070 <__libc_init_array+0x44>)
 800b040:	f000 f8f2 	bl	800b228 <_init>
 800b044:	1b64      	subs	r4, r4, r5
 800b046:	10a4      	asrs	r4, r4, #2
 800b048:	2600      	movs	r6, #0
 800b04a:	42a6      	cmp	r6, r4
 800b04c:	d105      	bne.n	800b05a <__libc_init_array+0x2e>
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	f855 3b04 	ldr.w	r3, [r5], #4
 800b054:	4798      	blx	r3
 800b056:	3601      	adds	r6, #1
 800b058:	e7ee      	b.n	800b038 <__libc_init_array+0xc>
 800b05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b05e:	4798      	blx	r3
 800b060:	3601      	adds	r6, #1
 800b062:	e7f2      	b.n	800b04a <__libc_init_array+0x1e>
 800b064:	0800b390 	.word	0x0800b390
 800b068:	0800b390 	.word	0x0800b390
 800b06c:	0800b390 	.word	0x0800b390
 800b070:	0800b394 	.word	0x0800b394

0800b074 <__retarget_lock_acquire_recursive>:
 800b074:	4770      	bx	lr

0800b076 <__retarget_lock_release_recursive>:
 800b076:	4770      	bx	lr

0800b078 <memcpy>:
 800b078:	440a      	add	r2, r1
 800b07a:	4291      	cmp	r1, r2
 800b07c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b080:	d100      	bne.n	800b084 <memcpy+0xc>
 800b082:	4770      	bx	lr
 800b084:	b510      	push	{r4, lr}
 800b086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b08a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b08e:	4291      	cmp	r1, r2
 800b090:	d1f9      	bne.n	800b086 <memcpy+0xe>
 800b092:	bd10      	pop	{r4, pc}

0800b094 <memset>:
 800b094:	4402      	add	r2, r0
 800b096:	4603      	mov	r3, r0
 800b098:	4293      	cmp	r3, r2
 800b09a:	d100      	bne.n	800b09e <memset+0xa>
 800b09c:	4770      	bx	lr
 800b09e:	f803 1b01 	strb.w	r1, [r3], #1
 800b0a2:	e7f9      	b.n	800b098 <memset+0x4>

0800b0a4 <cleanup_glue>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	6809      	ldr	r1, [r1, #0]
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	b109      	cbz	r1, 800b0b2 <cleanup_glue+0xe>
 800b0ae:	f7ff fff9 	bl	800b0a4 <cleanup_glue>
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ba:	f000 b869 	b.w	800b190 <_free_r>
	...

0800b0c0 <_reclaim_reent>:
 800b0c0:	4b2c      	ldr	r3, [pc, #176]	; (800b174 <_reclaim_reent+0xb4>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4283      	cmp	r3, r0
 800b0c6:	b570      	push	{r4, r5, r6, lr}
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	d051      	beq.n	800b170 <_reclaim_reent+0xb0>
 800b0cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b0ce:	b143      	cbz	r3, 800b0e2 <_reclaim_reent+0x22>
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d14a      	bne.n	800b16c <_reclaim_reent+0xac>
 800b0d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0d8:	6819      	ldr	r1, [r3, #0]
 800b0da:	b111      	cbz	r1, 800b0e2 <_reclaim_reent+0x22>
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f000 f857 	bl	800b190 <_free_r>
 800b0e2:	6961      	ldr	r1, [r4, #20]
 800b0e4:	b111      	cbz	r1, 800b0ec <_reclaim_reent+0x2c>
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f000 f852 	bl	800b190 <_free_r>
 800b0ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b0ee:	b111      	cbz	r1, 800b0f6 <_reclaim_reent+0x36>
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f000 f84d 	bl	800b190 <_free_r>
 800b0f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b0f8:	b111      	cbz	r1, 800b100 <_reclaim_reent+0x40>
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 f848 	bl	800b190 <_free_r>
 800b100:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b102:	b111      	cbz	r1, 800b10a <_reclaim_reent+0x4a>
 800b104:	4620      	mov	r0, r4
 800b106:	f000 f843 	bl	800b190 <_free_r>
 800b10a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b10c:	b111      	cbz	r1, 800b114 <_reclaim_reent+0x54>
 800b10e:	4620      	mov	r0, r4
 800b110:	f000 f83e 	bl	800b190 <_free_r>
 800b114:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b116:	b111      	cbz	r1, 800b11e <_reclaim_reent+0x5e>
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 f839 	bl	800b190 <_free_r>
 800b11e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b120:	b111      	cbz	r1, 800b128 <_reclaim_reent+0x68>
 800b122:	4620      	mov	r0, r4
 800b124:	f000 f834 	bl	800b190 <_free_r>
 800b128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b12a:	b111      	cbz	r1, 800b132 <_reclaim_reent+0x72>
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 f82f 	bl	800b190 <_free_r>
 800b132:	69a3      	ldr	r3, [r4, #24]
 800b134:	b1e3      	cbz	r3, 800b170 <_reclaim_reent+0xb0>
 800b136:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b138:	4620      	mov	r0, r4
 800b13a:	4798      	blx	r3
 800b13c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b13e:	b1b9      	cbz	r1, 800b170 <_reclaim_reent+0xb0>
 800b140:	4620      	mov	r0, r4
 800b142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b146:	f7ff bfad 	b.w	800b0a4 <cleanup_glue>
 800b14a:	5949      	ldr	r1, [r1, r5]
 800b14c:	b941      	cbnz	r1, 800b160 <_reclaim_reent+0xa0>
 800b14e:	3504      	adds	r5, #4
 800b150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b152:	2d80      	cmp	r5, #128	; 0x80
 800b154:	68d9      	ldr	r1, [r3, #12]
 800b156:	d1f8      	bne.n	800b14a <_reclaim_reent+0x8a>
 800b158:	4620      	mov	r0, r4
 800b15a:	f000 f819 	bl	800b190 <_free_r>
 800b15e:	e7ba      	b.n	800b0d6 <_reclaim_reent+0x16>
 800b160:	680e      	ldr	r6, [r1, #0]
 800b162:	4620      	mov	r0, r4
 800b164:	f000 f814 	bl	800b190 <_free_r>
 800b168:	4631      	mov	r1, r6
 800b16a:	e7ef      	b.n	800b14c <_reclaim_reent+0x8c>
 800b16c:	2500      	movs	r5, #0
 800b16e:	e7ef      	b.n	800b150 <_reclaim_reent+0x90>
 800b170:	bd70      	pop	{r4, r5, r6, pc}
 800b172:	bf00      	nop
 800b174:	20000028 	.word	0x20000028

0800b178 <__malloc_lock>:
 800b178:	4801      	ldr	r0, [pc, #4]	; (800b180 <__malloc_lock+0x8>)
 800b17a:	f7ff bf7b 	b.w	800b074 <__retarget_lock_acquire_recursive>
 800b17e:	bf00      	nop
 800b180:	200025cc 	.word	0x200025cc

0800b184 <__malloc_unlock>:
 800b184:	4801      	ldr	r0, [pc, #4]	; (800b18c <__malloc_unlock+0x8>)
 800b186:	f7ff bf76 	b.w	800b076 <__retarget_lock_release_recursive>
 800b18a:	bf00      	nop
 800b18c:	200025cc 	.word	0x200025cc

0800b190 <_free_r>:
 800b190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b192:	2900      	cmp	r1, #0
 800b194:	d044      	beq.n	800b220 <_free_r+0x90>
 800b196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b19a:	9001      	str	r0, [sp, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f1a1 0404 	sub.w	r4, r1, #4
 800b1a2:	bfb8      	it	lt
 800b1a4:	18e4      	addlt	r4, r4, r3
 800b1a6:	f7ff ffe7 	bl	800b178 <__malloc_lock>
 800b1aa:	4a1e      	ldr	r2, [pc, #120]	; (800b224 <_free_r+0x94>)
 800b1ac:	9801      	ldr	r0, [sp, #4]
 800b1ae:	6813      	ldr	r3, [r2, #0]
 800b1b0:	b933      	cbnz	r3, 800b1c0 <_free_r+0x30>
 800b1b2:	6063      	str	r3, [r4, #4]
 800b1b4:	6014      	str	r4, [r2, #0]
 800b1b6:	b003      	add	sp, #12
 800b1b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1bc:	f7ff bfe2 	b.w	800b184 <__malloc_unlock>
 800b1c0:	42a3      	cmp	r3, r4
 800b1c2:	d908      	bls.n	800b1d6 <_free_r+0x46>
 800b1c4:	6825      	ldr	r5, [r4, #0]
 800b1c6:	1961      	adds	r1, r4, r5
 800b1c8:	428b      	cmp	r3, r1
 800b1ca:	bf01      	itttt	eq
 800b1cc:	6819      	ldreq	r1, [r3, #0]
 800b1ce:	685b      	ldreq	r3, [r3, #4]
 800b1d0:	1949      	addeq	r1, r1, r5
 800b1d2:	6021      	streq	r1, [r4, #0]
 800b1d4:	e7ed      	b.n	800b1b2 <_free_r+0x22>
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	b10b      	cbz	r3, 800b1e0 <_free_r+0x50>
 800b1dc:	42a3      	cmp	r3, r4
 800b1de:	d9fa      	bls.n	800b1d6 <_free_r+0x46>
 800b1e0:	6811      	ldr	r1, [r2, #0]
 800b1e2:	1855      	adds	r5, r2, r1
 800b1e4:	42a5      	cmp	r5, r4
 800b1e6:	d10b      	bne.n	800b200 <_free_r+0x70>
 800b1e8:	6824      	ldr	r4, [r4, #0]
 800b1ea:	4421      	add	r1, r4
 800b1ec:	1854      	adds	r4, r2, r1
 800b1ee:	42a3      	cmp	r3, r4
 800b1f0:	6011      	str	r1, [r2, #0]
 800b1f2:	d1e0      	bne.n	800b1b6 <_free_r+0x26>
 800b1f4:	681c      	ldr	r4, [r3, #0]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	6053      	str	r3, [r2, #4]
 800b1fa:	4421      	add	r1, r4
 800b1fc:	6011      	str	r1, [r2, #0]
 800b1fe:	e7da      	b.n	800b1b6 <_free_r+0x26>
 800b200:	d902      	bls.n	800b208 <_free_r+0x78>
 800b202:	230c      	movs	r3, #12
 800b204:	6003      	str	r3, [r0, #0]
 800b206:	e7d6      	b.n	800b1b6 <_free_r+0x26>
 800b208:	6825      	ldr	r5, [r4, #0]
 800b20a:	1961      	adds	r1, r4, r5
 800b20c:	428b      	cmp	r3, r1
 800b20e:	bf04      	itt	eq
 800b210:	6819      	ldreq	r1, [r3, #0]
 800b212:	685b      	ldreq	r3, [r3, #4]
 800b214:	6063      	str	r3, [r4, #4]
 800b216:	bf04      	itt	eq
 800b218:	1949      	addeq	r1, r1, r5
 800b21a:	6021      	streq	r1, [r4, #0]
 800b21c:	6054      	str	r4, [r2, #4]
 800b21e:	e7ca      	b.n	800b1b6 <_free_r+0x26>
 800b220:	b003      	add	sp, #12
 800b222:	bd30      	pop	{r4, r5, pc}
 800b224:	200025d0 	.word	0x200025d0

0800b228 <_init>:
 800b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22a:	bf00      	nop
 800b22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22e:	bc08      	pop	{r3}
 800b230:	469e      	mov	lr, r3
 800b232:	4770      	bx	lr

0800b234 <_fini>:
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	bf00      	nop
 800b238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b23a:	bc08      	pop	{r3}
 800b23c:	469e      	mov	lr, r3
 800b23e:	4770      	bx	lr
