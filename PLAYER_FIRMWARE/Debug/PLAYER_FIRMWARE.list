
PLAYER_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram1_low    00004000  20004000  20004000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000099c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000098  08009ba8  08009ba8  00019ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08009c40  08009c40  00028000  2**0
                  CONTENTS
  5 .ARM          00000008  08009c40  08009c40  00019c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08009c48  08009c48  00028000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08009c48  08009c48  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08009c4c  08009c4c  00019c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000028  20000000  08009c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001fe0  20000028  08009c78  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002008  08009c78  00022008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00028000  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c1b4  00000000  00000000  00028030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000512c  00000000  00000000  000541e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024a0  00000000  00000000  00059310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022a8  00000000  00000000  0005b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006018  00000000  00000000  0005da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029c25  00000000  00000000  00063a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001295b4  00000000  00000000  0008d695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b6c49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009e0c  00000000  00000000  001b6c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000028 	.word	0x20000028
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009b90 	.word	0x08009b90

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000002c 	.word	0x2000002c
 800021c:	08009b90 	.word	0x08009b90

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	wyatt_memspace[0] = 5;
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <main+0xa4>)
 800052a:	2205      	movs	r2, #5
 800052c:	701a      	strb	r2, [r3, #0]
	wyatt_memspace[4095] = 5;
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <main+0xa4>)
 8000530:	2205      	movs	r2, #5
 8000532:	f883 2fff 	strb.w	r2, [r3, #4095]	; 0xfff
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f001 fd7e 	bl	8002036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f84d 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 fdf9 	bl	8001134 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000542:	f000 fab7 	bl	8000ab4 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000546:	f000 faf9 	bl	8000b3c <MX_DAC2_Init>
  MX_DAC3_Init();
 800054a:	f000 fb31 	bl	8000bb0 <MX_DAC3_Init>
  MX_DAC4_Init();
 800054e:	f000 fb73 	bl	8000c38 <MX_DAC4_Init>
  MX_OPAMP1_Init();
 8000552:	f000 fbb5 	bl	8000cc0 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 8000556:	f000 fbd9 	bl	8000d0c <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 800055a:	f000 fbfd 	bl	8000d58 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 800055e:	f000 fc21 	bl	8000da4 <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 8000562:	f000 fc45 	bl	8000df0 <MX_OPAMP6_Init>
  MX_QUADSPI1_Init();
 8000566:	f000 fc69 	bl	8000e3c <MX_QUADSPI1_Init>
  MX_SPI2_Init();
 800056a:	f000 fc8f 	bl	8000e8c <MX_SPI2_Init>
  MX_SPI3_Init();
 800056e:	f000 fccb 	bl	8000f08 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000572:	f000 fd07 	bl	8000f84 <MX_SPI4_Init>
  MX_UART5_Init();
 8000576:	f000 fd43 	bl	8001000 <MX_UART5_Init>
  MX_USART3_Init();
 800057a:	f000 fd8d 	bl	8001098 <MX_USART3_Init>
  MX_ADC1_Init();
 800057e:	f000 f877 	bl	8000670 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000582:	f000 f8ed 	bl	8000760 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000586:	f000 f951 	bl	800082c <MX_ADC3_Init>
  MX_ADC4_Init();
 800058a:	f000 f9c7 	bl	800091c <MX_ADC4_Init>
  MX_ADC5_Init();
 800058e:	f000 fa2b 	bl	80009e8 <MX_ADC5_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000592:	f006 fc5f 	bl	8006e54 <MX_FATFS_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <main+0x7c>
    Error_Handler();
 800059c:	f000 feb4 	bl	8001308 <Error_Handler>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a0:	f006 fd68 	bl	8007074 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a09      	ldr	r2, [pc, #36]	; (80005cc <main+0xa8>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <main+0xac>)
 80005aa:	f006 fdad 	bl	8007108 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <main+0xb0>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b4:	f006 fd82 	bl	80070bc <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  wyatt_memspace[2]++;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <main+0xa4>)
 80005ba:	789b      	ldrb	r3, [r3, #2]
 80005bc:	3301      	adds	r3, #1
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <main+0xa4>)
 80005c2:	709a      	strb	r2, [r3, #2]
 80005c4:	e7f8      	b.n	80005b8 <main+0x94>
 80005c6:	bf00      	nop
 80005c8:	20004000 	.word	0x20004000
 80005cc:	08009bcc 	.word	0x08009bcc
 80005d0:	080012d5 	.word	0x080012d5
 80005d4:	20000648 	.word	0x20000648

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	2238      	movs	r2, #56	; 0x38
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f009 faca 	bl	8009b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f003 fbe0 	bl	8003dc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	2303      	movs	r3, #3
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000612:	2301      	movs	r3, #1
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000616:	2314      	movs	r3, #20
 8000618:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fd2e 	bl	800408c <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000636:	f000 fe67 	bl	8001308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f004 f82c 	bl	80046b0 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800065e:	f000 fe53 	bl	8001308 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000662:	f004 fa2b 	bl	8004abc <HAL_RCC_EnableCSS>
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2220      	movs	r2, #32
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f009 fa79 	bl	8009b80 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068e:	4b32      	ldr	r3, [pc, #200]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000690:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000694:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000698:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800069c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f8:	4817      	ldr	r0, [pc, #92]	; (8000758 <MX_ADC1_Init+0xe8>)
 80006fa:	f001 fea9 	bl	8002450 <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000704:	f000 fe00 	bl	8001308 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	4619      	mov	r1, r3
 8000712:	4811      	ldr	r0, [pc, #68]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000714:	f002 fcbe 	bl	8003094 <HAL_ADCEx_MultiModeConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800071e:	f000 fdf3 	bl	8001308 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_ADC1_Init+0xec>)
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000726:	2306      	movs	r3, #6
 8000728:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800072e:	237f      	movs	r3, #127	; 0x7f
 8000730:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000732:	2304      	movs	r3, #4
 8000734:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_ADC1_Init+0xe8>)
 8000740:	f002 f842 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800074a:	f000 fddd 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3730      	adds	r7, #48	; 0x30
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000044 	.word	0x20000044
 800075c:	08600004 	.word	0x08600004

08000760 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2220      	movs	r2, #32
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f009 fa07 	bl	8009b80 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_ADC2_Init+0xc0>)
 8000774:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <MX_ADC2_Init+0xc4>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <MX_ADC2_Init+0xc0>)
 800077a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800077e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <MX_ADC2_Init+0xc0>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_ADC2_Init+0xc0>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800078c:	4b24      	ldr	r3, [pc, #144]	; (8000820 <MX_ADC2_Init+0xc0>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <MX_ADC2_Init+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_ADC2_Init+0xc0>)
 800079a:	2204      	movs	r2, #4
 800079c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_ADC2_Init+0xc0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_ADC2_Init+0xc0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_ADC2_Init+0xc0>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_ADC2_Init+0xc0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_ADC2_Init+0xc0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_ADC2_Init+0xc0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_ADC2_Init+0xc0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_ADC2_Init+0xc0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_ADC2_Init+0xc0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007da:	4811      	ldr	r0, [pc, #68]	; (8000820 <MX_ADC2_Init+0xc0>)
 80007dc:	f001 fe38 	bl	8002450 <HAL_ADC_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80007e6:	f000 fd8f 	bl	8001308 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_ADC2_Init+0xc8>)
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ee:	2306      	movs	r3, #6
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f6:	237f      	movs	r3, #127	; 0x7f
 80007f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fa:	2304      	movs	r3, #4
 80007fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <MX_ADC2_Init+0xc0>)
 8000808:	f001 ffde 	bl	80027c8 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000812:	f000 fd79 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000b0 	.word	0x200000b0
 8000824:	50000100 	.word	0x50000100
 8000828:	10c00010 	.word	0x10c00010

0800082c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2220      	movs	r2, #32
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f009 f99b 	bl	8009b80 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <MX_ADC3_Init+0xe4>)
 800084c:	4a31      	ldr	r2, [pc, #196]	; (8000914 <MX_ADC3_Init+0xe8>)
 800084e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_ADC3_Init+0xe4>)
 8000852:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000856:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000858:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_ADC3_Init+0xe4>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <MX_ADC3_Init+0xe4>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <MX_ADC3_Init+0xe4>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_ADC3_Init+0xe4>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <MX_ADC3_Init+0xe4>)
 8000872:	2204      	movs	r2, #4
 8000874:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_ADC3_Init+0xe4>)
 8000878:	2200      	movs	r2, #0
 800087a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_ADC3_Init+0xe4>)
 800087e:	2200      	movs	r2, #0
 8000880:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_ADC3_Init+0xe4>)
 8000884:	2201      	movs	r2, #1
 8000886:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_ADC3_Init+0xe4>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_ADC3_Init+0xe4>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_ADC3_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_ADC3_Init+0xe4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_ADC3_Init+0xe4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_ADC3_Init+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008b2:	4817      	ldr	r0, [pc, #92]	; (8000910 <MX_ADC3_Init+0xe4>)
 80008b4:	f001 fdcc 	bl	8002450 <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80008be:	f000 fd23 	bl	8001308 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <MX_ADC3_Init+0xe4>)
 80008ce:	f002 fbe1 	bl	8003094 <HAL_ADCEx_MultiModeConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80008d8:	f000 fd16 	bl	8001308 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_ADC3_Init+0xec>)
 80008de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e0:	2306      	movs	r3, #6
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e8:	237f      	movs	r3, #127	; 0x7f
 80008ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ec:	2304      	movs	r3, #4
 80008ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_ADC3_Init+0xe4>)
 80008fa:	f001 ff65 	bl	80027c8 <HAL_ADC_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000904:	f000 fd00 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000011c 	.word	0x2000011c
 8000914:	50000400 	.word	0x50000400
 8000918:	21800100 	.word	0x21800100

0800091c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2220      	movs	r2, #32
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f009 f929 	bl	8009b80 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000930:	4a2b      	ldr	r2, [pc, #172]	; (80009e0 <MX_ADC4_Init+0xc4>)
 8000932:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000936:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800093a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <MX_ADC4_Init+0xc0>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_ADC4_Init+0xc0>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000954:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000956:	2204      	movs	r2, #4
 8000958:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_ADC4_Init+0xc0>)
 800095c:	2200      	movs	r2, #0
 800095e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000962:	2200      	movs	r2, #0
 8000964:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000968:	2201      	movs	r2, #1
 800096a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_ADC4_Init+0xc0>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_ADC4_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_ADC4_Init+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000996:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_ADC4_Init+0xc0>)
 8000998:	f001 fd5a 	bl	8002450 <HAL_ADC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 80009a2:	f000 fcb1 	bl	8001308 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_ADC4_Init+0xc8>)
 80009a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009aa:	2306      	movs	r3, #6
 80009ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009b2:	237f      	movs	r3, #127	; 0x7f
 80009b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009b6:	2304      	movs	r3, #4
 80009b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_ADC4_Init+0xc0>)
 80009c4:	f001 ff00 	bl	80027c8 <HAL_ADC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80009ce:	f000 fc9b 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000188 	.word	0x20000188
 80009e0:	50000500 	.word	0x50000500
 80009e4:	25b00200 	.word	0x25b00200

080009e8 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2220      	movs	r2, #32
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f009 f8c3 	bl	8009b80 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 80009fc:	4a2b      	ldr	r2, [pc, #172]	; (8000aac <MX_ADC5_Init+0xc4>)
 80009fe:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a02:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a06:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a64:	f001 fcf4 	bl	8002450 <HAL_ADC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000a6e:	f000 fc4b 	bl	8001308 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_ADC5_Init+0xc8>)
 8000a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a76:	2306      	movs	r3, #6
 8000a78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a7e:	237f      	movs	r3, #127	; 0x7f
 8000a80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a82:	2304      	movs	r3, #4
 8000a84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_ADC5_Init+0xc0>)
 8000a90:	f001 fe9a 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000a9a:	f000 fc35 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	3720      	adds	r7, #32
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001f4 	.word	0x200001f4
 8000aac:	50000600 	.word	0x50000600
 8000ab0:	08600004 	.word	0x08600004

08000ab4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000aba:	463b      	mov	r3, r7
 8000abc:	2230      	movs	r2, #48	; 0x30
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f009 f85d 	bl	8009b80 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_DAC1_Init+0x80>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <MX_DAC1_Init+0x84>)
 8000aca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000acc:	4819      	ldr	r0, [pc, #100]	; (8000b34 <MX_DAC1_Init+0x80>)
 8000ace:	f002 fcc9 	bl	8003464 <HAL_DAC_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ad8:	f000 fc16 	bl	8001308 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000adc:	2302      	movs	r3, #2
 8000ade:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	4619      	mov	r1, r3
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <MX_DAC1_Init+0x80>)
 8000b08:	f002 fd2e 	bl	8003568 <HAL_DAC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000b12:	f000 fbf9 	bl	8001308 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	2210      	movs	r2, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_DAC1_Init+0x80>)
 8000b1e:	f002 fd23 	bl	8003568 <HAL_DAC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000b28:	f000 fbee 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	; 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000260 	.word	0x20000260
 8000b38:	50000800 	.word	0x50000800

08000b3c <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2230      	movs	r2, #48	; 0x30
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f009 f819 	bl	8009b80 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_DAC2_Init+0x6c>)
 8000b50:	4a16      	ldr	r2, [pc, #88]	; (8000bac <MX_DAC2_Init+0x70>)
 8000b52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000b54:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <MX_DAC2_Init+0x6c>)
 8000b56:	f002 fc85 	bl	8003464 <HAL_DAC_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000b60:	f000 fbd2 	bl	8001308 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000b64:	2302      	movs	r3, #2
 8000b66:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_DAC2_Init+0x6c>)
 8000b90:	f002 fcea 	bl	8003568 <HAL_DAC_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000b9a:	f000 fbb5 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3730      	adds	r7, #48	; 0x30
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000274 	.word	0x20000274
 8000bac:	50000c00 	.word	0x50000c00

08000bb0 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2230      	movs	r2, #48	; 0x30
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f008 ffdf 	bl	8009b80 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_DAC3_Init+0x80>)
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <MX_DAC3_Init+0x84>)
 8000bc6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000bc8:	4819      	ldr	r0, [pc, #100]	; (8000c30 <MX_DAC3_Init+0x80>)
 8000bca:	f002 fc4b 	bl	8003464 <HAL_DAC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000bd4:	f000 fb98 	bl	8001308 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MX_DAC3_Init+0x80>)
 8000c04:	f002 fcb0 	bl	8003568 <HAL_DAC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000c0e:	f000 fb7b 	bl	8001308 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	2210      	movs	r2, #16
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_DAC3_Init+0x80>)
 8000c1a:	f002 fca5 	bl	8003568 <HAL_DAC_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000c24:	f000 fb70 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000288 	.word	0x20000288
 8000c34:	50001000 	.word	0x50001000

08000c38 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2230      	movs	r2, #48	; 0x30
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f008 ff9b 	bl	8009b80 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_DAC4_Init+0x80>)
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <MX_DAC4_Init+0x84>)
 8000c4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8000c50:	4819      	ldr	r0, [pc, #100]	; (8000cb8 <MX_DAC4_Init+0x80>)
 8000c52:	f002 fc07 	bl	8003464 <HAL_DAC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8000c5c:	f000 fb54 	bl	8001308 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000c60:	2302      	movs	r3, #2
 8000c62:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <MX_DAC4_Init+0x80>)
 8000c8c:	f002 fc6c 	bl	8003568 <HAL_DAC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8000c96:	f000 fb37 	bl	8001308 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_DAC4_Init+0x80>)
 8000ca2:	f002 fc61 	bl	8003568 <HAL_DAC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_DAC4_Init+0x78>
  {
    Error_Handler();
 8000cac:	f000 fb2c 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3730      	adds	r7, #48	; 0x30
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2000029c 	.word	0x2000029c
 8000cbc:	50001400 	.word	0x50001400

08000cc0 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_OPAMP1_Init+0x44>)
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <MX_OPAMP1_Init+0x48>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_OPAMP1_Init+0x44>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_OPAMP1_Init+0x44>)
 8000cd2:	2260      	movs	r2, #96	; 0x60
 8000cd4:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_OPAMP1_Init+0x44>)
 8000cd8:	220c      	movs	r2, #12
 8000cda:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_OPAMP1_Init+0x44>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_OPAMP1_Init+0x44>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_OPAMP1_Init+0x44>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_OPAMP1_Init+0x44>)
 8000cf0:	f002 ff96 	bl	8003c20 <HAL_OPAMP_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000cfa:	f000 fb05 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200002b0 	.word	0x200002b0
 8000d08:	40010300 	.word	0x40010300

08000d0c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_OPAMP3_Init+0x44>)
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <MX_OPAMP3_Init+0x48>)
 8000d14:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_OPAMP3_Init+0x44>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_OPAMP3_Init+0x44>)
 8000d1e:	2260      	movs	r2, #96	; 0x60
 8000d20:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_OPAMP3_Init+0x44>)
 8000d24:	220c      	movs	r2, #12
 8000d26:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_OPAMP3_Init+0x44>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_OPAMP3_Init+0x44>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_OPAMP3_Init+0x44>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_OPAMP3_Init+0x44>)
 8000d3c:	f002 ff70 	bl	8003c20 <HAL_OPAMP_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000d46:	f000 fadf 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200002ec 	.word	0x200002ec
 8000d54:	40010308 	.word	0x40010308

08000d58 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_OPAMP4_Init+0x44>)
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <MX_OPAMP4_Init+0x48>)
 8000d60:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_OPAMP4_Init+0x44>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_OPAMP4_Init+0x44>)
 8000d6a:	2260      	movs	r2, #96	; 0x60
 8000d6c:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_OPAMP4_Init+0x44>)
 8000d70:	220c      	movs	r2, #12
 8000d72:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_OPAMP4_Init+0x44>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_OPAMP4_Init+0x44>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_OPAMP4_Init+0x44>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_OPAMP4_Init+0x44>)
 8000d88:	f002 ff4a 	bl	8003c20 <HAL_OPAMP_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8000d92:	f000 fab9 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000328 	.word	0x20000328
 8000da0:	4001030c 	.word	0x4001030c

08000da4 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_OPAMP5_Init+0x44>)
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <MX_OPAMP5_Init+0x48>)
 8000dac:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_OPAMP5_Init+0x44>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_OPAMP5_Init+0x44>)
 8000db6:	2260      	movs	r2, #96	; 0x60
 8000db8:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_OPAMP5_Init+0x44>)
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_OPAMP5_Init+0x44>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_OPAMP5_Init+0x44>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_OPAMP5_Init+0x44>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_OPAMP5_Init+0x44>)
 8000dd4:	f002 ff24 	bl	8003c20 <HAL_OPAMP_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 8000dde:	f000 fa93 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000364 	.word	0x20000364
 8000dec:	40010310 	.word	0x40010310

08000df0 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_OPAMP6_Init+0x44>)
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <MX_OPAMP6_Init+0x48>)
 8000df8:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_OPAMP6_Init+0x44>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_OPAMP6_Init+0x44>)
 8000e02:	2260      	movs	r2, #96	; 0x60
 8000e04:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_OPAMP6_Init+0x44>)
 8000e08:	220c      	movs	r2, #12
 8000e0a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_OPAMP6_Init+0x44>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_OPAMP6_Init+0x44>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_OPAMP6_Init+0x44>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_OPAMP6_Init+0x44>)
 8000e20:	f002 fefe 	bl	8003c20 <HAL_OPAMP_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 8000e2a:	f000 fa6d 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200003a0 	.word	0x200003a0
 8000e38:	40010314 	.word	0x40010314

08000e3c <MX_QUADSPI1_Init>:
  * @brief QUADSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  /* QUADSPI1 parameter configuration*/
  hqspi1.Instance = QUADSPI;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_QUADSPI1_Init+0x48>)
 8000e42:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <MX_QUADSPI1_Init+0x4c>)
 8000e44:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 255;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_QUADSPI1_Init+0x48>)
 8000e48:	22ff      	movs	r2, #255	; 0xff
 8000e4a:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_QUADSPI1_Init+0x48>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_QUADSPI1_Init+0x48>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 1;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_QUADSPI1_Init+0x48>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_QUADSPI1_Init+0x48>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <MX_QUADSPI1_Init+0x48>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_QUADSPI1_Init+0x48>)
 8000e6c:	2240      	movs	r2, #64	; 0x40
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_QUADSPI1_Init+0x48>)
 8000e72:	f003 f849 	bl	8003f08 <HAL_QSPI_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_QUADSPI1_Init+0x44>
  {
    Error_Handler();
 8000e7c:	f000 fa44 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200003dc 	.word	0x200003dc
 8000e88:	a0001000 	.word	0xa0001000

08000e8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <MX_SPI2_Init+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000e98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000ea6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eaa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000eba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ebe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000ec2:	2208      	movs	r2, #8
 8000ec4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000eda:	2207      	movs	r2, #7
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_SPI2_Init+0x74>)
 8000eec:	f004 f8a4 	bl	8005038 <HAL_SPI_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 fa07 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000428 	.word	0x20000428
 8000f04:	40003800 	.word	0x40003800

08000f08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <MX_SPI3_Init+0x78>)
 8000f10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f26:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f3e:	2208      	movs	r2, #8
 8000f40:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f56:	2207      	movs	r2, #7
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f62:	2208      	movs	r2, #8
 8000f64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_SPI3_Init+0x74>)
 8000f68:	f004 f866 	bl	8005038 <HAL_SPI_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f72:	f000 f9c9 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000048c 	.word	0x2000048c
 8000f80:	40003c00 	.word	0x40003c00

08000f84 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <MX_SPI4_Init+0x78>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000f90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f94:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000f9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fa2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fb2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fb6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fba:	2208      	movs	r2, #8
 8000fbc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fde:	2208      	movs	r2, #8
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_SPI4_Init+0x74>)
 8000fe4:	f004 f828 	bl	8005038 <HAL_SPI_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f000 f98b 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200004f0 	.word	0x200004f0
 8000ffc:	40013c00 	.word	0x40013c00

08001000 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_UART5_Init+0x90>)
 8001006:	4a23      	ldr	r2, [pc, #140]	; (8001094 <MX_UART5_Init+0x94>)
 8001008:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_UART5_Init+0x90>)
 800100c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001010:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_UART5_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_UART5_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_UART5_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_UART5_Init+0x90>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_UART5_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_UART5_Init+0x90>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_UART5_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_UART5_Init+0x90>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_UART5_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001048:	4811      	ldr	r0, [pc, #68]	; (8001090 <MX_UART5_Init+0x90>)
 800104a:	f004 fbeb 	bl	8005824 <HAL_UART_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001054:	f000 f958 	bl	8001308 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_UART5_Init+0x90>)
 800105c:	f005 f986 	bl	800636c <HAL_UARTEx_SetTxFifoThreshold>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001066:	f000 f94f 	bl	8001308 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4808      	ldr	r0, [pc, #32]	; (8001090 <MX_UART5_Init+0x90>)
 800106e:	f005 f9bb 	bl	80063e8 <HAL_UARTEx_SetRxFifoThreshold>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001078:	f000 f946 	bl	8001308 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_UART5_Init+0x90>)
 800107e:	f005 f93c 	bl	80062fa <HAL_UARTEx_DisableFifoMode>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001088:	f000 f93e 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000554 	.word	0x20000554
 8001094:	40005000 	.word	0x40005000

08001098 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_USART3_Init+0x90>)
 800109e:	4a23      	ldr	r2, [pc, #140]	; (800112c <MX_USART3_Init+0x94>)
 80010a0:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <MX_USART3_Init+0x90>)
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <MX_USART3_Init+0x98>)
 80010a6:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_USART3_Init+0x90>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <MX_USART3_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_USART3_Init+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_USART3_Init+0x90>)
 80010bc:	220c      	movs	r2, #12
 80010be:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_USART3_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_USART3_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_USART3_Init+0x90>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_USART3_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART3_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 80010de:	4812      	ldr	r0, [pc, #72]	; (8001128 <MX_USART3_Init+0x90>)
 80010e0:	f005 fa0e 	bl	8006500 <HAL_USART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART3_Init+0x56>
  {
    Error_Handler();
 80010ea:	f000 f90d 	bl	8001308 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ee:	2100      	movs	r1, #0
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_USART3_Init+0x90>)
 80010f2:	f005 fde9 	bl	8006cc8 <HAL_USARTEx_SetTxFifoThreshold>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_USART3_Init+0x68>
  {
    Error_Handler();
 80010fc:	f000 f904 	bl	8001308 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001100:	2100      	movs	r1, #0
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_USART3_Init+0x90>)
 8001104:	f005 fe1e 	bl	8006d44 <HAL_USARTEx_SetRxFifoThreshold>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART3_Init+0x7a>
  {
    Error_Handler();
 800110e:	f000 f8fb 	bl	8001308 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART3_Init+0x90>)
 8001114:	f005 fd9f 	bl	8006c56 <HAL_USARTEx_DisableFifoMode>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART3_Init+0x8a>
  {
    Error_Handler();
 800111e:	f000 f8f3 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200005e8 	.word	0x200005e8
 800112c:	40004800 	.word	0x40004800
 8001130:	007a1200 	.word	0x007a1200

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800114a:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <MX_GPIO_Init+0x18c>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a5c      	ldr	r2, [pc, #368]	; (80012c0 <MX_GPIO_Init+0x18c>)
 8001150:	f043 0310 	orr.w	r3, r3, #16
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b5a      	ldr	r3, [pc, #360]	; (80012c0 <MX_GPIO_Init+0x18c>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <MX_GPIO_Init+0x18c>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a56      	ldr	r2, [pc, #344]	; (80012c0 <MX_GPIO_Init+0x18c>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <MX_GPIO_Init+0x18c>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <MX_GPIO_Init+0x18c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a50      	ldr	r2, [pc, #320]	; (80012c0 <MX_GPIO_Init+0x18c>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <MX_GPIO_Init+0x18c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <MX_GPIO_Init+0x18c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a4a      	ldr	r2, [pc, #296]	; (80012c0 <MX_GPIO_Init+0x18c>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <MX_GPIO_Init+0x18c>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <MX_GPIO_Init+0x18c>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a44      	ldr	r2, [pc, #272]	; (80012c0 <MX_GPIO_Init+0x18c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <MX_GPIO_Init+0x18c>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <MX_GPIO_Init+0x18c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a3e      	ldr	r2, [pc, #248]	; (80012c0 <MX_GPIO_Init+0x18c>)
 80011c8:	f043 0320 	orr.w	r3, r3, #32
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <MX_GPIO_Init+0x18c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_NRST_GPIO_Port, TFT_NRST_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2140      	movs	r1, #64	; 0x40
 80011de:	4839      	ldr	r0, [pc, #228]	; (80012c4 <MX_GPIO_Init+0x190>)
 80011e0:	f002 fd06 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 7101 	mov.w	r1, #516	; 0x204
 80011ea:	4837      	ldr	r0, [pc, #220]	; (80012c8 <MX_GPIO_Init+0x194>)
 80011ec:	f002 fd00 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f240 210b 	movw	r1, #523	; 0x20b
 80011f6:	4835      	ldr	r0, [pc, #212]	; (80012cc <MX_GPIO_Init+0x198>)
 80011f8:	f002 fcfa 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_SPI_DC_GPIO_Port, TFT_SPI_DC_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2101      	movs	r1, #1
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f002 fcf4 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_NRST_Pin */
  GPIO_InitStruct.Pin = TFT_NRST_Pin;
 8001208:	2340      	movs	r3, #64	; 0x40
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_NRST_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4829      	ldr	r0, [pc, #164]	; (80012c4 <MX_GPIO_Init+0x190>)
 8001220:	f002 fb64 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BRIDGE_CLK_Pin */
  GPIO_InitStruct.Pin = BRIDGE_CLK_Pin;
 8001224:	2302      	movs	r3, #2
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001234:	2304      	movs	r3, #4
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BRIDGE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4824      	ldr	r0, [pc, #144]	; (80012d0 <MX_GPIO_Init+0x19c>)
 8001240:	f002 fb54 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pins : AUD_ORANGE_R_OUTPUT_EN_Pin AUD_ORANGE_L_OUTPUT_EN_Pin */
  GPIO_InitStruct.Pin = AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin;
 8001244:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	481a      	ldr	r0, [pc, #104]	; (80012c8 <MX_GPIO_Init+0x194>)
 800125e:	f002 fb45 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MICRO_SD_CS_Pin AUD_GREEN_L_OUTPUT_EN_Pin AUD_GREEN_R_OUTPUT_EN_Pin ROT_B_Pin */
  GPIO_InitStruct.Pin = MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin;
 8001262:	f240 230b 	movw	r3, #523	; 0x20b
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4814      	ldr	r0, [pc, #80]	; (80012cc <MX_GPIO_Init+0x198>)
 800127c:	f002 fb36 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_A_Pin ROT_S2_Pin ROT_S1_Pin ROT_C_Pin */
  GPIO_InitStruct.Pin = ROT_A_Pin|ROT_S2_Pin|ROT_S1_Pin|ROT_C_Pin;
 8001280:	2374      	movs	r3, #116	; 0x74
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <MX_GPIO_Init+0x198>)
 8001294:	f002 fb2a 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_SPI_DC_Pin */
  GPIO_InitStruct.Pin = TFT_SPI_DC_Pin;
 8001298:	2301      	movs	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_SPI_DC_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	f002 fb1b 	bl	80038ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	; 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000400 	.word	0x48000400
 80012c8:	48001400 	.word	0x48001400
 80012cc:	48000800 	.word	0x48000800
 80012d0:	48000c00 	.word	0x48000c00

080012d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012dc:	2001      	movs	r0, #1
 80012de:	f005 ffa5 	bl	800722c <osDelay>
 80012e2:	e7fb      	b.n	80012dc <StartDefaultTask+0x8>

080012e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012f6:	f000 feb7 	bl	8002068 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40001400 	.word	0x40001400

08001308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130c:	b672      	cpsid	i
}
 800130e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001310:	e7fe      	b.n	8001310 <Error_Handler+0x8>
	...

08001314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_MspInit+0x4c>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_MspInit+0x4c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6613      	str	r3, [r2, #96]	; 0x60
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_MspInit+0x4c>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_MspInit+0x4c>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_MspInit+0x4c>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6593      	str	r3, [r2, #88]	; 0x58
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_MspInit+0x4c>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	210f      	movs	r1, #15
 800134e:	f06f 0001 	mvn.w	r0, #1
 8001352:	f002 f85f 	bl	8003414 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000

08001364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0a8      	sub	sp, #160	; 0xa0
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800137c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001380:	2254      	movs	r2, #84	; 0x54
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f008 fbfb 	bl	8009b80 <memset>
  if(hadc->Instance==ADC1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001392:	d141      	bne.n	8001418 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800139a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800139e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fbf9 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013b0:	f7ff ffaa 	bl	8001308 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013b4:	4b84      	ldr	r3, [pc, #528]	; (80015c8 <HAL_ADC_MspInit+0x264>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a83      	ldr	r2, [pc, #524]	; (80015c8 <HAL_ADC_MspInit+0x264>)
 80013bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013be:	4b82      	ldr	r3, [pc, #520]	; (80015c8 <HAL_ADC_MspInit+0x264>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d10b      	bne.n	80013de <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013c6:	4b81      	ldr	r3, [pc, #516]	; (80015cc <HAL_ADC_MspInit+0x268>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a80      	ldr	r2, [pc, #512]	; (80015cc <HAL_ADC_MspInit+0x268>)
 80013cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <HAL_ADC_MspInit+0x268>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
 80013dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b7b      	ldr	r3, [pc, #492]	; (80015cc <HAL_ADC_MspInit+0x268>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a7a      	ldr	r2, [pc, #488]	; (80015cc <HAL_ADC_MspInit+0x268>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b78      	ldr	r3, [pc, #480]	; (80015cc <HAL_ADC_MspInit+0x268>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
 80013f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AUD_GRN_MIC_POSTAMP_Pin;
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fc:	2303      	movs	r3, #3
 80013fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_GRN_MIC_POSTAMP_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f002 fa6b 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001416:	e165      	b.n	80016e4 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a6c      	ldr	r2, [pc, #432]	; (80015d0 <HAL_ADC_MspInit+0x26c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d141      	bne.n	80014a6 <HAL_ADC_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001428:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800142c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fbb2 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_ADC_MspInit+0xde>
      Error_Handler();
 800143e:	f7ff ff63 	bl	8001308 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001442:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <HAL_ADC_MspInit+0x264>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a5f      	ldr	r2, [pc, #380]	; (80015c8 <HAL_ADC_MspInit+0x264>)
 800144a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800144c:	4b5e      	ldr	r3, [pc, #376]	; (80015c8 <HAL_ADC_MspInit+0x264>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10b      	bne.n	800146c <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001454:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <HAL_ADC_MspInit+0x268>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	4a5c      	ldr	r2, [pc, #368]	; (80015cc <HAL_ADC_MspInit+0x268>)
 800145a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800145e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001460:	4b5a      	ldr	r3, [pc, #360]	; (80015cc <HAL_ADC_MspInit+0x268>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b57      	ldr	r3, [pc, #348]	; (80015cc <HAL_ADC_MspInit+0x268>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	4a56      	ldr	r2, [pc, #344]	; (80015cc <HAL_ADC_MspInit+0x268>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001478:	4b54      	ldr	r3, [pc, #336]	; (80015cc <HAL_ADC_MspInit+0x268>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
 8001482:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_S_Pin;
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148a:	2303      	movs	r3, #3
 800148c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_S_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f002 fa24 	bl	80038ec <HAL_GPIO_Init>
}
 80014a4:	e11e      	b.n	80016e4 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC3)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <HAL_ADC_MspInit+0x270>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d142      	bne.n	8001536 <HAL_ADC_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80014ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 fb6a 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_ADC_MspInit+0x16e>
      Error_Handler();
 80014ce:	f7ff ff1b 	bl	8001308 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_ADC_MspInit+0x274>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a3f      	ldr	r2, [pc, #252]	; (80015d8 <HAL_ADC_MspInit+0x274>)
 80014da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014dc:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <HAL_ADC_MspInit+0x274>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d10b      	bne.n	80014fc <HAL_ADC_MspInit+0x198>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014e4:	4b39      	ldr	r3, [pc, #228]	; (80015cc <HAL_ADC_MspInit+0x268>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e8:	4a38      	ldr	r2, [pc, #224]	; (80015cc <HAL_ADC_MspInit+0x268>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_ADC_MspInit+0x268>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <HAL_ADC_MspInit+0x268>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	4a32      	ldr	r2, [pc, #200]	; (80015cc <HAL_ADC_MspInit+0x268>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001508:	4b30      	ldr	r3, [pc, #192]	; (80015cc <HAL_ADC_MspInit+0x268>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	623b      	str	r3, [r7, #32]
 8001512:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_R1_Pin;
 8001514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151c:	2303      	movs	r3, #3
 800151e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_R1_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800152c:	4619      	mov	r1, r3
 800152e:	482b      	ldr	r0, [pc, #172]	; (80015dc <HAL_ADC_MspInit+0x278>)
 8001530:	f002 f9dc 	bl	80038ec <HAL_GPIO_Init>
}
 8001534:	e0d6      	b.n	80016e4 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC4)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <HAL_ADC_MspInit+0x27c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d151      	bne.n	80015e4 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001546:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800154a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fb22 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 800155e:	f7ff fed3 	bl	8001308 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_ADC_MspInit+0x274>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <HAL_ADC_MspInit+0x274>)
 800156a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_ADC_MspInit+0x274>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d10b      	bne.n	800158c <HAL_ADC_MspInit+0x228>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_ADC_MspInit+0x268>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <HAL_ADC_MspInit+0x268>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_ADC_MspInit+0x268>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_ADC_MspInit+0x268>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_ADC_MspInit+0x268>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_ADC_MspInit+0x268>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_T_Pin;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ac:	2303      	movs	r3, #3
 80015ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_T_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <HAL_ADC_MspInit+0x278>)
 80015c0:	f002 f994 	bl	80038ec <HAL_GPIO_Init>
}
 80015c4:	e08e      	b.n	80016e4 <HAL_ADC_MspInit+0x380>
 80015c6:	bf00      	nop
 80015c8:	2000064c 	.word	0x2000064c
 80015cc:	40021000 	.word	0x40021000
 80015d0:	50000100 	.word	0x50000100
 80015d4:	50000400 	.word	0x50000400
 80015d8:	20000650 	.word	0x20000650
 80015dc:	48000c00 	.word	0x48000c00
 80015e0:	50000500 	.word	0x50000500
  else if(hadc->Instance==ADC5)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a40      	ldr	r2, [pc, #256]	; (80016ec <HAL_ADC_MspInit+0x388>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d17a      	bne.n	80016e4 <HAL_ADC_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001600:	4618      	mov	r0, r3
 8001602:	f003 facb 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_ADC_MspInit+0x2ac>
      Error_Handler();
 800160c:	f7ff fe7c 	bl	8001308 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001610:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_ADC_MspInit+0x38c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	4a36      	ldr	r2, [pc, #216]	; (80016f0 <HAL_ADC_MspInit+0x38c>)
 8001618:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800161a:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <HAL_ADC_MspInit+0x38c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d10b      	bne.n	800163a <HAL_ADC_MspInit+0x2d6>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a33      	ldr	r2, [pc, #204]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_ADC_MspInit+0x390>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AUD_ORANGE_S_UNBUFFERED_IN_Pin;
 8001682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168a:	2303      	movs	r3, #3
 800168c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_ORANGE_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a0:	f002 f924 	bl	80038ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_T_UNBUFFERED_IN_Pin|AUD_BLACK_R1_UNBUFFERED_IN_Pin|VOLUME_ANALOG_IN_Pin;
 80016a4:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80016a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ac:	2303      	movs	r3, #3
 80016ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016bc:	4619      	mov	r1, r3
 80016be:	480e      	ldr	r0, [pc, #56]	; (80016f8 <HAL_ADC_MspInit+0x394>)
 80016c0:	f002 f914 	bl	80038ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_S_UNBUFFERED_IN_Pin;
 80016c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_BLACK_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016dc:	4619      	mov	r1, r3
 80016de:	4807      	ldr	r0, [pc, #28]	; (80016fc <HAL_ADC_MspInit+0x398>)
 80016e0:	f002 f904 	bl	80038ec <HAL_GPIO_Init>
}
 80016e4:	bf00      	nop
 80016e6:	37a0      	adds	r7, #160	; 0xa0
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	50000600 	.word	0x50000600
 80016f0:	20000650 	.word	0x20000650
 80016f4:	40021000 	.word	0x40021000
 80016f8:	48000c00 	.word	0x48000c00
 80016fc:	48001000 	.word	0x48001000

08001700 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	; 0x38
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a45      	ldr	r2, [pc, #276]	; (8001834 <HAL_DAC_MspInit+0x134>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d125      	bne.n	800176e <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001722:	4b45      	ldr	r3, [pc, #276]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a44      	ldr	r2, [pc, #272]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	623b      	str	r3, [r7, #32]
 8001738:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <HAL_DAC_MspInit+0x138>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	4a3e      	ldr	r2, [pc, #248]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AUD_GREEN_L_PREAMP_AUDIO_Pin|AUD_GREEN_R_PREAMP_AUDIO_Pin;
 8001752:	2330      	movs	r3, #48	; 0x30
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001756:	2303      	movs	r3, #3
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f002 f8c0 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 800176c:	e05d      	b.n	800182a <HAL_DAC_MspInit+0x12a>
  else if(hdac->Instance==DAC2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a32      	ldr	r2, [pc, #200]	; (800183c <HAL_DAC_MspInit+0x13c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d12d      	bne.n	80017d4 <HAL_DAC_MspInit+0xd4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_DAC_MspInit+0x138>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	4a2e      	ldr	r2, [pc, #184]	; (8001838 <HAL_DAC_MspInit+0x138>)
 800177e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001784:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	4b29      	ldr	r3, [pc, #164]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	4a28      	ldr	r2, [pc, #160]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_DAC_MspInit+0x138>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TFT_LED_LVL_Pin;
 80017a8:	2340      	movs	r3, #64	; 0x40
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ac:	2303      	movs	r3, #3
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TFT_LED_LVL_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017be:	f002 f895 	bl	80038ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	210f      	movs	r1, #15
 80017c6:	2037      	movs	r0, #55	; 0x37
 80017c8:	f001 fe24 	bl	8003414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80017cc:	2037      	movs	r0, #55	; 0x37
 80017ce:	f001 fe3b 	bl	8003448 <HAL_NVIC_EnableIRQ>
}
 80017d2:	e02a      	b.n	800182a <HAL_DAC_MspInit+0x12a>
  else if(hdac->Instance==DAC3)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_DAC_MspInit+0x140>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d10c      	bne.n	80017f8 <HAL_DAC_MspInit+0xf8>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_DAC_MspInit+0x138>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4a15      	ldr	r2, [pc, #84]	; (8001838 <HAL_DAC_MspInit+0x138>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_DAC_MspInit+0x138>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
}
 80017f6:	e018      	b.n	800182a <HAL_DAC_MspInit+0x12a>
  else if(hdac->Instance==DAC4)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_DAC_MspInit+0x144>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d113      	bne.n	800182a <HAL_DAC_MspInit+0x12a>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_DAC_MspInit+0x138>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	210f      	movs	r1, #15
 800181e:	2037      	movs	r0, #55	; 0x37
 8001820:	f001 fdf8 	bl	8003414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001824:	2037      	movs	r0, #55	; 0x37
 8001826:	f001 fe0f 	bl	8003448 <HAL_NVIC_EnableIRQ>
}
 800182a:	bf00      	nop
 800182c:	3738      	adds	r7, #56	; 0x38
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	50000800 	.word	0x50000800
 8001838:	40021000 	.word	0x40021000
 800183c:	50000c00 	.word	0x50000c00
 8001840:	50001000 	.word	0x50001000
 8001844:	50001400 	.word	0x50001400

08001848 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a4d      	ldr	r2, [pc, #308]	; (800199c <HAL_OPAMP_MspInit+0x154>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d119      	bne.n	800189e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a4c      	ldr	r2, [pc, #304]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b4a      	ldr	r3, [pc, #296]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = AUD_ORANGE_L_PREAMP_AUDIO_Pin;
 8001882:	2304      	movs	r3, #4
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_L_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f002 f828 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 800189c:	e07a      	b.n	8001994 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP3)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a40      	ldr	r2, [pc, #256]	; (80019a4 <HAL_OPAMP_MspInit+0x15c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d118      	bne.n	80018da <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	4a3c      	ldr	r2, [pc, #240]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b4:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AUD_ORANGE_PREAMP_AUDIO_Pin;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c4:	2303      	movs	r3, #3
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4835      	ldr	r0, [pc, #212]	; (80019a8 <HAL_OPAMP_MspInit+0x160>)
 80018d4:	f002 f80a 	bl	80038ec <HAL_GPIO_Init>
}
 80018d8:	e05c      	b.n	8001994 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP4)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a33      	ldr	r2, [pc, #204]	; (80019ac <HAL_OPAMP_MspInit+0x164>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d119      	bne.n	8001918 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	4a2d      	ldr	r2, [pc, #180]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001902:	2303      	movs	r3, #3
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4825      	ldr	r0, [pc, #148]	; (80019a8 <HAL_OPAMP_MspInit+0x160>)
 8001912:	f001 ffeb 	bl	80038ec <HAL_GPIO_Init>
}
 8001916:	e03d      	b.n	8001994 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP5)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <HAL_OPAMP_MspInit+0x168>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d11a      	bne.n	8001958 <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800193a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001940:	2303      	movs	r3, #3
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001952:	f001 ffcb 	bl	80038ec <HAL_GPIO_Init>
}
 8001956:	e01d      	b.n	8001994 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP6)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <HAL_OPAMP_MspInit+0x16c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d118      	bne.n	8001994 <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_OPAMP_MspInit+0x158>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800197a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001980:	2303      	movs	r3, #3
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <HAL_OPAMP_MspInit+0x160>)
 8001990:	f001 ffac 	bl	80038ec <HAL_GPIO_Init>
}
 8001994:	bf00      	nop
 8001996:	3730      	adds	r7, #48	; 0x30
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40010300 	.word	0x40010300
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010308 	.word	0x40010308
 80019a8:	48000400 	.word	0x48000400
 80019ac:	4001030c 	.word	0x4001030c
 80019b0:	40010310 	.word	0x40010310
 80019b4:	40010314 	.word	0x40010314

080019b8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0a0      	sub	sp, #128	; 0x80
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0318 	add.w	r3, r7, #24
 80019d4:	2254      	movs	r2, #84	; 0x54
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f008 f8d1 	bl	8009b80 <memset>
  if(hqspi->Instance==QUADSPI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a3c      	ldr	r2, [pc, #240]	; (8001ad4 <HAL_QSPI_MspInit+0x11c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d170      	bne.n	8001aca <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80019e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f2:	f107 0318 	add.w	r3, r7, #24
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 f8d0 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a02:	f7ff fc81 	bl	8001308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a06:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0a:	4a33      	ldr	r2, [pc, #204]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6513      	str	r3, [r2, #80]	; 0x50
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4a2d      	ldr	r2, [pc, #180]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a3c:	f043 0320 	orr.w	r3, r3, #32
 8001a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_QSPI_MspInit+0x120>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
    PE15     ------> QUADSPI1_BK1_IO3
    PE11     ------> QUADSPI1_BK1_NCS
    PE14     ------> QUADSPI1_BK1_IO2
    PE13     ------> QUADSPI1_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7
 8001a66:	23f8      	movs	r3, #248	; 0xf8
 8001a68:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a76:	230a      	movs	r3, #10
 8001a78:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4816      	ldr	r0, [pc, #88]	; (8001adc <HAL_QSPI_MspInit+0x124>)
 8001a82:	f001 ff33 	bl	80038ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a98:	230a      	movs	r3, #10
 8001a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480f      	ldr	r0, [pc, #60]	; (8001ae0 <HAL_QSPI_MspInit+0x128>)
 8001aa4:	f001 ff22 	bl	80038ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14
 8001aa8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001aac:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001aba:	230a      	movs	r3, #10
 8001abc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001abe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <HAL_QSPI_MspInit+0x12c>)
 8001ac6:	f001 ff11 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	3780      	adds	r7, #128	; 0x80
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	a0001000 	.word	0xa0001000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48001400 	.word	0x48001400
 8001ae4:	48001000 	.word	0x48001000

08001ae8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b090      	sub	sp, #64	; 0x40
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a62      	ldr	r2, [pc, #392]	; (8001c90 <HAL_SPI_MspInit+0x1a8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d146      	bne.n	8001b98 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b0a:	4b62      	ldr	r3, [pc, #392]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a61      	ldr	r2, [pc, #388]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
 8001b16:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b20:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b22:	4b5c      	ldr	r3, [pc, #368]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a5b      	ldr	r2, [pc, #364]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	4a55      	ldr	r2, [pc, #340]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b46:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	6a3b      	ldr	r3, [r7, #32]
    PD15     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001b64:	2306      	movs	r3, #6
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	484a      	ldr	r0, [pc, #296]	; (8001c98 <HAL_SPI_MspInit+0x1b0>)
 8001b70:	f001 febc 	bl	80038ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8001b74:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b86:	2305      	movs	r3, #5
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4842      	ldr	r0, [pc, #264]	; (8001c9c <HAL_SPI_MspInit+0x1b4>)
 8001b92:	f001 feab 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001b96:	e077      	b.n	8001c88 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a40      	ldr	r2, [pc, #256]	; (8001ca0 <HAL_SPI_MspInit+0x1b8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d145      	bne.n	8001c2e <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ba2:	4b3c      	ldr	r3, [pc, #240]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	4a3b      	ldr	r2, [pc, #236]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bac:	6593      	str	r3, [r2, #88]	; 0x58
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a35      	ldr	r2, [pc, #212]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc6:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4a2f      	ldr	r2, [pc, #188]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bea:	2320      	movs	r3, #32
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c02:	4619      	mov	r1, r3
 8001c04:	4825      	ldr	r0, [pc, #148]	; (8001c9c <HAL_SPI_MspInit+0x1b4>)
 8001c06:	f001 fe71 	bl	80038ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001c0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c1c:	2306      	movs	r3, #6
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c24:	4619      	mov	r1, r3
 8001c26:	481f      	ldr	r0, [pc, #124]	; (8001ca4 <HAL_SPI_MspInit+0x1bc>)
 8001c28:	f001 fe60 	bl	80038ec <HAL_GPIO_Init>
}
 8001c2c:	e02c      	b.n	8001c88 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI4)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_SPI_MspInit+0x1c0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d127      	bne.n	8001c88 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3c:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c42:	6613      	str	r3, [r2, #96]	; 0x60
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_SPI_MspInit+0x1ac>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_2;
 8001c68:	2374      	movs	r3, #116	; 0x74
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c78:	2305      	movs	r3, #5
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c80:	4619      	mov	r1, r3
 8001c82:	480a      	ldr	r0, [pc, #40]	; (8001cac <HAL_SPI_MspInit+0x1c4>)
 8001c84:	f001 fe32 	bl	80038ec <HAL_GPIO_Init>
}
 8001c88:	bf00      	nop
 8001c8a:	3740      	adds	r7, #64	; 0x40
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40003800 	.word	0x40003800
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48000c00 	.word	0x48000c00
 8001c9c:	48000400 	.word	0x48000400
 8001ca0:	40003c00 	.word	0x40003c00
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	40013c00 	.word	0x40013c00
 8001cac:	48001000 	.word	0x48001000

08001cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0a0      	sub	sp, #128	; 0x80
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc8:	f107 0318 	add.w	r3, r7, #24
 8001ccc:	2254      	movs	r2, #84	; 0x54
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f007 ff55 	bl	8009b80 <memset>
  if(huart->Instance==UART5)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a2d      	ldr	r2, [pc, #180]	; (8001d90 <HAL_UART_MspInit+0xe0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d152      	bne.n	8001d86 <HAL_UART_MspInit+0xd6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001ce0:	2310      	movs	r3, #16
 8001ce2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce8:	f107 0318 	add.w	r3, r7, #24
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 ff55 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cf8:	f7ff fb06 	bl	8001308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_UART_MspInit+0xe4>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <HAL_UART_MspInit+0xe4>)
 8001d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d06:	6593      	str	r3, [r2, #88]	; 0x58
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <HAL_UART_MspInit+0xe4>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <HAL_UART_MspInit+0xe4>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <HAL_UART_MspInit+0xe4>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <HAL_UART_MspInit+0xe4>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_UART_MspInit+0xe4>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_UART_MspInit+0xe4>)
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_UART_MspInit+0xe4>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d48:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001d56:	2305      	movs	r3, #5
 8001d58:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480d      	ldr	r0, [pc, #52]	; (8001d98 <HAL_UART_MspInit+0xe8>)
 8001d62:	f001 fdc3 	bl	80038ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d66:	2304      	movs	r3, #4
 8001d68:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001d76:	2305      	movs	r3, #5
 8001d78:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4806      	ldr	r0, [pc, #24]	; (8001d9c <HAL_UART_MspInit+0xec>)
 8001d82:	f001 fdb3 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3780      	adds	r7, #128	; 0x80
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40005000 	.word	0x40005000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000800 	.word	0x48000800
 8001d9c:	48000c00 	.word	0x48000c00

08001da0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0a0      	sub	sp, #128	; 0x80
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db8:	f107 0318 	add.w	r3, r7, #24
 8001dbc:	2254      	movs	r2, #84	; 0x54
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f007 fedd 	bl	8009b80 <memset>
  if(husart->Instance==USART3)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a2d      	ldr	r2, [pc, #180]	; (8001e80 <HAL_USART_MspInit+0xe0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d153      	bne.n	8001e78 <HAL_USART_MspInit+0xd8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd8:	f107 0318 	add.w	r3, r7, #24
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 fedd 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8001de8:	f7ff fa8e 	bl	8001308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_USART_MspInit+0xe4>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <HAL_USART_MspInit+0xe4>)
 8001df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df6:	6593      	str	r3, [r2, #88]	; 0x58
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_USART_MspInit+0xe4>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_USART_MspInit+0xe4>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_USART_MspInit+0xe4>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_USART_MspInit+0xe4>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_USART_MspInit+0xe4>)
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_USART_MspInit+0xe4>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_USART_MspInit+0xe4>)
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB9     ------> USART3_TX
    PD10     ------> USART3_CK
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e38:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e46:	2307      	movs	r3, #7
 8001e48:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <HAL_USART_MspInit+0xe8>)
 8001e52:	f001 fd4b 	bl	80038ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001e56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	; (8001e8c <HAL_USART_MspInit+0xec>)
 8001e74:	f001 fd3a 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e78:	bf00      	nop
 8001e7a:	3780      	adds	r7, #128	; 0x80
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40004800 	.word	0x40004800
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48000400 	.word	0x48000400
 8001e8c:	48000c00 	.word	0x48000c00

08001e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001ea0:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <HAL_InitTick+0xc4>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <HAL_InitTick+0xc4>)
 8001ea6:	f043 0320 	orr.w	r3, r3, #32
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_InitTick+0xc4>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb8:	f107 020c 	add.w	r2, r7, #12
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fdc8 	bl	8004a58 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ec8:	f002 fd9a 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8001ecc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_InitTick+0xc8>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0c9b      	lsrs	r3, r3, #18
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_InitTick+0xcc>)
 8001ede:	4a20      	ldr	r2, [pc, #128]	; (8001f60 <HAL_InitTick+0xd0>)
 8001ee0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_InitTick+0xcc>)
 8001ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ee8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_InitTick+0xcc>)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_InitTick+0xcc>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_InitTick+0xcc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8001efc:	4817      	ldr	r0, [pc, #92]	; (8001f5c <HAL_InitTick+0xcc>)
 8001efe:	f003 f946 	bl	800518e <HAL_TIM_Base_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d11b      	bne.n	8001f48 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001f10:	4812      	ldr	r0, [pc, #72]	; (8001f5c <HAL_InitTick+0xcc>)
 8001f12:	f003 f99d 	bl	8005250 <HAL_TIM_Base_Start_IT>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d111      	bne.n	8001f48 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001f24:	2037      	movs	r0, #55	; 0x37
 8001f26:	f001 fa8f 	bl	8003448 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d808      	bhi.n	8001f42 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	2037      	movs	r0, #55	; 0x37
 8001f36:	f001 fa6d 	bl	8003414 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_InitTick+0xd4>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e002      	b.n	8001f48 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3730      	adds	r7, #48	; 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	431bde83 	.word	0x431bde83
 8001f5c:	20000654 	.word	0x20000654
 8001f60:	40001400 	.word	0x40001400
 8001f64:	20000004 	.word	0x20000004

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f6c:	f002 fdb6 	bl	8004adc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <NMI_Handler+0x8>

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <TIM7_DAC_IRQHandler+0x1c>)
 8001f9e:	f003 f9cf 	bl	8005340 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <TIM7_DAC_IRQHandler+0x20>)
 8001fa4:	f001 fa80 	bl	80034a8 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac4);
 8001fa8:	4804      	ldr	r0, [pc, #16]	; (8001fbc <TIM7_DAC_IRQHandler+0x24>)
 8001faa:	f001 fa7d 	bl	80034a8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000654 	.word	0x20000654
 8001fb8:	20000274 	.word	0x20000274
 8001fbc:	2000029c 	.word	0x2000029c

08001fc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <SystemInit+0x20>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <SystemInit+0x20>)
 8001fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fe4:	480d      	ldr	r0, [pc, #52]	; (800201c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fe6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fe8:	f7ff ffea 	bl	8001fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fec:	480c      	ldr	r0, [pc, #48]	; (8002020 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fee:	490d      	ldr	r1, [pc, #52]	; (8002024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <LoopForever+0xe>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ff4:	e002      	b.n	8001ffc <LoopCopyDataInit>

08001ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffa:	3304      	adds	r3, #4

08001ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002000:	d3f9      	bcc.n	8001ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002004:	4c0a      	ldr	r4, [pc, #40]	; (8002030 <LoopForever+0x16>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002008:	e001      	b.n	800200e <LoopFillZerobss>

0800200a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800200c:	3204      	adds	r2, #4

0800200e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002010:	d3fb      	bcc.n	800200a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002012:	f007 fd83 	bl	8009b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002016:	f7fe fa85 	bl	8000524 <main>

0800201a <LoopForever>:

LoopForever:
    b LoopForever
 800201a:	e7fe      	b.n	800201a <LoopForever>
  ldr   r0, =_estack
 800201c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002024:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002028:	08009c50 	.word	0x08009c50
  ldr r2, =_sbss
 800202c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002030:	20002008 	.word	0x20002008

08002034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002034:	e7fe      	b.n	8002034 <ADC1_2_IRQHandler>

08002036 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002040:	2003      	movs	r0, #3
 8002042:	f001 f9dc 	bl	80033fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002046:	200f      	movs	r0, #15
 8002048:	f7ff ff22 	bl	8001e90 <HAL_InitTick>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	71fb      	strb	r3, [r7, #7]
 8002056:	e001      	b.n	800205c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002058:	f7ff f95c 	bl	8001314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800205c:	79fb      	ldrb	r3, [r7, #7]

}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_IncTick+0x1c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_IncTick+0x20>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4413      	add	r3, r2
 8002076:	4a03      	ldr	r2, [pc, #12]	; (8002084 <HAL_IncTick+0x1c>)
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	200006a0 	.word	0x200006a0
 8002088:	20000008 	.word	0x20000008

0800208c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return uwTick;
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_GetTick+0x14>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	200006a0 	.word	0x200006a0

080020a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	609a      	str	r2, [r3, #8]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	609a      	str	r2, [r3, #8]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3360      	adds	r3, #96	; 0x60
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <LL_ADC_SetOffset+0x44>)
 800212e:	4013      	ands	r3, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	4313      	orrs	r3, r2
 800213c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002144:	bf00      	nop
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	03fff000 	.word	0x03fff000

08002154 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3360      	adds	r3, #96	; 0x60
 8002162:	461a      	mov	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3360      	adds	r3, #96	; 0x60
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3360      	adds	r3, #96	; 0x60
 80021c6:	461a      	mov	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	431a      	orrs	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021e0:	bf00      	nop
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3360      	adds	r3, #96	; 0x60
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	431a      	orrs	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002216:	bf00      	nop
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	615a      	str	r2, [r3, #20]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3330      	adds	r3, #48	; 0x30
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	4413      	add	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	211f      	movs	r1, #31
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	f003 011f 	and.w	r1, r3, #31
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	431a      	orrs	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002294:	bf00      	nop
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3314      	adds	r3, #20
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	0e5b      	lsrs	r3, r3, #25
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	4413      	add	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	0d1b      	lsrs	r3, r3, #20
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	2107      	movs	r1, #7
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	401a      	ands	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	0d1b      	lsrs	r3, r3, #20
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	431a      	orrs	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002310:	43db      	mvns	r3, r3
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0318 	and.w	r3, r3, #24
 800231a:	4908      	ldr	r1, [pc, #32]	; (800233c <LL_ADC_SetChannelSingleDiff+0x44>)
 800231c:	40d9      	lsrs	r1, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	400b      	ands	r3, r1
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	0007ffff 	.word	0x0007ffff

08002340 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6093      	str	r3, [r2, #8]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002378:	d101      	bne.n	800237e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800239c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023c8:	d101      	bne.n	80023ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <LL_ADC_IsEnabled+0x18>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <LL_ADC_IsEnabled+0x1a>
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b04      	cmp	r3, #4
 8002414:	d101      	bne.n	800241a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b08      	cmp	r3, #8
 800243a:	d101      	bne.n	8002440 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b089      	sub	sp, #36	; 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e1a9      	b.n	80027be <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7fe ff73 	bl	8001364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff67 	bl	8002364 <LL_ADC_IsDeepPowerDownEnabled>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff4d 	bl	8002340 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff82 	bl	80023b4 <LL_ADC_IsInternalRegulatorEnabled>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d115      	bne.n	80024e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff66 	bl	800238c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024c0:	4b9c      	ldr	r3, [pc, #624]	; (8002734 <HAL_ADC_Init+0x2e4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	4a9c      	ldr	r2, [pc, #624]	; (8002738 <HAL_ADC_Init+0x2e8>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	3301      	adds	r3, #1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024d4:	e002      	b.n	80024dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3b01      	subs	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f9      	bne.n	80024d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff64 	bl	80023b4 <LL_ADC_IsInternalRegulatorEnabled>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10d      	bne.n	800250e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	f043 0210 	orr.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff75 	bl	8002402 <LL_ADC_REG_IsConversionOngoing>
 8002518:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 8142 	bne.w	80027ac <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 813e 	bne.w	80027ac <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002538:	f043 0202 	orr.w	r2, r3, #2
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff49 	bl	80023dc <LL_ADC_IsEnabled>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d141      	bne.n	80025d4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002558:	d004      	beq.n	8002564 <HAL_ADC_Init+0x114>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_ADC_Init+0x2ec>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d10f      	bne.n	8002584 <HAL_ADC_Init+0x134>
 8002564:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002568:	f7ff ff38 	bl	80023dc <LL_ADC_IsEnabled>
 800256c:	4604      	mov	r4, r0
 800256e:	4873      	ldr	r0, [pc, #460]	; (800273c <HAL_ADC_Init+0x2ec>)
 8002570:	f7ff ff34 	bl	80023dc <LL_ADC_IsEnabled>
 8002574:	4603      	mov	r3, r0
 8002576:	4323      	orrs	r3, r4
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e012      	b.n	80025aa <HAL_ADC_Init+0x15a>
 8002584:	486e      	ldr	r0, [pc, #440]	; (8002740 <HAL_ADC_Init+0x2f0>)
 8002586:	f7ff ff29 	bl	80023dc <LL_ADC_IsEnabled>
 800258a:	4604      	mov	r4, r0
 800258c:	486d      	ldr	r0, [pc, #436]	; (8002744 <HAL_ADC_Init+0x2f4>)
 800258e:	f7ff ff25 	bl	80023dc <LL_ADC_IsEnabled>
 8002592:	4603      	mov	r3, r0
 8002594:	431c      	orrs	r4, r3
 8002596:	486c      	ldr	r0, [pc, #432]	; (8002748 <HAL_ADC_Init+0x2f8>)
 8002598:	f7ff ff20 	bl	80023dc <LL_ADC_IsEnabled>
 800259c:	4603      	mov	r3, r0
 800259e:	4323      	orrs	r3, r4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d012      	beq.n	80025d4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025b6:	d004      	beq.n	80025c2 <HAL_ADC_Init+0x172>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a5f      	ldr	r2, [pc, #380]	; (800273c <HAL_ADC_Init+0x2ec>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Init+0x176>
 80025c2:	4a62      	ldr	r2, [pc, #392]	; (800274c <HAL_ADC_Init+0x2fc>)
 80025c4:	e000      	b.n	80025c8 <HAL_ADC_Init+0x178>
 80025c6:	4a62      	ldr	r2, [pc, #392]	; (8002750 <HAL_ADC_Init+0x300>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f7ff fd68 	bl	80020a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7f5b      	ldrb	r3, [r3, #29]
 80025d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d106      	bne.n	8002610 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	3b01      	subs	r3, #1
 8002608:	045b      	lsls	r3, r3, #17
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	4b48      	ldr	r3, [pc, #288]	; (8002754 <HAL_ADC_Init+0x304>)
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	430b      	orrs	r3, r1
 800263e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fee4 	bl	8002428 <LL_ADC_INJ_IsConversionOngoing>
 8002660:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d17f      	bne.n	8002768 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d17c      	bne.n	8002768 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002672:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800267a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800268a:	f023 0302 	bic.w	r3, r3, #2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	430b      	orrs	r3, r1
 8002696:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d017      	beq.n	80026d0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6911      	ldr	r1, [r2, #16]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	430b      	orrs	r3, r1
 80026ca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80026ce:	e013      	b.n	80026f8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d12a      	bne.n	8002758 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800270c:	f023 0304 	bic.w	r3, r3, #4
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002718:	4311      	orrs	r1, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800271e:	4311      	orrs	r1, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002724:	430a      	orrs	r2, r1
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	611a      	str	r2, [r3, #16]
 8002732:	e019      	b.n	8002768 <HAL_ADC_Init+0x318>
 8002734:	20000000 	.word	0x20000000
 8002738:	053e2d63 	.word	0x053e2d63
 800273c:	50000100 	.word	0x50000100
 8002740:	50000400 	.word	0x50000400
 8002744:	50000500 	.word	0x50000500
 8002748:	50000600 	.word	0x50000600
 800274c:	50000300 	.word	0x50000300
 8002750:	50000700 	.word	0x50000700
 8002754:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10c      	bne.n	800278a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f023 010f 	bic.w	r1, r3, #15
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	1e5a      	subs	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
 8002788:	e007      	b.n	800279a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 020f 	bic.w	r2, r2, #15
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80027aa:	e007      	b.n	80027bc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	f043 0210 	orr.w	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	bf00      	nop

080027c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0b6      	sub	sp, #216	; 0xd8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x24>
 80027e6:	2302      	movs	r3, #2
 80027e8:	f000 bc13 	b.w	8003012 <HAL_ADC_ConfigChannel+0x84a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fe02 	bl	8002402 <LL_ADC_REG_IsConversionOngoing>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	f040 83f3 	bne.w	8002fec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	f7ff fd18 	bl	8002248 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fdf0 	bl	8002402 <LL_ADC_REG_IsConversionOngoing>
 8002822:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fdfc 	bl	8002428 <LL_ADC_INJ_IsConversionOngoing>
 8002830:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002834:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002838:	2b00      	cmp	r3, #0
 800283a:	f040 81d9 	bne.w	8002bf0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800283e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 81d4 	bne.w	8002bf0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002850:	d10f      	bne.n	8002872 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	4619      	mov	r1, r3
 800285e:	f7ff fd1f 	bl	80022a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fcd9 	bl	8002222 <LL_ADC_SetSamplingTimeCommonConfig>
 8002870:	e00e      	b.n	8002890 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	461a      	mov	r2, r3
 8002880:	f7ff fd0e 	bl	80022a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fcc9 	bl	8002222 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	08db      	lsrs	r3, r3, #3
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d022      	beq.n	80028f8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6919      	ldr	r1, [r3, #16]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028c2:	f7ff fc23 	bl	800210c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6919      	ldr	r1, [r3, #16]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f7ff fc6f 	bl	80021b6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d102      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x126>
 80028e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ec:	e000      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x128>
 80028ee:	2300      	movs	r3, #0
 80028f0:	461a      	mov	r2, r3
 80028f2:	f7ff fc7b 	bl	80021ec <LL_ADC_SetOffsetSaturation>
 80028f6:	e17b      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fc28 	bl	8002154 <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x15c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fc1d 	bl	8002154 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	e01e      	b.n	8002962 <HAL_ADC_ConfigChannel+0x19a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fc12 	bl	8002154 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002946:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800294a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e004      	b.n	8002960 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_ADC_ConfigChannel+0x1b2>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	e018      	b.n	80029ac <HAL_ADC_ConfigChannel+0x1e4>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800298e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e004      	b.n	80029ac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80029a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d106      	bne.n	80029be <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fbe1 	bl	8002180 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fbc5 	bl	8002154 <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x222>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fbba 	bl	8002154 <LL_ADC_GetOffsetChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	e01e      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x260>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fbaf 	bl	8002154 <LL_ADC_GetOffsetChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e004      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x278>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	e018      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x2aa>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e004      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d106      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fb7e 	bl	8002180 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fb62 	bl	8002154 <LL_ADC_GetOffsetChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x2e8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fb57 	bl	8002154 <LL_ADC_GetOffsetChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	0e9b      	lsrs	r3, r3, #26
 8002aaa:	f003 021f 	and.w	r2, r3, #31
 8002aae:	e01e      	b.n	8002aee <HAL_ADC_ConfigChannel+0x326>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fb4c 	bl	8002154 <LL_ADC_GetOffsetChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e004      	b.n	8002aec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x33e>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0e9b      	lsrs	r3, r3, #26
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	e016      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x36c>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e004      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d106      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2102      	movs	r1, #2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fb1d 	bl	8002180 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fb01 	bl	8002154 <LL_ADC_GetOffsetChannel>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x3aa>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2103      	movs	r1, #3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff faf6 	bl	8002154 <LL_ADC_GetOffsetChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	0e9b      	lsrs	r3, r3, #26
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	e017      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x3da>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2103      	movs	r1, #3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff faeb 	bl	8002154 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	e003      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x3f2>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	e011      	b.n	8002bde <HAL_ADC_ConfigChannel+0x416>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	e003      	b.n	8002bde <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d106      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	2103      	movs	r1, #3
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fac8 	bl	8002180 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fbf1 	bl	80023dc <LL_ADC_IsEnabled>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 813d 	bne.w	8002e7c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f7ff fb72 	bl	80022f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4aa2      	ldr	r2, [pc, #648]	; (8002ea4 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	f040 812e 	bne.w	8002e7c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10b      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x480>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0e9b      	lsrs	r3, r3, #26
 8002c36:	3301      	adds	r3, #1
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2b09      	cmp	r3, #9
 8002c3e:	bf94      	ite	ls
 8002c40:	2301      	movls	r3, #1
 8002c42:	2300      	movhi	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e019      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x4b4>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	bf94      	ite	ls
 8002c76:	2301      	movls	r3, #1
 8002c78:	2300      	movhi	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d079      	beq.n	8002d74 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x4d4>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	3301      	adds	r3, #1
 8002c94:	069b      	lsls	r3, r3, #26
 8002c96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c9a:	e015      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x500>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	069b      	lsls	r3, r3, #26
 8002cc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x520>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	e017      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x550>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d00:	2320      	movs	r3, #32
 8002d02:	e003      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	ea42 0103 	orr.w	r1, r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x576>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	051b      	lsls	r3, r3, #20
 8002d3c:	e018      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x5a8>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d56:	2320      	movs	r3, #32
 8002d58:	e003      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d70:	430b      	orrs	r3, r1
 8002d72:	e07e      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x5c8>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	3301      	adds	r3, #1
 8002d88:	069b      	lsls	r3, r3, #26
 8002d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8e:	e015      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x5f4>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002da8:	2320      	movs	r3, #32
 8002daa:	e003      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	069b      	lsls	r3, r3, #26
 8002db8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x614>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	e017      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x644>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	61fb      	str	r3, [r7, #28]
  return result;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002df4:	2320      	movs	r3, #32
 8002df6:	e003      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	3301      	adds	r3, #1
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	ea42 0103 	orr.w	r1, r2, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10d      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x670>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	3301      	adds	r3, #1
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b1e      	subs	r3, #30
 8002e30:	051b      	lsls	r3, r3, #20
 8002e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e36:	e01b      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x6a8>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	613b      	str	r3, [r7, #16]
  return result;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e003      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f003 021f 	and.w	r2, r3, #31
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	3b1e      	subs	r3, #30
 8002e6a:	051b      	lsls	r3, r3, #20
 8002e6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e70:	430b      	orrs	r3, r1
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	6892      	ldr	r2, [r2, #8]
 8002e76:	4619      	mov	r1, r3
 8002e78:	f7ff fa12 	bl	80022a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80be 	beq.w	8003006 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x6d6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_ADC_ConfigChannel+0x6e4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x6ec>
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002ea0:	e009      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x6ee>
 8002ea2:	bf00      	nop
 8002ea4:	407f0000 	.word	0x407f0000
 8002ea8:	80080000 	.word	0x80080000
 8002eac:	50000100 	.word	0x50000100
 8002eb0:	50000300 	.word	0x50000300
 8002eb4:	4b59      	ldr	r3, [pc, #356]	; (800301c <HAL_ADC_ConfigChannel+0x854>)
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f91a 	bl	80020f0 <LL_ADC_GetCommonPathInternalCh>
 8002ebc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a56      	ldr	r2, [pc, #344]	; (8003020 <HAL_ADC_ConfigChannel+0x858>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_ADC_ConfigChannel+0x70c>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a55      	ldr	r2, [pc, #340]	; (8003024 <HAL_ADC_ConfigChannel+0x85c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d13a      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d134      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee8:	d005      	beq.n	8002ef6 <HAL_ADC_ConfigChannel+0x72e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a4e      	ldr	r2, [pc, #312]	; (8003028 <HAL_ADC_ConfigChannel+0x860>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	f040 8085 	bne.w	8003000 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efe:	d004      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x742>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a49      	ldr	r2, [pc, #292]	; (800302c <HAL_ADC_ConfigChannel+0x864>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x746>
 8002f0a:	4a49      	ldr	r2, [pc, #292]	; (8003030 <HAL_ADC_ConfigChannel+0x868>)
 8002f0c:	e000      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x748>
 8002f0e:	4a43      	ldr	r2, [pc, #268]	; (800301c <HAL_ADC_ConfigChannel+0x854>)
 8002f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f7ff f8d5 	bl	80020ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f20:	4b44      	ldr	r3, [pc, #272]	; (8003034 <HAL_ADC_ConfigChannel+0x86c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	4a44      	ldr	r2, [pc, #272]	; (8003038 <HAL_ADC_ConfigChannel+0x870>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f3a:	e002      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f9      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f48:	e05a      	b.n	8003000 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	; (800303c <HAL_ADC_ConfigChannel+0x874>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d125      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11f      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a31      	ldr	r2, [pc, #196]	; (800302c <HAL_ADC_ConfigChannel+0x864>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d104      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x7ac>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a34      	ldr	r2, [pc, #208]	; (8003040 <HAL_ADC_ConfigChannel+0x878>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d047      	beq.n	8003004 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f7c:	d004      	beq.n	8002f88 <HAL_ADC_ConfigChannel+0x7c0>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2a      	ldr	r2, [pc, #168]	; (800302c <HAL_ADC_ConfigChannel+0x864>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x7c4>
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <HAL_ADC_ConfigChannel+0x868>)
 8002f8a:	e000      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x7c6>
 8002f8c:	4a23      	ldr	r2, [pc, #140]	; (800301c <HAL_ADC_ConfigChannel+0x854>)
 8002f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f96:	4619      	mov	r1, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f7ff f896 	bl	80020ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f9e:	e031      	b.n	8003004 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a27      	ldr	r2, [pc, #156]	; (8003044 <HAL_ADC_ConfigChannel+0x87c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d12d      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d127      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_ADC_ConfigChannel+0x864>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d022      	beq.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x80c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_ADC_ConfigChannel+0x864>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x810>
 8002fd4:	4a16      	ldr	r2, [pc, #88]	; (8003030 <HAL_ADC_ConfigChannel+0x868>)
 8002fd6:	e000      	b.n	8002fda <HAL_ADC_ConfigChannel+0x812>
 8002fd8:	4a10      	ldr	r2, [pc, #64]	; (800301c <HAL_ADC_ConfigChannel+0x854>)
 8002fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f7ff f870 	bl	80020ca <LL_ADC_SetCommonPathInternalCh>
 8002fea:	e00c      	b.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ffe:	e002      	b.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003000:	bf00      	nop
 8003002:	e000      	b.n	8003006 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003004:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800300e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003012:	4618      	mov	r0, r3
 8003014:	37d8      	adds	r7, #216	; 0xd8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	50000700 	.word	0x50000700
 8003020:	c3210000 	.word	0xc3210000
 8003024:	90c00010 	.word	0x90c00010
 8003028:	50000600 	.word	0x50000600
 800302c:	50000100 	.word	0x50000100
 8003030:	50000300 	.word	0x50000300
 8003034:	20000000 	.word	0x20000000
 8003038:	053e2d63 	.word	0x053e2d63
 800303c:	c7520000 	.word	0xc7520000
 8003040:	50000500 	.word	0x50000500
 8003044:	cb840000 	.word	0xcb840000

08003048 <LL_ADC_IsEnabled>:
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <LL_ADC_IsEnabled+0x18>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <LL_ADC_IsEnabled+0x1a>
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <LL_ADC_REG_IsConversionOngoing>:
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b04      	cmp	r3, #4
 8003080:	d101      	bne.n	8003086 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b0a1      	sub	sp, #132	; 0x84
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e0e7      	b.n	8003282 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030ba:	2300      	movs	r3, #0
 80030bc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030be:	2300      	movs	r3, #0
 80030c0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ca:	d102      	bne.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030cc:	4b6f      	ldr	r3, [pc, #444]	; (800328c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	e009      	b.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6e      	ldr	r2, [pc, #440]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d102      	bne.n	80030e2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80030dc:	4b6d      	ldr	r3, [pc, #436]	; (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	e001      	b.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0be      	b.n	8003282 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ffb1 	bl	800306e <LL_ADC_REG_IsConversionOngoing>
 800310c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ffab 	bl	800306e <LL_ADC_REG_IsConversionOngoing>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	f040 80a0 	bne.w	8003260 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003122:	2b00      	cmp	r3, #0
 8003124:	f040 809c 	bne.w	8003260 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003130:	d004      	beq.n	800313c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a55      	ldr	r2, [pc, #340]	; (800328c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d101      	bne.n	8003140 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800313c:	4b56      	ldr	r3, [pc, #344]	; (8003298 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800313e:	e000      	b.n	8003142 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003140:	4b56      	ldr	r3, [pc, #344]	; (800329c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003142:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d04b      	beq.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800314c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800315e:	035b      	lsls	r3, r3, #13
 8003160:	430b      	orrs	r3, r1
 8003162:	431a      	orrs	r2, r3
 8003164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003166:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003170:	d004      	beq.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a45      	ldr	r2, [pc, #276]	; (800328c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d10f      	bne.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800317c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003180:	f7ff ff62 	bl	8003048 <LL_ADC_IsEnabled>
 8003184:	4604      	mov	r4, r0
 8003186:	4841      	ldr	r0, [pc, #260]	; (800328c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003188:	f7ff ff5e 	bl	8003048 <LL_ADC_IsEnabled>
 800318c:	4603      	mov	r3, r0
 800318e:	4323      	orrs	r3, r4
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e012      	b.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800319c:	483c      	ldr	r0, [pc, #240]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800319e:	f7ff ff53 	bl	8003048 <LL_ADC_IsEnabled>
 80031a2:	4604      	mov	r4, r0
 80031a4:	483b      	ldr	r0, [pc, #236]	; (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031a6:	f7ff ff4f 	bl	8003048 <LL_ADC_IsEnabled>
 80031aa:	4603      	mov	r3, r0
 80031ac:	431c      	orrs	r4, r3
 80031ae:	483c      	ldr	r0, [pc, #240]	; (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80031b0:	f7ff ff4a 	bl	8003048 <LL_ADC_IsEnabled>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4323      	orrs	r3, r4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d056      	beq.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031ce:	f023 030f 	bic.w	r3, r3, #15
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	6811      	ldr	r1, [r2, #0]
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	6892      	ldr	r2, [r2, #8]
 80031da:	430a      	orrs	r2, r1
 80031dc:	431a      	orrs	r2, r3
 80031de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031e2:	e047      	b.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f8:	d004      	beq.n	8003204 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a23      	ldr	r2, [pc, #140]	; (800328c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d10f      	bne.n	8003224 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003204:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003208:	f7ff ff1e 	bl	8003048 <LL_ADC_IsEnabled>
 800320c:	4604      	mov	r4, r0
 800320e:	481f      	ldr	r0, [pc, #124]	; (800328c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003210:	f7ff ff1a 	bl	8003048 <LL_ADC_IsEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	4323      	orrs	r3, r4
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e012      	b.n	800324a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003224:	481a      	ldr	r0, [pc, #104]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003226:	f7ff ff0f 	bl	8003048 <LL_ADC_IsEnabled>
 800322a:	4604      	mov	r4, r0
 800322c:	4819      	ldr	r0, [pc, #100]	; (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800322e:	f7ff ff0b 	bl	8003048 <LL_ADC_IsEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	431c      	orrs	r4, r3
 8003236:	481a      	ldr	r0, [pc, #104]	; (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003238:	f7ff ff06 	bl	8003048 <LL_ADC_IsEnabled>
 800323c:	4603      	mov	r3, r0
 800323e:	4323      	orrs	r3, r4
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800324e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003256:	f023 030f 	bic.w	r3, r3, #15
 800325a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800325c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800325e:	e009      	b.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003272:	e000      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003274:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800327e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003282:	4618      	mov	r0, r3
 8003284:	3784      	adds	r7, #132	; 0x84
 8003286:	46bd      	mov	sp, r7
 8003288:	bd90      	pop	{r4, r7, pc}
 800328a:	bf00      	nop
 800328c:	50000100 	.word	0x50000100
 8003290:	50000400 	.word	0x50000400
 8003294:	50000500 	.word	0x50000500
 8003298:	50000300 	.word	0x50000300
 800329c:	50000700 	.word	0x50000700
 80032a0:	50000600 	.word	0x50000600

080032a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032c0:	4013      	ands	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d6:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	60d3      	str	r3, [r2, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <__NVIC_GetPriorityGrouping+0x18>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	f003 0307 	and.w	r3, r3, #7
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	2b00      	cmp	r3, #0
 8003318:	db0b      	blt.n	8003332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	4907      	ldr	r1, [pc, #28]	; (8003340 <__NVIC_EnableIRQ+0x38>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2001      	movs	r0, #1
 800332a:	fa00 f202 	lsl.w	r2, r0, r2
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e100 	.word	0xe000e100

08003344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003354:	2b00      	cmp	r3, #0
 8003356:	db0a      	blt.n	800336e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	490c      	ldr	r1, [pc, #48]	; (8003390 <__NVIC_SetPriority+0x4c>)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	0112      	lsls	r2, r2, #4
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	440b      	add	r3, r1
 8003368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800336c:	e00a      	b.n	8003384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4908      	ldr	r1, [pc, #32]	; (8003394 <__NVIC_SetPriority+0x50>)
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	3b04      	subs	r3, #4
 800337c:	0112      	lsls	r2, r2, #4
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	440b      	add	r3, r1
 8003382:	761a      	strb	r2, [r3, #24]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000e100 	.word	0xe000e100
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f1c3 0307 	rsb	r3, r3, #7
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	bf28      	it	cs
 80033b6:	2304      	movcs	r3, #4
 80033b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3304      	adds	r3, #4
 80033be:	2b06      	cmp	r3, #6
 80033c0:	d902      	bls.n	80033c8 <NVIC_EncodePriority+0x30>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3b03      	subs	r3, #3
 80033c6:	e000      	b.n	80033ca <NVIC_EncodePriority+0x32>
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43da      	mvns	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	401a      	ands	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	43d9      	mvns	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f0:	4313      	orrs	r3, r2
         );
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3724      	adds	r7, #36	; 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ff4c 	bl	80032a4 <__NVIC_SetPriorityGrouping>
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003422:	f7ff ff63 	bl	80032ec <__NVIC_GetPriorityGrouping>
 8003426:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	6978      	ldr	r0, [r7, #20]
 800342e:	f7ff ffb3 	bl	8003398 <NVIC_EncodePriority>
 8003432:	4602      	mov	r2, r0
 8003434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ff82 	bl	8003344 <__NVIC_SetPriority>
}
 8003440:	bf00      	nop
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff56 	bl	8003308 <__NVIC_EnableIRQ>
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e014      	b.n	80034a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	791b      	ldrb	r3, [r3, #4]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe f93a 	bl	8001700 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01d      	beq.n	8003506 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d018      	beq.n	8003506 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2204      	movs	r2, #4
 80034d8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034fe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f827 	bl	8003554 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01d      	beq.n	800354c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d018      	beq.n	800354c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2204      	movs	r2, #4
 800351e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f043 0202 	orr.w	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003534:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003544:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f9c6 	bl	80038d8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_DAC_ConfigChannel+0x1c>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e19e      	b.n	80038c6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	795b      	ldrb	r3, [r3, #5]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_DAC_ConfigChannel+0x2c>
 8003590:	2302      	movs	r3, #2
 8003592:	e198      	b.n	80038c6 <HAL_DAC_ConfigChannel+0x35e>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2202      	movs	r2, #2
 800359e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d17a      	bne.n	800369e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80035a8:	f7fe fd70 	bl	800208c <HAL_GetTick>
 80035ac:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d13d      	bne.n	8003630 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035b4:	e018      	b.n	80035e8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035b6:	f7fe fd69 	bl	800208c <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d911      	bls.n	80035e8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f043 0208 	orr.w	r2, r3, #8
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2203      	movs	r2, #3
 80035e2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e16e      	b.n	80038c6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1df      	bne.n	80035b6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003600:	e020      	b.n	8003644 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003602:	f7fe fd43 	bl	800208c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d90f      	bls.n	8003630 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003616:	2b00      	cmp	r3, #0
 8003618:	da0a      	bge.n	8003630 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f043 0208 	orr.w	r2, r3, #8
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2203      	movs	r2, #3
 800362a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e14a      	b.n	80038c6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	2b00      	cmp	r3, #0
 8003638:	dbe3      	blt.n	8003602 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003642:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	ea02 0103 	and.w	r1, r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	21ff      	movs	r1, #255	; 0xff
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	ea02 0103 	and.w	r1, r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	409a      	lsls	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d11d      	bne.n	80036e2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	221f      	movs	r2, #31
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036be:	4013      	ands	r3, r2
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d6:	4313      	orrs	r3, r2
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2207      	movs	r2, #7
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fa:	4013      	ands	r3, r2
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003706:	2300      	movs	r3, #0
 8003708:	623b      	str	r3, [r7, #32]
 800370a:	e00f      	b.n	800372c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d102      	bne.n	800371a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003714:	2301      	movs	r3, #1
 8003716:	623b      	str	r3, [r7, #32]
 8003718:	e008      	b.n	800372c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003722:	2301      	movs	r3, #1
 8003724:	623b      	str	r3, [r7, #32]
 8003726:	e001      	b.n	800372c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003728:	2300      	movs	r3, #0
 800372a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	6a3a      	ldr	r2, [r7, #32]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	4013      	ands	r3, r2
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	791b      	ldrb	r3, [r3, #4]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d102      	bne.n	8003760 <HAL_DAC_ConfigChannel+0x1f8>
 800375a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800375e:	e000      	b.n	8003762 <HAL_DAC_ConfigChannel+0x1fa>
 8003760:	2300      	movs	r3, #0
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	4013      	ands	r3, r2
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	795b      	ldrb	r3, [r3, #5]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d102      	bne.n	800378c <HAL_DAC_ConfigChannel+0x224>
 8003786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800378a:	e000      	b.n	800378e <HAL_DAC_ConfigChannel+0x226>
 800378c:	2300      	movs	r3, #0
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d114      	bne.n	80037ce <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80037a4:	f001 f920 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 80037a8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4a48      	ldr	r2, [pc, #288]	; (80038d0 <HAL_DAC_ConfigChannel+0x368>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d904      	bls.n	80037bc <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	e00f      	b.n	80037dc <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4a45      	ldr	r2, [pc, #276]	; (80038d4 <HAL_DAC_ConfigChannel+0x36c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d90a      	bls.n	80037da <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
 80037cc:	e006      	b.n	80037dc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	4313      	orrs	r3, r2
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	e000      	b.n	80037dc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80037da:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ea:	4313      	orrs	r3, r2
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43da      	mvns	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	400a      	ands	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382e:	4013      	ands	r3, r2
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	4313      	orrs	r3, r2
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6819      	ldr	r1, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	22c0      	movs	r2, #192	; 0xc0
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43da      	mvns	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	400a      	ands	r2, r1
 800386c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	f640 710f 	movw	r1, #3855	; 0xf0f
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	ea02 0103 	and.w	r1, r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80038c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3728      	adds	r7, #40	; 0x28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	09896800 	.word	0x09896800
 80038d4:	04c4b400 	.word	0x04c4b400

080038d8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038fa:	e15a      	b.n	8003bb2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2101      	movs	r1, #1
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	4013      	ands	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 814c 	beq.w	8003bac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d005      	beq.n	800392c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003928:	2b02      	cmp	r3, #2
 800392a:	d130      	bne.n	800398e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003962:	2201      	movs	r2, #1
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4013      	ands	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 0201 	and.w	r2, r3, #1
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b03      	cmp	r3, #3
 8003998:	d017      	beq.n	80039ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	2203      	movs	r2, #3
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d123      	bne.n	8003a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	220f      	movs	r2, #15
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	08da      	lsrs	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3208      	adds	r2, #8
 8003a18:	6939      	ldr	r1, [r7, #16]
 8003a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	2203      	movs	r2, #3
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0203 	and.w	r2, r3, #3
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80a6 	beq.w	8003bac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a60:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <HAL_GPIO_Init+0x2e4>)
 8003a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a64:	4a5a      	ldr	r2, [pc, #360]	; (8003bd0 <HAL_GPIO_Init+0x2e4>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6613      	str	r3, [r2, #96]	; 0x60
 8003a6c:	4b58      	ldr	r3, [pc, #352]	; (8003bd0 <HAL_GPIO_Init+0x2e4>)
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a78:	4a56      	ldr	r2, [pc, #344]	; (8003bd4 <HAL_GPIO_Init+0x2e8>)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	220f      	movs	r2, #15
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003aa2:	d01f      	beq.n	8003ae4 <HAL_GPIO_Init+0x1f8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a4c      	ldr	r2, [pc, #304]	; (8003bd8 <HAL_GPIO_Init+0x2ec>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d019      	beq.n	8003ae0 <HAL_GPIO_Init+0x1f4>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a4b      	ldr	r2, [pc, #300]	; (8003bdc <HAL_GPIO_Init+0x2f0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_GPIO_Init+0x1f0>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a4a      	ldr	r2, [pc, #296]	; (8003be0 <HAL_GPIO_Init+0x2f4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00d      	beq.n	8003ad8 <HAL_GPIO_Init+0x1ec>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a49      	ldr	r2, [pc, #292]	; (8003be4 <HAL_GPIO_Init+0x2f8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <HAL_GPIO_Init+0x1e8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a48      	ldr	r2, [pc, #288]	; (8003be8 <HAL_GPIO_Init+0x2fc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d101      	bne.n	8003ad0 <HAL_GPIO_Init+0x1e4>
 8003acc:	2305      	movs	r3, #5
 8003ace:	e00a      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003ad0:	2306      	movs	r3, #6
 8003ad2:	e008      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	e006      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e004      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e002      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	f002 0203 	and.w	r2, r2, #3
 8003aec:	0092      	lsls	r2, r2, #2
 8003aee:	4093      	lsls	r3, r2
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af6:	4937      	ldr	r1, [pc, #220]	; (8003bd4 <HAL_GPIO_Init+0x2e8>)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	3302      	adds	r3, #2
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b04:	4b39      	ldr	r3, [pc, #228]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b28:	4a30      	ldr	r2, [pc, #192]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b2e:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b52:	4a26      	ldr	r2, [pc, #152]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b82:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ba6:	4a11      	ldr	r2, [pc, #68]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f47f ae9d 	bne.w	80038fc <HAL_GPIO_Init+0x10>
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	48000400 	.word	0x48000400
 8003bdc:	48000800 	.word	0x48000800
 8003be0:	48000c00 	.word	0x48000c00
 8003be4:	48001000 	.word	0x48001000
 8003be8:	48001400 	.word	0x48001400
 8003bec:	40010400 	.word	0x40010400

08003bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c00:	787b      	ldrb	r3, [r7, #1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c0c:	e002      	b.n	8003c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c0e:	887a      	ldrh	r2, [r7, #2]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e0bb      	b.n	8003dae <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d101      	bne.n	8003c46 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0b3      	b.n	8003dae <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d101      	bne.n	8003c56 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0ab      	b.n	8003dae <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c56:	4b58      	ldr	r3, [pc, #352]	; (8003db8 <HAL_OPAMP_Init+0x198>)
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	4a57      	ldr	r2, [pc, #348]	; (8003db8 <HAL_OPAMP_Init+0x198>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6613      	str	r3, [r2, #96]	; 0x60
 8003c62:	4b55      	ldr	r3, [pc, #340]	; (8003db8 <HAL_OPAMP_Init+0x198>)
 8003c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd fde0 	bl	8001848 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b40      	cmp	r3, #64	; 0x40
 8003c8e:	d003      	beq.n	8003c98 <HAL_OPAMP_Init+0x78>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b60      	cmp	r3, #96	; 0x60
 8003c96:	d133      	bne.n	8003d00 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 0110 	bic.w	r1, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b41      	ldr	r3, [pc, #260]	; (8003dbc <HAL_OPAMP_Init+0x19c>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6851      	ldr	r1, [r2, #4]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6892      	ldr	r2, [r2, #8]
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6912      	ldr	r2, [r2, #16]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	7d09      	ldrb	r1, [r1, #20]
 8003ccc:	2901      	cmp	r1, #1
 8003cce:	d102      	bne.n	8003cd6 <HAL_OPAMP_Init+0xb6>
 8003cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cd4:	e000      	b.n	8003cd8 <HAL_OPAMP_Init+0xb8>
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4311      	orrs	r1, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cde:	4311      	orrs	r1, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cea:	04d2      	lsls	r2, r2, #19
 8003cec:	4311      	orrs	r1, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cf2:	0612      	lsls	r2, r2, #24
 8003cf4:	4311      	orrs	r1, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e035      	b.n	8003d6c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 0110 	bic.w	r1, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <HAL_OPAMP_Init+0x19c>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6851      	ldr	r1, [r2, #4]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6892      	ldr	r2, [r2, #8]
 8003d28:	4311      	orrs	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68d2      	ldr	r2, [r2, #12]
 8003d2e:	4311      	orrs	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6912      	ldr	r2, [r2, #16]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	7d09      	ldrb	r1, [r1, #20]
 8003d3a:	2901      	cmp	r1, #1
 8003d3c:	d102      	bne.n	8003d44 <HAL_OPAMP_Init+0x124>
 8003d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d42:	e000      	b.n	8003d46 <HAL_OPAMP_Init+0x126>
 8003d44:	2100      	movs	r1, #0
 8003d46:	4311      	orrs	r1, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d4c:	4311      	orrs	r1, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d52:	4311      	orrs	r1, r2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d58:	04d2      	lsls	r2, r2, #19
 8003d5a:	4311      	orrs	r1, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d60:	0612      	lsls	r2, r2, #24
 8003d62:	4311      	orrs	r1, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	db10      	blt.n	8003d98 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	e0003e11 	.word	0xe0003e11

08003dc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d141      	bne.n	8003e52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dce:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dda:	d131      	bne.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ddc:	4b47      	ldr	r3, [pc, #284]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de2:	4a46      	ldr	r2, [pc, #280]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dec:	4b43      	ldr	r3, [pc, #268]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003df4:	4a41      	ldr	r2, [pc, #260]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dfc:	4b40      	ldr	r3, [pc, #256]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2232      	movs	r2, #50	; 0x32
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	0c9b      	lsrs	r3, r3, #18
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e12:	e002      	b.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e1a:	4b38      	ldr	r3, [pc, #224]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d102      	bne.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f2      	bne.n	8003e14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e2e:	4b33      	ldr	r3, [pc, #204]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3a:	d158      	bne.n	8003eee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e057      	b.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e40:	4b2e      	ldr	r3, [pc, #184]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e46:	4a2d      	ldr	r2, [pc, #180]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e50:	e04d      	b.n	8003eee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e58:	d141      	bne.n	8003ede <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5a:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e66:	d131      	bne.n	8003ecc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e68:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e6e:	4a23      	ldr	r2, [pc, #140]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e78:	4b20      	ldr	r3, [pc, #128]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e80:	4a1e      	ldr	r2, [pc, #120]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2232      	movs	r2, #50	; 0x32
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	0c9b      	lsrs	r3, r3, #18
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e9e:	e002      	b.n	8003ea6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d102      	bne.n	8003eba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f2      	bne.n	8003ea0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec6:	d112      	bne.n	8003eee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e011      	b.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003edc:	e007      	b.n	8003eee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ee6:	4a05      	ldr	r2, [pc, #20]	; (8003efc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	40007000 	.word	0x40007000
 8003f00:	20000000 	.word	0x20000000
 8003f04:	431bde83 	.word	0x431bde83

08003f08 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003f10:	f7fe f8bc 	bl	800208c <HAL_GetTick>
 8003f14:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e069      	b.n	8003ff4 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10b      	bne.n	8003f44 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7fd fd3f 	bl	80019b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003f3a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f85e 	bl	8004000 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	021a      	lsls	r2, r3, #8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	2120      	movs	r1, #32
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f856 	bl	800401c <QSPI_WaitFlagStateUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003f74:	7afb      	ldrb	r3, [r7, #11]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d137      	bne.n	8003fea <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f84:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6852      	ldr	r2, [r2, #4]
 8003f8c:	0611      	lsls	r1, r2, #24
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68d2      	ldr	r2, [r2, #12]
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	69d2      	ldr	r2, [r2, #28]
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6a12      	ldr	r2, [r2, #32]
 8003f9e:	4311      	orrs	r1, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_QSPI_Init+0xf4>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6912      	ldr	r2, [r2, #16]
 8003fb6:	0411      	lsls	r1, r2, #16
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6952      	ldr	r2, [r2, #20]
 8003fbc:	4311      	orrs	r1, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6992      	ldr	r2, [r2, #24]
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	ffe0f8fe 	.word	0xffe0f8fe

08004000 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800402c:	e01a      	b.n	8004064 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004034:	d016      	beq.n	8004064 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004036:	f7fe f829 	bl	800208c <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	429a      	cmp	r2, r3
 8004044:	d302      	bcc.n	800404c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2204      	movs	r2, #4
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e00e      	b.n	8004082 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4013      	ands	r3, r2
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d1d6      	bne.n	800402e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e2fe      	b.n	800469c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d075      	beq.n	8004196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040aa:	4b97      	ldr	r3, [pc, #604]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b4:	4b94      	ldr	r3, [pc, #592]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b0c      	cmp	r3, #12
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_OscConfig+0x3e>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d002      	beq.n	80040d0 <HAL_RCC_OscConfig+0x44>
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d10b      	bne.n	80040e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	4b8d      	ldr	r3, [pc, #564]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d05b      	beq.n	8004194 <HAL_RCC_OscConfig+0x108>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d157      	bne.n	8004194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e2d9      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d106      	bne.n	8004100 <HAL_RCC_OscConfig+0x74>
 80040f2:	4b85      	ldr	r3, [pc, #532]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a84      	ldr	r2, [pc, #528]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e01d      	b.n	800413c <HAL_RCC_OscConfig+0xb0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x98>
 800410a:	4b7f      	ldr	r3, [pc, #508]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a7e      	ldr	r2, [pc, #504]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b7c      	ldr	r3, [pc, #496]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a7b      	ldr	r2, [pc, #492]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0xb0>
 8004124:	4b78      	ldr	r3, [pc, #480]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a77      	ldr	r2, [pc, #476]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 800412a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b75      	ldr	r3, [pc, #468]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a74      	ldr	r2, [pc, #464]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d013      	beq.n	800416c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fd ffa2 	bl	800208c <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800414c:	f7fd ff9e 	bl	800208c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e29e      	b.n	800469c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800415e:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0xc0>
 800416a:	e014      	b.n	8004196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd ff8e 	bl	800208c <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004174:	f7fd ff8a 	bl	800208c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	; 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e28a      	b.n	800469c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004186:	4b60      	ldr	r3, [pc, #384]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0xe8>
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d075      	beq.n	800428e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a2:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ac:	4b56      	ldr	r3, [pc, #344]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	d102      	bne.n	80041c2 <HAL_RCC_OscConfig+0x136>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d002      	beq.n	80041c8 <HAL_RCC_OscConfig+0x13c>
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d11f      	bne.n	8004208 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c8:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_OscConfig+0x154>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e25d      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e0:	4b49      	ldr	r3, [pc, #292]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	4946      	ldr	r1, [pc, #280]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041f4:	4b45      	ldr	r3, [pc, #276]	; (800430c <HAL_RCC_OscConfig+0x280>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fd fe49 	bl	8001e90 <HAL_InitTick>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d043      	beq.n	800428c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e249      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	4b3d      	ldr	r3, [pc, #244]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a3c      	ldr	r2, [pc, #240]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fd ff36 	bl	800208c <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004224:	f7fd ff32 	bl	800208c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e232      	b.n	800469c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004236:	4b34      	ldr	r3, [pc, #208]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	061b      	lsls	r3, r3, #24
 8004250:	492d      	ldr	r1, [pc, #180]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
 8004256:	e01a      	b.n	800428e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004258:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 800425e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd ff12 	bl	800208c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426c:	f7fd ff0e 	bl	800208c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e20e      	b.n	800469c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800427e:	4b22      	ldr	r3, [pc, #136]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x1e0>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800428c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d041      	beq.n	800431e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01c      	beq.n	80042dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a2:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a8:	4a17      	ldr	r2, [pc, #92]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b2:	f7fd feeb 	bl	800208c <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ba:	f7fd fee7 	bl	800208c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e1e7      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0ef      	beq.n	80042ba <HAL_RCC_OscConfig+0x22e>
 80042da:	e020      	b.n	800431e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80042de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <HAL_RCC_OscConfig+0x27c>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fd fece 	bl	800208c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042f2:	e00d      	b.n	8004310 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f4:	f7fd feca 	bl	800208c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d906      	bls.n	8004310 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e1ca      	b.n	800469c <HAL_RCC_OscConfig+0x610>
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004310:	4b8c      	ldr	r3, [pc, #560]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1ea      	bne.n	80042f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80a6 	beq.w	8004478 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432c:	2300      	movs	r3, #0
 800432e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004330:	4b84      	ldr	r3, [pc, #528]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_OscConfig+0x2b4>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x2b6>
 8004340:	2300      	movs	r3, #0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	4b7f      	ldr	r3, [pc, #508]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	4a7e      	ldr	r2, [pc, #504]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004350:	6593      	str	r3, [r2, #88]	; 0x58
 8004352:	4b7c      	ldr	r3, [pc, #496]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800435e:	2301      	movs	r3, #1
 8004360:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004362:	4b79      	ldr	r3, [pc, #484]	; (8004548 <HAL_RCC_OscConfig+0x4bc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d118      	bne.n	80043a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800436e:	4b76      	ldr	r3, [pc, #472]	; (8004548 <HAL_RCC_OscConfig+0x4bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a75      	ldr	r2, [pc, #468]	; (8004548 <HAL_RCC_OscConfig+0x4bc>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437a:	f7fd fe87 	bl	800208c <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004382:	f7fd fe83 	bl	800208c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e183      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004394:	4b6c      	ldr	r3, [pc, #432]	; (8004548 <HAL_RCC_OscConfig+0x4bc>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d108      	bne.n	80043ba <HAL_RCC_OscConfig+0x32e>
 80043a8:	4b66      	ldr	r3, [pc, #408]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	4a65      	ldr	r2, [pc, #404]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b8:	e024      	b.n	8004404 <HAL_RCC_OscConfig+0x378>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d110      	bne.n	80043e4 <HAL_RCC_OscConfig+0x358>
 80043c2:	4b60      	ldr	r3, [pc, #384]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	4a5e      	ldr	r2, [pc, #376]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80043ca:	f043 0304 	orr.w	r3, r3, #4
 80043ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d2:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	4a5a      	ldr	r2, [pc, #360]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043e2:	e00f      	b.n	8004404 <HAL_RCC_OscConfig+0x378>
 80043e4:	4b57      	ldr	r3, [pc, #348]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	4a56      	ldr	r2, [pc, #344]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043f4:	4b53      	ldr	r3, [pc, #332]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	4a52      	ldr	r2, [pc, #328]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80043fc:	f023 0304 	bic.w	r3, r3, #4
 8004400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d016      	beq.n	800443a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fd fe3e 	bl	800208c <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004412:	e00a      	b.n	800442a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004414:	f7fd fe3a 	bl	800208c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e138      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442a:	4b46      	ldr	r3, [pc, #280]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ed      	beq.n	8004414 <HAL_RCC_OscConfig+0x388>
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fd fe27 	bl	800208c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fd fe23 	bl	800208c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e121      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004458:	4b3a      	ldr	r3, [pc, #232]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1ed      	bne.n	8004442 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004466:	7ffb      	ldrb	r3, [r7, #31]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d105      	bne.n	8004478 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446c:	4b35      	ldr	r3, [pc, #212]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	4a34      	ldr	r2, [pc, #208]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 8004472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004476:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d03c      	beq.n	80044fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01c      	beq.n	80044c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800448c:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 800448e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004492:	4a2c      	ldr	r2, [pc, #176]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449c:	f7fd fdf6 	bl	800208c <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044a4:	f7fd fdf2 	bl	800208c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e0f2      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80044b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ef      	beq.n	80044a4 <HAL_RCC_OscConfig+0x418>
 80044c4:	e01b      	b.n	80044fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044c6:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80044c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044cc:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d6:	f7fd fdd9 	bl	800208c <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044de:	f7fd fdd5 	bl	800208c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e0d5      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ef      	bne.n	80044de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80c9 	beq.w	800469a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004508:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b0c      	cmp	r3, #12
 8004512:	f000 8083 	beq.w	800461c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d15e      	bne.n	80045dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_RCC_OscConfig+0x4b8>)
 8004524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452a:	f7fd fdaf 	bl	800208c <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004530:	e00c      	b.n	800454c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004532:	f7fd fdab 	bl	800208c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d905      	bls.n	800454c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e0ab      	b.n	800469c <HAL_RCC_OscConfig+0x610>
 8004544:	40021000 	.word	0x40021000
 8004548:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800454c:	4b55      	ldr	r3, [pc, #340]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ec      	bne.n	8004532 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004558:	4b52      	ldr	r3, [pc, #328]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	4b52      	ldr	r3, [pc, #328]	; (80046a8 <HAL_RCC_OscConfig+0x61c>)
 800455e:	4013      	ands	r3, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6a11      	ldr	r1, [r2, #32]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004568:	3a01      	subs	r2, #1
 800456a:	0112      	lsls	r2, r2, #4
 800456c:	4311      	orrs	r1, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004572:	0212      	lsls	r2, r2, #8
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	3a01      	subs	r2, #1
 800457e:	0552      	lsls	r2, r2, #21
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004586:	0852      	lsrs	r2, r2, #1
 8004588:	3a01      	subs	r2, #1
 800458a:	0652      	lsls	r2, r2, #25
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004592:	06d2      	lsls	r2, r2, #27
 8004594:	430a      	orrs	r2, r1
 8004596:	4943      	ldr	r1, [pc, #268]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 8004598:	4313      	orrs	r3, r2
 800459a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459c:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a40      	ldr	r2, [pc, #256]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 80045a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045a8:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a3d      	ldr	r2, [pc, #244]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fd fd6a 	bl	800208c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fd fd66 	bl	800208c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e066      	b.n	800469c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ce:	4b35      	ldr	r3, [pc, #212]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x530>
 80045da:	e05e      	b.n	800469a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a30      	ldr	r2, [pc, #192]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd fd50 	bl	800208c <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fd fd4c 	bl	800208c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e04c      	b.n	800469c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004602:	4b28      	ldr	r3, [pc, #160]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800460e:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	4924      	ldr	r1, [pc, #144]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 8004614:	4b25      	ldr	r3, [pc, #148]	; (80046ac <HAL_RCC_OscConfig+0x620>)
 8004616:	4013      	ands	r3, r2
 8004618:	60cb      	str	r3, [r1, #12]
 800461a:	e03e      	b.n	800469a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e039      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004628:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_RCC_OscConfig+0x618>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0203 	and.w	r2, r3, #3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	429a      	cmp	r2, r3
 800463a:	d12c      	bne.n	8004696 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	3b01      	subs	r3, #1
 8004648:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d123      	bne.n	8004696 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d11b      	bne.n	8004696 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d113      	bne.n	8004696 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	085b      	lsrs	r3, r3, #1
 800467a:	3b01      	subs	r3, #1
 800467c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d109      	bne.n	8004696 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	3b01      	subs	r3, #1
 8004690:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d001      	beq.n	800469a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3720      	adds	r7, #32
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	019f800c 	.word	0x019f800c
 80046ac:	feeefffc 	.word	0xfeeefffc

080046b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e11e      	b.n	8004906 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046c8:	4b91      	ldr	r3, [pc, #580]	; (8004910 <HAL_RCC_ClockConfig+0x260>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d910      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b8e      	ldr	r3, [pc, #568]	; (8004910 <HAL_RCC_ClockConfig+0x260>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 020f 	bic.w	r2, r3, #15
 80046de:	498c      	ldr	r1, [pc, #560]	; (8004910 <HAL_RCC_ClockConfig+0x260>)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b8a      	ldr	r3, [pc, #552]	; (8004910 <HAL_RCC_ClockConfig+0x260>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e106      	b.n	8004906 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d073      	beq.n	80047ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d129      	bne.n	8004760 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470c:	4b81      	ldr	r3, [pc, #516]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0f4      	b.n	8004906 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800471c:	f000 f9fa 	bl	8004b14 <RCC_GetSysClockFreqFromPLLSource>
 8004720:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4a7c      	ldr	r2, [pc, #496]	; (8004918 <HAL_RCC_ClockConfig+0x268>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d93f      	bls.n	80047aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800472a:	4b7a      	ldr	r3, [pc, #488]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800473e:	2b00      	cmp	r3, #0
 8004740:	d033      	beq.n	80047aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004746:	2b00      	cmp	r3, #0
 8004748:	d12f      	bne.n	80047aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800474a:	4b72      	ldr	r3, [pc, #456]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004752:	4a70      	ldr	r2, [pc, #448]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 8004754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004758:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	e024      	b.n	80047aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d107      	bne.n	8004778 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004768:	4b6a      	ldr	r3, [pc, #424]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d109      	bne.n	8004788 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0c6      	b.n	8004906 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004778:	4b66      	ldr	r3, [pc, #408]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0be      	b.n	8004906 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004788:	f000 f8ce 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 800478c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4a61      	ldr	r2, [pc, #388]	; (8004918 <HAL_RCC_ClockConfig+0x268>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d909      	bls.n	80047aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004796:	4b5f      	ldr	r3, [pc, #380]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800479e:	4a5d      	ldr	r2, [pc, #372]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 80047a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047aa:	4b5a      	ldr	r3, [pc, #360]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f023 0203 	bic.w	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4957      	ldr	r1, [pc, #348]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047bc:	f7fd fc66 	bl	800208c <HAL_GetTick>
 80047c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	e00a      	b.n	80047da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c4:	f7fd fc62 	bl	800208c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e095      	b.n	8004906 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	4b4e      	ldr	r3, [pc, #312]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 020c 	and.w	r2, r3, #12
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d1eb      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d023      	beq.n	8004840 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004804:	4b43      	ldr	r3, [pc, #268]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a42      	ldr	r2, [pc, #264]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 800480a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800480e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800481c:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004824:	4a3b      	ldr	r2, [pc, #236]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 8004826:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800482a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800482c:	4b39      	ldr	r3, [pc, #228]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4936      	ldr	r1, [pc, #216]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
 800483e:	e008      	b.n	8004852 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d105      	bne.n	8004852 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004846:	4b33      	ldr	r3, [pc, #204]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	4a32      	ldr	r2, [pc, #200]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 800484c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004850:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004852:	4b2f      	ldr	r3, [pc, #188]	; (8004910 <HAL_RCC_ClockConfig+0x260>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d21d      	bcs.n	800489c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004860:	4b2b      	ldr	r3, [pc, #172]	; (8004910 <HAL_RCC_ClockConfig+0x260>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 020f 	bic.w	r2, r3, #15
 8004868:	4929      	ldr	r1, [pc, #164]	; (8004910 <HAL_RCC_ClockConfig+0x260>)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004870:	f7fd fc0c 	bl	800208c <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	e00a      	b.n	800488e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004878:	f7fd fc08 	bl	800208c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	; 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e03b      	b.n	8004906 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_RCC_ClockConfig+0x260>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d1ed      	bne.n	8004878 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a8:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4917      	ldr	r1, [pc, #92]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048c6:	4b13      	ldr	r3, [pc, #76]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	490f      	ldr	r1, [pc, #60]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048da:	f000 f825 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80048de:	4602      	mov	r2, r0
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <HAL_RCC_ClockConfig+0x264>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	490c      	ldr	r1, [pc, #48]	; (800491c <HAL_RCC_ClockConfig+0x26c>)
 80048ec:	5ccb      	ldrb	r3, [r1, r3]
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <HAL_RCC_ClockConfig+0x270>)
 80048f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_RCC_ClockConfig+0x274>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fac6 	bl	8001e90 <HAL_InitTick>
 8004904:	4603      	mov	r3, r0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40022000 	.word	0x40022000
 8004914:	40021000 	.word	0x40021000
 8004918:	04c4b400 	.word	0x04c4b400
 800491c:	08009bf0 	.word	0x08009bf0
 8004920:	20000000 	.word	0x20000000
 8004924:	20000004 	.word	0x20000004

08004928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800492e:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b04      	cmp	r3, #4
 8004938:	d102      	bne.n	8004940 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800493a:	4b2a      	ldr	r3, [pc, #168]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	e047      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004940:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 030c 	and.w	r3, r3, #12
 8004948:	2b08      	cmp	r3, #8
 800494a:	d102      	bne.n	8004952 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e03e      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004952:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d136      	bne.n	80049cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800495e:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	3301      	adds	r3, #1
 8004974:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b03      	cmp	r3, #3
 800497a:	d10c      	bne.n	8004996 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800497c:	4a19      	ldr	r2, [pc, #100]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004986:	68d2      	ldr	r2, [r2, #12]
 8004988:	0a12      	lsrs	r2, r2, #8
 800498a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	617b      	str	r3, [r7, #20]
      break;
 8004994:	e00c      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004996:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a0:	68d2      	ldr	r2, [r2, #12]
 80049a2:	0a12      	lsrs	r2, r2, #8
 80049a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049a8:	fb02 f303 	mul.w	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]
      break;
 80049ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	0e5b      	lsrs	r3, r3, #25
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	3301      	adds	r3, #1
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	e001      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049d0:	693b      	ldr	r3, [r7, #16]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
 80049e4:	00f42400 	.word	0x00f42400

080049e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ec:	4b03      	ldr	r3, [pc, #12]	; (80049fc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000000 	.word	0x20000000

08004a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a04:	f7ff fff0 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4904      	ldr	r1, [pc, #16]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000
 8004a28:	08009c00 	.word	0x08009c00

08004a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a30:	f7ff ffda 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	0adb      	lsrs	r3, r3, #11
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	4904      	ldr	r1, [pc, #16]	; (8004a54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000
 8004a54:	08009c00 	.word	0x08009c00

08004a58 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	220f      	movs	r2, #15
 8004a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0203 	and.w	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	08db      	lsrs	r3, r3, #3
 8004a92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <HAL_RCC_GetClockConfig+0x60>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 020f 	and.w	r2, r3, #15
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	601a      	str	r2, [r3, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40022000 	.word	0x40022000

08004abc <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_EnableCSS+0x1c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a04      	ldr	r2, [pc, #16]	; (8004ad8 <HAL_RCC_EnableCSS+0x1c>)
 8004ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aca:	6013      	str	r3, [r2, #0]
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000

08004adc <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aec:	d105      	bne.n	8004afa <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004aee:	f000 f809 	bl	8004b04 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004af2:	4b03      	ldr	r3, [pc, #12]	; (8004b00 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004af8:	621a      	str	r2, [r3, #32]
  }
}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40021000 	.word	0x40021000

08004b04 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b24:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	3301      	adds	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d10c      	bne.n	8004b52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b38:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b42:	68d2      	ldr	r2, [r2, #12]
 8004b44:	0a12      	lsrs	r2, r2, #8
 8004b46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	617b      	str	r3, [r7, #20]
    break;
 8004b50:	e00c      	b.n	8004b6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b52:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b5c:	68d2      	ldr	r2, [r2, #12]
 8004b5e:	0a12      	lsrs	r2, r2, #8
 8004b60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
    break;
 8004b6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	0e5b      	lsrs	r3, r3, #25
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	3301      	adds	r3, #1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b86:	687b      	ldr	r3, [r7, #4]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40021000 	.word	0x40021000
 8004b98:	00f42400 	.word	0x00f42400

08004b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ba8:	2300      	movs	r3, #0
 8004baa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8098 	beq.w	8004cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbe:	4b43      	ldr	r3, [pc, #268]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10d      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4b40      	ldr	r3, [pc, #256]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	4a3f      	ldr	r2, [pc, #252]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd6:	4b3d      	ldr	r3, [pc, #244]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004be6:	4b3a      	ldr	r3, [pc, #232]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a39      	ldr	r2, [pc, #228]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bf2:	f7fd fa4b 	bl	800208c <HAL_GetTick>
 8004bf6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bf8:	e009      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfa:	f7fd fa47 	bl	800208c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d902      	bls.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c0c:	e005      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c0e:	4b30      	ldr	r3, [pc, #192]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0ef      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d159      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01e      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d019      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c3c:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c58:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c68:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d016      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fd fa07 	bl	800208c <HAL_GetTick>
 8004c7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c80:	e00b      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c82:	f7fd fa03 	bl	800208c <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d902      	bls.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	74fb      	strb	r3, [r7, #19]
            break;
 8004c98:	e006      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0ec      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ca8:	7cfb      	ldrb	r3, [r7, #19]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10b      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cae:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	4903      	ldr	r1, [pc, #12]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
 8004cc8:	74bb      	strb	r3, [r7, #18]
 8004cca:	e005      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cd8:	7c7b      	ldrb	r3, [r7, #17]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d105      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cde:	4ba7      	ldr	r3, [pc, #668]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce2:	4aa6      	ldr	r2, [pc, #664]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cf6:	4ba1      	ldr	r3, [pc, #644]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f023 0203 	bic.w	r2, r3, #3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	499d      	ldr	r1, [pc, #628]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d18:	4b98      	ldr	r3, [pc, #608]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f023 020c 	bic.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	4995      	ldr	r1, [pc, #596]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d3a:	4b90      	ldr	r3, [pc, #576]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	498c      	ldr	r1, [pc, #560]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d5c:	4b87      	ldr	r3, [pc, #540]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	4984      	ldr	r1, [pc, #528]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d7e:	4b7f      	ldr	r3, [pc, #508]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	497b      	ldr	r1, [pc, #492]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004da0:	4b76      	ldr	r3, [pc, #472]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	4973      	ldr	r1, [pc, #460]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dc2:	4b6e      	ldr	r3, [pc, #440]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	496a      	ldr	r1, [pc, #424]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004de4:	4b65      	ldr	r3, [pc, #404]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	4962      	ldr	r1, [pc, #392]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e06:	4b5d      	ldr	r3, [pc, #372]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	4959      	ldr	r1, [pc, #356]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e28:	4b54      	ldr	r3, [pc, #336]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e2e:	f023 0203 	bic.w	r2, r3, #3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	4951      	ldr	r1, [pc, #324]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e4a:	4b4c      	ldr	r3, [pc, #304]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	4948      	ldr	r1, [pc, #288]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d015      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e6c:	4b43      	ldr	r3, [pc, #268]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	4940      	ldr	r1, [pc, #256]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8a:	d105      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8c:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a3a      	ldr	r2, [pc, #232]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d015      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ea4:	4b35      	ldr	r3, [pc, #212]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb2:	4932      	ldr	r1, [pc, #200]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ece:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d015      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004edc:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	4924      	ldr	r1, [pc, #144]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004efa:	d105      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004efc:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d015      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	4916      	ldr	r1, [pc, #88]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f32:	d105      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f34:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a10      	ldr	r2, [pc, #64]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d019      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	4908      	ldr	r1, [pc, #32]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f6a:	d109      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a02      	ldr	r2, [pc, #8]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f76:	60d3      	str	r3, [r2, #12]
 8004f78:	e002      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f8c:	4b29      	ldr	r3, [pc, #164]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	4926      	ldr	r1, [pc, #152]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fac:	4b21      	ldr	r3, [pc, #132]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a20      	ldr	r2, [pc, #128]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd2:	4918      	ldr	r1, [pc, #96]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fe4:	4b13      	ldr	r3, [pc, #76]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a12      	ldr	r2, [pc, #72]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500a:	490a      	ldr	r1, [pc, #40]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501c:	4b05      	ldr	r3, [pc, #20]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a04      	ldr	r2, [pc, #16]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005026:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005028:	7cbb      	ldrb	r3, [r7, #18]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000

08005038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e09d      	b.n	8005186 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505a:	d009      	beq.n	8005070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	61da      	str	r2, [r3, #28]
 8005062:	e005      	b.n	8005070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc fd2c 	bl	8001ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050b0:	d902      	bls.n	80050b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e002      	b.n	80050be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050c6:	d007      	beq.n	80050d8 <HAL_SPI_Init+0xa0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511a:	ea42 0103 	orr.w	r1, r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	0c1b      	lsrs	r3, r3, #16
 8005134:	f003 0204 	and.w	r2, r3, #4
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005154:	ea42 0103 	orr.w	r1, r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005174:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e049      	b.n	8005234 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f841 	bl	800523c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3304      	adds	r3, #4
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f000 fa2f 	bl	8005630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d001      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e054      	b.n	8005312 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <HAL_TIM_Base_Start_IT+0xd0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d022      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d01d      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <HAL_TIM_Base_Start_IT+0xd4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d018      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a21      	ldr	r2, [pc, #132]	; (8005328 <HAL_TIM_Base_Start_IT+0xd8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <HAL_TIM_Base_Start_IT+0xdc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <HAL_TIM_Base_Start_IT+0xe0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <HAL_TIM_Base_Start_IT+0xe4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <HAL_TIM_Base_Start_IT+0xe8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d115      	bne.n	80052fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	4b19      	ldr	r3, [pc, #100]	; (800533c <HAL_TIM_Base_Start_IT+0xec>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d015      	beq.n	800530e <HAL_TIM_Base_Start_IT+0xbe>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d011      	beq.n	800530e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fa:	e008      	b.n	800530e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e000      	b.n	8005310 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40013400 	.word	0x40013400
 8005334:	40014000 	.word	0x40014000
 8005338:	40015000 	.word	0x40015000
 800533c:	00010007 	.word	0x00010007

08005340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d020      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01b      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0202 	mvn.w	r2, #2
 8005374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f931 	bl	80055f2 <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f923 	bl	80055de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f934 	bl	8005606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d020      	beq.n	80053f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01b      	beq.n	80053f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0204 	mvn.w	r2, #4
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f90b 	bl	80055f2 <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f8fd 	bl	80055de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f90e 	bl	8005606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d020      	beq.n	800543c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01b      	beq.n	800543c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0208 	mvn.w	r2, #8
 800540c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2204      	movs	r2, #4
 8005412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8e5 	bl	80055f2 <HAL_TIM_IC_CaptureCallback>
 8005428:	e005      	b.n	8005436 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f8d7 	bl	80055de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f8e8 	bl	8005606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b00      	cmp	r3, #0
 8005444:	d020      	beq.n	8005488 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01b      	beq.n	8005488 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0210 	mvn.w	r2, #16
 8005458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2208      	movs	r2, #8
 800545e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f8bf 	bl	80055f2 <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8b1 	bl	80055de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f8c2 	bl	8005606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0201 	mvn.w	r2, #1
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fb ff1c 	bl	80012e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f969 	bl	80057ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00c      	beq.n	80054fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f961 	bl	80057c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00c      	beq.n	8005522 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800551a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f87c 	bl	800561a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00c      	beq.n	8005546 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f06f 0220 	mvn.w	r2, #32
 800553e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f929 	bl	8005798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00c      	beq.n	800556a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d007      	beq.n	800556a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f935 	bl	80057d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00c      	beq.n	800558e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f92d 	bl	80057e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00c      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80055aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f925 	bl	80057fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00c      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80055ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f91d 	bl	8005810 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d6:	bf00      	nop
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a4c      	ldr	r2, [pc, #304]	; (8005774 <TIM_Base_SetConfig+0x144>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d017      	beq.n	8005678 <TIM_Base_SetConfig+0x48>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564e:	d013      	beq.n	8005678 <TIM_Base_SetConfig+0x48>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a49      	ldr	r2, [pc, #292]	; (8005778 <TIM_Base_SetConfig+0x148>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00f      	beq.n	8005678 <TIM_Base_SetConfig+0x48>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a48      	ldr	r2, [pc, #288]	; (800577c <TIM_Base_SetConfig+0x14c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00b      	beq.n	8005678 <TIM_Base_SetConfig+0x48>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a47      	ldr	r2, [pc, #284]	; (8005780 <TIM_Base_SetConfig+0x150>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_Base_SetConfig+0x48>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a46      	ldr	r2, [pc, #280]	; (8005784 <TIM_Base_SetConfig+0x154>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0x48>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a45      	ldr	r2, [pc, #276]	; (8005788 <TIM_Base_SetConfig+0x158>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d108      	bne.n	800568a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a39      	ldr	r2, [pc, #228]	; (8005774 <TIM_Base_SetConfig+0x144>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d023      	beq.n	80056da <TIM_Base_SetConfig+0xaa>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005698:	d01f      	beq.n	80056da <TIM_Base_SetConfig+0xaa>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a36      	ldr	r2, [pc, #216]	; (8005778 <TIM_Base_SetConfig+0x148>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01b      	beq.n	80056da <TIM_Base_SetConfig+0xaa>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a35      	ldr	r2, [pc, #212]	; (800577c <TIM_Base_SetConfig+0x14c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d017      	beq.n	80056da <TIM_Base_SetConfig+0xaa>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a34      	ldr	r2, [pc, #208]	; (8005780 <TIM_Base_SetConfig+0x150>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <TIM_Base_SetConfig+0xaa>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a33      	ldr	r2, [pc, #204]	; (8005784 <TIM_Base_SetConfig+0x154>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00f      	beq.n	80056da <TIM_Base_SetConfig+0xaa>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a33      	ldr	r2, [pc, #204]	; (800578c <TIM_Base_SetConfig+0x15c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00b      	beq.n	80056da <TIM_Base_SetConfig+0xaa>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a32      	ldr	r2, [pc, #200]	; (8005790 <TIM_Base_SetConfig+0x160>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_Base_SetConfig+0xaa>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a31      	ldr	r2, [pc, #196]	; (8005794 <TIM_Base_SetConfig+0x164>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_Base_SetConfig+0xaa>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2c      	ldr	r2, [pc, #176]	; (8005788 <TIM_Base_SetConfig+0x158>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d108      	bne.n	80056ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a18      	ldr	r2, [pc, #96]	; (8005774 <TIM_Base_SetConfig+0x144>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d013      	beq.n	8005740 <TIM_Base_SetConfig+0x110>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <TIM_Base_SetConfig+0x154>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00f      	beq.n	8005740 <TIM_Base_SetConfig+0x110>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a1a      	ldr	r2, [pc, #104]	; (800578c <TIM_Base_SetConfig+0x15c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00b      	beq.n	8005740 <TIM_Base_SetConfig+0x110>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a19      	ldr	r2, [pc, #100]	; (8005790 <TIM_Base_SetConfig+0x160>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_Base_SetConfig+0x110>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a18      	ldr	r2, [pc, #96]	; (8005794 <TIM_Base_SetConfig+0x164>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0x110>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a13      	ldr	r2, [pc, #76]	; (8005788 <TIM_Base_SetConfig+0x158>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d103      	bne.n	8005748 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b01      	cmp	r3, #1
 8005758:	d105      	bne.n	8005766 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	611a      	str	r2, [r3, #16]
  }
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40015000 	.word	0x40015000
 800578c:	40014000 	.word	0x40014000
 8005790:	40014400 	.word	0x40014400
 8005794:	40014800 	.word	0x40014800

08005798 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e042      	b.n	80058bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7fc fa31 	bl	8001cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2224      	movs	r2, #36	; 0x24
 8005852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fb24 	bl	8005ebc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f825 	bl	80058c4 <UART_SetConfig>
 800587a:	4603      	mov	r3, r0
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e01b      	b.n	80058bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fba3 	bl	8006000 <UART_CheckIdleState>
 80058ba:	4603      	mov	r3, r0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c8:	b08c      	sub	sp, #48	; 0x30
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	431a      	orrs	r2, r3
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4baa      	ldr	r3, [pc, #680]	; (8005b9c <UART_SetConfig+0x2d8>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a9f      	ldr	r2, [pc, #636]	; (8005ba0 <UART_SetConfig+0x2dc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800592c:	4313      	orrs	r3, r2
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800593a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005944:	430b      	orrs	r3, r1
 8005946:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	f023 010f 	bic.w	r1, r3, #15
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a90      	ldr	r2, [pc, #576]	; (8005ba4 <UART_SetConfig+0x2e0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d125      	bne.n	80059b4 <UART_SetConfig+0xf0>
 8005968:	4b8f      	ldr	r3, [pc, #572]	; (8005ba8 <UART_SetConfig+0x2e4>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b03      	cmp	r3, #3
 8005974:	d81a      	bhi.n	80059ac <UART_SetConfig+0xe8>
 8005976:	a201      	add	r2, pc, #4	; (adr r2, 800597c <UART_SetConfig+0xb8>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	0800598d 	.word	0x0800598d
 8005980:	0800599d 	.word	0x0800599d
 8005984:	08005995 	.word	0x08005995
 8005988:	080059a5 	.word	0x080059a5
 800598c:	2301      	movs	r3, #1
 800598e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005992:	e116      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005994:	2302      	movs	r3, #2
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599a:	e112      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 800599c:	2304      	movs	r3, #4
 800599e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a2:	e10e      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 80059a4:	2308      	movs	r3, #8
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059aa:	e10a      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 80059ac:	2310      	movs	r3, #16
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b2:	e106      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a7c      	ldr	r2, [pc, #496]	; (8005bac <UART_SetConfig+0x2e8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d138      	bne.n	8005a30 <UART_SetConfig+0x16c>
 80059be:	4b7a      	ldr	r3, [pc, #488]	; (8005ba8 <UART_SetConfig+0x2e4>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f003 030c 	and.w	r3, r3, #12
 80059c8:	2b0c      	cmp	r3, #12
 80059ca:	d82d      	bhi.n	8005a28 <UART_SetConfig+0x164>
 80059cc:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <UART_SetConfig+0x110>)
 80059ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d2:	bf00      	nop
 80059d4:	08005a09 	.word	0x08005a09
 80059d8:	08005a29 	.word	0x08005a29
 80059dc:	08005a29 	.word	0x08005a29
 80059e0:	08005a29 	.word	0x08005a29
 80059e4:	08005a19 	.word	0x08005a19
 80059e8:	08005a29 	.word	0x08005a29
 80059ec:	08005a29 	.word	0x08005a29
 80059f0:	08005a29 	.word	0x08005a29
 80059f4:	08005a11 	.word	0x08005a11
 80059f8:	08005a29 	.word	0x08005a29
 80059fc:	08005a29 	.word	0x08005a29
 8005a00:	08005a29 	.word	0x08005a29
 8005a04:	08005a21 	.word	0x08005a21
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a0e:	e0d8      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005a10:	2302      	movs	r3, #2
 8005a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a16:	e0d4      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1e:	e0d0      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a26:	e0cc      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2e:	e0c8      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a5e      	ldr	r2, [pc, #376]	; (8005bb0 <UART_SetConfig+0x2ec>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d125      	bne.n	8005a86 <UART_SetConfig+0x1c2>
 8005a3a:	4b5b      	ldr	r3, [pc, #364]	; (8005ba8 <UART_SetConfig+0x2e4>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a44:	2b30      	cmp	r3, #48	; 0x30
 8005a46:	d016      	beq.n	8005a76 <UART_SetConfig+0x1b2>
 8005a48:	2b30      	cmp	r3, #48	; 0x30
 8005a4a:	d818      	bhi.n	8005a7e <UART_SetConfig+0x1ba>
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d00a      	beq.n	8005a66 <UART_SetConfig+0x1a2>
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d814      	bhi.n	8005a7e <UART_SetConfig+0x1ba>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <UART_SetConfig+0x19a>
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d008      	beq.n	8005a6e <UART_SetConfig+0x1aa>
 8005a5c:	e00f      	b.n	8005a7e <UART_SetConfig+0x1ba>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a64:	e0ad      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005a66:	2302      	movs	r3, #2
 8005a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6c:	e0a9      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005a6e:	2304      	movs	r3, #4
 8005a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a74:	e0a5      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005a76:	2308      	movs	r3, #8
 8005a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7c:	e0a1      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005a7e:	2310      	movs	r3, #16
 8005a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a84:	e09d      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a4a      	ldr	r2, [pc, #296]	; (8005bb4 <UART_SetConfig+0x2f0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d125      	bne.n	8005adc <UART_SetConfig+0x218>
 8005a90:	4b45      	ldr	r3, [pc, #276]	; (8005ba8 <UART_SetConfig+0x2e4>)
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a9c:	d016      	beq.n	8005acc <UART_SetConfig+0x208>
 8005a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa0:	d818      	bhi.n	8005ad4 <UART_SetConfig+0x210>
 8005aa2:	2b80      	cmp	r3, #128	; 0x80
 8005aa4:	d00a      	beq.n	8005abc <UART_SetConfig+0x1f8>
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d814      	bhi.n	8005ad4 <UART_SetConfig+0x210>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <UART_SetConfig+0x1f0>
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d008      	beq.n	8005ac4 <UART_SetConfig+0x200>
 8005ab2:	e00f      	b.n	8005ad4 <UART_SetConfig+0x210>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aba:	e082      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005abc:	2302      	movs	r3, #2
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac2:	e07e      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aca:	e07a      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005acc:	2308      	movs	r3, #8
 8005ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ad2:	e076      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ada:	e072      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a35      	ldr	r2, [pc, #212]	; (8005bb8 <UART_SetConfig+0x2f4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d12a      	bne.n	8005b3c <UART_SetConfig+0x278>
 8005ae6:	4b30      	ldr	r3, [pc, #192]	; (8005ba8 <UART_SetConfig+0x2e4>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af4:	d01a      	beq.n	8005b2c <UART_SetConfig+0x268>
 8005af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005afa:	d81b      	bhi.n	8005b34 <UART_SetConfig+0x270>
 8005afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b00:	d00c      	beq.n	8005b1c <UART_SetConfig+0x258>
 8005b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b06:	d815      	bhi.n	8005b34 <UART_SetConfig+0x270>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <UART_SetConfig+0x250>
 8005b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b10:	d008      	beq.n	8005b24 <UART_SetConfig+0x260>
 8005b12:	e00f      	b.n	8005b34 <UART_SetConfig+0x270>
 8005b14:	2300      	movs	r3, #0
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	e052      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b22:	e04e      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005b24:	2304      	movs	r3, #4
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2a:	e04a      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005b2c:	2308      	movs	r3, #8
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b32:	e046      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005b34:	2310      	movs	r3, #16
 8005b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b3a:	e042      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <UART_SetConfig+0x2dc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d13a      	bne.n	8005bbc <UART_SetConfig+0x2f8>
 8005b46:	4b18      	ldr	r3, [pc, #96]	; (8005ba8 <UART_SetConfig+0x2e4>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b54:	d01a      	beq.n	8005b8c <UART_SetConfig+0x2c8>
 8005b56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b5a:	d81b      	bhi.n	8005b94 <UART_SetConfig+0x2d0>
 8005b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b60:	d00c      	beq.n	8005b7c <UART_SetConfig+0x2b8>
 8005b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b66:	d815      	bhi.n	8005b94 <UART_SetConfig+0x2d0>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <UART_SetConfig+0x2b0>
 8005b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b70:	d008      	beq.n	8005b84 <UART_SetConfig+0x2c0>
 8005b72:	e00f      	b.n	8005b94 <UART_SetConfig+0x2d0>
 8005b74:	2300      	movs	r3, #0
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7a:	e022      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b82:	e01e      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005b84:	2304      	movs	r3, #4
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8a:	e01a      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b92:	e016      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005b94:	2310      	movs	r3, #16
 8005b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b9a:	e012      	b.n	8005bc2 <UART_SetConfig+0x2fe>
 8005b9c:	cfff69f3 	.word	0xcfff69f3
 8005ba0:	40008000 	.word	0x40008000
 8005ba4:	40013800 	.word	0x40013800
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	40004400 	.word	0x40004400
 8005bb0:	40004800 	.word	0x40004800
 8005bb4:	40004c00 	.word	0x40004c00
 8005bb8:	40005000 	.word	0x40005000
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4aae      	ldr	r2, [pc, #696]	; (8005e80 <UART_SetConfig+0x5bc>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	f040 8097 	bne.w	8005cfc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d823      	bhi.n	8005c1e <UART_SetConfig+0x35a>
 8005bd6:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <UART_SetConfig+0x318>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005c01 	.word	0x08005c01
 8005be0:	08005c1f 	.word	0x08005c1f
 8005be4:	08005c09 	.word	0x08005c09
 8005be8:	08005c1f 	.word	0x08005c1f
 8005bec:	08005c0f 	.word	0x08005c0f
 8005bf0:	08005c1f 	.word	0x08005c1f
 8005bf4:	08005c1f 	.word	0x08005c1f
 8005bf8:	08005c1f 	.word	0x08005c1f
 8005bfc:	08005c17 	.word	0x08005c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c00:	f7fe fefe 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8005c04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c06:	e010      	b.n	8005c2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c08:	4b9e      	ldr	r3, [pc, #632]	; (8005e84 <UART_SetConfig+0x5c0>)
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c0c:	e00d      	b.n	8005c2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0e:	f7fe fe8b 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8005c12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c14:	e009      	b.n	8005c2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c1c:	e005      	b.n	8005c2a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8130 	beq.w	8005e92 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	4a94      	ldr	r2, [pc, #592]	; (8005e88 <UART_SetConfig+0x5c4>)
 8005c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	4413      	add	r3, r2
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d305      	bcc.n	8005c62 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d903      	bls.n	8005c6a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c68:	e113      	b.n	8005e92 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	60bb      	str	r3, [r7, #8]
 8005c70:	60fa      	str	r2, [r7, #12]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	4a84      	ldr	r2, [pc, #528]	; (8005e88 <UART_SetConfig+0x5c4>)
 8005c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2200      	movs	r2, #0
 8005c80:	603b      	str	r3, [r7, #0]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c8c:	f7fa fac8 	bl	8000220 <__aeabi_uldivmod>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4610      	mov	r0, r2
 8005c96:	4619      	mov	r1, r3
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	020b      	lsls	r3, r1, #8
 8005ca2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ca6:	0202      	lsls	r2, r0, #8
 8005ca8:	6979      	ldr	r1, [r7, #20]
 8005caa:	6849      	ldr	r1, [r1, #4]
 8005cac:	0849      	lsrs	r1, r1, #1
 8005cae:	2000      	movs	r0, #0
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	eb12 0804 	adds.w	r8, r2, r4
 8005cb8:	eb43 0905 	adc.w	r9, r3, r5
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	469a      	mov	sl, r3
 8005cc4:	4693      	mov	fp, r2
 8005cc6:	4652      	mov	r2, sl
 8005cc8:	465b      	mov	r3, fp
 8005cca:	4640      	mov	r0, r8
 8005ccc:	4649      	mov	r1, r9
 8005cce:	f7fa faa7 	bl	8000220 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce0:	d308      	bcc.n	8005cf4 <UART_SetConfig+0x430>
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce8:	d204      	bcs.n	8005cf4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6a3a      	ldr	r2, [r7, #32]
 8005cf0:	60da      	str	r2, [r3, #12]
 8005cf2:	e0ce      	b.n	8005e92 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cfa:	e0ca      	b.n	8005e92 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d04:	d166      	bne.n	8005dd4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d827      	bhi.n	8005d5e <UART_SetConfig+0x49a>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0x450>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	08005d5f 	.word	0x08005d5f
 8005d24:	08005d4f 	.word	0x08005d4f
 8005d28:	08005d5f 	.word	0x08005d5f
 8005d2c:	08005d5f 	.word	0x08005d5f
 8005d30:	08005d5f 	.word	0x08005d5f
 8005d34:	08005d57 	.word	0x08005d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d38:	f7fe fe62 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8005d3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d3e:	e014      	b.n	8005d6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d40:	f7fe fe74 	bl	8004a2c <HAL_RCC_GetPCLK2Freq>
 8005d44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d46:	e010      	b.n	8005d6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d48:	4b4e      	ldr	r3, [pc, #312]	; (8005e84 <UART_SetConfig+0x5c0>)
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d4c:	e00d      	b.n	8005d6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d4e:	f7fe fdeb 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8005d52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d54:	e009      	b.n	8005d6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d5c:	e005      	b.n	8005d6a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8090 	beq.w	8005e92 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	4a44      	ldr	r2, [pc, #272]	; (8005e88 <UART_SetConfig+0x5c4>)
 8005d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d84:	005a      	lsls	r2, r3, #1
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	441a      	add	r2, r3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	2b0f      	cmp	r3, #15
 8005d9c:	d916      	bls.n	8005dcc <UART_SetConfig+0x508>
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da4:	d212      	bcs.n	8005dcc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f023 030f 	bic.w	r3, r3, #15
 8005dae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	8bfb      	ldrh	r3, [r7, #30]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	8bfa      	ldrh	r2, [r7, #30]
 8005dc8:	60da      	str	r2, [r3, #12]
 8005dca:	e062      	b.n	8005e92 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005dd2:	e05e      	b.n	8005e92 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d828      	bhi.n	8005e2e <UART_SetConfig+0x56a>
 8005ddc:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <UART_SetConfig+0x520>)
 8005dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de2:	bf00      	nop
 8005de4:	08005e09 	.word	0x08005e09
 8005de8:	08005e11 	.word	0x08005e11
 8005dec:	08005e19 	.word	0x08005e19
 8005df0:	08005e2f 	.word	0x08005e2f
 8005df4:	08005e1f 	.word	0x08005e1f
 8005df8:	08005e2f 	.word	0x08005e2f
 8005dfc:	08005e2f 	.word	0x08005e2f
 8005e00:	08005e2f 	.word	0x08005e2f
 8005e04:	08005e27 	.word	0x08005e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e08:	f7fe fdfa 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8005e0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e0e:	e014      	b.n	8005e3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e10:	f7fe fe0c 	bl	8004a2c <HAL_RCC_GetPCLK2Freq>
 8005e14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e16:	e010      	b.n	8005e3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e18:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <UART_SetConfig+0x5c0>)
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e1c:	e00d      	b.n	8005e3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1e:	f7fe fd83 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8005e22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e24:	e009      	b.n	8005e3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e2c:	e005      	b.n	8005e3a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e38:	bf00      	nop
    }

    if (pclk != 0U)
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d028      	beq.n	8005e92 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	4a10      	ldr	r2, [pc, #64]	; (8005e88 <UART_SetConfig+0x5c4>)
 8005e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	441a      	add	r2, r3
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	d910      	bls.n	8005e8c <UART_SetConfig+0x5c8>
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e70:	d20c      	bcs.n	8005e8c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60da      	str	r2, [r3, #12]
 8005e7c:	e009      	b.n	8005e92 <UART_SetConfig+0x5ce>
 8005e7e:	bf00      	nop
 8005e80:	40008000 	.word	0x40008000
 8005e84:	00f42400 	.word	0x00f42400
 8005e88:	08009c08 	.word	0x08009c08
      }
      else
      {
        ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005eae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3730      	adds	r7, #48	; 0x30
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01a      	beq.n	8005fd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fba:	d10a      	bne.n	8005fd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b098      	sub	sp, #96	; 0x60
 8006004:	af02      	add	r7, sp, #8
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006010:	f7fc f83c 	bl	800208c <HAL_GetTick>
 8006014:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b08      	cmp	r3, #8
 8006022:	d12f      	bne.n	8006084 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602c:	2200      	movs	r2, #0
 800602e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f88e 	bl	8006154 <UART_WaitOnFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d022      	beq.n	8006084 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800604c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006052:	653b      	str	r3, [r7, #80]	; 0x50
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605c:	647b      	str	r3, [r7, #68]	; 0x44
 800605e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800606a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e6      	bne.n	800603e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e063      	b.n	800614c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b04      	cmp	r3, #4
 8006090:	d149      	bne.n	8006126 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006092:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800609a:	2200      	movs	r2, #0
 800609c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f857 	bl	8006154 <UART_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d03c      	beq.n	8006126 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	623b      	str	r3, [r7, #32]
   return(result);
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30
 80060cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e6      	bne.n	80060ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3308      	adds	r3, #8
 80060fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060fe:	61fa      	str	r2, [r7, #28]
 8006100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	69b9      	ldr	r1, [r7, #24]
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	617b      	str	r3, [r7, #20]
   return(result);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e5      	bne.n	80060de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e012      	b.n	800614c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3758      	adds	r7, #88	; 0x58
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006164:	e04f      	b.n	8006206 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800616c:	d04b      	beq.n	8006206 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616e:	f7fb ff8d 	bl	800208c <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	429a      	cmp	r2, r3
 800617c:	d302      	bcc.n	8006184 <UART_WaitOnFlagUntilTimeout+0x30>
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e04e      	b.n	8006226 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d037      	beq.n	8006206 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b80      	cmp	r3, #128	; 0x80
 800619a:	d034      	beq.n	8006206 <UART_WaitOnFlagUntilTimeout+0xb2>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d031      	beq.n	8006206 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d110      	bne.n	80061d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2208      	movs	r2, #8
 80061b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f838 	bl	800622e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2208      	movs	r2, #8
 80061c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e029      	b.n	8006226 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e0:	d111      	bne.n	8006206 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f81e 	bl	800622e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e00f      	b.n	8006226 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4013      	ands	r3, r2
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	bf0c      	ite	eq
 8006216:	2301      	moveq	r3, #1
 8006218:	2300      	movne	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	461a      	mov	r2, r3
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	429a      	cmp	r2, r3
 8006222:	d0a0      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800622e:	b480      	push	{r7}
 8006230:	b095      	sub	sp, #84	; 0x54
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800624a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006254:	643b      	str	r3, [r7, #64]	; 0x40
 8006256:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800625a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e6      	bne.n	8006236 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3308      	adds	r3, #8
 800626e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	61fb      	str	r3, [r7, #28]
   return(result);
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	64bb      	str	r3, [r7, #72]	; 0x48
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800628c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e3      	bne.n	8006268 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d118      	bne.n	80062da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f023 0310 	bic.w	r3, r3, #16
 80062bc:	647b      	str	r3, [r7, #68]	; 0x44
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	613b      	str	r3, [r7, #16]
   return(result);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e6      	bne.n	80062a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	675a      	str	r2, [r3, #116]	; 0x74
}
 80062ee:	bf00      	nop
 80062f0:	3754      	adds	r7, #84	; 0x54
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_UARTEx_DisableFifoMode+0x16>
 800630c:	2302      	movs	r3, #2
 800630e:	e027      	b.n	8006360 <HAL_UARTEx_DisableFifoMode+0x66>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2224      	movs	r2, #36	; 0x24
 800631c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800633e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006380:	2302      	movs	r3, #2
 8006382:	e02d      	b.n	80063e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2224      	movs	r2, #36	; 0x24
 8006390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f84f 	bl	8006464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e02d      	b.n	800645c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2224      	movs	r2, #36	; 0x24
 800640c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0201 	bic.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f811 	bl	8006464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006470:	2b00      	cmp	r3, #0
 8006472:	d108      	bne.n	8006486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006484:	e031      	b.n	80064ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006486:	2308      	movs	r3, #8
 8006488:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800648a:	2308      	movs	r3, #8
 800648c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	0e5b      	lsrs	r3, r3, #25
 8006496:	b2db      	uxtb	r3, r3
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	0f5b      	lsrs	r3, r3, #29
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	7b3a      	ldrb	r2, [r7, #12]
 80064b2:	4911      	ldr	r1, [pc, #68]	; (80064f8 <UARTEx_SetNbDataToProcess+0x94>)
 80064b4:	5c8a      	ldrb	r2, [r1, r2]
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064ba:	7b3a      	ldrb	r2, [r7, #12]
 80064bc:	490f      	ldr	r1, [pc, #60]	; (80064fc <UARTEx_SetNbDataToProcess+0x98>)
 80064be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	7b7a      	ldrb	r2, [r7, #13]
 80064d0:	4909      	ldr	r1, [pc, #36]	; (80064f8 <UARTEx_SetNbDataToProcess+0x94>)
 80064d2:	5c8a      	ldrb	r2, [r1, r2]
 80064d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064d8:	7b7a      	ldrb	r2, [r7, #13]
 80064da:	4908      	ldr	r1, [pc, #32]	; (80064fc <UARTEx_SetNbDataToProcess+0x98>)
 80064dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064de:	fb93 f3f2 	sdiv	r3, r3, r2
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	08009c20 	.word	0x08009c20
 80064fc:	08009c28 	.word	0x08009c28

08006500 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e03c      	b.n	800658c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fb fc3a 	bl	8001da0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0201 	bic.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f85b 	bl	8006600 <USART_SetConfig>
 800654a:	4603      	mov	r3, r0
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e01b      	b.n	800658c <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006562:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006572:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0201 	orr.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fb23 	bl	8006bd0 <USART_CheckIdleState>
 800658a:	4603      	mov	r3, r0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	4613      	mov	r3, r2
 80065a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80065a4:	e018      	b.n	80065d8 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ac:	d014      	beq.n	80065d8 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ae:	f7fb fd6d 	bl	800208c <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <USART_WaitOnFlagUntilTimeout+0x30>
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e00f      	b.n	80065f8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4013      	ands	r3, r2
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d0d7      	beq.n	80065a6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800660c:	2300      	movs	r3, #0
 800660e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006624:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	4b96      	ldr	r3, [pc, #600]	; (8006888 <USART_SetConfig+0x288>)
 800662e:	4013      	ands	r3, r2
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6812      	ldr	r2, [r2, #0]
 8006634:	6979      	ldr	r1, [r7, #20]
 8006636:	430b      	orrs	r3, r1
 8006638:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800663a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800663e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	4313      	orrs	r3, r2
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800666e:	f023 0309 	bic.w	r3, r3, #9
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6812      	ldr	r2, [r2, #0]
 8006676:	6979      	ldr	r1, [r7, #20]
 8006678:	430b      	orrs	r3, r1
 800667a:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	f023 010f 	bic.w	r1, r3, #15
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a7d      	ldr	r2, [pc, #500]	; (800688c <USART_SetConfig+0x28c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d120      	bne.n	80066de <USART_SetConfig+0xde>
 800669c:	4b7c      	ldr	r3, [pc, #496]	; (8006890 <USART_SetConfig+0x290>)
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d816      	bhi.n	80066d8 <USART_SetConfig+0xd8>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <USART_SetConfig+0xb0>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	080066cd 	.word	0x080066cd
 80066b8:	080066c7 	.word	0x080066c7
 80066bc:	080066d3 	.word	0x080066d3
 80066c0:	2301      	movs	r3, #1
 80066c2:	77fb      	strb	r3, [r7, #31]
 80066c4:	e06b      	b.n	800679e <USART_SetConfig+0x19e>
 80066c6:	2302      	movs	r3, #2
 80066c8:	77fb      	strb	r3, [r7, #31]
 80066ca:	e068      	b.n	800679e <USART_SetConfig+0x19e>
 80066cc:	2304      	movs	r3, #4
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e065      	b.n	800679e <USART_SetConfig+0x19e>
 80066d2:	2308      	movs	r3, #8
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e062      	b.n	800679e <USART_SetConfig+0x19e>
 80066d8:	2310      	movs	r3, #16
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e05f      	b.n	800679e <USART_SetConfig+0x19e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a6c      	ldr	r2, [pc, #432]	; (8006894 <USART_SetConfig+0x294>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d132      	bne.n	800674e <USART_SetConfig+0x14e>
 80066e8:	4b69      	ldr	r3, [pc, #420]	; (8006890 <USART_SetConfig+0x290>)
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ee:	f003 030c 	and.w	r3, r3, #12
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d828      	bhi.n	8006748 <USART_SetConfig+0x148>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <USART_SetConfig+0xfc>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	08006731 	.word	0x08006731
 8006700:	08006749 	.word	0x08006749
 8006704:	08006749 	.word	0x08006749
 8006708:	08006749 	.word	0x08006749
 800670c:	0800673d 	.word	0x0800673d
 8006710:	08006749 	.word	0x08006749
 8006714:	08006749 	.word	0x08006749
 8006718:	08006749 	.word	0x08006749
 800671c:	08006737 	.word	0x08006737
 8006720:	08006749 	.word	0x08006749
 8006724:	08006749 	.word	0x08006749
 8006728:	08006749 	.word	0x08006749
 800672c:	08006743 	.word	0x08006743
 8006730:	2300      	movs	r3, #0
 8006732:	77fb      	strb	r3, [r7, #31]
 8006734:	e033      	b.n	800679e <USART_SetConfig+0x19e>
 8006736:	2302      	movs	r3, #2
 8006738:	77fb      	strb	r3, [r7, #31]
 800673a:	e030      	b.n	800679e <USART_SetConfig+0x19e>
 800673c:	2304      	movs	r3, #4
 800673e:	77fb      	strb	r3, [r7, #31]
 8006740:	e02d      	b.n	800679e <USART_SetConfig+0x19e>
 8006742:	2308      	movs	r3, #8
 8006744:	77fb      	strb	r3, [r7, #31]
 8006746:	e02a      	b.n	800679e <USART_SetConfig+0x19e>
 8006748:	2310      	movs	r3, #16
 800674a:	77fb      	strb	r3, [r7, #31]
 800674c:	e027      	b.n	800679e <USART_SetConfig+0x19e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a51      	ldr	r2, [pc, #324]	; (8006898 <USART_SetConfig+0x298>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d120      	bne.n	800679a <USART_SetConfig+0x19a>
 8006758:	4b4d      	ldr	r3, [pc, #308]	; (8006890 <USART_SetConfig+0x290>)
 800675a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006762:	2b30      	cmp	r3, #48	; 0x30
 8006764:	d013      	beq.n	800678e <USART_SetConfig+0x18e>
 8006766:	2b30      	cmp	r3, #48	; 0x30
 8006768:	d814      	bhi.n	8006794 <USART_SetConfig+0x194>
 800676a:	2b20      	cmp	r3, #32
 800676c:	d009      	beq.n	8006782 <USART_SetConfig+0x182>
 800676e:	2b20      	cmp	r3, #32
 8006770:	d810      	bhi.n	8006794 <USART_SetConfig+0x194>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <USART_SetConfig+0x17c>
 8006776:	2b10      	cmp	r3, #16
 8006778:	d006      	beq.n	8006788 <USART_SetConfig+0x188>
 800677a:	e00b      	b.n	8006794 <USART_SetConfig+0x194>
 800677c:	2300      	movs	r3, #0
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e00d      	b.n	800679e <USART_SetConfig+0x19e>
 8006782:	2302      	movs	r3, #2
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e00a      	b.n	800679e <USART_SetConfig+0x19e>
 8006788:	2304      	movs	r3, #4
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e007      	b.n	800679e <USART_SetConfig+0x19e>
 800678e:	2308      	movs	r3, #8
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e004      	b.n	800679e <USART_SetConfig+0x19e>
 8006794:	2310      	movs	r3, #16
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e001      	b.n	800679e <USART_SetConfig+0x19e>
 800679a:	2310      	movs	r3, #16
 800679c:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800679e:	7ffb      	ldrb	r3, [r7, #31]
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	f200 81e2 	bhi.w	8006b6a <USART_SetConfig+0x56a>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <USART_SetConfig+0x1ac>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067d1 	.word	0x080067d1
 80067b0:	0800689d 	.word	0x0800689d
 80067b4:	08006953 	.word	0x08006953
 80067b8:	08006b6b 	.word	0x08006b6b
 80067bc:	08006a03 	.word	0x08006a03
 80067c0:	08006b6b 	.word	0x08006b6b
 80067c4:	08006b6b 	.word	0x08006b6b
 80067c8:	08006b6b 	.word	0x08006b6b
 80067cc:	08006ab9 	.word	0x08006ab9
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80067d0:	f7fe f916 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 80067d4:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d044      	beq.n	8006868 <USART_SetConfig+0x268>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d03e      	beq.n	8006864 <USART_SetConfig+0x264>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d038      	beq.n	8006860 <USART_SetConfig+0x260>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d032      	beq.n	800685c <USART_SetConfig+0x25c>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d02c      	beq.n	8006858 <USART_SetConfig+0x258>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	2b05      	cmp	r3, #5
 8006804:	d026      	beq.n	8006854 <USART_SetConfig+0x254>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	2b06      	cmp	r3, #6
 800680c:	d020      	beq.n	8006850 <USART_SetConfig+0x250>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	2b07      	cmp	r3, #7
 8006814:	d01a      	beq.n	800684c <USART_SetConfig+0x24c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	2b08      	cmp	r3, #8
 800681c:	d014      	beq.n	8006848 <USART_SetConfig+0x248>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	2b09      	cmp	r3, #9
 8006824:	d00e      	beq.n	8006844 <USART_SetConfig+0x244>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	2b0a      	cmp	r3, #10
 800682c:	d008      	beq.n	8006840 <USART_SetConfig+0x240>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	2b0b      	cmp	r3, #11
 8006834:	d102      	bne.n	800683c <USART_SetConfig+0x23c>
 8006836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800683a:	e016      	b.n	800686a <USART_SetConfig+0x26a>
 800683c:	2301      	movs	r3, #1
 800683e:	e014      	b.n	800686a <USART_SetConfig+0x26a>
 8006840:	2380      	movs	r3, #128	; 0x80
 8006842:	e012      	b.n	800686a <USART_SetConfig+0x26a>
 8006844:	2340      	movs	r3, #64	; 0x40
 8006846:	e010      	b.n	800686a <USART_SetConfig+0x26a>
 8006848:	2320      	movs	r3, #32
 800684a:	e00e      	b.n	800686a <USART_SetConfig+0x26a>
 800684c:	2310      	movs	r3, #16
 800684e:	e00c      	b.n	800686a <USART_SetConfig+0x26a>
 8006850:	230c      	movs	r3, #12
 8006852:	e00a      	b.n	800686a <USART_SetConfig+0x26a>
 8006854:	230a      	movs	r3, #10
 8006856:	e008      	b.n	800686a <USART_SetConfig+0x26a>
 8006858:	2308      	movs	r3, #8
 800685a:	e006      	b.n	800686a <USART_SetConfig+0x26a>
 800685c:	2306      	movs	r3, #6
 800685e:	e004      	b.n	800686a <USART_SetConfig+0x26a>
 8006860:	2304      	movs	r3, #4
 8006862:	e002      	b.n	800686a <USART_SetConfig+0x26a>
 8006864:	2302      	movs	r3, #2
 8006866:	e000      	b.n	800686a <USART_SetConfig+0x26a>
 8006868:	2301      	movs	r3, #1
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	005a      	lsls	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	441a      	add	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006882:	61bb      	str	r3, [r7, #24]
      break;
 8006884:	e174      	b.n	8006b70 <USART_SetConfig+0x570>
 8006886:	bf00      	nop
 8006888:	cfff69f3 	.word	0xcfff69f3
 800688c:	40013800 	.word	0x40013800
 8006890:	40021000 	.word	0x40021000
 8006894:	40004400 	.word	0x40004400
 8006898:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800689c:	f7fe f8c6 	bl	8004a2c <HAL_RCC_GetPCLK2Freq>
 80068a0:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d044      	beq.n	8006934 <USART_SetConfig+0x334>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d03e      	beq.n	8006930 <USART_SetConfig+0x330>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d038      	beq.n	800692c <USART_SetConfig+0x32c>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d032      	beq.n	8006928 <USART_SetConfig+0x328>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d02c      	beq.n	8006924 <USART_SetConfig+0x324>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	2b05      	cmp	r3, #5
 80068d0:	d026      	beq.n	8006920 <USART_SetConfig+0x320>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	2b06      	cmp	r3, #6
 80068d8:	d020      	beq.n	800691c <USART_SetConfig+0x31c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	2b07      	cmp	r3, #7
 80068e0:	d01a      	beq.n	8006918 <USART_SetConfig+0x318>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d014      	beq.n	8006914 <USART_SetConfig+0x314>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	2b09      	cmp	r3, #9
 80068f0:	d00e      	beq.n	8006910 <USART_SetConfig+0x310>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	2b0a      	cmp	r3, #10
 80068f8:	d008      	beq.n	800690c <USART_SetConfig+0x30c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	2b0b      	cmp	r3, #11
 8006900:	d102      	bne.n	8006908 <USART_SetConfig+0x308>
 8006902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006906:	e016      	b.n	8006936 <USART_SetConfig+0x336>
 8006908:	2301      	movs	r3, #1
 800690a:	e014      	b.n	8006936 <USART_SetConfig+0x336>
 800690c:	2380      	movs	r3, #128	; 0x80
 800690e:	e012      	b.n	8006936 <USART_SetConfig+0x336>
 8006910:	2340      	movs	r3, #64	; 0x40
 8006912:	e010      	b.n	8006936 <USART_SetConfig+0x336>
 8006914:	2320      	movs	r3, #32
 8006916:	e00e      	b.n	8006936 <USART_SetConfig+0x336>
 8006918:	2310      	movs	r3, #16
 800691a:	e00c      	b.n	8006936 <USART_SetConfig+0x336>
 800691c:	230c      	movs	r3, #12
 800691e:	e00a      	b.n	8006936 <USART_SetConfig+0x336>
 8006920:	230a      	movs	r3, #10
 8006922:	e008      	b.n	8006936 <USART_SetConfig+0x336>
 8006924:	2308      	movs	r3, #8
 8006926:	e006      	b.n	8006936 <USART_SetConfig+0x336>
 8006928:	2306      	movs	r3, #6
 800692a:	e004      	b.n	8006936 <USART_SetConfig+0x336>
 800692c:	2304      	movs	r3, #4
 800692e:	e002      	b.n	8006936 <USART_SetConfig+0x336>
 8006930:	2302      	movs	r3, #2
 8006932:	e000      	b.n	8006936 <USART_SetConfig+0x336>
 8006934:	2301      	movs	r3, #1
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	fbb2 f3f3 	udiv	r3, r2, r3
 800693c:	005a      	lsls	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	441a      	add	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	fbb2 f3f3 	udiv	r3, r2, r3
 800694e:	61bb      	str	r3, [r7, #24]
      break;
 8006950:	e10e      	b.n	8006b70 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	d044      	beq.n	80069e4 <USART_SetConfig+0x3e4>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b01      	cmp	r3, #1
 8006960:	d03e      	beq.n	80069e0 <USART_SetConfig+0x3e0>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	2b02      	cmp	r3, #2
 8006968:	d038      	beq.n	80069dc <USART_SetConfig+0x3dc>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	2b03      	cmp	r3, #3
 8006970:	d032      	beq.n	80069d8 <USART_SetConfig+0x3d8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	2b04      	cmp	r3, #4
 8006978:	d02c      	beq.n	80069d4 <USART_SetConfig+0x3d4>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	2b05      	cmp	r3, #5
 8006980:	d026      	beq.n	80069d0 <USART_SetConfig+0x3d0>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	2b06      	cmp	r3, #6
 8006988:	d020      	beq.n	80069cc <USART_SetConfig+0x3cc>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	2b07      	cmp	r3, #7
 8006990:	d01a      	beq.n	80069c8 <USART_SetConfig+0x3c8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	2b08      	cmp	r3, #8
 8006998:	d014      	beq.n	80069c4 <USART_SetConfig+0x3c4>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	2b09      	cmp	r3, #9
 80069a0:	d00e      	beq.n	80069c0 <USART_SetConfig+0x3c0>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	2b0a      	cmp	r3, #10
 80069a8:	d008      	beq.n	80069bc <USART_SetConfig+0x3bc>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b0b      	cmp	r3, #11
 80069b0:	d102      	bne.n	80069b8 <USART_SetConfig+0x3b8>
 80069b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069b6:	e016      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e014      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069bc:	2380      	movs	r3, #128	; 0x80
 80069be:	e012      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069c0:	2340      	movs	r3, #64	; 0x40
 80069c2:	e010      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069c4:	2320      	movs	r3, #32
 80069c6:	e00e      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069c8:	2310      	movs	r3, #16
 80069ca:	e00c      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069cc:	230c      	movs	r3, #12
 80069ce:	e00a      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069d0:	230a      	movs	r3, #10
 80069d2:	e008      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069d4:	2308      	movs	r3, #8
 80069d6:	e006      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069d8:	2306      	movs	r3, #6
 80069da:	e004      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069dc:	2304      	movs	r3, #4
 80069de:	e002      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e000      	b.n	80069e6 <USART_SetConfig+0x3e6>
 80069e4:	2301      	movs	r3, #1
 80069e6:	4a79      	ldr	r2, [pc, #484]	; (8006bcc <USART_SetConfig+0x5cc>)
 80069e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ec:	005a      	lsls	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	085b      	lsrs	r3, r3, #1
 80069f4:	441a      	add	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fe:	61bb      	str	r3, [r7, #24]
      break;
 8006a00:	e0b6      	b.n	8006b70 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8006a02:	f7fd ff91 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8006a06:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d044      	beq.n	8006a9a <USART_SetConfig+0x49a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d03e      	beq.n	8006a96 <USART_SetConfig+0x496>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d038      	beq.n	8006a92 <USART_SetConfig+0x492>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d032      	beq.n	8006a8e <USART_SetConfig+0x48e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d02c      	beq.n	8006a8a <USART_SetConfig+0x48a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	2b05      	cmp	r3, #5
 8006a36:	d026      	beq.n	8006a86 <USART_SetConfig+0x486>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	2b06      	cmp	r3, #6
 8006a3e:	d020      	beq.n	8006a82 <USART_SetConfig+0x482>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	2b07      	cmp	r3, #7
 8006a46:	d01a      	beq.n	8006a7e <USART_SetConfig+0x47e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d014      	beq.n	8006a7a <USART_SetConfig+0x47a>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	2b09      	cmp	r3, #9
 8006a56:	d00e      	beq.n	8006a76 <USART_SetConfig+0x476>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	2b0a      	cmp	r3, #10
 8006a5e:	d008      	beq.n	8006a72 <USART_SetConfig+0x472>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	2b0b      	cmp	r3, #11
 8006a66:	d102      	bne.n	8006a6e <USART_SetConfig+0x46e>
 8006a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a6c:	e016      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e014      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a72:	2380      	movs	r3, #128	; 0x80
 8006a74:	e012      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a76:	2340      	movs	r3, #64	; 0x40
 8006a78:	e010      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a7a:	2320      	movs	r3, #32
 8006a7c:	e00e      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a7e:	2310      	movs	r3, #16
 8006a80:	e00c      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a82:	230c      	movs	r3, #12
 8006a84:	e00a      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a86:	230a      	movs	r3, #10
 8006a88:	e008      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a8a:	2308      	movs	r3, #8
 8006a8c:	e006      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a8e:	2306      	movs	r3, #6
 8006a90:	e004      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a92:	2304      	movs	r3, #4
 8006a94:	e002      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e000      	b.n	8006a9c <USART_SetConfig+0x49c>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa2:	005a      	lsls	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	085b      	lsrs	r3, r3, #1
 8006aaa:	441a      	add	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab4:	61bb      	str	r3, [r7, #24]
      break;
 8006ab6:	e05b      	b.n	8006b70 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d044      	beq.n	8006b4a <USART_SetConfig+0x54a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d03e      	beq.n	8006b46 <USART_SetConfig+0x546>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d038      	beq.n	8006b42 <USART_SetConfig+0x542>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d032      	beq.n	8006b3e <USART_SetConfig+0x53e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d02c      	beq.n	8006b3a <USART_SetConfig+0x53a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	2b05      	cmp	r3, #5
 8006ae6:	d026      	beq.n	8006b36 <USART_SetConfig+0x536>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	2b06      	cmp	r3, #6
 8006aee:	d020      	beq.n	8006b32 <USART_SetConfig+0x532>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	2b07      	cmp	r3, #7
 8006af6:	d01a      	beq.n	8006b2e <USART_SetConfig+0x52e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d014      	beq.n	8006b2a <USART_SetConfig+0x52a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	2b09      	cmp	r3, #9
 8006b06:	d00e      	beq.n	8006b26 <USART_SetConfig+0x526>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	2b0a      	cmp	r3, #10
 8006b0e:	d008      	beq.n	8006b22 <USART_SetConfig+0x522>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b0b      	cmp	r3, #11
 8006b16:	d102      	bne.n	8006b1e <USART_SetConfig+0x51e>
 8006b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b1c:	e016      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e014      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b22:	2380      	movs	r3, #128	; 0x80
 8006b24:	e012      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b26:	2340      	movs	r3, #64	; 0x40
 8006b28:	e010      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b2a:	2320      	movs	r3, #32
 8006b2c:	e00e      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b2e:	2310      	movs	r3, #16
 8006b30:	e00c      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b32:	230c      	movs	r3, #12
 8006b34:	e00a      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b36:	230a      	movs	r3, #10
 8006b38:	e008      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	e006      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b3e:	2306      	movs	r3, #6
 8006b40:	e004      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b42:	2304      	movs	r3, #4
 8006b44:	e002      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e000      	b.n	8006b4c <USART_SetConfig+0x54c>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b54:	005a      	lsls	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	085b      	lsrs	r3, r3, #1
 8006b5c:	441a      	add	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b66:	61bb      	str	r3, [r7, #24]
      break;
 8006b68:	e002      	b.n	8006b70 <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	77bb      	strb	r3, [r7, #30]
      break;
 8006b6e:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2b0f      	cmp	r3, #15
 8006b74:	d916      	bls.n	8006ba4 <USART_SetConfig+0x5a4>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7c:	d212      	bcs.n	8006ba4 <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f023 030f 	bic.w	r3, r3, #15
 8006b86:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	89fb      	ldrh	r3, [r7, #14]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	89fa      	ldrh	r2, [r7, #14]
 8006ba0:	60da      	str	r2, [r3, #12]
 8006ba2:	e001      	b.n	8006ba8 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8006bc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	00f42400 	.word	0x00f42400

08006bd0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bde:	f7fb fa55 	bl	800208c <HAL_GetTick>
 8006be2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	d10e      	bne.n	8006c10 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff fcc7 	bl	8006594 <USART_WaitOnFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e01e      	b.n	8006c4e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d10e      	bne.n	8006c3c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff fcb1 	bl	8006594 <USART_WaitOnFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e008      	b.n	8006c4e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_USARTEx_DisableFifoMode+0x16>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e027      	b.n	8006cbc <HAL_USARTEx_DisableFifoMode+0x66>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c9a:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e02d      	b.n	8006d3c <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0201 	bic.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f84f 	bl	8006dc0 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e02d      	b.n	8006db8 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0201 	bic.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f811 	bl	8006dc0 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ddc:	e02f      	b.n	8006e3e <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dde:	2308      	movs	r3, #8
 8006de0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006de2:	2308      	movs	r3, #8
 8006de4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8006dec:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8006dfc:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	7b3a      	ldrb	r2, [r7, #12]
 8006e0a:	4910      	ldr	r1, [pc, #64]	; (8006e4c <USARTEx_SetNbDataToProcess+0x8c>)
 8006e0c:	5c8a      	ldrb	r2, [r1, r2]
 8006e0e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8006e12:	7b3a      	ldrb	r2, [r7, #12]
 8006e14:	490e      	ldr	r1, [pc, #56]	; (8006e50 <USARTEx_SetNbDataToProcess+0x90>)
 8006e16:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	7b7a      	ldrb	r2, [r7, #13]
 8006e26:	4909      	ldr	r1, [pc, #36]	; (8006e4c <USARTEx_SetNbDataToProcess+0x8c>)
 8006e28:	5c8a      	ldrb	r2, [r1, r2]
 8006e2a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8006e2e:	7b7a      	ldrb	r2, [r7, #13]
 8006e30:	4907      	ldr	r1, [pc, #28]	; (8006e50 <USARTEx_SetNbDataToProcess+0x90>)
 8006e32:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	08009c30 	.word	0x08009c30
 8006e50:	08009c38 	.word	0x08009c38

08006e54 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8006e58:	4907      	ldr	r1, [pc, #28]	; (8006e78 <MX_FATFS_Init+0x24>)
 8006e5a:	4808      	ldr	r0, [pc, #32]	; (8006e7c <MX_FATFS_Init+0x28>)
 8006e5c:	f000 f8b6 	bl	8006fcc <FATFS_LinkDriver>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8006e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e6a:	e003      	b.n	8006e74 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006e6c:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <MX_FATFS_Init+0x2c>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8006e72:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	200006a4 	.word	0x200006a4
 8006e7c:	20000010 	.word	0x20000010
 8006e80:	200006a8 	.word	0x200006a8

08006e84 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <USER_initialize+0x24>)
 8006e90:	2201      	movs	r2, #1
 8006e92:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006e94:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <USER_initialize+0x24>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	2000000c 	.word	0x2000000c

08006eac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006eb6:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <USER_status+0x24>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <USER_status+0x24>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	2000000c 	.word	0x2000000c

08006ed4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	607a      	str	r2, [r7, #4]
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006ee4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
 8006efe:	4603      	mov	r3, r0
 8006f00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006f02:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	603a      	str	r2, [r7, #0]
 8006f1a:	71fb      	strb	r3, [r7, #7]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]
    return res;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006f4a:	4b1f      	ldr	r3, [pc, #124]	; (8006fc8 <FATFS_LinkDriverEx+0x94>)
 8006f4c:	7a5b      	ldrb	r3, [r3, #9]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d131      	bne.n	8006fb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f54:	4b1c      	ldr	r3, [pc, #112]	; (8006fc8 <FATFS_LinkDriverEx+0x94>)
 8006f56:	7a5b      	ldrb	r3, [r3, #9]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4b1a      	ldr	r3, [pc, #104]	; (8006fc8 <FATFS_LinkDriverEx+0x94>)
 8006f5e:	2100      	movs	r1, #0
 8006f60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006f62:	4b19      	ldr	r3, [pc, #100]	; (8006fc8 <FATFS_LinkDriverEx+0x94>)
 8006f64:	7a5b      	ldrb	r3, [r3, #9]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	4a17      	ldr	r2, [pc, #92]	; (8006fc8 <FATFS_LinkDriverEx+0x94>)
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006f72:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <FATFS_LinkDriverEx+0x94>)
 8006f74:	7a5b      	ldrb	r3, [r3, #9]
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4b13      	ldr	r3, [pc, #76]	; (8006fc8 <FATFS_LinkDriverEx+0x94>)
 8006f7c:	4413      	add	r3, r2
 8006f7e:	79fa      	ldrb	r2, [r7, #7]
 8006f80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f82:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <FATFS_LinkDriverEx+0x94>)
 8006f84:	7a5b      	ldrb	r3, [r3, #9]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	b2d1      	uxtb	r1, r2
 8006f8c:	4a0e      	ldr	r2, [pc, #56]	; (8006fc8 <FATFS_LinkDriverEx+0x94>)
 8006f8e:	7251      	strb	r1, [r2, #9]
 8006f90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f92:	7dbb      	ldrb	r3, [r7, #22]
 8006f94:	3330      	adds	r3, #48	; 0x30
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	223a      	movs	r2, #58	; 0x3a
 8006fa2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	3302      	adds	r3, #2
 8006fa8:	222f      	movs	r2, #47	; 0x2f
 8006faa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3303      	adds	r3, #3
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	200006ac 	.word	0x200006ac

08006fcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff ffaa 	bl	8006f34 <FATFS_LinkDriverEx>
 8006fe0:	4603      	mov	r3, r0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <__NVIC_SetPriority>:
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	db0a      	blt.n	8007016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	b2da      	uxtb	r2, r3
 8007004:	490c      	ldr	r1, [pc, #48]	; (8007038 <__NVIC_SetPriority+0x4c>)
 8007006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700a:	0112      	lsls	r2, r2, #4
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	440b      	add	r3, r1
 8007010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007014:	e00a      	b.n	800702c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	b2da      	uxtb	r2, r3
 800701a:	4908      	ldr	r1, [pc, #32]	; (800703c <__NVIC_SetPriority+0x50>)
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	3b04      	subs	r3, #4
 8007024:	0112      	lsls	r2, r2, #4
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	440b      	add	r3, r1
 800702a:	761a      	strb	r2, [r3, #24]
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	e000e100 	.word	0xe000e100
 800703c:	e000ed00 	.word	0xe000ed00

08007040 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <SysTick_Handler+0x1c>)
 8007046:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007048:	f001 fcfe 	bl	8008a48 <xTaskGetSchedulerState>
 800704c:	4603      	mov	r3, r0
 800704e:	2b01      	cmp	r3, #1
 8007050:	d001      	beq.n	8007056 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007052:	f002 fae9 	bl	8009628 <xPortSysTickHandler>
  }
}
 8007056:	bf00      	nop
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	e000e010 	.word	0xe000e010

08007060 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007064:	2100      	movs	r1, #0
 8007066:	f06f 0004 	mvn.w	r0, #4
 800706a:	f7ff ffbf 	bl	8006fec <__NVIC_SetPriority>
#endif
}
 800706e:	bf00      	nop
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800707a:	f3ef 8305 	mrs	r3, IPSR
 800707e:	603b      	str	r3, [r7, #0]
  return(result);
 8007080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007086:	f06f 0305 	mvn.w	r3, #5
 800708a:	607b      	str	r3, [r7, #4]
 800708c:	e00c      	b.n	80070a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800708e:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <osKernelInitialize+0x44>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d105      	bne.n	80070a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007096:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <osKernelInitialize+0x44>)
 8007098:	2201      	movs	r2, #1
 800709a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800709c:	2300      	movs	r3, #0
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	e002      	b.n	80070a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80070a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070a8:	687b      	ldr	r3, [r7, #4]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	200006b8 	.word	0x200006b8

080070bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070c2:	f3ef 8305 	mrs	r3, IPSR
 80070c6:	603b      	str	r3, [r7, #0]
  return(result);
 80070c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80070ce:	f06f 0305 	mvn.w	r3, #5
 80070d2:	607b      	str	r3, [r7, #4]
 80070d4:	e010      	b.n	80070f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <osKernelStart+0x48>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d109      	bne.n	80070f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80070de:	f7ff ffbf 	bl	8007060 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80070e2:	4b08      	ldr	r3, [pc, #32]	; (8007104 <osKernelStart+0x48>)
 80070e4:	2202      	movs	r2, #2
 80070e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80070e8:	f001 f866 	bl	80081b8 <vTaskStartScheduler>
      stat = osOK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	607b      	str	r3, [r7, #4]
 80070f0:	e002      	b.n	80070f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070f8:	687b      	ldr	r3, [r7, #4]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	200006b8 	.word	0x200006b8

08007108 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007108:	b580      	push	{r7, lr}
 800710a:	b08e      	sub	sp, #56	; 0x38
 800710c:	af04      	add	r7, sp, #16
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007118:	f3ef 8305 	mrs	r3, IPSR
 800711c:	617b      	str	r3, [r7, #20]
  return(result);
 800711e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007120:	2b00      	cmp	r3, #0
 8007122:	d17e      	bne.n	8007222 <osThreadNew+0x11a>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d07b      	beq.n	8007222 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800712a:	2380      	movs	r3, #128	; 0x80
 800712c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800712e:	2318      	movs	r3, #24
 8007130:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800713a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d045      	beq.n	80071ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <osThreadNew+0x48>
        name = attr->name;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d008      	beq.n	8007176 <osThreadNew+0x6e>
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	2b38      	cmp	r3, #56	; 0x38
 8007168:	d805      	bhi.n	8007176 <osThreadNew+0x6e>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <osThreadNew+0x72>
        return (NULL);
 8007176:	2300      	movs	r3, #0
 8007178:	e054      	b.n	8007224 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	089b      	lsrs	r3, r3, #2
 8007188:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00e      	beq.n	80071b0 <osThreadNew+0xa8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	2b5b      	cmp	r3, #91	; 0x5b
 8007198:	d90a      	bls.n	80071b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d006      	beq.n	80071b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <osThreadNew+0xa8>
        mem = 1;
 80071aa:	2301      	movs	r3, #1
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	e010      	b.n	80071d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10c      	bne.n	80071d2 <osThreadNew+0xca>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d108      	bne.n	80071d2 <osThreadNew+0xca>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <osThreadNew+0xca>
          mem = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	61bb      	str	r3, [r7, #24]
 80071cc:	e001      	b.n	80071d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d110      	bne.n	80071fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071e0:	9202      	str	r2, [sp, #8]
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	6a3a      	ldr	r2, [r7, #32]
 80071ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 fe0c 	bl	8007e0c <xTaskCreateStatic>
 80071f4:	4603      	mov	r3, r0
 80071f6:	613b      	str	r3, [r7, #16]
 80071f8:	e013      	b.n	8007222 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d110      	bne.n	8007222 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	b29a      	uxth	r2, r3
 8007204:	f107 0310 	add.w	r3, r7, #16
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fe57 	bl	8007ec6 <xTaskCreate>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d001      	beq.n	8007222 <osThreadNew+0x11a>
            hTask = NULL;
 800721e:	2300      	movs	r3, #0
 8007220:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007222:	693b      	ldr	r3, [r7, #16]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3728      	adds	r7, #40	; 0x28
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007234:	f3ef 8305 	mrs	r3, IPSR
 8007238:	60bb      	str	r3, [r7, #8]
  return(result);
 800723a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <osDelay+0x1c>
    stat = osErrorISR;
 8007240:	f06f 0305 	mvn.w	r3, #5
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	e007      	b.n	8007258 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 ff7c 	bl	8008150 <vTaskDelay>
    }
  }

  return (stat);
 8007258:	68fb      	ldr	r3, [r7, #12]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4a07      	ldr	r2, [pc, #28]	; (8007290 <vApplicationGetIdleTaskMemory+0x2c>)
 8007274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	4a06      	ldr	r2, [pc, #24]	; (8007294 <vApplicationGetIdleTaskMemory+0x30>)
 800727a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2280      	movs	r2, #128	; 0x80
 8007280:	601a      	str	r2, [r3, #0]
}
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	200006bc 	.word	0x200006bc
 8007294:	20000718 	.word	0x20000718

08007298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4a07      	ldr	r2, [pc, #28]	; (80072c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80072a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4a06      	ldr	r2, [pc, #24]	; (80072c8 <vApplicationGetTimerTaskMemory+0x30>)
 80072ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072b6:	601a      	str	r2, [r3, #0]
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	20000918 	.word	0x20000918
 80072c8:	20000974 	.word	0x20000974

080072cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f103 0208 	add.w	r2, r3, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f103 0208 	add.w	r2, r3, #8
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f103 0208 	add.w	r2, r3, #8
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800731a:	bf00      	nop
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	601a      	str	r2, [r3, #0]
}
 8007362:	bf00      	nop
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007384:	d103      	bne.n	800738e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	e00c      	b.n	80073a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3308      	adds	r3, #8
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	e002      	b.n	800739c <vListInsert+0x2e>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d2f6      	bcs.n	8007396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]
}
 80073d4:	bf00      	nop
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6892      	ldr	r2, [r2, #8]
 80073f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6852      	ldr	r2, [r2, #4]
 8007400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	429a      	cmp	r2, r3
 800740a:	d103      	bne.n	8007414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	1e5a      	subs	r2, r3, #1
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800745e:	f002 f851 	bl	8009504 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	68f9      	ldr	r1, [r7, #12]
 800746c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800746e:	fb01 f303 	mul.w	r3, r1, r3
 8007472:	441a      	add	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748e:	3b01      	subs	r3, #1
 8007490:	68f9      	ldr	r1, [r7, #12]
 8007492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007494:	fb01 f303 	mul.w	r3, r1, r3
 8007498:	441a      	add	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	22ff      	movs	r2, #255	; 0xff
 80074a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	22ff      	movs	r2, #255	; 0xff
 80074aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d114      	bne.n	80074de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01a      	beq.n	80074f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3310      	adds	r3, #16
 80074c0:	4618      	mov	r0, r3
 80074c2:	f001 f903 	bl	80086cc <xTaskRemoveFromEventList>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d012      	beq.n	80074f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80074cc:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <xQueueGenericReset+0xcc>)
 80074ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	e009      	b.n	80074f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3310      	adds	r3, #16
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fef2 	bl	80072cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3324      	adds	r3, #36	; 0x24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff feed 	bl	80072cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074f2:	f002 f837 	bl	8009564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074f6:	2301      	movs	r3, #1
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	e000ed04 	.word	0xe000ed04

08007504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08e      	sub	sp, #56	; 0x38
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800752a:	bf00      	nop
 800752c:	e7fe      	b.n	800752c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <xQueueGenericCreateStatic+0x52>
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <xQueueGenericCreateStatic+0x56>
 8007556:	2301      	movs	r3, #1
 8007558:	e000      	b.n	800755c <xQueueGenericCreateStatic+0x58>
 800755a:	2300      	movs	r3, #0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	623b      	str	r3, [r7, #32]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <xQueueGenericCreateStatic+0x7e>
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <xQueueGenericCreateStatic+0x82>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <xQueueGenericCreateStatic+0x84>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	61fb      	str	r3, [r7, #28]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075a2:	2350      	movs	r3, #80	; 0x50
 80075a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b50      	cmp	r3, #80	; 0x50
 80075aa:	d00a      	beq.n	80075c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	61bb      	str	r3, [r7, #24]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00d      	beq.n	80075ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	4613      	mov	r3, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f805 	bl	80075f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3730      	adds	r7, #48	; 0x30
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e002      	b.n	8007616 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007622:	2101      	movs	r1, #1
 8007624:	69b8      	ldr	r0, [r7, #24]
 8007626:	f7ff ff05 	bl	8007434 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	78fa      	ldrb	r2, [r7, #3]
 800762e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08e      	sub	sp, #56	; 0x38
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800764a:	2300      	movs	r3, #0
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <xQueueGenericSend+0x32>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <xQueueGenericSend+0x40>
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <xQueueGenericSend+0x44>
 800767c:	2301      	movs	r3, #1
 800767e:	e000      	b.n	8007682 <xQueueGenericSend+0x46>
 8007680:	2300      	movs	r3, #0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <xQueueGenericSend+0x60>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d103      	bne.n	80076aa <xQueueGenericSend+0x6e>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d101      	bne.n	80076ae <xQueueGenericSend+0x72>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e000      	b.n	80076b0 <xQueueGenericSend+0x74>
 80076ae:	2300      	movs	r3, #0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <xQueueGenericSend+0x8e>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	623b      	str	r3, [r7, #32]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076ca:	f001 f9bd 	bl	8008a48 <xTaskGetSchedulerState>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <xQueueGenericSend+0x9e>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <xQueueGenericSend+0xa2>
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <xQueueGenericSend+0xa4>
 80076de:	2300      	movs	r3, #0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10a      	bne.n	80076fa <xQueueGenericSend+0xbe>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	61fb      	str	r3, [r7, #28]
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076fa:	f001 ff03 	bl	8009504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007706:	429a      	cmp	r2, r3
 8007708:	d302      	bcc.n	8007710 <xQueueGenericSend+0xd4>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b02      	cmp	r3, #2
 800770e:	d129      	bne.n	8007764 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007716:	f000 fa0b 	bl	8007b30 <prvCopyDataToQueue>
 800771a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b00      	cmp	r3, #0
 8007722:	d010      	beq.n	8007746 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	3324      	adds	r3, #36	; 0x24
 8007728:	4618      	mov	r0, r3
 800772a:	f000 ffcf 	bl	80086cc <xTaskRemoveFromEventList>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d013      	beq.n	800775c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007734:	4b3f      	ldr	r3, [pc, #252]	; (8007834 <xQueueGenericSend+0x1f8>)
 8007736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	e00a      	b.n	800775c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800774c:	4b39      	ldr	r3, [pc, #228]	; (8007834 <xQueueGenericSend+0x1f8>)
 800774e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800775c:	f001 ff02 	bl	8009564 <vPortExitCritical>
				return pdPASS;
 8007760:	2301      	movs	r3, #1
 8007762:	e063      	b.n	800782c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d103      	bne.n	8007772 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800776a:	f001 fefb 	bl	8009564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800776e:	2300      	movs	r3, #0
 8007770:	e05c      	b.n	800782c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007774:	2b00      	cmp	r3, #0
 8007776:	d106      	bne.n	8007786 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007778:	f107 0314 	add.w	r3, r7, #20
 800777c:	4618      	mov	r0, r3
 800777e:	f001 f809 	bl	8008794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007782:	2301      	movs	r3, #1
 8007784:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007786:	f001 feed 	bl	8009564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800778a:	f000 fd7b 	bl	8008284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800778e:	f001 feb9 	bl	8009504 <vPortEnterCritical>
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007798:	b25b      	sxtb	r3, r3
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800779e:	d103      	bne.n	80077a8 <xQueueGenericSend+0x16c>
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077ae:	b25b      	sxtb	r3, r3
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077b4:	d103      	bne.n	80077be <xQueueGenericSend+0x182>
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077be:	f001 fed1 	bl	8009564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077c2:	1d3a      	adds	r2, r7, #4
 80077c4:	f107 0314 	add.w	r3, r7, #20
 80077c8:	4611      	mov	r1, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fff8 	bl	80087c0 <xTaskCheckForTimeOut>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d124      	bne.n	8007820 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80077d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077d8:	f000 faa2 	bl	8007d20 <prvIsQueueFull>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d018      	beq.n	8007814 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	3310      	adds	r3, #16
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	4611      	mov	r1, r2
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 ff1e 	bl	800862c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80077f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077f2:	f000 fa2d 	bl	8007c50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80077f6:	f000 fd53 	bl	80082a0 <xTaskResumeAll>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f47f af7c 	bne.w	80076fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007802:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <xQueueGenericSend+0x1f8>)
 8007804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	e772      	b.n	80076fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007816:	f000 fa1b 	bl	8007c50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800781a:	f000 fd41 	bl	80082a0 <xTaskResumeAll>
 800781e:	e76c      	b.n	80076fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007822:	f000 fa15 	bl	8007c50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007826:	f000 fd3b 	bl	80082a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800782a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800782c:	4618      	mov	r0, r3
 800782e:	3738      	adds	r7, #56	; 0x38
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b090      	sub	sp, #64	; 0x40
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10a      	bne.n	8007866 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <xQueueGenericSendFromISR+0x3c>
 800786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <xQueueGenericSendFromISR+0x40>
 8007874:	2301      	movs	r3, #1
 8007876:	e000      	b.n	800787a <xQueueGenericSendFromISR+0x42>
 8007878:	2300      	movs	r3, #0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d103      	bne.n	80078a2 <xQueueGenericSendFromISR+0x6a>
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d101      	bne.n	80078a6 <xQueueGenericSendFromISR+0x6e>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <xQueueGenericSendFromISR+0x70>
 80078a6:	2300      	movs	r3, #0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	623b      	str	r3, [r7, #32]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078c2:	f001 ff01 	bl	80096c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078c6:	f3ef 8211 	mrs	r2, BASEPRI
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	61fa      	str	r2, [r7, #28]
 80078dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80078de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d302      	bcc.n	80078f4 <xQueueGenericSendFromISR+0xbc>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d12f      	bne.n	8007954 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007902:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800790a:	f000 f911 	bl	8007b30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800790e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007916:	d112      	bne.n	800793e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	2b00      	cmp	r3, #0
 800791e:	d016      	beq.n	800794e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007922:	3324      	adds	r3, #36	; 0x24
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fed1 	bl	80086cc <xTaskRemoveFromEventList>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00e      	beq.n	800794e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	e007      	b.n	800794e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800793e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007942:	3301      	adds	r3, #1
 8007944:	b2db      	uxtb	r3, r3
 8007946:	b25a      	sxtb	r2, r3
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800794e:	2301      	movs	r3, #1
 8007950:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007952:	e001      	b.n	8007958 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007954:	2300      	movs	r3, #0
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007962:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007966:	4618      	mov	r0, r3
 8007968:	3740      	adds	r7, #64	; 0x40
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08c      	sub	sp, #48	; 0x30
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800797c:	2300      	movs	r3, #0
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10a      	bne.n	80079a0 <xQueueReceive+0x30>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	623b      	str	r3, [r7, #32]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d103      	bne.n	80079ae <xQueueReceive+0x3e>
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <xQueueReceive+0x42>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <xQueueReceive+0x44>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <xQueueReceive+0x5e>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	61fb      	str	r3, [r7, #28]
}
 80079ca:	bf00      	nop
 80079cc:	e7fe      	b.n	80079cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079ce:	f001 f83b 	bl	8008a48 <xTaskGetSchedulerState>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <xQueueReceive+0x6e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <xQueueReceive+0x72>
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <xQueueReceive+0x74>
 80079e2:	2300      	movs	r3, #0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <xQueueReceive+0x8e>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	61bb      	str	r3, [r7, #24]
}
 80079fa:	bf00      	nop
 80079fc:	e7fe      	b.n	80079fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079fe:	f001 fd81 	bl	8009504 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d01f      	beq.n	8007a4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a12:	f000 f8f7 	bl	8007c04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	1e5a      	subs	r2, r3, #1
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00f      	beq.n	8007a46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	3310      	adds	r3, #16
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fe4e 	bl	80086cc <xTaskRemoveFromEventList>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d007      	beq.n	8007a46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a36:	4b3d      	ldr	r3, [pc, #244]	; (8007b2c <xQueueReceive+0x1bc>)
 8007a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a46:	f001 fd8d 	bl	8009564 <vPortExitCritical>
				return pdPASS;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e069      	b.n	8007b22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a54:	f001 fd86 	bl	8009564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e062      	b.n	8007b22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a62:	f107 0310 	add.w	r3, r7, #16
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fe94 	bl	8008794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a70:	f001 fd78 	bl	8009564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a74:	f000 fc06 	bl	8008284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a78:	f001 fd44 	bl	8009504 <vPortEnterCritical>
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a82:	b25b      	sxtb	r3, r3
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a88:	d103      	bne.n	8007a92 <xQueueReceive+0x122>
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a98:	b25b      	sxtb	r3, r3
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a9e:	d103      	bne.n	8007aa8 <xQueueReceive+0x138>
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aa8:	f001 fd5c 	bl	8009564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007aac:	1d3a      	adds	r2, r7, #4
 8007aae:	f107 0310 	add.w	r3, r7, #16
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fe83 	bl	80087c0 <xTaskCheckForTimeOut>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d123      	bne.n	8007b08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ac2:	f000 f917 	bl	8007cf4 <prvIsQueueEmpty>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d017      	beq.n	8007afc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ace:	3324      	adds	r3, #36	; 0x24
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fda9 	bl	800862c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007adc:	f000 f8b8 	bl	8007c50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ae0:	f000 fbde 	bl	80082a0 <xTaskResumeAll>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d189      	bne.n	80079fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007aea:	4b10      	ldr	r3, [pc, #64]	; (8007b2c <xQueueReceive+0x1bc>)
 8007aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	e780      	b.n	80079fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007afe:	f000 f8a7 	bl	8007c50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b02:	f000 fbcd 	bl	80082a0 <xTaskResumeAll>
 8007b06:	e77a      	b.n	80079fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b0a:	f000 f8a1 	bl	8007c50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b0e:	f000 fbc7 	bl	80082a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b14:	f000 f8ee 	bl	8007cf4 <prvIsQueueEmpty>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f43f af6f 	beq.w	80079fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3730      	adds	r7, #48	; 0x30
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	e000ed04 	.word	0xe000ed04

08007b30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10d      	bne.n	8007b6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d14d      	bne.n	8007bf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 ff92 	bl	8008a84 <xTaskPriorityDisinherit>
 8007b60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	609a      	str	r2, [r3, #8]
 8007b68:	e043      	b.n	8007bf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d119      	bne.n	8007ba4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6858      	ldr	r0, [r3, #4]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b78:	461a      	mov	r2, r3
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	f001 fff2 	bl	8009b64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b88:	441a      	add	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d32b      	bcc.n	8007bf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	e026      	b.n	8007bf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68d8      	ldr	r0, [r3, #12]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	461a      	mov	r2, r3
 8007bae:	68b9      	ldr	r1, [r7, #8]
 8007bb0:	f001 ffd8 	bl	8009b64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	68da      	ldr	r2, [r3, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	425b      	negs	r3, r3
 8007bbe:	441a      	add	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d207      	bcs.n	8007be0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	425b      	negs	r3, r3
 8007bda:	441a      	add	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d105      	bne.n	8007bf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007bfa:	697b      	ldr	r3, [r7, #20]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d018      	beq.n	8007c48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	441a      	add	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d303      	bcc.n	8007c38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68d9      	ldr	r1, [r3, #12]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c40:	461a      	mov	r2, r3
 8007c42:	6838      	ldr	r0, [r7, #0]
 8007c44:	f001 ff8e 	bl	8009b64 <memcpy>
	}
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c58:	f001 fc54 	bl	8009504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c64:	e011      	b.n	8007c8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d012      	beq.n	8007c94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3324      	adds	r3, #36	; 0x24
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fd2a 	bl	80086cc <xTaskRemoveFromEventList>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c7e:	f000 fe01 	bl	8008884 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	dce9      	bgt.n	8007c66 <prvUnlockQueue+0x16>
 8007c92:	e000      	b.n	8007c96 <prvUnlockQueue+0x46>
					break;
 8007c94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	22ff      	movs	r2, #255	; 0xff
 8007c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c9e:	f001 fc61 	bl	8009564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ca2:	f001 fc2f 	bl	8009504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cae:	e011      	b.n	8007cd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d012      	beq.n	8007cde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3310      	adds	r3, #16
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fd05 	bl	80086cc <xTaskRemoveFromEventList>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007cc8:	f000 fddc 	bl	8008884 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	dce9      	bgt.n	8007cb0 <prvUnlockQueue+0x60>
 8007cdc:	e000      	b.n	8007ce0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	22ff      	movs	r2, #255	; 0xff
 8007ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ce8:	f001 fc3c 	bl	8009564 <vPortExitCritical>
}
 8007cec:	bf00      	nop
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cfc:	f001 fc02 	bl	8009504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	e001      	b.n	8007d12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d12:	f001 fc27 	bl	8009564 <vPortExitCritical>

	return xReturn;
 8007d16:	68fb      	ldr	r3, [r7, #12]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d28:	f001 fbec 	bl	8009504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d102      	bne.n	8007d3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	e001      	b.n	8007d42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d42:	f001 fc0f 	bl	8009564 <vPortExitCritical>

	return xReturn;
 8007d46:	68fb      	ldr	r3, [r7, #12]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e014      	b.n	8007d8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d60:	4a0f      	ldr	r2, [pc, #60]	; (8007da0 <vQueueAddToRegistry+0x50>)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10b      	bne.n	8007d84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d6c:	490c      	ldr	r1, [pc, #48]	; (8007da0 <vQueueAddToRegistry+0x50>)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d76:	4a0a      	ldr	r2, [pc, #40]	; (8007da0 <vQueueAddToRegistry+0x50>)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d82:	e006      	b.n	8007d92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3301      	adds	r3, #1
 8007d88:	60fb      	str	r3, [r7, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b07      	cmp	r3, #7
 8007d8e:	d9e7      	bls.n	8007d60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000d74 	.word	0x20000d74

08007da4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007db4:	f001 fba6 	bl	8009504 <vPortEnterCritical>
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dbe:	b25b      	sxtb	r3, r3
 8007dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dc4:	d103      	bne.n	8007dce <vQueueWaitForMessageRestricted+0x2a>
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dd4:	b25b      	sxtb	r3, r3
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dda:	d103      	bne.n	8007de4 <vQueueWaitForMessageRestricted+0x40>
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007de4:	f001 fbbe 	bl	8009564 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d106      	bne.n	8007dfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	3324      	adds	r3, #36	; 0x24
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	68b9      	ldr	r1, [r7, #8]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 fc3b 	bl	8008674 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007dfe:	6978      	ldr	r0, [r7, #20]
 8007e00:	f7ff ff26 	bl	8007c50 <prvUnlockQueue>
	}
 8007e04:	bf00      	nop
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08e      	sub	sp, #56	; 0x38
 8007e10:	af04      	add	r7, sp, #16
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	623b      	str	r3, [r7, #32]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <xTaskCreateStatic+0x46>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	61fb      	str	r3, [r7, #28]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e52:	235c      	movs	r3, #92	; 0x5c
 8007e54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b5c      	cmp	r3, #92	; 0x5c
 8007e5a:	d00a      	beq.n	8007e72 <xTaskCreateStatic+0x66>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	61bb      	str	r3, [r7, #24]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d01e      	beq.n	8007eb8 <xTaskCreateStatic+0xac>
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01b      	beq.n	8007eb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e92:	2300      	movs	r3, #0
 8007e94:	9303      	str	r3, [sp, #12]
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	9302      	str	r3, [sp, #8]
 8007e9a:	f107 0314 	add.w	r3, r7, #20
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 f850 	bl	8007f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eb2:	f000 f8dd 	bl	8008070 <prvAddNewTaskToReadyList>
 8007eb6:	e001      	b.n	8007ebc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ebc:	697b      	ldr	r3, [r7, #20]
	}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3728      	adds	r7, #40	; 0x28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b08c      	sub	sp, #48	; 0x30
 8007eca:	af04      	add	r7, sp, #16
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	603b      	str	r3, [r7, #0]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ed6:	88fb      	ldrh	r3, [r7, #6]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 fc34 	bl	8009748 <pvPortMalloc>
 8007ee0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00e      	beq.n	8007f06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ee8:	205c      	movs	r0, #92	; 0x5c
 8007eea:	f001 fc2d 	bl	8009748 <pvPortMalloc>
 8007eee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	631a      	str	r2, [r3, #48]	; 0x30
 8007efc:	e005      	b.n	8007f0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007efe:	6978      	ldr	r0, [r7, #20]
 8007f00:	f001 fcee 	bl	80098e0 <vPortFree>
 8007f04:	e001      	b.n	8007f0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d017      	beq.n	8007f40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f18:	88fa      	ldrh	r2, [r7, #6]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9303      	str	r3, [sp, #12]
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	9302      	str	r3, [sp, #8]
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68b9      	ldr	r1, [r7, #8]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 f80e 	bl	8007f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f34:	69f8      	ldr	r0, [r7, #28]
 8007f36:	f000 f89b 	bl	8008070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	61bb      	str	r3, [r7, #24]
 8007f3e:	e002      	b.n	8007f46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f46:	69bb      	ldr	r3, [r7, #24]
	}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3720      	adds	r7, #32
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	461a      	mov	r2, r3
 8007f68:	21a5      	movs	r1, #165	; 0xa5
 8007f6a:	f001 fe09 	bl	8009b80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f023 0307 	bic.w	r3, r3, #7
 8007f86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	617b      	str	r3, [r7, #20]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01f      	beq.n	8007fee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61fb      	str	r3, [r7, #28]
 8007fb2:	e012      	b.n	8007fda <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	4413      	add	r3, r2
 8007fba:	7819      	ldrb	r1, [r3, #0]
 8007fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	3334      	adds	r3, #52	; 0x34
 8007fc4:	460a      	mov	r2, r1
 8007fc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	4413      	add	r3, r2
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d006      	beq.n	8007fe2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	61fb      	str	r3, [r7, #28]
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	2b0f      	cmp	r3, #15
 8007fde:	d9e9      	bls.n	8007fb4 <prvInitialiseNewTask+0x64>
 8007fe0:	e000      	b.n	8007fe4 <prvInitialiseNewTask+0x94>
			{
				break;
 8007fe2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fec:	e003      	b.n	8007ff6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	2b37      	cmp	r3, #55	; 0x37
 8007ffa:	d901      	bls.n	8008000 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ffc:	2337      	movs	r3, #55	; 0x37
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008004:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800800a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	2200      	movs	r2, #0
 8008010:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	3304      	adds	r3, #4
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff f978 	bl	800730c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	3318      	adds	r3, #24
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff f973 	bl	800730c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800803a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	2200      	movs	r2, #0
 8008040:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	68f9      	ldr	r1, [r7, #12]
 800804e:	69b8      	ldr	r0, [r7, #24]
 8008050:	f001 f928 	bl	80092a4 <pxPortInitialiseStack>
 8008054:	4602      	mov	r2, r0
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008066:	bf00      	nop
 8008068:	3720      	adds	r7, #32
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008078:	f001 fa44 	bl	8009504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800807c:	4b2d      	ldr	r3, [pc, #180]	; (8008134 <prvAddNewTaskToReadyList+0xc4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3301      	adds	r3, #1
 8008082:	4a2c      	ldr	r2, [pc, #176]	; (8008134 <prvAddNewTaskToReadyList+0xc4>)
 8008084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008086:	4b2c      	ldr	r3, [pc, #176]	; (8008138 <prvAddNewTaskToReadyList+0xc8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d109      	bne.n	80080a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800808e:	4a2a      	ldr	r2, [pc, #168]	; (8008138 <prvAddNewTaskToReadyList+0xc8>)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008094:	4b27      	ldr	r3, [pc, #156]	; (8008134 <prvAddNewTaskToReadyList+0xc4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d110      	bne.n	80080be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800809c:	f000 fc16 	bl	80088cc <prvInitialiseTaskLists>
 80080a0:	e00d      	b.n	80080be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080a2:	4b26      	ldr	r3, [pc, #152]	; (800813c <prvAddNewTaskToReadyList+0xcc>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d109      	bne.n	80080be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080aa:	4b23      	ldr	r3, [pc, #140]	; (8008138 <prvAddNewTaskToReadyList+0xc8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d802      	bhi.n	80080be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080b8:	4a1f      	ldr	r2, [pc, #124]	; (8008138 <prvAddNewTaskToReadyList+0xc8>)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080be:	4b20      	ldr	r3, [pc, #128]	; (8008140 <prvAddNewTaskToReadyList+0xd0>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	4a1e      	ldr	r2, [pc, #120]	; (8008140 <prvAddNewTaskToReadyList+0xd0>)
 80080c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080c8:	4b1d      	ldr	r3, [pc, #116]	; (8008140 <prvAddNewTaskToReadyList+0xd0>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d4:	4b1b      	ldr	r3, [pc, #108]	; (8008144 <prvAddNewTaskToReadyList+0xd4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d903      	bls.n	80080e4 <prvAddNewTaskToReadyList+0x74>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	4a18      	ldr	r2, [pc, #96]	; (8008144 <prvAddNewTaskToReadyList+0xd4>)
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4a15      	ldr	r2, [pc, #84]	; (8008148 <prvAddNewTaskToReadyList+0xd8>)
 80080f2:	441a      	add	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7ff f913 	bl	8007326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008100:	f001 fa30 	bl	8009564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008104:	4b0d      	ldr	r3, [pc, #52]	; (800813c <prvAddNewTaskToReadyList+0xcc>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00e      	beq.n	800812a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800810c:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <prvAddNewTaskToReadyList+0xc8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008116:	429a      	cmp	r2, r3
 8008118:	d207      	bcs.n	800812a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800811a:	4b0c      	ldr	r3, [pc, #48]	; (800814c <prvAddNewTaskToReadyList+0xdc>)
 800811c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20001288 	.word	0x20001288
 8008138:	20000db4 	.word	0x20000db4
 800813c:	20001294 	.word	0x20001294
 8008140:	200012a4 	.word	0x200012a4
 8008144:	20001290 	.word	0x20001290
 8008148:	20000db8 	.word	0x20000db8
 800814c:	e000ed04 	.word	0xe000ed04

08008150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d017      	beq.n	8008192 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008162:	4b13      	ldr	r3, [pc, #76]	; (80081b0 <vTaskDelay+0x60>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00a      	beq.n	8008180 <vTaskDelay+0x30>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	60bb      	str	r3, [r7, #8]
}
 800817c:	bf00      	nop
 800817e:	e7fe      	b.n	800817e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008180:	f000 f880 	bl	8008284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008184:	2100      	movs	r1, #0
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fcea 	bl	8008b60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800818c:	f000 f888 	bl	80082a0 <xTaskResumeAll>
 8008190:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d107      	bne.n	80081a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008198:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <vTaskDelay+0x64>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081a8:	bf00      	nop
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	200012b0 	.word	0x200012b0
 80081b4:	e000ed04 	.word	0xe000ed04

080081b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081c6:	463a      	mov	r2, r7
 80081c8:	1d39      	adds	r1, r7, #4
 80081ca:	f107 0308 	add.w	r3, r7, #8
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff f848 	bl	8007264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	9202      	str	r2, [sp, #8]
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	2300      	movs	r3, #0
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	2300      	movs	r3, #0
 80081e4:	460a      	mov	r2, r1
 80081e6:	4921      	ldr	r1, [pc, #132]	; (800826c <vTaskStartScheduler+0xb4>)
 80081e8:	4821      	ldr	r0, [pc, #132]	; (8008270 <vTaskStartScheduler+0xb8>)
 80081ea:	f7ff fe0f 	bl	8007e0c <xTaskCreateStatic>
 80081ee:	4603      	mov	r3, r0
 80081f0:	4a20      	ldr	r2, [pc, #128]	; (8008274 <vTaskStartScheduler+0xbc>)
 80081f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081f4:	4b1f      	ldr	r3, [pc, #124]	; (8008274 <vTaskStartScheduler+0xbc>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081fc:	2301      	movs	r3, #1
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e001      	b.n	8008206 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008202:	2300      	movs	r3, #0
 8008204:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d102      	bne.n	8008212 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800820c:	f000 fcfc 	bl	8008c08 <xTimerCreateTimerTask>
 8008210:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d116      	bne.n	8008246 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	613b      	str	r3, [r7, #16]
}
 800822a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800822c:	4b12      	ldr	r3, [pc, #72]	; (8008278 <vTaskStartScheduler+0xc0>)
 800822e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008232:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008234:	4b11      	ldr	r3, [pc, #68]	; (800827c <vTaskStartScheduler+0xc4>)
 8008236:	2201      	movs	r2, #1
 8008238:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800823a:	4b11      	ldr	r3, [pc, #68]	; (8008280 <vTaskStartScheduler+0xc8>)
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008240:	f001 f8be 	bl	80093c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008244:	e00e      	b.n	8008264 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800824c:	d10a      	bne.n	8008264 <vTaskStartScheduler+0xac>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	60fb      	str	r3, [r7, #12]
}
 8008260:	bf00      	nop
 8008262:	e7fe      	b.n	8008262 <vTaskStartScheduler+0xaa>
}
 8008264:	bf00      	nop
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	08009bb4 	.word	0x08009bb4
 8008270:	0800889d 	.word	0x0800889d
 8008274:	200012ac 	.word	0x200012ac
 8008278:	200012a8 	.word	0x200012a8
 800827c:	20001294 	.word	0x20001294
 8008280:	2000128c 	.word	0x2000128c

08008284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008288:	4b04      	ldr	r3, [pc, #16]	; (800829c <vTaskSuspendAll+0x18>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3301      	adds	r3, #1
 800828e:	4a03      	ldr	r2, [pc, #12]	; (800829c <vTaskSuspendAll+0x18>)
 8008290:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008292:	bf00      	nop
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	200012b0 	.word	0x200012b0

080082a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082ae:	4b42      	ldr	r3, [pc, #264]	; (80083b8 <xTaskResumeAll+0x118>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10a      	bne.n	80082cc <xTaskResumeAll+0x2c>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	603b      	str	r3, [r7, #0]
}
 80082c8:	bf00      	nop
 80082ca:	e7fe      	b.n	80082ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082cc:	f001 f91a 	bl	8009504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082d0:	4b39      	ldr	r3, [pc, #228]	; (80083b8 <xTaskResumeAll+0x118>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	4a38      	ldr	r2, [pc, #224]	; (80083b8 <xTaskResumeAll+0x118>)
 80082d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082da:	4b37      	ldr	r3, [pc, #220]	; (80083b8 <xTaskResumeAll+0x118>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d162      	bne.n	80083a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082e2:	4b36      	ldr	r3, [pc, #216]	; (80083bc <xTaskResumeAll+0x11c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d05e      	beq.n	80083a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ea:	e02f      	b.n	800834c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ec:	4b34      	ldr	r3, [pc, #208]	; (80083c0 <xTaskResumeAll+0x120>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3318      	adds	r3, #24
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff f871 	bl	80073e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3304      	adds	r3, #4
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff f86c 	bl	80073e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	4b2d      	ldr	r3, [pc, #180]	; (80083c4 <xTaskResumeAll+0x124>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d903      	bls.n	800831c <xTaskResumeAll+0x7c>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	4a2a      	ldr	r2, [pc, #168]	; (80083c4 <xTaskResumeAll+0x124>)
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4a27      	ldr	r2, [pc, #156]	; (80083c8 <xTaskResumeAll+0x128>)
 800832a:	441a      	add	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3304      	adds	r3, #4
 8008330:	4619      	mov	r1, r3
 8008332:	4610      	mov	r0, r2
 8008334:	f7fe fff7 	bl	8007326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833c:	4b23      	ldr	r3, [pc, #140]	; (80083cc <xTaskResumeAll+0x12c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	429a      	cmp	r2, r3
 8008344:	d302      	bcc.n	800834c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008346:	4b22      	ldr	r3, [pc, #136]	; (80083d0 <xTaskResumeAll+0x130>)
 8008348:	2201      	movs	r2, #1
 800834a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800834c:	4b1c      	ldr	r3, [pc, #112]	; (80083c0 <xTaskResumeAll+0x120>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1cb      	bne.n	80082ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800835a:	f000 fb55 	bl	8008a08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800835e:	4b1d      	ldr	r3, [pc, #116]	; (80083d4 <xTaskResumeAll+0x134>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d010      	beq.n	800838c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800836a:	f000 f847 	bl	80083fc <xTaskIncrementTick>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008374:	4b16      	ldr	r3, [pc, #88]	; (80083d0 <xTaskResumeAll+0x130>)
 8008376:	2201      	movs	r2, #1
 8008378:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3b01      	subs	r3, #1
 800837e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1f1      	bne.n	800836a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008386:	4b13      	ldr	r3, [pc, #76]	; (80083d4 <xTaskResumeAll+0x134>)
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800838c:	4b10      	ldr	r3, [pc, #64]	; (80083d0 <xTaskResumeAll+0x130>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d009      	beq.n	80083a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008394:	2301      	movs	r3, #1
 8008396:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008398:	4b0f      	ldr	r3, [pc, #60]	; (80083d8 <xTaskResumeAll+0x138>)
 800839a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083a8:	f001 f8dc 	bl	8009564 <vPortExitCritical>

	return xAlreadyYielded;
 80083ac:	68bb      	ldr	r3, [r7, #8]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	200012b0 	.word	0x200012b0
 80083bc:	20001288 	.word	0x20001288
 80083c0:	20001248 	.word	0x20001248
 80083c4:	20001290 	.word	0x20001290
 80083c8:	20000db8 	.word	0x20000db8
 80083cc:	20000db4 	.word	0x20000db4
 80083d0:	2000129c 	.word	0x2000129c
 80083d4:	20001298 	.word	0x20001298
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <xTaskGetTickCount+0x1c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083e8:	687b      	ldr	r3, [r7, #4]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	2000128c 	.word	0x2000128c

080083fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008402:	2300      	movs	r3, #0
 8008404:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008406:	4b4f      	ldr	r3, [pc, #316]	; (8008544 <xTaskIncrementTick+0x148>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f040 808f 	bne.w	800852e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008410:	4b4d      	ldr	r3, [pc, #308]	; (8008548 <xTaskIncrementTick+0x14c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3301      	adds	r3, #1
 8008416:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008418:	4a4b      	ldr	r2, [pc, #300]	; (8008548 <xTaskIncrementTick+0x14c>)
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d120      	bne.n	8008466 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008424:	4b49      	ldr	r3, [pc, #292]	; (800854c <xTaskIncrementTick+0x150>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <xTaskIncrementTick+0x48>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	603b      	str	r3, [r7, #0]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <xTaskIncrementTick+0x46>
 8008444:	4b41      	ldr	r3, [pc, #260]	; (800854c <xTaskIncrementTick+0x150>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	4b41      	ldr	r3, [pc, #260]	; (8008550 <xTaskIncrementTick+0x154>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a3f      	ldr	r2, [pc, #252]	; (800854c <xTaskIncrementTick+0x150>)
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	4a3f      	ldr	r2, [pc, #252]	; (8008550 <xTaskIncrementTick+0x154>)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	4b3e      	ldr	r3, [pc, #248]	; (8008554 <xTaskIncrementTick+0x158>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3301      	adds	r3, #1
 800845e:	4a3d      	ldr	r2, [pc, #244]	; (8008554 <xTaskIncrementTick+0x158>)
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	f000 fad1 	bl	8008a08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008466:	4b3c      	ldr	r3, [pc, #240]	; (8008558 <xTaskIncrementTick+0x15c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	429a      	cmp	r2, r3
 800846e:	d349      	bcc.n	8008504 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008470:	4b36      	ldr	r3, [pc, #216]	; (800854c <xTaskIncrementTick+0x150>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d104      	bne.n	8008484 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800847a:	4b37      	ldr	r3, [pc, #220]	; (8008558 <xTaskIncrementTick+0x15c>)
 800847c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008480:	601a      	str	r2, [r3, #0]
					break;
 8008482:	e03f      	b.n	8008504 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008484:	4b31      	ldr	r3, [pc, #196]	; (800854c <xTaskIncrementTick+0x150>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	429a      	cmp	r2, r3
 800849a:	d203      	bcs.n	80084a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800849c:	4a2e      	ldr	r2, [pc, #184]	; (8008558 <xTaskIncrementTick+0x15c>)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084a2:	e02f      	b.n	8008504 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	3304      	adds	r3, #4
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fe ff99 	bl	80073e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	3318      	adds	r3, #24
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe ff90 	bl	80073e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c4:	4b25      	ldr	r3, [pc, #148]	; (800855c <xTaskIncrementTick+0x160>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d903      	bls.n	80084d4 <xTaskIncrementTick+0xd8>
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	4a22      	ldr	r2, [pc, #136]	; (800855c <xTaskIncrementTick+0x160>)
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d8:	4613      	mov	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4a1f      	ldr	r2, [pc, #124]	; (8008560 <xTaskIncrementTick+0x164>)
 80084e2:	441a      	add	r2, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4619      	mov	r1, r3
 80084ea:	4610      	mov	r0, r2
 80084ec:	f7fe ff1b 	bl	8007326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f4:	4b1b      	ldr	r3, [pc, #108]	; (8008564 <xTaskIncrementTick+0x168>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d3b8      	bcc.n	8008470 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084fe:	2301      	movs	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008502:	e7b5      	b.n	8008470 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008504:	4b17      	ldr	r3, [pc, #92]	; (8008564 <xTaskIncrementTick+0x168>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850a:	4915      	ldr	r1, [pc, #84]	; (8008560 <xTaskIncrementTick+0x164>)
 800850c:	4613      	mov	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d901      	bls.n	8008520 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008520:	4b11      	ldr	r3, [pc, #68]	; (8008568 <xTaskIncrementTick+0x16c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008528:	2301      	movs	r3, #1
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	e004      	b.n	8008538 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800852e:	4b0f      	ldr	r3, [pc, #60]	; (800856c <xTaskIncrementTick+0x170>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	4a0d      	ldr	r2, [pc, #52]	; (800856c <xTaskIncrementTick+0x170>)
 8008536:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008538:	697b      	ldr	r3, [r7, #20]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	200012b0 	.word	0x200012b0
 8008548:	2000128c 	.word	0x2000128c
 800854c:	20001240 	.word	0x20001240
 8008550:	20001244 	.word	0x20001244
 8008554:	200012a0 	.word	0x200012a0
 8008558:	200012a8 	.word	0x200012a8
 800855c:	20001290 	.word	0x20001290
 8008560:	20000db8 	.word	0x20000db8
 8008564:	20000db4 	.word	0x20000db4
 8008568:	2000129c 	.word	0x2000129c
 800856c:	20001298 	.word	0x20001298

08008570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008576:	4b28      	ldr	r3, [pc, #160]	; (8008618 <vTaskSwitchContext+0xa8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800857e:	4b27      	ldr	r3, [pc, #156]	; (800861c <vTaskSwitchContext+0xac>)
 8008580:	2201      	movs	r2, #1
 8008582:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008584:	e041      	b.n	800860a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008586:	4b25      	ldr	r3, [pc, #148]	; (800861c <vTaskSwitchContext+0xac>)
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800858c:	4b24      	ldr	r3, [pc, #144]	; (8008620 <vTaskSwitchContext+0xb0>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	e010      	b.n	80085b6 <vTaskSwitchContext+0x46>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10a      	bne.n	80085b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	607b      	str	r3, [r7, #4]
}
 80085ac:	bf00      	nop
 80085ae:	e7fe      	b.n	80085ae <vTaskSwitchContext+0x3e>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	491b      	ldr	r1, [pc, #108]	; (8008624 <vTaskSwitchContext+0xb4>)
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	440b      	add	r3, r1
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0e4      	beq.n	8008594 <vTaskSwitchContext+0x24>
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4a13      	ldr	r2, [pc, #76]	; (8008624 <vTaskSwitchContext+0xb4>)
 80085d6:	4413      	add	r3, r2
 80085d8:	60bb      	str	r3, [r7, #8]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	605a      	str	r2, [r3, #4]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3308      	adds	r3, #8
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d104      	bne.n	80085fa <vTaskSwitchContext+0x8a>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	605a      	str	r2, [r3, #4]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	4a09      	ldr	r2, [pc, #36]	; (8008628 <vTaskSwitchContext+0xb8>)
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	4a06      	ldr	r2, [pc, #24]	; (8008620 <vTaskSwitchContext+0xb0>)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6013      	str	r3, [r2, #0]
}
 800860a:	bf00      	nop
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	200012b0 	.word	0x200012b0
 800861c:	2000129c 	.word	0x2000129c
 8008620:	20001290 	.word	0x20001290
 8008624:	20000db8 	.word	0x20000db8
 8008628:	20000db4 	.word	0x20000db4

0800862c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	60fb      	str	r3, [r7, #12]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008652:	4b07      	ldr	r3, [pc, #28]	; (8008670 <vTaskPlaceOnEventList+0x44>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3318      	adds	r3, #24
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fe fe87 	bl	800736e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008660:	2101      	movs	r1, #1
 8008662:	6838      	ldr	r0, [r7, #0]
 8008664:	f000 fa7c 	bl	8008b60 <prvAddCurrentTaskToDelayedList>
}
 8008668:	bf00      	nop
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20000db4 	.word	0x20000db4

08008674 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	617b      	str	r3, [r7, #20]
}
 8008698:	bf00      	nop
 800869a:	e7fe      	b.n	800869a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800869c:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3318      	adds	r3, #24
 80086a2:	4619      	mov	r1, r3
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7fe fe3e 	bl	8007326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80086b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	68b8      	ldr	r0, [r7, #8]
 80086ba:	f000 fa51 	bl	8008b60 <prvAddCurrentTaskToDelayedList>
	}
 80086be:	bf00      	nop
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000db4 	.word	0x20000db4

080086cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	60fb      	str	r3, [r7, #12]
}
 80086f4:	bf00      	nop
 80086f6:	e7fe      	b.n	80086f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	3318      	adds	r3, #24
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe fe6f 	bl	80073e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008702:	4b1e      	ldr	r3, [pc, #120]	; (800877c <xTaskRemoveFromEventList+0xb0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d11d      	bne.n	8008746 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	3304      	adds	r3, #4
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe fe66 	bl	80073e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008718:	4b19      	ldr	r3, [pc, #100]	; (8008780 <xTaskRemoveFromEventList+0xb4>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d903      	bls.n	8008728 <xTaskRemoveFromEventList+0x5c>
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	4a16      	ldr	r2, [pc, #88]	; (8008780 <xTaskRemoveFromEventList+0xb4>)
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4a13      	ldr	r2, [pc, #76]	; (8008784 <xTaskRemoveFromEventList+0xb8>)
 8008736:	441a      	add	r2, r3
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	3304      	adds	r3, #4
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f7fe fdf1 	bl	8007326 <vListInsertEnd>
 8008744:	e005      	b.n	8008752 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	3318      	adds	r3, #24
 800874a:	4619      	mov	r1, r3
 800874c:	480e      	ldr	r0, [pc, #56]	; (8008788 <xTaskRemoveFromEventList+0xbc>)
 800874e:	f7fe fdea 	bl	8007326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008756:	4b0d      	ldr	r3, [pc, #52]	; (800878c <xTaskRemoveFromEventList+0xc0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	429a      	cmp	r2, r3
 800875e:	d905      	bls.n	800876c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008764:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <xTaskRemoveFromEventList+0xc4>)
 8008766:	2201      	movs	r2, #1
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	e001      	b.n	8008770 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800876c:	2300      	movs	r3, #0
 800876e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008770:	697b      	ldr	r3, [r7, #20]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	200012b0 	.word	0x200012b0
 8008780:	20001290 	.word	0x20001290
 8008784:	20000db8 	.word	0x20000db8
 8008788:	20001248 	.word	0x20001248
 800878c:	20000db4 	.word	0x20000db4
 8008790:	2000129c 	.word	0x2000129c

08008794 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <vTaskInternalSetTimeOutState+0x24>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087a4:	4b05      	ldr	r3, [pc, #20]	; (80087bc <vTaskInternalSetTimeOutState+0x28>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	605a      	str	r2, [r3, #4]
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	200012a0 	.word	0x200012a0
 80087bc:	2000128c 	.word	0x2000128c

080087c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	613b      	str	r3, [r7, #16]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	60fb      	str	r3, [r7, #12]
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008802:	f000 fe7f 	bl	8009504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008806:	4b1d      	ldr	r3, [pc, #116]	; (800887c <xTaskCheckForTimeOut+0xbc>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800881e:	d102      	bne.n	8008826 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008820:	2300      	movs	r3, #0
 8008822:	61fb      	str	r3, [r7, #28]
 8008824:	e023      	b.n	800886e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	4b15      	ldr	r3, [pc, #84]	; (8008880 <xTaskCheckForTimeOut+0xc0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d007      	beq.n	8008842 <xTaskCheckForTimeOut+0x82>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	429a      	cmp	r2, r3
 800883a:	d302      	bcc.n	8008842 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800883c:	2301      	movs	r3, #1
 800883e:	61fb      	str	r3, [r7, #28]
 8008840:	e015      	b.n	800886e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	429a      	cmp	r2, r3
 800884a:	d20b      	bcs.n	8008864 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	1ad2      	subs	r2, r2, r3
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff ff9b 	bl	8008794 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800885e:	2300      	movs	r3, #0
 8008860:	61fb      	str	r3, [r7, #28]
 8008862:	e004      	b.n	800886e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800886a:	2301      	movs	r3, #1
 800886c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800886e:	f000 fe79 	bl	8009564 <vPortExitCritical>

	return xReturn;
 8008872:	69fb      	ldr	r3, [r7, #28]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3720      	adds	r7, #32
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	2000128c 	.word	0x2000128c
 8008880:	200012a0 	.word	0x200012a0

08008884 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008884:	b480      	push	{r7}
 8008886:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008888:	4b03      	ldr	r3, [pc, #12]	; (8008898 <vTaskMissedYield+0x14>)
 800888a:	2201      	movs	r2, #1
 800888c:	601a      	str	r2, [r3, #0]
}
 800888e:	bf00      	nop
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	2000129c 	.word	0x2000129c

0800889c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088a4:	f000 f852 	bl	800894c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088a8:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <prvIdleTask+0x28>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d9f9      	bls.n	80088a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088b0:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <prvIdleTask+0x2c>)
 80088b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088c0:	e7f0      	b.n	80088a4 <prvIdleTask+0x8>
 80088c2:	bf00      	nop
 80088c4:	20000db8 	.word	0x20000db8
 80088c8:	e000ed04 	.word	0xe000ed04

080088cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088d2:	2300      	movs	r3, #0
 80088d4:	607b      	str	r3, [r7, #4]
 80088d6:	e00c      	b.n	80088f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	4613      	mov	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4a12      	ldr	r2, [pc, #72]	; (800892c <prvInitialiseTaskLists+0x60>)
 80088e4:	4413      	add	r3, r2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fcf0 	bl	80072cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3301      	adds	r3, #1
 80088f0:	607b      	str	r3, [r7, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b37      	cmp	r3, #55	; 0x37
 80088f6:	d9ef      	bls.n	80088d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088f8:	480d      	ldr	r0, [pc, #52]	; (8008930 <prvInitialiseTaskLists+0x64>)
 80088fa:	f7fe fce7 	bl	80072cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088fe:	480d      	ldr	r0, [pc, #52]	; (8008934 <prvInitialiseTaskLists+0x68>)
 8008900:	f7fe fce4 	bl	80072cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008904:	480c      	ldr	r0, [pc, #48]	; (8008938 <prvInitialiseTaskLists+0x6c>)
 8008906:	f7fe fce1 	bl	80072cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800890a:	480c      	ldr	r0, [pc, #48]	; (800893c <prvInitialiseTaskLists+0x70>)
 800890c:	f7fe fcde 	bl	80072cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008910:	480b      	ldr	r0, [pc, #44]	; (8008940 <prvInitialiseTaskLists+0x74>)
 8008912:	f7fe fcdb 	bl	80072cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008916:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <prvInitialiseTaskLists+0x78>)
 8008918:	4a05      	ldr	r2, [pc, #20]	; (8008930 <prvInitialiseTaskLists+0x64>)
 800891a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800891c:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <prvInitialiseTaskLists+0x7c>)
 800891e:	4a05      	ldr	r2, [pc, #20]	; (8008934 <prvInitialiseTaskLists+0x68>)
 8008920:	601a      	str	r2, [r3, #0]
}
 8008922:	bf00      	nop
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20000db8 	.word	0x20000db8
 8008930:	20001218 	.word	0x20001218
 8008934:	2000122c 	.word	0x2000122c
 8008938:	20001248 	.word	0x20001248
 800893c:	2000125c 	.word	0x2000125c
 8008940:	20001274 	.word	0x20001274
 8008944:	20001240 	.word	0x20001240
 8008948:	20001244 	.word	0x20001244

0800894c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008952:	e019      	b.n	8008988 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008954:	f000 fdd6 	bl	8009504 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008958:	4b10      	ldr	r3, [pc, #64]	; (800899c <prvCheckTasksWaitingTermination+0x50>)
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe fd3b 	bl	80073e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800896a:	4b0d      	ldr	r3, [pc, #52]	; (80089a0 <prvCheckTasksWaitingTermination+0x54>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3b01      	subs	r3, #1
 8008970:	4a0b      	ldr	r2, [pc, #44]	; (80089a0 <prvCheckTasksWaitingTermination+0x54>)
 8008972:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008974:	4b0b      	ldr	r3, [pc, #44]	; (80089a4 <prvCheckTasksWaitingTermination+0x58>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3b01      	subs	r3, #1
 800897a:	4a0a      	ldr	r2, [pc, #40]	; (80089a4 <prvCheckTasksWaitingTermination+0x58>)
 800897c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800897e:	f000 fdf1 	bl	8009564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f810 	bl	80089a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008988:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <prvCheckTasksWaitingTermination+0x58>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e1      	bne.n	8008954 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	2000125c 	.word	0x2000125c
 80089a0:	20001288 	.word	0x20001288
 80089a4:	20001270 	.word	0x20001270

080089a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d108      	bne.n	80089cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 ff8e 	bl	80098e0 <vPortFree>
				vPortFree( pxTCB );
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 ff8b 	bl	80098e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089ca:	e018      	b.n	80089fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d103      	bne.n	80089de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 ff82 	bl	80098e0 <vPortFree>
	}
 80089dc:	e00f      	b.n	80089fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d00a      	beq.n	80089fe <prvDeleteTCB+0x56>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	60fb      	str	r3, [r7, #12]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <prvDeleteTCB+0x54>
	}
 80089fe:	bf00      	nop
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a0e:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <prvResetNextTaskUnblockTime+0x38>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a18:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <prvResetNextTaskUnblockTime+0x3c>)
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a20:	e008      	b.n	8008a34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <prvResetNextTaskUnblockTime+0x38>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	4a04      	ldr	r2, [pc, #16]	; (8008a44 <prvResetNextTaskUnblockTime+0x3c>)
 8008a32:	6013      	str	r3, [r2, #0]
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	20001240 	.word	0x20001240
 8008a44:	200012a8 	.word	0x200012a8

08008a48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a4e:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <xTaskGetSchedulerState+0x34>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a56:	2301      	movs	r3, #1
 8008a58:	607b      	str	r3, [r7, #4]
 8008a5a:	e008      	b.n	8008a6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a5c:	4b08      	ldr	r3, [pc, #32]	; (8008a80 <xTaskGetSchedulerState+0x38>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d102      	bne.n	8008a6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a64:	2302      	movs	r3, #2
 8008a66:	607b      	str	r3, [r7, #4]
 8008a68:	e001      	b.n	8008a6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a6e:	687b      	ldr	r3, [r7, #4]
	}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	20001294 	.word	0x20001294
 8008a80:	200012b0 	.word	0x200012b0

08008a84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a90:	2300      	movs	r3, #0
 8008a92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d056      	beq.n	8008b48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a9a:	4b2e      	ldr	r3, [pc, #184]	; (8008b54 <xTaskPriorityDisinherit+0xd0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d00a      	beq.n	8008aba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	60fb      	str	r3, [r7, #12]
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	60bb      	str	r3, [r7, #8]
}
 8008ad4:	bf00      	nop
 8008ad6:	e7fe      	b.n	8008ad6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008adc:	1e5a      	subs	r2, r3, #1
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d02c      	beq.n	8008b48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d128      	bne.n	8008b48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	3304      	adds	r3, #4
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe fc70 	bl	80073e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b18:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <xTaskPriorityDisinherit+0xd4>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d903      	bls.n	8008b28 <xTaskPriorityDisinherit+0xa4>
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	4a0c      	ldr	r2, [pc, #48]	; (8008b58 <xTaskPriorityDisinherit+0xd4>)
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4a09      	ldr	r2, [pc, #36]	; (8008b5c <xTaskPriorityDisinherit+0xd8>)
 8008b36:	441a      	add	r2, r3
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4610      	mov	r0, r2
 8008b40:	f7fe fbf1 	bl	8007326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b44:	2301      	movs	r3, #1
 8008b46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b48:	697b      	ldr	r3, [r7, #20]
	}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000db4 	.word	0x20000db4
 8008b58:	20001290 	.word	0x20001290
 8008b5c:	20000db8 	.word	0x20000db8

08008b60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b6a:	4b21      	ldr	r3, [pc, #132]	; (8008bf0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b70:	4b20      	ldr	r3, [pc, #128]	; (8008bf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3304      	adds	r3, #4
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe fc32 	bl	80073e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b82:	d10a      	bne.n	8008b9a <prvAddCurrentTaskToDelayedList+0x3a>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d007      	beq.n	8008b9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b8a:	4b1a      	ldr	r3, [pc, #104]	; (8008bf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4619      	mov	r1, r3
 8008b92:	4819      	ldr	r0, [pc, #100]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b94:	f7fe fbc7 	bl	8007326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b98:	e026      	b.n	8008be8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ba2:	4b14      	ldr	r3, [pc, #80]	; (8008bf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d209      	bcs.n	8008bc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb2:	4b12      	ldr	r3, [pc, #72]	; (8008bfc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f7fe fbd5 	bl	800736e <vListInsert>
}
 8008bc4:	e010      	b.n	8008be8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bc6:	4b0e      	ldr	r3, [pc, #56]	; (8008c00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	f7fe fbcb 	bl	800736e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d202      	bcs.n	8008be8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008be2:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	6013      	str	r3, [r2, #0]
}
 8008be8:	bf00      	nop
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	2000128c 	.word	0x2000128c
 8008bf4:	20000db4 	.word	0x20000db4
 8008bf8:	20001274 	.word	0x20001274
 8008bfc:	20001244 	.word	0x20001244
 8008c00:	20001240 	.word	0x20001240
 8008c04:	200012a8 	.word	0x200012a8

08008c08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08a      	sub	sp, #40	; 0x28
 8008c0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c12:	f000 fb07 	bl	8009224 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c16:	4b1c      	ldr	r3, [pc, #112]	; (8008c88 <xTimerCreateTimerTask+0x80>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d021      	beq.n	8008c62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c26:	1d3a      	adds	r2, r7, #4
 8008c28:	f107 0108 	add.w	r1, r7, #8
 8008c2c:	f107 030c 	add.w	r3, r7, #12
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe fb31 	bl	8007298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c36:	6879      	ldr	r1, [r7, #4]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	9202      	str	r2, [sp, #8]
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	2302      	movs	r3, #2
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	2300      	movs	r3, #0
 8008c46:	460a      	mov	r2, r1
 8008c48:	4910      	ldr	r1, [pc, #64]	; (8008c8c <xTimerCreateTimerTask+0x84>)
 8008c4a:	4811      	ldr	r0, [pc, #68]	; (8008c90 <xTimerCreateTimerTask+0x88>)
 8008c4c:	f7ff f8de 	bl	8007e0c <xTaskCreateStatic>
 8008c50:	4603      	mov	r3, r0
 8008c52:	4a10      	ldr	r2, [pc, #64]	; (8008c94 <xTimerCreateTimerTask+0x8c>)
 8008c54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c56:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <xTimerCreateTimerTask+0x8c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	613b      	str	r3, [r7, #16]
}
 8008c7a:	bf00      	nop
 8008c7c:	e7fe      	b.n	8008c7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c7e:	697b      	ldr	r3, [r7, #20]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	200012e4 	.word	0x200012e4
 8008c8c:	08009bbc 	.word	0x08009bbc
 8008c90:	08008dcd 	.word	0x08008dcd
 8008c94:	200012e8 	.word	0x200012e8

08008c98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08a      	sub	sp, #40	; 0x28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	623b      	str	r3, [r7, #32]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cc6:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <xTimerGenericCommand+0x98>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d02a      	beq.n	8008d24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b05      	cmp	r3, #5
 8008cde:	dc18      	bgt.n	8008d12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ce0:	f7ff feb2 	bl	8008a48 <xTaskGetSchedulerState>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d109      	bne.n	8008cfe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cea:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <xTimerGenericCommand+0x98>)
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	f107 0110 	add.w	r1, r7, #16
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cf6:	f7fe fca1 	bl	800763c <xQueueGenericSend>
 8008cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8008cfc:	e012      	b.n	8008d24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cfe:	4b0c      	ldr	r3, [pc, #48]	; (8008d30 <xTimerGenericCommand+0x98>)
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	f107 0110 	add.w	r1, r7, #16
 8008d06:	2300      	movs	r3, #0
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f7fe fc97 	bl	800763c <xQueueGenericSend>
 8008d0e:	6278      	str	r0, [r7, #36]	; 0x24
 8008d10:	e008      	b.n	8008d24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d12:	4b07      	ldr	r3, [pc, #28]	; (8008d30 <xTimerGenericCommand+0x98>)
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	f107 0110 	add.w	r1, r7, #16
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	f7fe fd8b 	bl	8007838 <xQueueGenericSendFromISR>
 8008d22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3728      	adds	r7, #40	; 0x28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	200012e4 	.word	0x200012e4

08008d34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af02      	add	r7, sp, #8
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d3e:	4b22      	ldr	r3, [pc, #136]	; (8008dc8 <prvProcessExpiredTimer+0x94>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fe fb47 	bl	80073e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d022      	beq.n	8008da6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	18d1      	adds	r1, r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	6978      	ldr	r0, [r7, #20]
 8008d6e:	f000 f8d1 	bl	8008f14 <prvInsertTimerInActiveList>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d01f      	beq.n	8008db8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d78:	2300      	movs	r3, #0
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	2100      	movs	r1, #0
 8008d82:	6978      	ldr	r0, [r7, #20]
 8008d84:	f7ff ff88 	bl	8008c98 <xTimerGenericCommand>
 8008d88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d113      	bne.n	8008db8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	60fb      	str	r3, [r7, #12]
}
 8008da2:	bf00      	nop
 8008da4:	e7fe      	b.n	8008da4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dac:	f023 0301 	bic.w	r3, r3, #1
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	6978      	ldr	r0, [r7, #20]
 8008dbe:	4798      	blx	r3
}
 8008dc0:	bf00      	nop
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	200012dc 	.word	0x200012dc

08008dcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dd4:	f107 0308 	add.w	r3, r7, #8
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 f857 	bl	8008e8c <prvGetNextExpireTime>
 8008dde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	4619      	mov	r1, r3
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 f803 	bl	8008df0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dea:	f000 f8d5 	bl	8008f98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dee:	e7f1      	b.n	8008dd4 <prvTimerTask+0x8>

08008df0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dfa:	f7ff fa43 	bl	8008284 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dfe:	f107 0308 	add.w	r3, r7, #8
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 f866 	bl	8008ed4 <prvSampleTimeNow>
 8008e08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d130      	bne.n	8008e72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10a      	bne.n	8008e2c <prvProcessTimerOrBlockTask+0x3c>
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d806      	bhi.n	8008e2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e1e:	f7ff fa3f 	bl	80082a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e22:	68f9      	ldr	r1, [r7, #12]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff ff85 	bl	8008d34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e2a:	e024      	b.n	8008e76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d008      	beq.n	8008e44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e32:	4b13      	ldr	r3, [pc, #76]	; (8008e80 <prvProcessTimerOrBlockTask+0x90>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <prvProcessTimerOrBlockTask+0x50>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e000      	b.n	8008e42 <prvProcessTimerOrBlockTask+0x52>
 8008e40:	2300      	movs	r3, #0
 8008e42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e44:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <prvProcessTimerOrBlockTask+0x94>)
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	4619      	mov	r1, r3
 8008e52:	f7fe ffa7 	bl	8007da4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e56:	f7ff fa23 	bl	80082a0 <xTaskResumeAll>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e60:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <prvProcessTimerOrBlockTask+0x98>)
 8008e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	f3bf 8f6f 	isb	sy
}
 8008e70:	e001      	b.n	8008e76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e72:	f7ff fa15 	bl	80082a0 <xTaskResumeAll>
}
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	200012e0 	.word	0x200012e0
 8008e84:	200012e4 	.word	0x200012e4
 8008e88:	e000ed04 	.word	0xe000ed04

08008e8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e94:	4b0e      	ldr	r3, [pc, #56]	; (8008ed0 <prvGetNextExpireTime+0x44>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <prvGetNextExpireTime+0x16>
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	e000      	b.n	8008ea4 <prvGetNextExpireTime+0x18>
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d105      	bne.n	8008ebc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <prvGetNextExpireTime+0x44>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	60fb      	str	r3, [r7, #12]
 8008eba:	e001      	b.n	8008ec0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	200012dc 	.word	0x200012dc

08008ed4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008edc:	f7ff fa7e 	bl	80083dc <xTaskGetTickCount>
 8008ee0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ee2:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <prvSampleTimeNow+0x3c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d205      	bcs.n	8008ef8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008eec:	f000 f936 	bl	800915c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	e002      	b.n	8008efe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008efe:	4a04      	ldr	r2, [pc, #16]	; (8008f10 <prvSampleTimeNow+0x3c>)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f04:	68fb      	ldr	r3, [r7, #12]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	200012ec 	.word	0x200012ec

08008f14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d812      	bhi.n	8008f60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d302      	bcc.n	8008f4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	e01b      	b.n	8008f86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f4e:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <prvInsertTimerInActiveList+0x7c>)
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3304      	adds	r3, #4
 8008f56:	4619      	mov	r1, r3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	f7fe fa08 	bl	800736e <vListInsert>
 8008f5e:	e012      	b.n	8008f86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d206      	bcs.n	8008f76 <prvInsertTimerInActiveList+0x62>
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d302      	bcc.n	8008f76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	e007      	b.n	8008f86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f76:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <prvInsertTimerInActiveList+0x80>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4610      	mov	r0, r2
 8008f82:	f7fe f9f4 	bl	800736e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f86:	697b      	ldr	r3, [r7, #20]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	200012e0 	.word	0x200012e0
 8008f94:	200012dc 	.word	0x200012dc

08008f98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08e      	sub	sp, #56	; 0x38
 8008f9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f9e:	e0ca      	b.n	8009136 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da18      	bge.n	8008fd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fa6:	1d3b      	adds	r3, r7, #4
 8008fa8:	3304      	adds	r3, #4
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10a      	bne.n	8008fc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	61fb      	str	r3, [r7, #28]
}
 8008fc4:	bf00      	nop
 8008fc6:	e7fe      	b.n	8008fc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fce:	6850      	ldr	r0, [r2, #4]
 8008fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd2:	6892      	ldr	r2, [r2, #8]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f2c0 80aa 	blt.w	8009134 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d004      	beq.n	8008ff6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fee:	3304      	adds	r3, #4
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fe f9f5 	bl	80073e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff ff6b 	bl	8008ed4 <prvSampleTimeNow>
 8008ffe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b09      	cmp	r3, #9
 8009004:	f200 8097 	bhi.w	8009136 <prvProcessReceivedCommands+0x19e>
 8009008:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <prvProcessReceivedCommands+0x78>)
 800900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900e:	bf00      	nop
 8009010:	08009039 	.word	0x08009039
 8009014:	08009039 	.word	0x08009039
 8009018:	08009039 	.word	0x08009039
 800901c:	080090ad 	.word	0x080090ad
 8009020:	080090c1 	.word	0x080090c1
 8009024:	0800910b 	.word	0x0800910b
 8009028:	08009039 	.word	0x08009039
 800902c:	08009039 	.word	0x08009039
 8009030:	080090ad 	.word	0x080090ad
 8009034:	080090c1 	.word	0x080090c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800903e:	f043 0301 	orr.w	r3, r3, #1
 8009042:	b2da      	uxtb	r2, r3
 8009044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	18d1      	adds	r1, r2, r3
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009058:	f7ff ff5c 	bl	8008f14 <prvInsertTimerInActiveList>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d069      	beq.n	8009136 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009068:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009070:	f003 0304 	and.w	r3, r3, #4
 8009074:	2b00      	cmp	r3, #0
 8009076:	d05e      	beq.n	8009136 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	441a      	add	r2, r3
 8009080:	2300      	movs	r3, #0
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	2300      	movs	r3, #0
 8009086:	2100      	movs	r1, #0
 8009088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800908a:	f7ff fe05 	bl	8008c98 <xTimerGenericCommand>
 800908e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d14f      	bne.n	8009136 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	61bb      	str	r3, [r7, #24]
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090b2:	f023 0301 	bic.w	r3, r3, #1
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80090be:	e03a      	b.n	8009136 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090c6:	f043 0301 	orr.w	r3, r3, #1
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10a      	bne.n	80090f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	617b      	str	r3, [r7, #20]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	18d1      	adds	r1, r2, r3
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009104:	f7ff ff06 	bl	8008f14 <prvInsertTimerInActiveList>
					break;
 8009108:	e015      	b.n	8009136 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800910a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009110:	f003 0302 	and.w	r3, r3, #2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d103      	bne.n	8009120 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800911a:	f000 fbe1 	bl	80098e0 <vPortFree>
 800911e:	e00a      	b.n	8009136 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009126:	f023 0301 	bic.w	r3, r3, #1
 800912a:	b2da      	uxtb	r2, r3
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009132:	e000      	b.n	8009136 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009134:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009136:	4b08      	ldr	r3, [pc, #32]	; (8009158 <prvProcessReceivedCommands+0x1c0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	1d39      	adds	r1, r7, #4
 800913c:	2200      	movs	r2, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fc16 	bl	8007970 <xQueueReceive>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	f47f af2a 	bne.w	8008fa0 <prvProcessReceivedCommands+0x8>
	}
}
 800914c:	bf00      	nop
 800914e:	bf00      	nop
 8009150:	3730      	adds	r7, #48	; 0x30
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200012e4 	.word	0x200012e4

0800915c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009162:	e048      	b.n	80091f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009164:	4b2d      	ldr	r3, [pc, #180]	; (800921c <prvSwitchTimerLists+0xc0>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800916e:	4b2b      	ldr	r3, [pc, #172]	; (800921c <prvSwitchTimerLists+0xc0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3304      	adds	r3, #4
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe f92f 	bl	80073e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d02e      	beq.n	80091f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4413      	add	r3, r2
 80091a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d90e      	bls.n	80091c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091b6:	4b19      	ldr	r3, [pc, #100]	; (800921c <prvSwitchTimerLists+0xc0>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3304      	adds	r3, #4
 80091be:	4619      	mov	r1, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	f7fe f8d4 	bl	800736e <vListInsert>
 80091c6:	e016      	b.n	80091f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091c8:	2300      	movs	r3, #0
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	2300      	movs	r3, #0
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	2100      	movs	r1, #0
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff fd60 	bl	8008c98 <xTimerGenericCommand>
 80091d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	603b      	str	r3, [r7, #0]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091f6:	4b09      	ldr	r3, [pc, #36]	; (800921c <prvSwitchTimerLists+0xc0>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1b1      	bne.n	8009164 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009200:	4b06      	ldr	r3, [pc, #24]	; (800921c <prvSwitchTimerLists+0xc0>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009206:	4b06      	ldr	r3, [pc, #24]	; (8009220 <prvSwitchTimerLists+0xc4>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a04      	ldr	r2, [pc, #16]	; (800921c <prvSwitchTimerLists+0xc0>)
 800920c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800920e:	4a04      	ldr	r2, [pc, #16]	; (8009220 <prvSwitchTimerLists+0xc4>)
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	6013      	str	r3, [r2, #0]
}
 8009214:	bf00      	nop
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	200012dc 	.word	0x200012dc
 8009220:	200012e0 	.word	0x200012e0

08009224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800922a:	f000 f96b 	bl	8009504 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800922e:	4b15      	ldr	r3, [pc, #84]	; (8009284 <prvCheckForValidListAndQueue+0x60>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d120      	bne.n	8009278 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009236:	4814      	ldr	r0, [pc, #80]	; (8009288 <prvCheckForValidListAndQueue+0x64>)
 8009238:	f7fe f848 	bl	80072cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800923c:	4813      	ldr	r0, [pc, #76]	; (800928c <prvCheckForValidListAndQueue+0x68>)
 800923e:	f7fe f845 	bl	80072cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009242:	4b13      	ldr	r3, [pc, #76]	; (8009290 <prvCheckForValidListAndQueue+0x6c>)
 8009244:	4a10      	ldr	r2, [pc, #64]	; (8009288 <prvCheckForValidListAndQueue+0x64>)
 8009246:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009248:	4b12      	ldr	r3, [pc, #72]	; (8009294 <prvCheckForValidListAndQueue+0x70>)
 800924a:	4a10      	ldr	r2, [pc, #64]	; (800928c <prvCheckForValidListAndQueue+0x68>)
 800924c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800924e:	2300      	movs	r3, #0
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	4b11      	ldr	r3, [pc, #68]	; (8009298 <prvCheckForValidListAndQueue+0x74>)
 8009254:	4a11      	ldr	r2, [pc, #68]	; (800929c <prvCheckForValidListAndQueue+0x78>)
 8009256:	2110      	movs	r1, #16
 8009258:	200a      	movs	r0, #10
 800925a:	f7fe f953 	bl	8007504 <xQueueGenericCreateStatic>
 800925e:	4603      	mov	r3, r0
 8009260:	4a08      	ldr	r2, [pc, #32]	; (8009284 <prvCheckForValidListAndQueue+0x60>)
 8009262:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009264:	4b07      	ldr	r3, [pc, #28]	; (8009284 <prvCheckForValidListAndQueue+0x60>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d005      	beq.n	8009278 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <prvCheckForValidListAndQueue+0x60>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	490b      	ldr	r1, [pc, #44]	; (80092a0 <prvCheckForValidListAndQueue+0x7c>)
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fd6c 	bl	8007d50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009278:	f000 f974 	bl	8009564 <vPortExitCritical>
}
 800927c:	bf00      	nop
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	200012e4 	.word	0x200012e4
 8009288:	200012b4 	.word	0x200012b4
 800928c:	200012c8 	.word	0x200012c8
 8009290:	200012dc 	.word	0x200012dc
 8009294:	200012e0 	.word	0x200012e0
 8009298:	20001390 	.word	0x20001390
 800929c:	200012f0 	.word	0x200012f0
 80092a0:	08009bc4 	.word	0x08009bc4

080092a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3b04      	subs	r3, #4
 80092b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3b04      	subs	r3, #4
 80092c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f023 0201 	bic.w	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3b04      	subs	r3, #4
 80092d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092d4:	4a0c      	ldr	r2, [pc, #48]	; (8009308 <pxPortInitialiseStack+0x64>)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3b14      	subs	r3, #20
 80092de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3b04      	subs	r3, #4
 80092ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f06f 0202 	mvn.w	r2, #2
 80092f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3b20      	subs	r3, #32
 80092f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092fa:	68fb      	ldr	r3, [r7, #12]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	0800930d 	.word	0x0800930d

0800930c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009316:	4b12      	ldr	r3, [pc, #72]	; (8009360 <prvTaskExitError+0x54>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800931e:	d00a      	beq.n	8009336 <prvTaskExitError+0x2a>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	60fb      	str	r3, [r7, #12]
}
 8009332:	bf00      	nop
 8009334:	e7fe      	b.n	8009334 <prvTaskExitError+0x28>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	60bb      	str	r3, [r7, #8]
}
 8009348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800934a:	bf00      	nop
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0fc      	beq.n	800934c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	20000024 	.word	0x20000024
	...

08009370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <pxCurrentTCBConst2>)
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	6808      	ldr	r0, [r1, #0]
 8009376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	f380 8809 	msr	PSP, r0
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8811 	msr	BASEPRI, r0
 800938a:	4770      	bx	lr
 800938c:	f3af 8000 	nop.w

08009390 <pxCurrentTCBConst2>:
 8009390:	20000db4 	.word	0x20000db4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop

08009398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009398:	4808      	ldr	r0, [pc, #32]	; (80093bc <prvPortStartFirstTask+0x24>)
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	6800      	ldr	r0, [r0, #0]
 800939e:	f380 8808 	msr	MSP, r0
 80093a2:	f04f 0000 	mov.w	r0, #0
 80093a6:	f380 8814 	msr	CONTROL, r0
 80093aa:	b662      	cpsie	i
 80093ac:	b661      	cpsie	f
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	df00      	svc	0
 80093b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093ba:	bf00      	nop
 80093bc:	e000ed08 	.word	0xe000ed08

080093c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093c6:	4b46      	ldr	r3, [pc, #280]	; (80094e0 <xPortStartScheduler+0x120>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a46      	ldr	r2, [pc, #280]	; (80094e4 <xPortStartScheduler+0x124>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d10a      	bne.n	80093e6 <xPortStartScheduler+0x26>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	613b      	str	r3, [r7, #16]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093e6:	4b3e      	ldr	r3, [pc, #248]	; (80094e0 <xPortStartScheduler+0x120>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a3f      	ldr	r2, [pc, #252]	; (80094e8 <xPortStartScheduler+0x128>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10a      	bne.n	8009406 <xPortStartScheduler+0x46>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	60fb      	str	r3, [r7, #12]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009406:	4b39      	ldr	r3, [pc, #228]	; (80094ec <xPortStartScheduler+0x12c>)
 8009408:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	22ff      	movs	r2, #255	; 0xff
 8009416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009428:	b2da      	uxtb	r2, r3
 800942a:	4b31      	ldr	r3, [pc, #196]	; (80094f0 <xPortStartScheduler+0x130>)
 800942c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800942e:	4b31      	ldr	r3, [pc, #196]	; (80094f4 <xPortStartScheduler+0x134>)
 8009430:	2207      	movs	r2, #7
 8009432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009434:	e009      	b.n	800944a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009436:	4b2f      	ldr	r3, [pc, #188]	; (80094f4 <xPortStartScheduler+0x134>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3b01      	subs	r3, #1
 800943c:	4a2d      	ldr	r2, [pc, #180]	; (80094f4 <xPortStartScheduler+0x134>)
 800943e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	b2db      	uxtb	r3, r3
 8009448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	b2db      	uxtb	r3, r3
 800944e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009452:	2b80      	cmp	r3, #128	; 0x80
 8009454:	d0ef      	beq.n	8009436 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009456:	4b27      	ldr	r3, [pc, #156]	; (80094f4 <xPortStartScheduler+0x134>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f1c3 0307 	rsb	r3, r3, #7
 800945e:	2b04      	cmp	r3, #4
 8009460:	d00a      	beq.n	8009478 <xPortStartScheduler+0xb8>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	60bb      	str	r3, [r7, #8]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009478:	4b1e      	ldr	r3, [pc, #120]	; (80094f4 <xPortStartScheduler+0x134>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <xPortStartScheduler+0x134>)
 8009480:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <xPortStartScheduler+0x134>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800948a:	4a1a      	ldr	r2, [pc, #104]	; (80094f4 <xPortStartScheduler+0x134>)
 800948c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	b2da      	uxtb	r2, r3
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009496:	4b18      	ldr	r3, [pc, #96]	; (80094f8 <xPortStartScheduler+0x138>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a17      	ldr	r2, [pc, #92]	; (80094f8 <xPortStartScheduler+0x138>)
 800949c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094a2:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <xPortStartScheduler+0x138>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a14      	ldr	r2, [pc, #80]	; (80094f8 <xPortStartScheduler+0x138>)
 80094a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094ae:	f000 f8dd 	bl	800966c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094b2:	4b12      	ldr	r3, [pc, #72]	; (80094fc <xPortStartScheduler+0x13c>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094b8:	f000 f8fc 	bl	80096b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094bc:	4b10      	ldr	r3, [pc, #64]	; (8009500 <xPortStartScheduler+0x140>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a0f      	ldr	r2, [pc, #60]	; (8009500 <xPortStartScheduler+0x140>)
 80094c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80094c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094c8:	f7ff ff66 	bl	8009398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094cc:	f7ff f850 	bl	8008570 <vTaskSwitchContext>
	prvTaskExitError();
 80094d0:	f7ff ff1c 	bl	800930c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	e000ed00 	.word	0xe000ed00
 80094e4:	410fc271 	.word	0x410fc271
 80094e8:	410fc270 	.word	0x410fc270
 80094ec:	e000e400 	.word	0xe000e400
 80094f0:	200013e0 	.word	0x200013e0
 80094f4:	200013e4 	.word	0x200013e4
 80094f8:	e000ed20 	.word	0xe000ed20
 80094fc:	20000024 	.word	0x20000024
 8009500:	e000ef34 	.word	0xe000ef34

08009504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	607b      	str	r3, [r7, #4]
}
 800951c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800951e:	4b0f      	ldr	r3, [pc, #60]	; (800955c <vPortEnterCritical+0x58>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3301      	adds	r3, #1
 8009524:	4a0d      	ldr	r2, [pc, #52]	; (800955c <vPortEnterCritical+0x58>)
 8009526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009528:	4b0c      	ldr	r3, [pc, #48]	; (800955c <vPortEnterCritical+0x58>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d10f      	bne.n	8009550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009530:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <vPortEnterCritical+0x5c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00a      	beq.n	8009550 <vPortEnterCritical+0x4c>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	603b      	str	r3, [r7, #0]
}
 800954c:	bf00      	nop
 800954e:	e7fe      	b.n	800954e <vPortEnterCritical+0x4a>
	}
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	20000024 	.word	0x20000024
 8009560:	e000ed04 	.word	0xe000ed04

08009564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800956a:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <vPortExitCritical+0x50>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <vPortExitCritical+0x24>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	607b      	str	r3, [r7, #4]
}
 8009584:	bf00      	nop
 8009586:	e7fe      	b.n	8009586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009588:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <vPortExitCritical+0x50>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3b01      	subs	r3, #1
 800958e:	4a09      	ldr	r2, [pc, #36]	; (80095b4 <vPortExitCritical+0x50>)
 8009590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009592:	4b08      	ldr	r3, [pc, #32]	; (80095b4 <vPortExitCritical+0x50>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d105      	bne.n	80095a6 <vPortExitCritical+0x42>
 800959a:	2300      	movs	r3, #0
 800959c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	f383 8811 	msr	BASEPRI, r3
}
 80095a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095a6:	bf00      	nop
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	20000024 	.word	0x20000024
	...

080095c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095c0:	f3ef 8009 	mrs	r0, PSP
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	4b15      	ldr	r3, [pc, #84]	; (8009620 <pxCurrentTCBConst>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	f01e 0f10 	tst.w	lr, #16
 80095d0:	bf08      	it	eq
 80095d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095da:	6010      	str	r0, [r2, #0]
 80095dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095e4:	f380 8811 	msr	BASEPRI, r0
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f7fe ffbe 	bl	8008570 <vTaskSwitchContext>
 80095f4:	f04f 0000 	mov.w	r0, #0
 80095f8:	f380 8811 	msr	BASEPRI, r0
 80095fc:	bc09      	pop	{r0, r3}
 80095fe:	6819      	ldr	r1, [r3, #0]
 8009600:	6808      	ldr	r0, [r1, #0]
 8009602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009606:	f01e 0f10 	tst.w	lr, #16
 800960a:	bf08      	it	eq
 800960c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009610:	f380 8809 	msr	PSP, r0
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	f3af 8000 	nop.w

08009620 <pxCurrentTCBConst>:
 8009620:	20000db4 	.word	0x20000db4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop

08009628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	607b      	str	r3, [r7, #4]
}
 8009640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009642:	f7fe fedb 	bl	80083fc <xTaskIncrementTick>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800964c:	4b06      	ldr	r3, [pc, #24]	; (8009668 <xPortSysTickHandler+0x40>)
 800964e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	2300      	movs	r3, #0
 8009656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	f383 8811 	msr	BASEPRI, r3
}
 800965e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	e000ed04 	.word	0xe000ed04

0800966c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009670:	4b0b      	ldr	r3, [pc, #44]	; (80096a0 <vPortSetupTimerInterrupt+0x34>)
 8009672:	2200      	movs	r2, #0
 8009674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009676:	4b0b      	ldr	r3, [pc, #44]	; (80096a4 <vPortSetupTimerInterrupt+0x38>)
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800967c:	4b0a      	ldr	r3, [pc, #40]	; (80096a8 <vPortSetupTimerInterrupt+0x3c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a0a      	ldr	r2, [pc, #40]	; (80096ac <vPortSetupTimerInterrupt+0x40>)
 8009682:	fba2 2303 	umull	r2, r3, r2, r3
 8009686:	099b      	lsrs	r3, r3, #6
 8009688:	4a09      	ldr	r2, [pc, #36]	; (80096b0 <vPortSetupTimerInterrupt+0x44>)
 800968a:	3b01      	subs	r3, #1
 800968c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800968e:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <vPortSetupTimerInterrupt+0x34>)
 8009690:	2207      	movs	r2, #7
 8009692:	601a      	str	r2, [r3, #0]
}
 8009694:	bf00      	nop
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	e000e010 	.word	0xe000e010
 80096a4:	e000e018 	.word	0xe000e018
 80096a8:	20000000 	.word	0x20000000
 80096ac:	10624dd3 	.word	0x10624dd3
 80096b0:	e000e014 	.word	0xe000e014

080096b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80096c4 <vPortEnableVFP+0x10>
 80096b8:	6801      	ldr	r1, [r0, #0]
 80096ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80096be:	6001      	str	r1, [r0, #0]
 80096c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096c2:	bf00      	nop
 80096c4:	e000ed88 	.word	0xe000ed88

080096c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096ce:	f3ef 8305 	mrs	r3, IPSR
 80096d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b0f      	cmp	r3, #15
 80096d8:	d914      	bls.n	8009704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096da:	4a17      	ldr	r2, [pc, #92]	; (8009738 <vPortValidateInterruptPriority+0x70>)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4413      	add	r3, r2
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096e4:	4b15      	ldr	r3, [pc, #84]	; (800973c <vPortValidateInterruptPriority+0x74>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	7afa      	ldrb	r2, [r7, #11]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d20a      	bcs.n	8009704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	607b      	str	r3, [r7, #4]
}
 8009700:	bf00      	nop
 8009702:	e7fe      	b.n	8009702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009704:	4b0e      	ldr	r3, [pc, #56]	; (8009740 <vPortValidateInterruptPriority+0x78>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800970c:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <vPortValidateInterruptPriority+0x7c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	429a      	cmp	r2, r3
 8009712:	d90a      	bls.n	800972a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	603b      	str	r3, [r7, #0]
}
 8009726:	bf00      	nop
 8009728:	e7fe      	b.n	8009728 <vPortValidateInterruptPriority+0x60>
	}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	e000e3f0 	.word	0xe000e3f0
 800973c:	200013e0 	.word	0x200013e0
 8009740:	e000ed0c 	.word	0xe000ed0c
 8009744:	200013e4 	.word	0x200013e4

08009748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	; 0x28
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009754:	f7fe fd96 	bl	8008284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009758:	4b5b      	ldr	r3, [pc, #364]	; (80098c8 <pvPortMalloc+0x180>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009760:	f000 f920 	bl	80099a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009764:	4b59      	ldr	r3, [pc, #356]	; (80098cc <pvPortMalloc+0x184>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4013      	ands	r3, r2
 800976c:	2b00      	cmp	r3, #0
 800976e:	f040 8093 	bne.w	8009898 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d01d      	beq.n	80097b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009778:	2208      	movs	r2, #8
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4413      	add	r3, r2
 800977e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f003 0307 	and.w	r3, r3, #7
 8009786:	2b00      	cmp	r3, #0
 8009788:	d014      	beq.n	80097b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f023 0307 	bic.w	r3, r3, #7
 8009790:	3308      	adds	r3, #8
 8009792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <pvPortMalloc+0x6c>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	617b      	str	r3, [r7, #20]
}
 80097b0:	bf00      	nop
 80097b2:	e7fe      	b.n	80097b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d06e      	beq.n	8009898 <pvPortMalloc+0x150>
 80097ba:	4b45      	ldr	r3, [pc, #276]	; (80098d0 <pvPortMalloc+0x188>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d869      	bhi.n	8009898 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097c4:	4b43      	ldr	r3, [pc, #268]	; (80098d4 <pvPortMalloc+0x18c>)
 80097c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097c8:	4b42      	ldr	r3, [pc, #264]	; (80098d4 <pvPortMalloc+0x18c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097ce:	e004      	b.n	80097da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d903      	bls.n	80097ec <pvPortMalloc+0xa4>
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1f1      	bne.n	80097d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097ec:	4b36      	ldr	r3, [pc, #216]	; (80098c8 <pvPortMalloc+0x180>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d050      	beq.n	8009898 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2208      	movs	r2, #8
 80097fc:	4413      	add	r3, r2
 80097fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	1ad2      	subs	r2, r2, r3
 8009810:	2308      	movs	r3, #8
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	429a      	cmp	r2, r3
 8009816:	d91f      	bls.n	8009858 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4413      	add	r3, r2
 800981e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	f003 0307 	and.w	r3, r3, #7
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <pvPortMalloc+0xf8>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	613b      	str	r3, [r7, #16]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	1ad2      	subs	r2, r2, r3
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009852:	69b8      	ldr	r0, [r7, #24]
 8009854:	f000 f908 	bl	8009a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009858:	4b1d      	ldr	r3, [pc, #116]	; (80098d0 <pvPortMalloc+0x188>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	4a1b      	ldr	r2, [pc, #108]	; (80098d0 <pvPortMalloc+0x188>)
 8009864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009866:	4b1a      	ldr	r3, [pc, #104]	; (80098d0 <pvPortMalloc+0x188>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	4b1b      	ldr	r3, [pc, #108]	; (80098d8 <pvPortMalloc+0x190>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d203      	bcs.n	800987a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009872:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <pvPortMalloc+0x188>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a18      	ldr	r2, [pc, #96]	; (80098d8 <pvPortMalloc+0x190>)
 8009878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	4b13      	ldr	r3, [pc, #76]	; (80098cc <pvPortMalloc+0x184>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	431a      	orrs	r2, r3
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800988e:	4b13      	ldr	r3, [pc, #76]	; (80098dc <pvPortMalloc+0x194>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3301      	adds	r3, #1
 8009894:	4a11      	ldr	r2, [pc, #68]	; (80098dc <pvPortMalloc+0x194>)
 8009896:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009898:	f7fe fd02 	bl	80082a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00a      	beq.n	80098bc <pvPortMalloc+0x174>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	60fb      	str	r3, [r7, #12]
}
 80098b8:	bf00      	nop
 80098ba:	e7fe      	b.n	80098ba <pvPortMalloc+0x172>
	return pvReturn;
 80098bc:	69fb      	ldr	r3, [r7, #28]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3728      	adds	r7, #40	; 0x28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20001ff0 	.word	0x20001ff0
 80098cc:	20002004 	.word	0x20002004
 80098d0:	20001ff4 	.word	0x20001ff4
 80098d4:	20001fe8 	.word	0x20001fe8
 80098d8:	20001ff8 	.word	0x20001ff8
 80098dc:	20001ffc 	.word	0x20001ffc

080098e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d04d      	beq.n	800998e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098f2:	2308      	movs	r3, #8
 80098f4:	425b      	negs	r3, r3
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	4413      	add	r3, r2
 80098fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	4b24      	ldr	r3, [pc, #144]	; (8009998 <vPortFree+0xb8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4013      	ands	r3, r2
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <vPortFree+0x44>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	60fb      	str	r3, [r7, #12]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00a      	beq.n	8009942 <vPortFree+0x62>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	60bb      	str	r3, [r7, #8]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	4b14      	ldr	r3, [pc, #80]	; (8009998 <vPortFree+0xb8>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4013      	ands	r3, r2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01e      	beq.n	800998e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d11a      	bne.n	800998e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <vPortFree+0xb8>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	43db      	mvns	r3, r3
 8009962:	401a      	ands	r2, r3
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009968:	f7fe fc8c 	bl	8008284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	4b0a      	ldr	r3, [pc, #40]	; (800999c <vPortFree+0xbc>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4413      	add	r3, r2
 8009976:	4a09      	ldr	r2, [pc, #36]	; (800999c <vPortFree+0xbc>)
 8009978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800997a:	6938      	ldr	r0, [r7, #16]
 800997c:	f000 f874 	bl	8009a68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009980:	4b07      	ldr	r3, [pc, #28]	; (80099a0 <vPortFree+0xc0>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3301      	adds	r3, #1
 8009986:	4a06      	ldr	r2, [pc, #24]	; (80099a0 <vPortFree+0xc0>)
 8009988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800998a:	f7fe fc89 	bl	80082a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800998e:	bf00      	nop
 8009990:	3718      	adds	r7, #24
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20002004 	.word	0x20002004
 800999c:	20001ff4 	.word	0x20001ff4
 80099a0:	20002000 	.word	0x20002000

080099a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80099ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099b0:	4b27      	ldr	r3, [pc, #156]	; (8009a50 <prvHeapInit+0xac>)
 80099b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00c      	beq.n	80099d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	3307      	adds	r3, #7
 80099c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0307 	bic.w	r3, r3, #7
 80099ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	4a1f      	ldr	r2, [pc, #124]	; (8009a50 <prvHeapInit+0xac>)
 80099d4:	4413      	add	r3, r2
 80099d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099dc:	4a1d      	ldr	r2, [pc, #116]	; (8009a54 <prvHeapInit+0xb0>)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099e2:	4b1c      	ldr	r3, [pc, #112]	; (8009a54 <prvHeapInit+0xb0>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	4413      	add	r3, r2
 80099ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099f0:	2208      	movs	r2, #8
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	1a9b      	subs	r3, r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f023 0307 	bic.w	r3, r3, #7
 80099fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4a15      	ldr	r2, [pc, #84]	; (8009a58 <prvHeapInit+0xb4>)
 8009a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a06:	4b14      	ldr	r3, [pc, #80]	; (8009a58 <prvHeapInit+0xb4>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a0e:	4b12      	ldr	r3, [pc, #72]	; (8009a58 <prvHeapInit+0xb4>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	1ad2      	subs	r2, r2, r3
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a24:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <prvHeapInit+0xb4>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <prvHeapInit+0xb8>)
 8009a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	4a09      	ldr	r2, [pc, #36]	; (8009a60 <prvHeapInit+0xbc>)
 8009a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a3c:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <prvHeapInit+0xc0>)
 8009a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a42:	601a      	str	r2, [r3, #0]
}
 8009a44:	bf00      	nop
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	200013e8 	.word	0x200013e8
 8009a54:	20001fe8 	.word	0x20001fe8
 8009a58:	20001ff0 	.word	0x20001ff0
 8009a5c:	20001ff8 	.word	0x20001ff8
 8009a60:	20001ff4 	.word	0x20001ff4
 8009a64:	20002004 	.word	0x20002004

08009a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a70:	4b28      	ldr	r3, [pc, #160]	; (8009b14 <prvInsertBlockIntoFreeList+0xac>)
 8009a72:	60fb      	str	r3, [r7, #12]
 8009a74:	e002      	b.n	8009a7c <prvInsertBlockIntoFreeList+0x14>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d8f7      	bhi.n	8009a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	4413      	add	r3, r2
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d108      	bne.n	8009aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	441a      	add	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	441a      	add	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d118      	bne.n	8009af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	4b15      	ldr	r3, [pc, #84]	; (8009b18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d00d      	beq.n	8009ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	441a      	add	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	e008      	b.n	8009af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ae6:	4b0c      	ldr	r3, [pc, #48]	; (8009b18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	e003      	b.n	8009af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d002      	beq.n	8009b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b06:	bf00      	nop
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	20001fe8 	.word	0x20001fe8
 8009b18:	20001ff0 	.word	0x20001ff0

08009b1c <__libc_init_array>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	4d0d      	ldr	r5, [pc, #52]	; (8009b54 <__libc_init_array+0x38>)
 8009b20:	4c0d      	ldr	r4, [pc, #52]	; (8009b58 <__libc_init_array+0x3c>)
 8009b22:	1b64      	subs	r4, r4, r5
 8009b24:	10a4      	asrs	r4, r4, #2
 8009b26:	2600      	movs	r6, #0
 8009b28:	42a6      	cmp	r6, r4
 8009b2a:	d109      	bne.n	8009b40 <__libc_init_array+0x24>
 8009b2c:	4d0b      	ldr	r5, [pc, #44]	; (8009b5c <__libc_init_array+0x40>)
 8009b2e:	4c0c      	ldr	r4, [pc, #48]	; (8009b60 <__libc_init_array+0x44>)
 8009b30:	f000 f82e 	bl	8009b90 <_init>
 8009b34:	1b64      	subs	r4, r4, r5
 8009b36:	10a4      	asrs	r4, r4, #2
 8009b38:	2600      	movs	r6, #0
 8009b3a:	42a6      	cmp	r6, r4
 8009b3c:	d105      	bne.n	8009b4a <__libc_init_array+0x2e>
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b44:	4798      	blx	r3
 8009b46:	3601      	adds	r6, #1
 8009b48:	e7ee      	b.n	8009b28 <__libc_init_array+0xc>
 8009b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b4e:	4798      	blx	r3
 8009b50:	3601      	adds	r6, #1
 8009b52:	e7f2      	b.n	8009b3a <__libc_init_array+0x1e>
 8009b54:	08009c48 	.word	0x08009c48
 8009b58:	08009c48 	.word	0x08009c48
 8009b5c:	08009c48 	.word	0x08009c48
 8009b60:	08009c4c 	.word	0x08009c4c

08009b64 <memcpy>:
 8009b64:	440a      	add	r2, r1
 8009b66:	4291      	cmp	r1, r2
 8009b68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009b6c:	d100      	bne.n	8009b70 <memcpy+0xc>
 8009b6e:	4770      	bx	lr
 8009b70:	b510      	push	{r4, lr}
 8009b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b7a:	4291      	cmp	r1, r2
 8009b7c:	d1f9      	bne.n	8009b72 <memcpy+0xe>
 8009b7e:	bd10      	pop	{r4, pc}

08009b80 <memset>:
 8009b80:	4402      	add	r2, r0
 8009b82:	4603      	mov	r3, r0
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d100      	bne.n	8009b8a <memset+0xa>
 8009b88:	4770      	bx	lr
 8009b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b8e:	e7f9      	b.n	8009b84 <memset+0x4>

08009b90 <_init>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	bf00      	nop
 8009b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b96:	bc08      	pop	{r3}
 8009b98:	469e      	mov	lr, r3
 8009b9a:	4770      	bx	lr

08009b9c <_fini>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	bf00      	nop
 8009ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	4770      	bx	lr
