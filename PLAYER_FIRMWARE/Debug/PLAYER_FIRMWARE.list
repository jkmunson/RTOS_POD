
PLAYER_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram1_low    00004000  20004000  20004000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .sram1_upper  0000c000  20008000  20008000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .sram2        00000000  20014000  20014000  00034000  2**0
                  CONTENTS
  3 .ccm_sram_all 00000000  20018000  20018000  00034000  2**0
                  CONTENTS
  4 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .text         0000b850  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       000001c0  0800ba30  0800ba30  0001ba30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0800bbf0  0800bbf0  00034000  2**0
                  CONTENTS
  8 .ARM          00000008  0800bbf0  0800bbf0  0001bbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0800bbf8  0800bbf8  00034000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  0800bbf8  0800bbf8  0001bbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000004  0800bbfc  0800bbfc  0001bbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000008c  20000000  0800bc00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000027f8  2000008c  0800bc8c  0002008c  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  20002884  0800bc8c  00022884  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY
 16 .debug_info   00032f92  00000000  00000000  00034030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000593c  00000000  00000000  00066fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002680  00000000  00000000  0006c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002448  00000000  00000000  0006ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00006db0  00000000  00000000  000713c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002d668  00000000  00000000  00078178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012b360  00000000  00000000  000a57e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001d0b40  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a884  00000000  00000000  001d0b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ba18 	.word	0x0800ba18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	0800ba18 	.word	0x0800ba18

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <braeden_main>:
#include <FreeRTOS.h>
#include <task.h>

void braeden_main(void *ignore) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 800053c:	f00a f8fa 	bl	800a734 <xTaskGetCurrentTaskHandle>
 8000540:	4603      	mov	r3, r0
 8000542:	4618      	mov	r0, r3
 8000544:	f009 fc24 	bl	8009d90 <vTaskSuspend>
	vTaskDelete(NULL);
 8000548:	2000      	movs	r0, #0
 800054a:	f009 fb7b 	bl	8009c44 <vTaskDelete>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <bryant_main>:
#include <FreeRTOS.h>
#include <task.h>

extern uint8_t audio_buffer[49152]; //Can be recast to a more appropriate type.

void bryant_main(void *ignore) {
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]


	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 800055e:	f00a f8e9 	bl	800a734 <xTaskGetCurrentTaskHandle>
 8000562:	4603      	mov	r3, r0
 8000564:	4618      	mov	r0, r3
 8000566:	f009 fc13 	bl	8009d90 <vTaskSuspend>
	vTaskDelete(NULL);
 800056a:	2000      	movs	r0, #0
 800056c:	f009 fb6a 	bl	8009c44 <vTaskDelete>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <update_green_DMA_addr>:
extern UART_HandleTypeDef huart5;
//DAC_DHR12LD

size_t audio_dma_current_index;

void update_green_DMA_addr(TIM_HandleTypeDef *htim){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	audio_dma_current_index = (audio_dma_current_index+4)%AUD_BUFFER_SIZE;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <update_green_DMA_addr+0x50>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	1d19      	adds	r1, r3, #4
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <update_green_DMA_addr+0x54>)
 8000588:	fba3 2301 	umull	r2, r3, r3, r1
 800058c:	0bda      	lsrs	r2, r3, #15
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	039b      	lsls	r3, r3, #14
 8000596:	1aca      	subs	r2, r1, r3
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <update_green_DMA_addr+0x50>)
 800059a:	601a      	str	r2, [r3, #0]
	const char *tim_msg = "DMA Update started or wrapped\n";
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <update_green_DMA_addr+0x58>)
 800059e:	60fb      	str	r3, [r7, #12]
	if ((audio_dma_current_index==0))	HAL_UART_Transmit(&huart5,tim_msg,strlen(tim_msg), 0xFFFF);
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <update_green_DMA_addr+0x50>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d10a      	bne.n	80005be <update_green_DMA_addr+0x46>
 80005a8:	68f8      	ldr	r0, [r7, #12]
 80005aa:	f7ff fe39 	bl	8000220 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	68f9      	ldr	r1, [r7, #12]
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <update_green_DMA_addr+0x5c>)
 80005ba:	f006 fceb 	bl	8006f94 <HAL_UART_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000a8 	.word	0x200000a8
 80005cc:	aaaaaaab 	.word	0xaaaaaaab
 80005d0:	0800ba30 	.word	0x0800ba30
 80005d4:	20000934 	.word	0x20000934

080005d8 <jeremy_main>:

size_t get_audio_buffer_current_index(void){
	return audio_dma_current_index;
}

void jeremy_main(void *ignore) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af02      	add	r7, sp, #8
 80005de:	6078      	str	r0, [r7, #4]
	const char *jeremy_main_msg = "Entered Jeremy Main\n";
 80005e0:	4b2e      	ldr	r3, [pc, #184]	; (800069c <jeremy_main+0xc4>)
 80005e2:	617b      	str	r3, [r7, #20]
	const char *jeremy_main_cb = "Registered timer callback\n";
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <jeremy_main+0xc8>)
 80005e6:	613b      	str	r3, [r7, #16]
	const char *jeremy_main_dma = "Initiated DMA\n";
 80005e8:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <jeremy_main+0xcc>)
 80005ea:	60fb      	str	r3, [r7, #12]
	const char *jeremy_main_tim = "Initiated Timer\n";
 80005ec:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <jeremy_main+0xd0>)
 80005ee:	60bb      	str	r3, [r7, #8]

	HAL_UART_Transmit(&huart5,jeremy_main_msg,strlen(jeremy_main_msg), 0xFFFF);
 80005f0:	6978      	ldr	r0, [r7, #20]
 80005f2:	f7ff fe15 	bl	8000220 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005fe:	6979      	ldr	r1, [r7, #20]
 8000600:	482a      	ldr	r0, [pc, #168]	; (80006ac <jeremy_main+0xd4>)
 8000602:	f006 fcc7 	bl	8006f94 <HAL_UART_Transmit>

	HAL_TIM_RegisterCallback(&AUDIO_44_1_KHZ_TIMER, HAL_TIM_PERIOD_ELAPSED_CB_ID, update_green_DMA_addr);
 8000606:	4a2a      	ldr	r2, [pc, #168]	; (80006b0 <jeremy_main+0xd8>)
 8000608:	210e      	movs	r1, #14
 800060a:	482a      	ldr	r0, [pc, #168]	; (80006b4 <jeremy_main+0xdc>)
 800060c:	f006 f8f2 	bl	80067f4 <HAL_TIM_RegisterCallback>
	HAL_UART_Transmit(&huart5,jeremy_main_cb,strlen(jeremy_main_cb), 0xFFFF);
 8000610:	6938      	ldr	r0, [r7, #16]
 8000612:	f7ff fe05 	bl	8000220 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	6939      	ldr	r1, [r7, #16]
 8000620:	4822      	ldr	r0, [pc, #136]	; (80006ac <jeremy_main+0xd4>)
 8000622:	f006 fcb7 	bl	8006f94 <HAL_UART_Transmit>

	HAL_TIM_Base_Start(&AUDIO_44_1_KHZ_TIMER);
 8000626:	4823      	ldr	r0, [pc, #140]	; (80006b4 <jeremy_main+0xdc>)
 8000628:	f005 fe28 	bl	800627c <HAL_TIM_Base_Start>
	HAL_UART_Transmit(&huart5,jeremy_main_tim,strlen(jeremy_main_tim), 0xFFFF);
 800062c:	68b8      	ldr	r0, [r7, #8]
 800062e:	f7ff fdf7 	bl	8000220 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800063a:	68b9      	ldr	r1, [r7, #8]
 800063c:	481b      	ldr	r0, [pc, #108]	; (80006ac <jeremy_main+0xd4>)
 800063e:	f006 fca9 	bl	8006f94 <HAL_UART_Transmit>
	//HAL_DAC_Start(&AUD_GREEN_DAC, DAC_CHANNEL_1);
	//HAL_DAC_Start(&AUD_GREEN_DAC, DAC_CHANNEL_2);

	HAL_DAC_Start_DMA(&AUD_GREEN_DAC, DAC_CHANNEL_1, (uint32_t*)audio_buffer, (AUD_BUFFER_SIZE>>2)-1 , DAC_ALIGN_12B_L);
 8000642:	2304      	movs	r3, #4
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	f642 73ff 	movw	r3, #12287	; 0x2fff
 800064a:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <jeremy_main+0xe0>)
 800064c:	2100      	movs	r1, #0
 800064e:	481b      	ldr	r0, [pc, #108]	; (80006bc <jeremy_main+0xe4>)
 8000650:	f003 fa10 	bl	8003a74 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(&AUD_GREEN_DAC, DAC_CHANNEL_2, (uint32_t*)(audio_buffer+2), (AUD_BUFFER_SIZE>>2)-1 , DAC_ALIGN_12B_L);
 8000654:	4a1a      	ldr	r2, [pc, #104]	; (80006c0 <jeremy_main+0xe8>)
 8000656:	2304      	movs	r3, #4
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	f642 73ff 	movw	r3, #12287	; 0x2fff
 800065e:	2110      	movs	r1, #16
 8000660:	4816      	ldr	r0, [pc, #88]	; (80006bc <jeremy_main+0xe4>)
 8000662:	f003 fa07 	bl	8003a74 <HAL_DAC_Start_DMA>

	HAL_UART_Transmit(&huart5,jeremy_main_dma,strlen(jeremy_main_dma), 0xFFFF);
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f7ff fdda 	bl	8000220 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000674:	68f9      	ldr	r1, [r7, #12]
 8000676:	480d      	ldr	r0, [pc, #52]	; (80006ac <jeremy_main+0xd4>)
 8000678:	f006 fc8c 	bl	8006f94 <HAL_UART_Transmit>
	audio_dma_current_index = 0; //Reset the index now, in case it had counted up before we started DMA. its okay to be a ways behind the dma.
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <jeremy_main+0xec>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]

	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 8000682:	f00a f857 	bl	800a734 <xTaskGetCurrentTaskHandle>
 8000686:	4603      	mov	r3, r0
 8000688:	4618      	mov	r0, r3
 800068a:	f009 fb81 	bl	8009d90 <vTaskSuspend>
	vTaskDelete(NULL);
 800068e:	2000      	movs	r0, #0
 8000690:	f009 fad8 	bl	8009c44 <vTaskDelete>
}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	0800ba50 	.word	0x0800ba50
 80006a0:	0800ba68 	.word	0x0800ba68
 80006a4:	0800ba84 	.word	0x0800ba84
 80006a8:	0800ba94 	.word	0x0800ba94
 80006ac:	20000934 	.word	0x20000934
 80006b0:	08000579 	.word	0x08000579
 80006b4:	20000868 	.word	0x20000868
 80006b8:	20008000 	.word	0x20008000
 80006bc:	200003a4 	.word	0x200003a4
 80006c0:	20008002 	.word	0x20008002
 80006c4:	200000a8 	.word	0x200000a8

080006c8 <wyatt_main>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "jeremy.h"
//#include "wyatt.h"
void wyatt_main(void *ignore){vTaskDelete(NULL);}; //temporary measure
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	2000      	movs	r0, #0
 80006d2:	f009 fab7 	bl	8009c44 <vTaskDelete>
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f001 feb2 	bl	800244e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f89d 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 fea9 	bl	8001444 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f2:	f000 fe7d 	bl	80013f0 <MX_DMA_Init>
  MX_DAC1_Init();
 80006f6:	f000 fb05 	bl	8000d04 <MX_DAC1_Init>
  MX_DAC2_Init();
 80006fa:	f000 fb47 	bl	8000d8c <MX_DAC2_Init>
  MX_DAC3_Init();
 80006fe:	f000 fb7f 	bl	8000e00 <MX_DAC3_Init>
  MX_DAC4_Init();
 8000702:	f000 fbc1 	bl	8000e88 <MX_DAC4_Init>
  MX_OPAMP1_Init();
 8000706:	f000 fc03 	bl	8000f10 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 800070a:	f000 fc27 	bl	8000f5c <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 800070e:	f000 fc4b 	bl	8000fa8 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 8000712:	f000 fc6f 	bl	8000ff4 <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 8000716:	f000 fc93 	bl	8001040 <MX_OPAMP6_Init>
  MX_QUADSPI1_Init();
 800071a:	f000 fcb7 	bl	800108c <MX_QUADSPI1_Init>
  MX_SPI2_Init();
 800071e:	f000 fcdd 	bl	80010dc <MX_SPI2_Init>
  MX_SPI3_Init();
 8000722:	f000 fd19 	bl	8001158 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000726:	f000 fd55 	bl	80011d4 <MX_SPI4_Init>
  MX_UART5_Init();
 800072a:	f000 fdc7 	bl	80012bc <MX_UART5_Init>
  MX_USART3_Init();
 800072e:	f000 fe11 	bl	8001354 <MX_USART3_Init>
  MX_ADC1_Init();
 8000732:	f000 f8c5 	bl	80008c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000736:	f000 f93b 	bl	80009b0 <MX_ADC2_Init>
  MX_ADC3_Init();
 800073a:	f000 f99f 	bl	8000a7c <MX_ADC3_Init>
  MX_ADC4_Init();
 800073e:	f000 fa15 	bl	8000b6c <MX_ADC4_Init>
  MX_ADC5_Init();
 8000742:	f000 fa79 	bl	8000c38 <MX_ADC5_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000746:	f008 f8e9 	bl	800891c <MX_FATFS_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <main+0x74>
    Error_Handler();
 8000750:	f000 ff62 	bl	8001618 <Error_Handler>
  }
  MX_TIM6_Init();
 8000754:	f000 fd7c 	bl	8001250 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000758:	f008 f9f0 	bl	8008b3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800075c:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <main+0xfc>)
 800075e:	2100      	movs	r1, #0
 8000760:	481f      	ldr	r0, [pc, #124]	; (80007e0 <main+0x100>)
 8000762:	f008 fa35 	bl	8008bd0 <osThreadNew>
 8000766:	4603      	mov	r3, r0
 8000768:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <main+0x104>)
 800076a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  static StaticTask_t threads[4];
  xTaskCreateStatic(wyatt_main, 	"wyatt_main_thread", 	1024, NULL, 5, (StackType_t *)wyatt_memspace, 	&threads[0]);
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <main+0x108>)
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <main+0x10c>)
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	2305      	movs	r3, #5
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2300      	movs	r3, #0
 800077a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800077e:	491c      	ldr	r1, [pc, #112]	; (80007f0 <main+0x110>)
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <main+0x114>)
 8000782:	f009 f8a7 	bl	80098d4 <xTaskCreateStatic>
  xTaskCreateStatic(jeremy_main, 	"jeremy_main_thread", 	1024, NULL, 5, (StackType_t *)jeremy_memspace, 	&threads[1]);
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <main+0x118>)
 8000788:	9302      	str	r3, [sp, #8]
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <main+0x11c>)
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2305      	movs	r3, #5
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2300      	movs	r3, #0
 8000794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000798:	4919      	ldr	r1, [pc, #100]	; (8000800 <main+0x120>)
 800079a:	481a      	ldr	r0, [pc, #104]	; (8000804 <main+0x124>)
 800079c:	f009 f89a 	bl	80098d4 <xTaskCreateStatic>
  xTaskCreateStatic(bryant_main, 	"bryant_main_thread", 	1024, NULL, 5, (StackType_t *)bryant_memspace, 	&threads[2]);
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <main+0x128>)
 80007a2:	9302      	str	r3, [sp, #8]
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <main+0x12c>)
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	2305      	movs	r3, #5
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2300      	movs	r3, #0
 80007ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b2:	4917      	ldr	r1, [pc, #92]	; (8000810 <main+0x130>)
 80007b4:	4817      	ldr	r0, [pc, #92]	; (8000814 <main+0x134>)
 80007b6:	f009 f88d 	bl	80098d4 <xTaskCreateStatic>
  xTaskCreateStatic(braeden_main, 	"braeden_main_thread", 	1024, NULL, 5, (StackType_t *)braeden_memspace, &threads[3]);
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <main+0x138>)
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <main+0x13c>)
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	2305      	movs	r3, #5
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007cc:	4914      	ldr	r1, [pc, #80]	; (8000820 <main+0x140>)
 80007ce:	4815      	ldr	r0, [pc, #84]	; (8000824 <main+0x144>)
 80007d0:	f009 f880 	bl	80098d4 <xTaskCreateStatic>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007d4:	f008 f9d6 	bl	8008b84 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <main+0xf8>
 80007da:	bf00      	nop
 80007dc:	0800bb1c 	.word	0x0800bb1c
 80007e0:	080015e5 	.word	0x080015e5
 80007e4:	20000a8c 	.word	0x20000a8c
 80007e8:	20000a90 	.word	0x20000a90
 80007ec:	20004000 	.word	0x20004000
 80007f0:	0800bab4 	.word	0x0800bab4
 80007f4:	080006c9 	.word	0x080006c9
 80007f8:	20000b4c 	.word	0x20000b4c
 80007fc:	20007000 	.word	0x20007000
 8000800:	0800bac8 	.word	0x0800bac8
 8000804:	080005d9 	.word	0x080005d9
 8000808:	20000c08 	.word	0x20000c08
 800080c:	20005000 	.word	0x20005000
 8000810:	0800badc 	.word	0x0800badc
 8000814:	08000557 	.word	0x08000557
 8000818:	20000cc4 	.word	0x20000cc4
 800081c:	20006000 	.word	0x20006000
 8000820:	0800baf0 	.word	0x0800baf0
 8000824:	08000535 	.word	0x08000535

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0318 	add.w	r3, r7, #24
 8000832:	2238      	movs	r2, #56	; 0x38
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f00b f824 	bl	800b884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800084a:	2000      	movs	r0, #0
 800084c:	f004 f9a4 	bl	8004b98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000858:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	2303      	movs	r3, #3
 8000860:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000862:	2301      	movs	r3, #1
 8000864:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000866:	2314      	movs	r3, #20
 8000868:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086a:	2302      	movs	r3, #2
 800086c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800086e:	2304      	movs	r3, #4
 8000870:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000872:	2302      	movs	r3, #2
 8000874:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	4618      	mov	r0, r3
 800087c:	f004 fb92 	bl	8004fa4 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000886:	f000 fec7 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2303      	movs	r3, #3
 8000890:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2104      	movs	r1, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fe90 	bl	80055c8 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008ae:	f000 feb3 	bl	8001618 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80008b2:	f005 f88f 	bl	80059d4 <HAL_RCC_EnableCSS>
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	; 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2220      	movs	r2, #32
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f00a ffd3 	bl	800b884 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <MX_ADC1_Init+0xe8>)
 80008e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e6:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <MX_ADC1_Init+0xe8>)
 80008e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <MX_ADC1_Init+0xe8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <MX_ADC1_Init+0xe8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008fa:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <MX_ADC1_Init+0xe8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <MX_ADC1_Init+0xe8>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <MX_ADC1_Init+0xe8>)
 8000908:	2204      	movs	r2, #4
 800090a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <MX_ADC1_Init+0xe8>)
 800090e:	2200      	movs	r2, #0
 8000910:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <MX_ADC1_Init+0xe8>)
 8000914:	2200      	movs	r2, #0
 8000916:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <MX_ADC1_Init+0xe8>)
 800091a:	2201      	movs	r2, #1
 800091c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800091e:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <MX_ADC1_Init+0xe8>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <MX_ADC1_Init+0xe8>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <MX_ADC1_Init+0xe8>)
 800092e:	2200      	movs	r2, #0
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_ADC1_Init+0xe8>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_ADC1_Init+0xe8>)
 800093c:	2200      	movs	r2, #0
 800093e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_ADC1_Init+0xe8>)
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000948:	4817      	ldr	r0, [pc, #92]	; (80009a8 <MX_ADC1_Init+0xe8>)
 800094a:	f001 ff8d 	bl	8002868 <HAL_ADC_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000954:	f000 fe60 	bl	8001618 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	4811      	ldr	r0, [pc, #68]	; (80009a8 <MX_ADC1_Init+0xe8>)
 8000964:	f002 fe3a 	bl	80035dc <HAL_ADCEx_MultiModeConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800096e:	f000 fe53 	bl	8001618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_ADC1_Init+0xec>)
 8000974:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000976:	2306      	movs	r3, #6
 8000978:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800097e:	237f      	movs	r3, #127	; 0x7f
 8000980:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000982:	2304      	movs	r3, #4
 8000984:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_ADC1_Init+0xe8>)
 8000990:	f002 f98c 	bl	8002cac <HAL_ADC_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800099a:	f000 fe3d 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3730      	adds	r7, #48	; 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000ac 	.word	0x200000ac
 80009ac:	08600004 	.word	0x08600004

080009b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2220      	movs	r2, #32
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f00a ff61 	bl	800b884 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <MX_ADC2_Init+0xc0>)
 80009c4:	4a2b      	ldr	r2, [pc, #172]	; (8000a74 <MX_ADC2_Init+0xc4>)
 80009c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <MX_ADC2_Init+0xc0>)
 80009ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009d0:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <MX_ADC2_Init+0xc0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_ADC2_Init+0xc0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <MX_ADC2_Init+0xc0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <MX_ADC2_Init+0xc0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <MX_ADC2_Init+0xc0>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_ADC2_Init+0xc0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_ADC2_Init+0xc0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_ADC2_Init+0xc0>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_ADC2_Init+0xc0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_ADC2_Init+0xc0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_ADC2_Init+0xc0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_ADC2_Init+0xc0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_ADC2_Init+0xc0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_ADC2_Init+0xc0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <MX_ADC2_Init+0xc0>)
 8000a2c:	f001 ff1c 	bl	8002868 <HAL_ADC_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000a36:	f000 fdef 	bl	8001618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_ADC2_Init+0xc8>)
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a46:	237f      	movs	r3, #127	; 0x7f
 8000a48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a52:	463b      	mov	r3, r7
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_ADC2_Init+0xc0>)
 8000a58:	f002 f928 	bl	8002cac <HAL_ADC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000a62:	f000 fdd9 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000144 	.word	0x20000144
 8000a74:	50000100 	.word	0x50000100
 8000a78:	10c00010 	.word	0x10c00010

08000a7c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2220      	movs	r2, #32
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00a fef5 	bl	800b884 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000a9c:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <MX_ADC3_Init+0xe8>)
 8000a9e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000aa2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aa6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aae:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b02:	4817      	ldr	r0, [pc, #92]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000b04:	f001 feb0 	bl	8002868 <HAL_ADC_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000b0e:	f000 fd83 	bl	8001618 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4810      	ldr	r0, [pc, #64]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000b1e:	f002 fd5d 	bl	80035dc <HAL_ADCEx_MultiModeConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000b28:	f000 fd76 	bl	8001618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_ADC3_Init+0xec>)
 8000b2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b30:	2306      	movs	r3, #6
 8000b32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b38:	237f      	movs	r3, #127	; 0x7f
 8000b3a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_ADC3_Init+0xe4>)
 8000b4a:	f002 f8af 	bl	8002cac <HAL_ADC_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000b54:	f000 fd60 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200001dc 	.word	0x200001dc
 8000b64:	50000400 	.word	0x50000400
 8000b68:	21800100 	.word	0x21800100

08000b6c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2220      	movs	r2, #32
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00a fe83 	bl	800b884 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000b80:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <MX_ADC4_Init+0xc4>)
 8000b82:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b84:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000b86:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b8a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b92:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000be6:	4811      	ldr	r0, [pc, #68]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000be8:	f001 fe3e 	bl	8002868 <HAL_ADC_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000bf2:	f000 fd11 	bl	8001618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_ADC4_Init+0xc8>)
 8000bf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c02:	237f      	movs	r3, #127	; 0x7f
 8000c04:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c06:	2304      	movs	r3, #4
 8000c08:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_ADC4_Init+0xc0>)
 8000c14:	f002 f84a 	bl	8002cac <HAL_ADC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000c1e:	f000 fcfb 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000274 	.word	0x20000274
 8000c30:	50000500 	.word	0x50000500
 8000c34:	25b00200 	.word	0x25b00200

08000c38 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2220      	movs	r2, #32
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00a fe1d 	bl	800b884 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c4c:	4a2b      	ldr	r2, [pc, #172]	; (8000cfc <MX_ADC5_Init+0xc4>)
 8000c4e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c52:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c56:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000c64:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000cb2:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000cb4:	f001 fdd8 	bl	8002868 <HAL_ADC_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000cbe:	f000 fcab 	bl	8001618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_ADC5_Init+0xc8>)
 8000cc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cce:	237f      	movs	r3, #127	; 0x7f
 8000cd0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <MX_ADC5_Init+0xc0>)
 8000ce0:	f001 ffe4 	bl	8002cac <HAL_ADC_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000cea:	f000 fc95 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000030c 	.word	0x2000030c
 8000cfc:	50000600 	.word	0x50000600
 8000d00:	08600004 	.word	0x08600004

08000d04 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2230      	movs	r2, #48	; 0x30
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00a fdb7 	bl	800b884 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_DAC1_Init+0x80>)
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <MX_DAC1_Init+0x84>)
 8000d1a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d1c:	4819      	ldr	r0, [pc, #100]	; (8000d84 <MX_DAC1_Init+0x80>)
 8000d1e:	f002 fe55 	bl	80039cc <HAL_DAC_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d28:	f000 fc76 	bl	8001618 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000d3c:	231e      	movs	r3, #30
 8000d3e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	480b      	ldr	r0, [pc, #44]	; (8000d84 <MX_DAC1_Init+0x80>)
 8000d58:	f002 ffe0 	bl	8003d1c <HAL_DAC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000d62:	f000 fc59 	bl	8001618 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d66:	463b      	mov	r3, r7
 8000d68:	2210      	movs	r2, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_DAC1_Init+0x80>)
 8000d6e:	f002 ffd5 	bl	8003d1c <HAL_DAC_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000d78:	f000 fc4e 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3730      	adds	r7, #48	; 0x30
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200003a4 	.word	0x200003a4
 8000d88:	50000800 	.word	0x50000800

08000d8c <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2230      	movs	r2, #48	; 0x30
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f00a fd73 	bl	800b884 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_DAC2_Init+0x6c>)
 8000da0:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <MX_DAC2_Init+0x70>)
 8000da2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000da4:	4814      	ldr	r0, [pc, #80]	; (8000df8 <MX_DAC2_Init+0x6c>)
 8000da6:	f002 fe11 	bl	80039cc <HAL_DAC_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000db0:	f000 fc32 	bl	8001618 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000db4:	2302      	movs	r3, #2
 8000db6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_DAC2_Init+0x6c>)
 8000de0:	f002 ff9c 	bl	8003d1c <HAL_DAC_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000dea:	f000 fc15 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3730      	adds	r7, #48	; 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200003e0 	.word	0x200003e0
 8000dfc:	50000c00 	.word	0x50000c00

08000e00 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e06:	463b      	mov	r3, r7
 8000e08:	2230      	movs	r2, #48	; 0x30
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00a fd39 	bl	800b884 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_DAC3_Init+0x80>)
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <MX_DAC3_Init+0x84>)
 8000e16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000e18:	4819      	ldr	r0, [pc, #100]	; (8000e80 <MX_DAC3_Init+0x80>)
 8000e1a:	f002 fdd7 	bl	80039cc <HAL_DAC_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000e24:	f000 fbf8 	bl	8001618 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000e40:	2302      	movs	r3, #2
 8000e42:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	480b      	ldr	r0, [pc, #44]	; (8000e80 <MX_DAC3_Init+0x80>)
 8000e54:	f002 ff62 	bl	8003d1c <HAL_DAC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000e5e:	f000 fbdb 	bl	8001618 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	2210      	movs	r2, #16
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_DAC3_Init+0x80>)
 8000e6a:	f002 ff57 	bl	8003d1c <HAL_DAC_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000e74:	f000 fbd0 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000041c 	.word	0x2000041c
 8000e84:	50001000 	.word	0x50001000

08000e88 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2230      	movs	r2, #48	; 0x30
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f00a fcf5 	bl	800b884 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <MX_DAC4_Init+0x80>)
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <MX_DAC4_Init+0x84>)
 8000e9e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8000ea0:	4819      	ldr	r0, [pc, #100]	; (8000f08 <MX_DAC4_Init+0x80>)
 8000ea2:	f002 fd93 	bl	80039cc <HAL_DAC_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8000eac:	f000 fbb4 	bl	8001618 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <MX_DAC4_Init+0x80>)
 8000edc:	f002 ff1e 	bl	8003d1c <HAL_DAC_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8000ee6:	f000 fb97 	bl	8001618 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000eea:	463b      	mov	r3, r7
 8000eec:	2210      	movs	r2, #16
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_DAC4_Init+0x80>)
 8000ef2:	f002 ff13 	bl	8003d1c <HAL_DAC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_DAC4_Init+0x78>
  {
    Error_Handler();
 8000efc:	f000 fb8c 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	; 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000458 	.word	0x20000458
 8000f0c:	50001400 	.word	0x50001400

08000f10 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_OPAMP1_Init+0x44>)
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <MX_OPAMP1_Init+0x48>)
 8000f18:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_OPAMP1_Init+0x44>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_OPAMP1_Init+0x44>)
 8000f22:	2260      	movs	r2, #96	; 0x60
 8000f24:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_OPAMP1_Init+0x44>)
 8000f28:	220c      	movs	r2, #12
 8000f2a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_OPAMP1_Init+0x44>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_OPAMP1_Init+0x44>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_OPAMP1_Init+0x44>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_OPAMP1_Init+0x44>)
 8000f40:	f003 fd4a 	bl	80049d8 <HAL_OPAMP_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000f4a:	f000 fb65 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200004f4 	.word	0x200004f4
 8000f58:	40010300 	.word	0x40010300

08000f5c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <MX_OPAMP3_Init+0x48>)
 8000f64:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f6e:	2260      	movs	r2, #96	; 0x60
 8000f70:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f74:	220c      	movs	r2, #12
 8000f76:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_OPAMP3_Init+0x44>)
 8000f8c:	f003 fd24 	bl	80049d8 <HAL_OPAMP_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000f96:	f000 fb3f 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000538 	.word	0x20000538
 8000fa4:	40010308 	.word	0x40010308

08000fa8 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_OPAMP4_Init+0x44>)
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <MX_OPAMP4_Init+0x48>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_OPAMP4_Init+0x44>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_OPAMP4_Init+0x44>)
 8000fba:	2260      	movs	r2, #96	; 0x60
 8000fbc:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_OPAMP4_Init+0x44>)
 8000fc0:	220c      	movs	r2, #12
 8000fc2:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_OPAMP4_Init+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_OPAMP4_Init+0x44>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_OPAMP4_Init+0x44>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_OPAMP4_Init+0x44>)
 8000fd8:	f003 fcfe 	bl	80049d8 <HAL_OPAMP_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8000fe2:	f000 fb19 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000057c 	.word	0x2000057c
 8000ff0:	4001030c 	.word	0x4001030c

08000ff4 <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_OPAMP5_Init+0x44>)
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <MX_OPAMP5_Init+0x48>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_OPAMP5_Init+0x44>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_OPAMP5_Init+0x44>)
 8001006:	2260      	movs	r2, #96	; 0x60
 8001008:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_OPAMP5_Init+0x44>)
 800100c:	220c      	movs	r2, #12
 800100e:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_OPAMP5_Init+0x44>)
 8001012:	2200      	movs	r2, #0
 8001014:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_OPAMP5_Init+0x44>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_OPAMP5_Init+0x44>)
 800101e:	2200      	movs	r2, #0
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_OPAMP5_Init+0x44>)
 8001024:	f003 fcd8 	bl	80049d8 <HAL_OPAMP_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 800102e:	f000 faf3 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200005c0 	.word	0x200005c0
 800103c:	40010310 	.word	0x40010310

08001040 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_OPAMP6_Init+0x44>)
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <MX_OPAMP6_Init+0x48>)
 8001048:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_OPAMP6_Init+0x44>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_OPAMP6_Init+0x44>)
 8001052:	2260      	movs	r2, #96	; 0x60
 8001054:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_OPAMP6_Init+0x44>)
 8001058:	220c      	movs	r2, #12
 800105a:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_OPAMP6_Init+0x44>)
 800105e:	2200      	movs	r2, #0
 8001060:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_OPAMP6_Init+0x44>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_OPAMP6_Init+0x44>)
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_OPAMP6_Init+0x44>)
 8001070:	f003 fcb2 	bl	80049d8 <HAL_OPAMP_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 800107a:	f000 facd 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000604 	.word	0x20000604
 8001088:	40010314 	.word	0x40010314

0800108c <MX_QUADSPI1_Init>:
  * @brief QUADSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  /* QUADSPI1 parameter configuration*/
  hqspi1.Instance = QUADSPI;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_QUADSPI1_Init+0x48>)
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <MX_QUADSPI1_Init+0x4c>)
 8001094:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 1;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_QUADSPI1_Init+0x48>)
 8001098:	2201      	movs	r2, #1
 800109a:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <MX_QUADSPI1_Init+0x48>)
 800109e:	2201      	movs	r2, #1
 80010a0:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_QUADSPI1_Init+0x48>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 25;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_QUADSPI1_Init+0x48>)
 80010aa:	2219      	movs	r2, #25
 80010ac:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_QUADSPI1_Init+0x48>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_3;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_QUADSPI1_Init+0x48>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	619a      	str	r2, [r3, #24]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_QUADSPI1_Init+0x48>)
 80010bc:	2240      	movs	r2, #64	; 0x40
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_QUADSPI1_Init+0x48>)
 80010c2:	f003 fe0d 	bl	8004ce0 <HAL_QSPI_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_QUADSPI1_Init+0x44>
  {
    Error_Handler();
 80010cc:	f000 faa4 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000648 	.word	0x20000648
 80010d8:	a0001000 	.word	0xa0001000

080010dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_SPI2_Init+0x74>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <MX_SPI2_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_SPI2_Init+0x74>)
 80010e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_SPI2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_SPI2_Init+0x74>)
 80010f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_SPI2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_SPI2_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_SPI2_Init+0x74>)
 800110a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800110e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_SPI2_Init+0x74>)
 8001112:	2208      	movs	r2, #8
 8001114:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_SPI2_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_SPI2_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_SPI2_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_SPI2_Init+0x74>)
 800112a:	2207      	movs	r2, #7
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_SPI2_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_SPI2_Init+0x74>)
 8001136:	2208      	movs	r2, #8
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_SPI2_Init+0x74>)
 800113c:	f004 ff08 	bl	8005f50 <HAL_SPI_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001146:	f000 fa67 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200006c4 	.word	0x200006c4
 8001154:	40003800 	.word	0x40003800

08001158 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_SPI3_Init+0x74>)
 800115e:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <MX_SPI3_Init+0x78>)
 8001160:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_SPI3_Init+0x74>)
 8001164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001168:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_SPI3_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_SPI3_Init+0x74>)
 8001172:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001176:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_SPI3_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_SPI3_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_SPI3_Init+0x74>)
 8001186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_SPI3_Init+0x74>)
 800118e:	2208      	movs	r2, #8
 8001190:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_SPI3_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_SPI3_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_SPI3_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_SPI3_Init+0x74>)
 80011a6:	2207      	movs	r2, #7
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_SPI3_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_SPI3_Init+0x74>)
 80011b2:	2208      	movs	r2, #8
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_SPI3_Init+0x74>)
 80011b8:	f004 feca 	bl	8005f50 <HAL_SPI_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011c2:	f000 fa29 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000750 	.word	0x20000750
 80011d0:	40003c00 	.word	0x40003c00

080011d4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_SPI4_Init+0x74>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <MX_SPI4_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_SPI4_Init+0x74>)
 80011e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_SPI4_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_SPI4_Init+0x74>)
 80011ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011f2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_SPI4_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_SPI4_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_SPI4_Init+0x74>)
 8001202:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001206:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_SPI4_Init+0x74>)
 800120a:	2208      	movs	r2, #8
 800120c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_SPI4_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_SPI4_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_SPI4_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_SPI4_Init+0x74>)
 8001222:	2207      	movs	r2, #7
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_SPI4_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_SPI4_Init+0x74>)
 800122e:	2208      	movs	r2, #8
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_SPI4_Init+0x74>)
 8001234:	f004 fe8c 	bl	8005f50 <HAL_SPI_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800123e:	f000 f9eb 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200007dc 	.word	0x200007dc
 800124c:	40013c00 	.word	0x40013c00

08001250 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_TIM6_Init+0x64>)
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <MX_TIM6_Init+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_TIM6_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_TIM6_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3627;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_TIM6_Init+0x64>)
 8001274:	f640 622b 	movw	r2, #3627	; 0xe2b
 8001278:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_TIM6_Init+0x64>)
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <MX_TIM6_Init+0x64>)
 8001282:	f004 ff97 	bl	80061b4 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800128c:	f000 f9c4 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001290:	2320      	movs	r3, #32
 8001292:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_TIM6_Init+0x64>)
 800129e:	f005 fd33 	bl	8006d08 <HAL_TIMEx_MasterConfigSynchronization>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012a8:	f000 f9b6 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000868 	.word	0x20000868
 80012b8:	40001000 	.word	0x40001000

080012bc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_UART5_Init+0x90>)
 80012c2:	4a23      	ldr	r2, [pc, #140]	; (8001350 <MX_UART5_Init+0x94>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_UART5_Init+0x90>)
 80012c8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80012cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_UART5_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_UART5_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_UART5_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_UART5_Init+0x90>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_UART5_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_UART5_Init+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_UART5_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_UART5_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_UART5_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_UART5_Init+0x90>)
 8001306:	f005 fde5 	bl	8006ed4 <HAL_UART_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001310:	f000 f982 	bl	8001618 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001314:	2100      	movs	r1, #0
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_UART5_Init+0x90>)
 8001318:	f006 fcea 	bl	8007cf0 <HAL_UARTEx_SetTxFifoThreshold>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001322:	f000 f979 	bl	8001618 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <MX_UART5_Init+0x90>)
 800132a:	f006 fd1f 	bl	8007d6c <HAL_UARTEx_SetRxFifoThreshold>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001334:	f000 f970 	bl	8001618 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_UART5_Init+0x90>)
 800133a:	f006 fca0 	bl	8007c7e <HAL_UARTEx_DisableFifoMode>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001344:	f000 f968 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000934 	.word	0x20000934
 8001350:	40005000 	.word	0x40005000

08001354 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MX_USART3_Init+0x90>)
 800135a:	4a23      	ldr	r2, [pc, #140]	; (80013e8 <MX_USART3_Init+0x94>)
 800135c:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <MX_USART3_Init+0x90>)
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <MX_USART3_Init+0x98>)
 8001362:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_USART3_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <MX_USART3_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_USART3_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_USART3_Init+0x90>)
 8001378:	220c      	movs	r2, #12
 800137a:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <MX_USART3_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_USART3_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_USART3_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_USART3_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_USART3_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 800139a:	4812      	ldr	r0, [pc, #72]	; (80013e4 <MX_USART3_Init+0x90>)
 800139c:	f006 fd72 	bl	8007e84 <HAL_USART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART3_Init+0x56>
  {
    Error_Handler();
 80013a6:	f000 f937 	bl	8001618 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013aa:	2100      	movs	r1, #0
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_USART3_Init+0x90>)
 80013ae:	f007 f9ef 	bl	8008790 <HAL_USARTEx_SetTxFifoThreshold>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART3_Init+0x68>
  {
    Error_Handler();
 80013b8:	f000 f92e 	bl	8001618 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013bc:	2100      	movs	r1, #0
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <MX_USART3_Init+0x90>)
 80013c0:	f007 fa24 	bl	800880c <HAL_USARTEx_SetRxFifoThreshold>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART3_Init+0x7a>
  {
    Error_Handler();
 80013ca:	f000 f925 	bl	8001618 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART3_Init+0x90>)
 80013d0:	f007 f9a5 	bl	800871e <HAL_USARTEx_DisableFifoMode>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART3_Init+0x8a>
  {
    Error_Handler();
 80013da:	f000 f91d 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000a00 	.word	0x20000a00
 80013e8:	40004800 	.word	0x40004800
 80013ec:	007a1200 	.word	0x007a1200

080013f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_DMA_Init+0x50>)
 80013f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fa:	4a11      	ldr	r2, [pc, #68]	; (8001440 <MX_DMA_Init+0x50>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6493      	str	r3, [r2, #72]	; 0x48
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_DMA_Init+0x50>)
 8001404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_DMA_Init+0x50>)
 8001410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <MX_DMA_Init+0x50>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6493      	str	r3, [r2, #72]	; 0x48
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_DMA_Init+0x50>)
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	200b      	movs	r0, #11
 800142c:	f002 faa6 	bl	800397c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001430:	200b      	movs	r0, #11
 8001432:	f002 fabd 	bl	80039b0 <HAL_NVIC_EnableIRQ>

}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <MX_GPIO_Init+0x18c>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a5c      	ldr	r2, [pc, #368]	; (80015d0 <MX_GPIO_Init+0x18c>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b5a      	ldr	r3, [pc, #360]	; (80015d0 <MX_GPIO_Init+0x18c>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <MX_GPIO_Init+0x18c>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a56      	ldr	r2, [pc, #344]	; (80015d0 <MX_GPIO_Init+0x18c>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b54      	ldr	r3, [pc, #336]	; (80015d0 <MX_GPIO_Init+0x18c>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <MX_GPIO_Init+0x18c>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a50      	ldr	r2, [pc, #320]	; (80015d0 <MX_GPIO_Init+0x18c>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b4e      	ldr	r3, [pc, #312]	; (80015d0 <MX_GPIO_Init+0x18c>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b4b      	ldr	r3, [pc, #300]	; (80015d0 <MX_GPIO_Init+0x18c>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <MX_GPIO_Init+0x18c>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <MX_GPIO_Init+0x18c>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <MX_GPIO_Init+0x18c>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a44      	ldr	r2, [pc, #272]	; (80015d0 <MX_GPIO_Init+0x18c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <MX_GPIO_Init+0x18c>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d2:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <MX_GPIO_Init+0x18c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a3e      	ldr	r2, [pc, #248]	; (80015d0 <MX_GPIO_Init+0x18c>)
 80014d8:	f043 0320 	orr.w	r3, r3, #32
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <MX_GPIO_Init+0x18c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0320 	and.w	r3, r3, #32
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_NRST_GPIO_Port, TFT_NRST_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2140      	movs	r1, #64	; 0x40
 80014ee:	4839      	ldr	r0, [pc, #228]	; (80015d4 <MX_GPIO_Init+0x190>)
 80014f0:	f003 fa5a 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 7101 	mov.w	r1, #516	; 0x204
 80014fa:	4837      	ldr	r0, [pc, #220]	; (80015d8 <MX_GPIO_Init+0x194>)
 80014fc:	f003 fa54 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f240 210b 	movw	r1, #523	; 0x20b
 8001506:	4835      	ldr	r0, [pc, #212]	; (80015dc <MX_GPIO_Init+0x198>)
 8001508:	f003 fa4e 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_SPI_DC_GPIO_Port, TFT_SPI_DC_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2101      	movs	r1, #1
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f003 fa48 	bl	80049a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_NRST_Pin */
  GPIO_InitStruct.Pin = TFT_NRST_Pin;
 8001518:	2340      	movs	r3, #64	; 0x40
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_NRST_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	4829      	ldr	r0, [pc, #164]	; (80015d4 <MX_GPIO_Init+0x190>)
 8001530:	f003 f8b8 	bl	80046a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRIDGE_CLK_Pin */
  GPIO_InitStruct.Pin = BRIDGE_CLK_Pin;
 8001534:	2302      	movs	r3, #2
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001544:	2304      	movs	r3, #4
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BRIDGE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	4824      	ldr	r0, [pc, #144]	; (80015e0 <MX_GPIO_Init+0x19c>)
 8001550:	f003 f8a8 	bl	80046a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUD_ORANGE_R_OUTPUT_EN_Pin AUD_ORANGE_L_OUTPUT_EN_Pin */
  GPIO_InitStruct.Pin = AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin;
 8001554:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	481a      	ldr	r0, [pc, #104]	; (80015d8 <MX_GPIO_Init+0x194>)
 800156e:	f003 f899 	bl	80046a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MICRO_SD_CS_Pin AUD_GREEN_L_OUTPUT_EN_Pin AUD_GREEN_R_OUTPUT_EN_Pin ROT_B_Pin */
  GPIO_InitStruct.Pin = MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin;
 8001572:	f240 230b 	movw	r3, #523	; 0x20b
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <MX_GPIO_Init+0x198>)
 800158c:	f003 f88a 	bl	80046a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_A_Pin ROT_S2_Pin ROT_S1_Pin ROT_C_Pin */
  GPIO_InitStruct.Pin = ROT_A_Pin|ROT_S2_Pin|ROT_S1_Pin|ROT_C_Pin;
 8001590:	2374      	movs	r3, #116	; 0x74
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	480e      	ldr	r0, [pc, #56]	; (80015dc <MX_GPIO_Init+0x198>)
 80015a4:	f003 f87e 	bl	80046a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_SPI_DC_Pin */
  GPIO_InitStruct.Pin = TFT_SPI_DC_Pin;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_SPI_DC_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f003 f86f 	bl	80046a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c6:	bf00      	nop
 80015c8:	3730      	adds	r7, #48	; 0x30
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	48000400 	.word	0x48000400
 80015d8:	48001400 	.word	0x48001400
 80015dc:	48000800 	.word	0x48000800
 80015e0:	48000c00 	.word	0x48000c00

080015e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f007 fb81 	bl	8008cf4 <osDelay>
 80015f2:	e7fb      	b.n	80015ec <StartDefaultTask+0x8>

080015f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001606:	f000 ff3b 	bl	8002480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40001400 	.word	0x40001400

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>
	...

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_MspInit+0x4c>)
 800162c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_MspInit+0x4c>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6613      	str	r3, [r2, #96]	; 0x60
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_MspInit+0x4c>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_MspInit+0x4c>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_MspInit+0x4c>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6593      	str	r3, [r2, #88]	; 0x58
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_MspInit+0x4c>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	210f      	movs	r1, #15
 800165e:	f06f 0001 	mvn.w	r0, #1
 8001662:	f002 f98b 	bl	800397c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0a8      	sub	sp, #160	; 0xa0
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001690:	2254      	movs	r2, #84	; 0x54
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f00a f8f5 	bl	800b884 <memset>
  if(hadc->Instance==ADC1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a2:	d141      	bne.n	8001728 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 f9fd 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80016c0:	f7ff ffaa 	bl	8001618 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016c4:	4b84      	ldr	r3, [pc, #528]	; (80018d8 <HAL_ADC_MspInit+0x264>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4a83      	ldr	r2, [pc, #524]	; (80018d8 <HAL_ADC_MspInit+0x264>)
 80016cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016ce:	4b82      	ldr	r3, [pc, #520]	; (80018d8 <HAL_ADC_MspInit+0x264>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d10b      	bne.n	80016ee <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016d6:	4b81      	ldr	r3, [pc, #516]	; (80018dc <HAL_ADC_MspInit+0x268>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a80      	ldr	r2, [pc, #512]	; (80018dc <HAL_ADC_MspInit+0x268>)
 80016dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b7e      	ldr	r3, [pc, #504]	; (80018dc <HAL_ADC_MspInit+0x268>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
 80016ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <HAL_ADC_MspInit+0x268>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a7a      	ldr	r2, [pc, #488]	; (80018dc <HAL_ADC_MspInit+0x268>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b78      	ldr	r3, [pc, #480]	; (80018dc <HAL_ADC_MspInit+0x268>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
 8001704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AUD_GRN_MIC_POSTAMP_Pin;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170c:	2303      	movs	r3, #3
 800170e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_GRN_MIC_POSTAMP_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f002 ffbf 	bl	80046a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001726:	e165      	b.n	80019f4 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a6c      	ldr	r2, [pc, #432]	; (80018e0 <HAL_ADC_MspInit+0x26c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d141      	bne.n	80017b6 <HAL_ADC_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001736:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001738:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800173c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001742:	4618      	mov	r0, r3
 8001744:	f004 f9b6 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_ADC_MspInit+0xde>
      Error_Handler();
 800174e:	f7ff ff63 	bl	8001618 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001752:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <HAL_ADC_MspInit+0x264>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	4a5f      	ldr	r2, [pc, #380]	; (80018d8 <HAL_ADC_MspInit+0x264>)
 800175a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800175c:	4b5e      	ldr	r3, [pc, #376]	; (80018d8 <HAL_ADC_MspInit+0x264>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d10b      	bne.n	800177c <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001764:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <HAL_ADC_MspInit+0x268>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	4a5c      	ldr	r2, [pc, #368]	; (80018dc <HAL_ADC_MspInit+0x268>)
 800176a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800176e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001770:	4b5a      	ldr	r3, [pc, #360]	; (80018dc <HAL_ADC_MspInit+0x268>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b57      	ldr	r3, [pc, #348]	; (80018dc <HAL_ADC_MspInit+0x268>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	4a56      	ldr	r2, [pc, #344]	; (80018dc <HAL_ADC_MspInit+0x268>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001788:	4b54      	ldr	r3, [pc, #336]	; (80018dc <HAL_ADC_MspInit+0x268>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
 8001792:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_S_Pin;
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179a:	2303      	movs	r3, #3
 800179c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_S_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f002 ff78 	bl	80046a4 <HAL_GPIO_Init>
}
 80017b4:	e11e      	b.n	80019f4 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC3)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a4a      	ldr	r2, [pc, #296]	; (80018e4 <HAL_ADC_MspInit+0x270>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d142      	bne.n	8001846 <HAL_ADC_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80017c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80017c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 f96e 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_ADC_MspInit+0x16e>
      Error_Handler();
 80017de:	f7ff ff1b 	bl	8001618 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <HAL_ADC_MspInit+0x274>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a3f      	ldr	r2, [pc, #252]	; (80018e8 <HAL_ADC_MspInit+0x274>)
 80017ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80017ec:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <HAL_ADC_MspInit+0x274>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d10b      	bne.n	800180c <HAL_ADC_MspInit+0x198>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_ADC_MspInit+0x268>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	4a38      	ldr	r2, [pc, #224]	; (80018dc <HAL_ADC_MspInit+0x268>)
 80017fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_ADC_MspInit+0x268>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_ADC_MspInit+0x268>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_ADC_MspInit+0x268>)
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_ADC_MspInit+0x268>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_R1_Pin;
 8001824:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182c:	2303      	movs	r3, #3
 800182e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_R1_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800183c:	4619      	mov	r1, r3
 800183e:	482b      	ldr	r0, [pc, #172]	; (80018ec <HAL_ADC_MspInit+0x278>)
 8001840:	f002 ff30 	bl	80046a4 <HAL_GPIO_Init>
}
 8001844:	e0d6      	b.n	80019f4 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC4)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <HAL_ADC_MspInit+0x27c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d151      	bne.n	80018f4 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001856:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800185a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001862:	4618      	mov	r0, r3
 8001864:	f004 f926 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 800186e:	f7ff fed3 	bl	8001618 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <HAL_ADC_MspInit+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <HAL_ADC_MspInit+0x274>)
 800187a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_ADC_MspInit+0x274>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d10b      	bne.n	800189c <HAL_ADC_MspInit+0x228>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_ADC_MspInit+0x268>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_ADC_MspInit+0x268>)
 800188a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_ADC_MspInit+0x268>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_ADC_MspInit+0x268>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_ADC_MspInit+0x268>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_ADC_MspInit+0x268>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_T_Pin;
 80018b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018bc:	2303      	movs	r3, #3
 80018be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_T_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018cc:	4619      	mov	r1, r3
 80018ce:	4807      	ldr	r0, [pc, #28]	; (80018ec <HAL_ADC_MspInit+0x278>)
 80018d0:	f002 fee8 	bl	80046a4 <HAL_GPIO_Init>
}
 80018d4:	e08e      	b.n	80019f4 <HAL_ADC_MspInit+0x380>
 80018d6:	bf00      	nop
 80018d8:	20000d80 	.word	0x20000d80
 80018dc:	40021000 	.word	0x40021000
 80018e0:	50000100 	.word	0x50000100
 80018e4:	50000400 	.word	0x50000400
 80018e8:	20000d84 	.word	0x20000d84
 80018ec:	48000c00 	.word	0x48000c00
 80018f0:	50000500 	.word	0x50000500
  else if(hadc->Instance==ADC5)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a40      	ldr	r2, [pc, #256]	; (80019fc <HAL_ADC_MspInit+0x388>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d17a      	bne.n	80019f4 <HAL_ADC_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80018fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001904:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001908:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001910:	4618      	mov	r0, r3
 8001912:	f004 f8cf 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_ADC_MspInit+0x2ac>
      Error_Handler();
 800191c:	f7ff fe7c 	bl	8001618 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001920:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <HAL_ADC_MspInit+0x38c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	4a36      	ldr	r2, [pc, #216]	; (8001a00 <HAL_ADC_MspInit+0x38c>)
 8001928:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <HAL_ADC_MspInit+0x38c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d10b      	bne.n	800194a <HAL_ADC_MspInit+0x2d6>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a33      	ldr	r2, [pc, #204]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a2d      	ldr	r2, [pc, #180]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_ADC_MspInit+0x390>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AUD_ORANGE_S_UNBUFFERED_IN_Pin;
 8001992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199a:	2303      	movs	r3, #3
 800199c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_ORANGE_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f002 fe78 	bl	80046a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_T_UNBUFFERED_IN_Pin|AUD_BLACK_R1_UNBUFFERED_IN_Pin|VOLUME_ANALOG_IN_Pin;
 80019b4:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80019b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019bc:	2303      	movs	r3, #3
 80019be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019cc:	4619      	mov	r1, r3
 80019ce:	480e      	ldr	r0, [pc, #56]	; (8001a08 <HAL_ADC_MspInit+0x394>)
 80019d0:	f002 fe68 	bl	80046a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_S_UNBUFFERED_IN_Pin;
 80019d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019dc:	2303      	movs	r3, #3
 80019de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_BLACK_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <HAL_ADC_MspInit+0x398>)
 80019f0:	f002 fe58 	bl	80046a4 <HAL_GPIO_Init>
}
 80019f4:	bf00      	nop
 80019f6:	37a0      	adds	r7, #160	; 0xa0
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	50000600 	.word	0x50000600
 8001a00:	20000d84 	.word	0x20000d84
 8001a04:	40021000 	.word	0x40021000
 8001a08:	48000c00 	.word	0x48000c00
 8001a0c:	48001000 	.word	0x48001000

08001a10 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <HAL_DAC_MspInit+0x1ac>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d159      	bne.n	8001ae6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a62      	ldr	r2, [pc, #392]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3e:	4b60      	ldr	r3, [pc, #384]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a46:	623b      	str	r3, [r7, #32]
 8001a48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	4a5c      	ldr	r2, [pc, #368]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a56:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AUD_GREEN_L_PREAMP_AUDIO_Pin|AUD_GREEN_R_PREAMP_AUDIO_Pin;
 8001a62:	2330      	movs	r3, #48	; 0x30
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a66:	2303      	movs	r3, #3
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a78:	f002 fe14 	bl	80046a4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001a7c:	4b51      	ldr	r3, [pc, #324]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001a7e:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_DAC_MspInit+0x1b8>)
 8001a80:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001a82:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001a84:	2206      	movs	r2, #6
 8001a86:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a88:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8e:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a94:	4b4b      	ldr	r3, [pc, #300]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001aa2:	4b48      	ldr	r3, [pc, #288]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aa8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001aaa:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001aac:	2220      	movs	r2, #32
 8001aae:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ab0:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ab6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001ab8:	4842      	ldr	r0, [pc, #264]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001aba:	f002 fb81 	bl	80041c0 <HAL_DMA_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001ac4:	f7ff fda8 	bl	8001618 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a3e      	ldr	r2, [pc, #248]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	4a3d      	ldr	r2, [pc, #244]	; (8001bc4 <HAL_DAC_MspInit+0x1b4>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2105      	movs	r1, #5
 8001ad8:	2036      	movs	r0, #54	; 0x36
 8001ada:	f001 ff4f 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ade:	2036      	movs	r0, #54	; 0x36
 8001ae0:	f001 ff66 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8001ae4:	e065      	b.n	8001bb2 <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a38      	ldr	r2, [pc, #224]	; (8001bcc <HAL_DAC_MspInit+0x1bc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d12d      	bne.n	8001b4c <HAL_DAC_MspInit+0x13c>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001af0:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	4a32      	ldr	r2, [pc, #200]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afc:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	4a2c      	ldr	r2, [pc, #176]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TFT_LED_LVL_Pin;
 8001b20:	2340      	movs	r3, #64	; 0x40
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b24:	2303      	movs	r3, #3
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TFT_LED_LVL_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b30:	4619      	mov	r1, r3
 8001b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b36:	f002 fdb5 	bl	80046a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	2037      	movs	r0, #55	; 0x37
 8001b40:	f001 ff1c 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001b44:	2037      	movs	r0, #55	; 0x37
 8001b46:	f001 ff33 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8001b4a:	e032      	b.n	8001bb2 <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_DAC_MspInit+0x1c0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d114      	bne.n	8001b80 <HAL_DAC_MspInit+0x170>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2105      	movs	r1, #5
 8001b72:	2036      	movs	r0, #54	; 0x36
 8001b74:	f001 ff02 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b78:	2036      	movs	r0, #54	; 0x36
 8001b7a:	f001 ff19 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8001b7e:	e018      	b.n	8001bb2 <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC4)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <HAL_DAC_MspInit+0x1c4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d113      	bne.n	8001bb2 <HAL_DAC_MspInit+0x1a2>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_DAC_MspInit+0x1b0>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	210f      	movs	r1, #15
 8001ba6:	2037      	movs	r0, #55	; 0x37
 8001ba8:	f001 fee8 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001bac:	2037      	movs	r0, #55	; 0x37
 8001bae:	f001 feff 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3738      	adds	r7, #56	; 0x38
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	50000800 	.word	0x50000800
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	20000494 	.word	0x20000494
 8001bc8:	40020008 	.word	0x40020008
 8001bcc:	50000c00 	.word	0x50000c00
 8001bd0:	50001000 	.word	0x50001000
 8001bd4:	50001400 	.word	0x50001400

08001bd8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a4d      	ldr	r2, [pc, #308]	; (8001d2c <HAL_OPAMP_MspInit+0x154>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d119      	bne.n	8001c2e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = AUD_ORANGE_L_PREAMP_AUDIO_Pin;
 8001c12:	2304      	movs	r3, #4
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c16:	2303      	movs	r3, #3
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_L_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c28:	f002 fd3c 	bl	80046a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001c2c:	e07a      	b.n	8001d24 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP3)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a40      	ldr	r2, [pc, #256]	; (8001d34 <HAL_OPAMP_MspInit+0x15c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d118      	bne.n	8001c6a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c38:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	4a3c      	ldr	r2, [pc, #240]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c44:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AUD_ORANGE_PREAMP_AUDIO_Pin;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c54:	2303      	movs	r3, #3
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4619      	mov	r1, r3
 8001c62:	4835      	ldr	r0, [pc, #212]	; (8001d38 <HAL_OPAMP_MspInit+0x160>)
 8001c64:	f002 fd1e 	bl	80046a4 <HAL_GPIO_Init>
}
 8001c68:	e05c      	b.n	8001d24 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP4)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a33      	ldr	r2, [pc, #204]	; (8001d3c <HAL_OPAMP_MspInit+0x164>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d119      	bne.n	8001ca8 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c92:	2303      	movs	r3, #3
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4825      	ldr	r0, [pc, #148]	; (8001d38 <HAL_OPAMP_MspInit+0x160>)
 8001ca2:	f002 fcff 	bl	80046a4 <HAL_GPIO_Init>
}
 8001ca6:	e03d      	b.n	8001d24 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP5)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <HAL_OPAMP_MspInit+0x168>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d11a      	bne.n	8001ce8 <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f002 fcdf 	bl	80046a4 <HAL_GPIO_Init>
}
 8001ce6:	e01d      	b.n	8001d24 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP6)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <HAL_OPAMP_MspInit+0x16c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d118      	bne.n	8001d24 <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_OPAMP_MspInit+0x158>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d10:	2303      	movs	r3, #3
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <HAL_OPAMP_MspInit+0x160>)
 8001d20:	f002 fcc0 	bl	80046a4 <HAL_GPIO_Init>
}
 8001d24:	bf00      	nop
 8001d26:	3730      	adds	r7, #48	; 0x30
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40010300 	.word	0x40010300
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010308 	.word	0x40010308
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	4001030c 	.word	0x4001030c
 8001d40:	40010310 	.word	0x40010310
 8001d44:	40010314 	.word	0x40010314

08001d48 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b0a0      	sub	sp, #128	; 0x80
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	2254      	movs	r2, #84	; 0x54
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f009 fd8b 	bl	800b884 <memset>
  if(hqspi->Instance==QUADSPI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a3c      	ldr	r2, [pc, #240]	; (8001e64 <HAL_QSPI_MspInit+0x11c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d170      	bne.n	8001e5a <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001d78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d82:	f107 0318 	add.w	r3, r7, #24
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 fe94 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 8001d92:	f7ff fc41 	bl	8001618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d96:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9a:	4a33      	ldr	r2, [pc, #204]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6513      	str	r3, [r2, #80]	; 0x50
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dae:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001db4:	f043 0308 	orr.w	r3, r3, #8
 8001db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dba:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001dcc:	f043 0320 	orr.w	r3, r3, #32
 8001dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001de4:	f043 0310 	orr.w	r3, r3, #16
 8001de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_QSPI_MspInit+0x120>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
    PE15     ------> QUADSPI1_BK1_IO3
    PE11     ------> QUADSPI1_BK1_NCS
    PE14     ------> QUADSPI1_BK1_IO2
    PE13     ------> QUADSPI1_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7
 8001df6:	23f8      	movs	r3, #248	; 0xf8
 8001df8:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e06:	230a      	movs	r3, #10
 8001e08:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4816      	ldr	r0, [pc, #88]	; (8001e6c <HAL_QSPI_MspInit+0x124>)
 8001e12:	f002 fc47 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e28:	230a      	movs	r3, #10
 8001e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e30:	4619      	mov	r1, r3
 8001e32:	480f      	ldr	r0, [pc, #60]	; (8001e70 <HAL_QSPI_MspInit+0x128>)
 8001e34:	f002 fc36 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14
 8001e38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e52:	4619      	mov	r1, r3
 8001e54:	4807      	ldr	r0, [pc, #28]	; (8001e74 <HAL_QSPI_MspInit+0x12c>)
 8001e56:	f002 fc25 	bl	80046a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3780      	adds	r7, #128	; 0x80
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	a0001000 	.word	0xa0001000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	48000c00 	.word	0x48000c00
 8001e70:	48001400 	.word	0x48001400
 8001e74:	48001000 	.word	0x48001000

08001e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b090      	sub	sp, #64	; 0x40
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a62      	ldr	r2, [pc, #392]	; (8002020 <HAL_SPI_MspInit+0x1a8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d146      	bne.n	8001f28 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e9a:	4b62      	ldr	r3, [pc, #392]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	4a61      	ldr	r2, [pc, #388]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea6:	4b5f      	ldr	r3, [pc, #380]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb2:	4b5c      	ldr	r3, [pc, #368]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	4a5b      	ldr	r2, [pc, #364]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebe:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	4b56      	ldr	r3, [pc, #344]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a55      	ldr	r2, [pc, #340]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed6:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
    PD15     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001ef4:	2306      	movs	r3, #6
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efc:	4619      	mov	r1, r3
 8001efe:	484a      	ldr	r0, [pc, #296]	; (8002028 <HAL_SPI_MspInit+0x1b0>)
 8001f00:	f002 fbd0 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8001f04:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f16:	2305      	movs	r3, #5
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4842      	ldr	r0, [pc, #264]	; (800202c <HAL_SPI_MspInit+0x1b4>)
 8001f22:	f002 fbbf 	bl	80046a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001f26:	e077      	b.n	8002018 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a40      	ldr	r2, [pc, #256]	; (8002030 <HAL_SPI_MspInit+0x1b8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d145      	bne.n	8001fbe <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f32:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3e:	4b39      	ldr	r3, [pc, #228]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	4a35      	ldr	r2, [pc, #212]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f56:	4b33      	ldr	r3, [pc, #204]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f8a:	2306      	movs	r3, #6
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f92:	4619      	mov	r1, r3
 8001f94:	4825      	ldr	r0, [pc, #148]	; (800202c <HAL_SPI_MspInit+0x1b4>)
 8001f96:	f002 fb85 	bl	80046a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fac:	2306      	movs	r3, #6
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	481f      	ldr	r0, [pc, #124]	; (8002034 <HAL_SPI_MspInit+0x1bc>)
 8001fb8:	f002 fb74 	bl	80046a4 <HAL_GPIO_Init>
}
 8001fbc:	e02c      	b.n	8002018 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI4)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_SPI_MspInit+0x1c0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d127      	bne.n	8002018 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001fe6:	f043 0310 	orr.w	r3, r3, #16
 8001fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_SPI_MspInit+0x1ac>)
 8001fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_2;
 8001ff8:	2374      	movs	r3, #116	; 0x74
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002008:	2305      	movs	r3, #5
 800200a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002010:	4619      	mov	r1, r3
 8002012:	480a      	ldr	r0, [pc, #40]	; (800203c <HAL_SPI_MspInit+0x1c4>)
 8002014:	f002 fb46 	bl	80046a4 <HAL_GPIO_Init>
}
 8002018:	bf00      	nop
 800201a:	3740      	adds	r7, #64	; 0x40
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40003800 	.word	0x40003800
 8002024:	40021000 	.word	0x40021000
 8002028:	48000c00 	.word	0x48000c00
 800202c:	48000400 	.word	0x48000400
 8002030:	40003c00 	.word	0x40003c00
 8002034:	48000800 	.word	0x48000800
 8002038:	40013c00 	.word	0x40013c00
 800203c:	48001000 	.word	0x48001000

08002040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <HAL_TIM_Base_MspInit+0x44>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d113      	bne.n	800207a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_TIM_Base_MspInit+0x48>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <HAL_TIM_Base_MspInit+0x48>)
 8002058:	f043 0310 	orr.w	r3, r3, #16
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_TIM_Base_MspInit+0x48>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2105      	movs	r1, #5
 800206e:	2036      	movs	r0, #54	; 0x36
 8002070:	f001 fc84 	bl	800397c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002074:	2036      	movs	r0, #54	; 0x36
 8002076:	f001 fc9b 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40001000 	.word	0x40001000
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0a0      	sub	sp, #128	; 0x80
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a4:	f107 0318 	add.w	r3, r7, #24
 80020a8:	2254      	movs	r2, #84	; 0x54
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f009 fbe9 	bl	800b884 <memset>
  if(huart->Instance==UART5)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2d      	ldr	r2, [pc, #180]	; (800216c <HAL_UART_MspInit+0xe0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d152      	bne.n	8002162 <HAL_UART_MspInit+0xd6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80020bc:	2310      	movs	r3, #16
 80020be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 fcf3 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020d4:	f7ff faa0 	bl	8001618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_UART_MspInit+0xe4>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	4a24      	ldr	r2, [pc, #144]	; (8002170 <HAL_UART_MspInit+0xe4>)
 80020de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020e2:	6593      	str	r3, [r2, #88]	; 0x58
 80020e4:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_UART_MspInit+0xe4>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <HAL_UART_MspInit+0xe4>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <HAL_UART_MspInit+0xe4>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_UART_MspInit+0xe4>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_UART_MspInit+0xe4>)
 800210a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210c:	4a18      	ldr	r2, [pc, #96]	; (8002170 <HAL_UART_MspInit+0xe4>)
 800210e:	f043 0308 	orr.w	r3, r3, #8
 8002112:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_UART_MspInit+0xe4>)
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002124:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002132:	2305      	movs	r3, #5
 8002134:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800213a:	4619      	mov	r1, r3
 800213c:	480d      	ldr	r0, [pc, #52]	; (8002174 <HAL_UART_MspInit+0xe8>)
 800213e:	f002 fab1 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002142:	2304      	movs	r3, #4
 8002144:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002152:	2305      	movs	r3, #5
 8002154:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002156:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800215a:	4619      	mov	r1, r3
 800215c:	4806      	ldr	r0, [pc, #24]	; (8002178 <HAL_UART_MspInit+0xec>)
 800215e:	f002 faa1 	bl	80046a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002162:	bf00      	nop
 8002164:	3780      	adds	r7, #128	; 0x80
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40005000 	.word	0x40005000
 8002170:	40021000 	.word	0x40021000
 8002174:	48000800 	.word	0x48000800
 8002178:	48000c00 	.word	0x48000c00

0800217c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0a0      	sub	sp, #128	; 0x80
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002194:	f107 0318 	add.w	r3, r7, #24
 8002198:	2254      	movs	r2, #84	; 0x54
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f009 fb71 	bl	800b884 <memset>
  if(husart->Instance==USART3)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2d      	ldr	r2, [pc, #180]	; (800225c <HAL_USART_MspInit+0xe0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d153      	bne.n	8002254 <HAL_USART_MspInit+0xd8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021ac:	2304      	movs	r3, #4
 80021ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b4:	f107 0318 	add.w	r3, r7, #24
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 fc7b 	bl	8005ab4 <HAL_RCCEx_PeriphCLKConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80021c4:	f7ff fa28 	bl	8001618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_USART_MspInit+0xe4>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	4a24      	ldr	r2, [pc, #144]	; (8002260 <HAL_USART_MspInit+0xe4>)
 80021ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d2:	6593      	str	r3, [r2, #88]	; 0x58
 80021d4:	4b22      	ldr	r3, [pc, #136]	; (8002260 <HAL_USART_MspInit+0xe4>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e0:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <HAL_USART_MspInit+0xe4>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_USART_MspInit+0xe4>)
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ec:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <HAL_USART_MspInit+0xe4>)
 80021ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_USART_MspInit+0xe4>)
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_USART_MspInit+0xe4>)
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_USART_MspInit+0xe4>)
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB9     ------> USART3_TX
    PD10     ------> USART3_CK
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002214:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002222:	2307      	movs	r3, #7
 8002224:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002226:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800222a:	4619      	mov	r1, r3
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <HAL_USART_MspInit+0xe8>)
 800222e:	f002 fa39 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002232:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002236:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002244:	2307      	movs	r3, #7
 8002246:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002248:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800224c:	4619      	mov	r1, r3
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <HAL_USART_MspInit+0xec>)
 8002250:	f002 fa28 	bl	80046a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002254:	bf00      	nop
 8002256:	3780      	adds	r7, #128	; 0x80
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40004800 	.word	0x40004800
 8002260:	40021000 	.word	0x40021000
 8002264:	48000400 	.word	0x48000400
 8002268:	48000c00 	.word	0x48000c00

0800226c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800227c:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <HAL_InitTick+0xc4>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	4a2b      	ldr	r2, [pc, #172]	; (8002330 <HAL_InitTick+0xc4>)
 8002282:	f043 0320 	orr.w	r3, r3, #32
 8002286:	6593      	str	r3, [r2, #88]	; 0x58
 8002288:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_InitTick+0xc4>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002294:	f107 020c 	add.w	r2, r7, #12
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 fb66 	bl	8005970 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022a4:	f003 fb38 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 80022a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	4a21      	ldr	r2, [pc, #132]	; (8002334 <HAL_InitTick+0xc8>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0c9b      	lsrs	r3, r3, #18
 80022b4:	3b01      	subs	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80022b8:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <HAL_InitTick+0xcc>)
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_InitTick+0xd0>)
 80022bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_InitTick+0xcc>)
 80022c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <HAL_InitTick+0xcc>)
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_InitTick+0xcc>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_InitTick+0xcc>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80022d8:	4817      	ldr	r0, [pc, #92]	; (8002338 <HAL_InitTick+0xcc>)
 80022da:	f003 ff6b 	bl	80061b4 <HAL_TIM_Base_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80022e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d11b      	bne.n	8002324 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80022ec:	4812      	ldr	r0, [pc, #72]	; (8002338 <HAL_InitTick+0xcc>)
 80022ee:	f004 f835 	bl	800635c <HAL_TIM_Base_Start_IT>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80022f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d111      	bne.n	8002324 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002300:	2037      	movs	r0, #55	; 0x37
 8002302:	f001 fb55 	bl	80039b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d808      	bhi.n	800231e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	2037      	movs	r0, #55	; 0x37
 8002312:	f001 fb33 	bl	800397c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <HAL_InitTick+0xd4>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	e002      	b.n	8002324 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002328:	4618      	mov	r0, r3
 800232a:	3730      	adds	r7, #48	; 0x30
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	431bde83 	.word	0x431bde83
 8002338:	20000d88 	.word	0x20000d88
 800233c:	40001400 	.word	0x40001400
 8002340:	20000004 	.word	0x20000004

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002348:	f003 fb54 	bl	80059f4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800234c:	e7fe      	b.n	800234c <NMI_Handler+0x8>

0800234e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <HardFault_Handler+0x4>

08002354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <MemManage_Handler+0x4>

0800235a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <BusFault_Handler+0x4>

08002360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <UsageFault_Handler+0x4>

08002366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <DMA1_Channel1_IRQHandler+0x10>)
 800237a:	f002 f844 	bl	8004406 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000494 	.word	0x20000494

08002388 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <TIM6_DAC_IRQHandler+0x1c>)
 800238e:	f004 f85d 	bl	800644c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <TIM6_DAC_IRQHandler+0x20>)
 8002394:	f001 fc42 	bl	8003c1c <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac3);
 8002398:	4804      	ldr	r0, [pc, #16]	; (80023ac <TIM6_DAC_IRQHandler+0x24>)
 800239a:	f001 fc3f 	bl	8003c1c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000868 	.word	0x20000868
 80023a8:	200003a4 	.word	0x200003a4
 80023ac:	2000041c 	.word	0x2000041c

080023b0 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <TIM7_DAC_IRQHandler+0x1c>)
 80023b6:	f004 f849 	bl	800644c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <TIM7_DAC_IRQHandler+0x20>)
 80023bc:	f001 fc2e 	bl	8003c1c <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac4);
 80023c0:	4804      	ldr	r0, [pc, #16]	; (80023d4 <TIM7_DAC_IRQHandler+0x24>)
 80023c2:	f001 fc2b 	bl	8003c1c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000d88 	.word	0x20000d88
 80023d0:	200003e0 	.word	0x200003e0
 80023d4:	20000458 	.word	0x20000458

080023d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <SystemInit+0x20>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <SystemInit+0x20>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002400:	f7ff ffea 	bl	80023d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <LoopForever+0x6>)
  ldr r1, =_edata
 8002406:	490d      	ldr	r1, [pc, #52]	; (800243c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002408:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <LoopForever+0xe>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800240c:	e002      	b.n	8002414 <LoopCopyDataInit>

0800240e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002412:	3304      	adds	r3, #4

08002414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002418:	d3f9      	bcc.n	800240e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800241c:	4c0a      	ldr	r4, [pc, #40]	; (8002448 <LoopForever+0x16>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002420:	e001      	b.n	8002426 <LoopFillZerobss>

08002422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002424:	3204      	adds	r2, #4

08002426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002428:	d3fb      	bcc.n	8002422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800242a:	f009 f9f7 	bl	800b81c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800242e:	f7fe f957 	bl	80006e0 <main>

08002432 <LoopForever>:

LoopForever:
    b LoopForever
 8002432:	e7fe      	b.n	8002432 <LoopForever>
  ldr   r0, =_estack
 8002434:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800243c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002440:	0800bc00 	.word	0x0800bc00
  ldr r2, =_sbss
 8002444:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002448:	20002884 	.word	0x20002884

0800244c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800244c:	e7fe      	b.n	800244c <ADC1_2_IRQHandler>

0800244e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f001 fa84 	bl	8003966 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800245e:	200f      	movs	r0, #15
 8002460:	f7ff ff04 	bl	800226c <HAL_InitTick>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	e001      	b.n	8002474 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002470:	f7ff f8d8 	bl	8001624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002474:	79fb      	ldrb	r3, [r7, #7]

}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_IncTick+0x1c>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_IncTick+0x20>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4413      	add	r3, r2
 800248e:	4a03      	ldr	r2, [pc, #12]	; (800249c <HAL_IncTick+0x1c>)
 8002490:	6013      	str	r3, [r2, #0]
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	20000e54 	.word	0x20000e54
 80024a0:	20000008 	.word	0x20000008

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000e54 	.word	0x20000e54

080024bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	609a      	str	r2, [r3, #8]
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	609a      	str	r2, [r3, #8]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3360      	adds	r3, #96	; 0x60
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <LL_ADC_SetOffset+0x44>)
 8002546:	4013      	ands	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	4313      	orrs	r3, r2
 8002554:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	03fff000 	.word	0x03fff000

0800256c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3360      	adds	r3, #96	; 0x60
 800257a:	461a      	mov	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3360      	adds	r3, #96	; 0x60
 80025a8:	461a      	mov	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	431a      	orrs	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b087      	sub	sp, #28
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3360      	adds	r3, #96	; 0x60
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3360      	adds	r3, #96	; 0x60
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	431a      	orrs	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	615a      	str	r2, [r3, #20]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3330      	adds	r3, #48	; 0x30
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	4413      	add	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	211f      	movs	r1, #31
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	401a      	ands	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	0e9b      	lsrs	r3, r3, #26
 8002698:	f003 011f 	and.w	r1, r3, #31
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	431a      	orrs	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3314      	adds	r3, #20
 80026c8:	461a      	mov	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	0e5b      	lsrs	r3, r3, #25
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	4413      	add	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	0d1b      	lsrs	r3, r3, #20
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2107      	movs	r1, #7
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	401a      	ands	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	0d1b      	lsrs	r3, r3, #20
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	431a      	orrs	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002728:	43db      	mvns	r3, r3
 800272a:	401a      	ands	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0318 	and.w	r3, r3, #24
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002734:	40d9      	lsrs	r1, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	400b      	ands	r3, r1
 800273a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273e:	431a      	orrs	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	0007ffff 	.word	0x0007ffff

08002758 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002768:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6093      	str	r3, [r2, #8]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800278c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002790:	d101      	bne.n	8002796 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027e0:	d101      	bne.n	80027e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <LL_ADC_IsEnabled+0x18>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <LL_ADC_IsEnabled+0x1a>
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b04      	cmp	r3, #4
 800282c:	d101      	bne.n	8002832 <LL_ADC_REG_IsConversionOngoing+0x18>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b08      	cmp	r3, #8
 8002852:	d101      	bne.n	8002858 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1e4      	b.n	8002c4c <HAL_ADC_Init+0x3e4>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d133      	bne.n	80028f8 <HAL_ADC_Init+0x90>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a68      	ldr	r2, [pc, #416]	; (8002a34 <HAL_ADC_Init+0x1cc>)
 8002894:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a67      	ldr	r2, [pc, #412]	; (8002a38 <HAL_ADC_Init+0x1d0>)
 800289a:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a67      	ldr	r2, [pc, #412]	; (8002a3c <HAL_ADC_Init+0x1d4>)
 80028a0:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a66      	ldr	r2, [pc, #408]	; (8002a40 <HAL_ADC_Init+0x1d8>)
 80028a6:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a66      	ldr	r2, [pc, #408]	; (8002a44 <HAL_ADC_Init+0x1dc>)
 80028ac:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <HAL_ADC_Init+0x1e0>)
 80028b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a64      	ldr	r2, [pc, #400]	; (8002a4c <HAL_ADC_Init+0x1e4>)
 80028ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a63      	ldr	r2, [pc, #396]	; (8002a50 <HAL_ADC_Init+0x1e8>)
 80028c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a62      	ldr	r2, [pc, #392]	; (8002a54 <HAL_ADC_Init+0x1ec>)
 80028ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    if (hadc->MspInitCallback == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d103      	bne.n	80028e0 <HAL_ADC_Init+0x78>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a5f      	ldr	r2, [pc, #380]	; (8002a58 <HAL_ADC_Init+0x1f0>)
 80028dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff3d 	bl	800277c <LL_ADC_IsDeepPowerDownEnabled>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d004      	beq.n	8002912 <HAL_ADC_Init+0xaa>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff23 	bl	8002758 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff58 	bl	80027cc <LL_ADC_IsInternalRegulatorEnabled>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d115      	bne.n	800294e <HAL_ADC_Init+0xe6>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff3c 	bl	80027a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800292c:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <HAL_ADC_Init+0x1f4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <HAL_ADC_Init+0x1f8>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	3301      	adds	r3, #1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002940:	e002      	b.n	8002948 <HAL_ADC_Init+0xe0>
    {
      wait_loop_index--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3b01      	subs	r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f9      	bne.n	8002942 <HAL_ADC_Init+0xda>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff3a 	bl	80027cc <LL_ADC_IsInternalRegulatorEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10d      	bne.n	800297a <HAL_ADC_Init+0x112>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	f043 0210 	orr.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ff4b 	bl	800281a <LL_ADC_REG_IsConversionOngoing>
 8002984:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 8153 	bne.w	8002c3a <HAL_ADC_Init+0x3d2>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 814f 	bne.w	8002c3a <HAL_ADC_Init+0x3d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029a4:	f043 0202 	orr.w	r2, r3, #2
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff1f 	bl	80027f4 <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d164      	bne.n	8002a86 <HAL_ADC_Init+0x21e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_Init+0x168>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <HAL_ADC_Init+0x1fc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d10f      	bne.n	80029f0 <HAL_ADC_Init+0x188>
 80029d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029d4:	f7ff ff0e 	bl	80027f4 <LL_ADC_IsEnabled>
 80029d8:	4604      	mov	r4, r0
 80029da:	4822      	ldr	r0, [pc, #136]	; (8002a64 <HAL_ADC_Init+0x1fc>)
 80029dc:	f7ff ff0a 	bl	80027f4 <LL_ADC_IsEnabled>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4323      	orrs	r3, r4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e012      	b.n	8002a16 <HAL_ADC_Init+0x1ae>
 80029f0:	481d      	ldr	r0, [pc, #116]	; (8002a68 <HAL_ADC_Init+0x200>)
 80029f2:	f7ff feff 	bl	80027f4 <LL_ADC_IsEnabled>
 80029f6:	4604      	mov	r4, r0
 80029f8:	481c      	ldr	r0, [pc, #112]	; (8002a6c <HAL_ADC_Init+0x204>)
 80029fa:	f7ff fefb 	bl	80027f4 <LL_ADC_IsEnabled>
 80029fe:	4603      	mov	r3, r0
 8002a00:	431c      	orrs	r4, r3
 8002a02:	481b      	ldr	r0, [pc, #108]	; (8002a70 <HAL_ADC_Init+0x208>)
 8002a04:	f7ff fef6 	bl	80027f4 <LL_ADC_IsEnabled>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d035      	beq.n	8002a86 <HAL_ADC_Init+0x21e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a22:	d004      	beq.n	8002a2e <HAL_ADC_Init+0x1c6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <HAL_ADC_Init+0x1fc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d124      	bne.n	8002a78 <HAL_ADC_Init+0x210>
 8002a2e:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <HAL_ADC_Init+0x20c>)
 8002a30:	e023      	b.n	8002a7a <HAL_ADC_Init+0x212>
 8002a32:	bf00      	nop
 8002a34:	08002c5d 	.word	0x08002c5d
 8002a38:	08002c71 	.word	0x08002c71
 8002a3c:	08002c85 	.word	0x08002c85
 8002a40:	08002c99 	.word	0x08002c99
 8002a44:	08003579 	.word	0x08003579
 8002a48:	0800358d 	.word	0x0800358d
 8002a4c:	080035a1 	.word	0x080035a1
 8002a50:	080035b5 	.word	0x080035b5
 8002a54:	080035c9 	.word	0x080035c9
 8002a58:	08001675 	.word	0x08001675
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	053e2d63 	.word	0x053e2d63
 8002a64:	50000100 	.word	0x50000100
 8002a68:	50000400 	.word	0x50000400
 8002a6c:	50000500 	.word	0x50000500
 8002a70:	50000600 	.word	0x50000600
 8002a74:	50000300 	.word	0x50000300
 8002a78:	4a76      	ldr	r2, [pc, #472]	; (8002c54 <HAL_ADC_Init+0x3ec>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f7ff fd1b 	bl	80024bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7f5b      	ldrb	r3, [r3, #29]
 8002a8a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a90:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a96:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a9c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <HAL_ADC_Init+0x25a>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	045b      	lsls	r3, r3, #17
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_ADC_Init+0x276>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	4b5c      	ldr	r3, [pc, #368]	; (8002c58 <HAL_ADC_Init+0x3f0>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	69b9      	ldr	r1, [r7, #24]
 8002aee:	430b      	orrs	r3, r1
 8002af0:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fe97 	bl	8002840 <LL_ADC_INJ_IsConversionOngoing>
 8002b12:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d16d      	bne.n	8002bf6 <HAL_ADC_Init+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d16a      	bne.n	8002bf6 <HAL_ADC_Init+0x38e>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b24:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b2c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b3c:	f023 0302 	bic.w	r3, r3, #2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	69b9      	ldr	r1, [r7, #24]
 8002b46:	430b      	orrs	r3, r1
 8002b48:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d017      	beq.n	8002b82 <HAL_ADC_Init+0x31a>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b60:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6911      	ldr	r1, [r2, #16]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b80:	e013      	b.n	8002baa <HAL_ADC_Init+0x342>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b90:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ba2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ba6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d118      	bne.n	8002be6 <HAL_ADC_Init+0x37e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	611a      	str	r2, [r3, #16]
 8002be4:	e007      	b.n	8002bf6 <HAL_ADC_Init+0x38e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10c      	bne.n	8002c18 <HAL_ADC_Init+0x3b0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	f023 010f 	bic.w	r1, r3, #15
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
 8002c16:	e007      	b.n	8002c28 <HAL_ADC_Init+0x3c0>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 020f 	bic.w	r2, r2, #15
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	f023 0303 	bic.w	r3, r3, #3
 8002c30:	f043 0201 	orr.w	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c38:	e007      	b.n	8002c4a <HAL_ADC_Init+0x3e2>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	f043 0210 	orr.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3724      	adds	r7, #36	; 0x24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	50000700 	.word	0x50000700
 8002c58:	fff04007 	.word	0xfff04007

08002c5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b0b6      	sub	sp, #216	; 0xd8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d102      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x24>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	f000 bc13 	b.w	80034f6 <HAL_ADC_ConfigChannel+0x84a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fd9c 	bl	800281a <LL_ADC_REG_IsConversionOngoing>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 83f3 	bne.w	80034d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f7ff fcb2 	bl	8002660 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fd8a 	bl	800281a <LL_ADC_REG_IsConversionOngoing>
 8002d06:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fd96 	bl	8002840 <LL_ADC_INJ_IsConversionOngoing>
 8002d14:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 81d9 	bne.w	80030d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 81d4 	bne.w	80030d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d34:	d10f      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7ff fcb9 	bl	80026b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fc73 	bl	800263a <LL_ADC_SetSamplingTimeCommonConfig>
 8002d54:	e00e      	b.n	8002d74 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6819      	ldr	r1, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f7ff fca8 	bl	80026b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fc63 	bl	800263a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	08db      	lsrs	r3, r3, #3
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d022      	beq.n	8002ddc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6919      	ldr	r1, [r3, #16]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002da6:	f7ff fbbd 	bl	8002524 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6919      	ldr	r1, [r3, #16]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f7ff fc09 	bl	80025ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d102      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x126>
 8002dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd0:	e000      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x128>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f7ff fc15 	bl	8002604 <LL_ADC_SetOffsetSaturation>
 8002dda:	e17b      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fbc2 	bl	800256c <LL_ADC_GetOffsetChannel>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x15c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fbb7 	bl	800256c <LL_ADC_GetOffsetChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	f003 021f 	and.w	r2, r3, #31
 8002e06:	e01e      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x19a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fbac 	bl	800256c <LL_ADC_GetOffsetChannel>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e36:	2320      	movs	r3, #32
 8002e38:	e004      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x1b2>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0e9b      	lsrs	r3, r3, #26
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	e018      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x1e4>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e82:	2320      	movs	r3, #32
 8002e84:	e004      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d106      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fb7b 	bl	8002598 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fb5f 	bl	800256c <LL_ADC_GetOffsetChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x222>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fb54 	bl	800256c <LL_ADC_GetOffsetChannel>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	e01e      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x260>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fb49 	bl	800256c <LL_ADC_GetOffsetChannel>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002eec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e004      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x278>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	e018      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x2aa>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f48:	2320      	movs	r3, #32
 8002f4a:	e004      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d106      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2101      	movs	r1, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fb18 	bl	8002598 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fafc 	bl	800256c <LL_ADC_GetOffsetChannel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x2e8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2102      	movs	r1, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff faf1 	bl	800256c <LL_ADC_GetOffsetChannel>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	f003 021f 	and.w	r2, r3, #31
 8002f92:	e01e      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x326>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2102      	movs	r1, #2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fae6 	bl	800256c <LL_ADC_GetOffsetChannel>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002fba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	e004      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x33e>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	0e9b      	lsrs	r3, r3, #26
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	e016      	b.n	8003018 <HAL_ADC_ConfigChannel+0x36c>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ffe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003002:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800300a:	2320      	movs	r3, #32
 800300c:	e004      	b.n	8003018 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800300e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003018:	429a      	cmp	r2, r3
 800301a:	d106      	bne.n	800302a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2200      	movs	r2, #0
 8003022:	2102      	movs	r1, #2
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fab7 	bl	8002598 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2103      	movs	r1, #3
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fa9b 	bl	800256c <LL_ADC_GetOffsetChannel>
 8003036:	4603      	mov	r3, r0
 8003038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x3aa>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2103      	movs	r1, #3
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fa90 	bl	800256c <LL_ADC_GetOffsetChannel>
 800304c:	4603      	mov	r3, r0
 800304e:	0e9b      	lsrs	r3, r3, #26
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	e017      	b.n	8003086 <HAL_ADC_ConfigChannel+0x3da>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2103      	movs	r1, #3
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fa85 	bl	800256c <LL_ADC_GetOffsetChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800306e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003070:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e003      	b.n	8003084 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800307c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <HAL_ADC_ConfigChannel+0x3f2>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0e9b      	lsrs	r3, r3, #26
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	e011      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x416>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80030b6:	2320      	movs	r3, #32
 80030b8:	e003      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d106      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	2103      	movs	r1, #3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fa62 	bl	8002598 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fb8b 	bl	80027f4 <LL_ADC_IsEnabled>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f040 813d 	bne.w	8003360 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	461a      	mov	r2, r3
 80030f4:	f7ff fb0c 	bl	8002710 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4aa2      	ldr	r2, [pc, #648]	; (8003388 <HAL_ADC_ConfigChannel+0x6dc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	f040 812e 	bne.w	8003360 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10b      	bne.n	800312c <HAL_ADC_ConfigChannel+0x480>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0e9b      	lsrs	r3, r3, #26
 800311a:	3301      	adds	r3, #1
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	2b09      	cmp	r3, #9
 8003122:	bf94      	ite	ls
 8003124:	2301      	movls	r3, #1
 8003126:	2300      	movhi	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e019      	b.n	8003160 <HAL_ADC_ConfigChannel+0x4b4>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800313a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800313c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800313e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003144:	2320      	movs	r3, #32
 8003146:	e003      	b.n	8003150 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3301      	adds	r3, #1
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2b09      	cmp	r3, #9
 8003158:	bf94      	ite	ls
 800315a:	2301      	movls	r3, #1
 800315c:	2300      	movhi	r3, #0
 800315e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003160:	2b00      	cmp	r3, #0
 8003162:	d079      	beq.n	8003258 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x4d4>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	3301      	adds	r3, #1
 8003178:	069b      	lsls	r3, r3, #26
 800317a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800317e:	e015      	b.n	80031ac <HAL_ADC_ConfigChannel+0x500>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800318e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003190:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003198:	2320      	movs	r3, #32
 800319a:	e003      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800319c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	069b      	lsls	r3, r3, #26
 80031a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x520>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	0e9b      	lsrs	r3, r3, #26
 80031be:	3301      	adds	r3, #1
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	e017      	b.n	80031fc <HAL_ADC_ConfigChannel+0x550>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031e4:	2320      	movs	r3, #32
 80031e6:	e003      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	2101      	movs	r1, #1
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	ea42 0103 	orr.w	r1, r2, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x576>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	0e9b      	lsrs	r3, r3, #26
 8003212:	3301      	adds	r3, #1
 8003214:	f003 021f 	and.w	r2, r3, #31
 8003218:	4613      	mov	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4413      	add	r3, r2
 800321e:	051b      	lsls	r3, r3, #20
 8003220:	e018      	b.n	8003254 <HAL_ADC_ConfigChannel+0x5a8>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003232:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800323a:	2320      	movs	r3, #32
 800323c:	e003      	b.n	8003246 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800323e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3301      	adds	r3, #1
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003254:	430b      	orrs	r3, r1
 8003256:	e07e      	b.n	8003356 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003260:	2b00      	cmp	r3, #0
 8003262:	d107      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x5c8>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0e9b      	lsrs	r3, r3, #26
 800326a:	3301      	adds	r3, #1
 800326c:	069b      	lsls	r3, r3, #26
 800326e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003272:	e015      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x5f4>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800328c:	2320      	movs	r3, #32
 800328e:	e003      	b.n	8003298 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	3301      	adds	r3, #1
 800329a:	069b      	lsls	r3, r3, #26
 800329c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x614>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0e9b      	lsrs	r3, r3, #26
 80032b2:	3301      	adds	r3, #1
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	e017      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x644>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	61fb      	str	r3, [r7, #28]
  return result;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80032d8:	2320      	movs	r3, #32
 80032da:	e003      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	ea42 0103 	orr.w	r1, r2, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10d      	bne.n	800331c <HAL_ADC_ConfigChannel+0x670>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	3301      	adds	r3, #1
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	3b1e      	subs	r3, #30
 8003314:	051b      	lsls	r3, r3, #20
 8003316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800331a:	e01b      	b.n	8003354 <HAL_ADC_ConfigChannel+0x6a8>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	613b      	str	r3, [r7, #16]
  return result;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003334:	2320      	movs	r3, #32
 8003336:	e003      	b.n	8003340 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fab3 f383 	clz	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	3301      	adds	r3, #1
 8003342:	f003 021f 	and.w	r2, r3, #31
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	3b1e      	subs	r3, #30
 800334e:	051b      	lsls	r3, r3, #20
 8003350:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003354:	430b      	orrs	r3, r1
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	4619      	mov	r1, r3
 800335c:	f7ff f9ac 	bl	80026b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_ADC_ConfigChannel+0x6e0>)
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80be 	beq.w	80034ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003376:	d004      	beq.n	8003382 <HAL_ADC_ConfigChannel+0x6d6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_ADC_ConfigChannel+0x6e4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d10a      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x6ec>
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <HAL_ADC_ConfigChannel+0x6e8>)
 8003384:	e009      	b.n	800339a <HAL_ADC_ConfigChannel+0x6ee>
 8003386:	bf00      	nop
 8003388:	407f0000 	.word	0x407f0000
 800338c:	80080000 	.word	0x80080000
 8003390:	50000100 	.word	0x50000100
 8003394:	50000300 	.word	0x50000300
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_ADC_ConfigChannel+0x854>)
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f8b4 	bl	8002508 <LL_ADC_GetCommonPathInternalCh>
 80033a0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a56      	ldr	r2, [pc, #344]	; (8003504 <HAL_ADC_ConfigChannel+0x858>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_ADC_ConfigChannel+0x70c>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a55      	ldr	r2, [pc, #340]	; (8003508 <HAL_ADC_ConfigChannel+0x85c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d13a      	bne.n	800342e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d134      	bne.n	800342e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033cc:	d005      	beq.n	80033da <HAL_ADC_ConfigChannel+0x72e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a4e      	ldr	r2, [pc, #312]	; (800350c <HAL_ADC_ConfigChannel+0x860>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	f040 8085 	bne.w	80034e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e2:	d004      	beq.n	80033ee <HAL_ADC_ConfigChannel+0x742>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a49      	ldr	r2, [pc, #292]	; (8003510 <HAL_ADC_ConfigChannel+0x864>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x746>
 80033ee:	4a49      	ldr	r2, [pc, #292]	; (8003514 <HAL_ADC_ConfigChannel+0x868>)
 80033f0:	e000      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x748>
 80033f2:	4a43      	ldr	r2, [pc, #268]	; (8003500 <HAL_ADC_ConfigChannel+0x854>)
 80033f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f7ff f86f 	bl	80024e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003404:	4b44      	ldr	r3, [pc, #272]	; (8003518 <HAL_ADC_ConfigChannel+0x86c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	4a44      	ldr	r2, [pc, #272]	; (800351c <HAL_ADC_ConfigChannel+0x870>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800341e:	e002      	b.n	8003426 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3b01      	subs	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f9      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800342c:	e05a      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a3b      	ldr	r2, [pc, #236]	; (8003520 <HAL_ADC_ConfigChannel+0x874>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d125      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800343c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d11f      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a31      	ldr	r2, [pc, #196]	; (8003510 <HAL_ADC_ConfigChannel+0x864>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d104      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x7ac>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a34      	ldr	r2, [pc, #208]	; (8003524 <HAL_ADC_ConfigChannel+0x878>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d047      	beq.n	80034e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003460:	d004      	beq.n	800346c <HAL_ADC_ConfigChannel+0x7c0>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2a      	ldr	r2, [pc, #168]	; (8003510 <HAL_ADC_ConfigChannel+0x864>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x7c4>
 800346c:	4a29      	ldr	r2, [pc, #164]	; (8003514 <HAL_ADC_ConfigChannel+0x868>)
 800346e:	e000      	b.n	8003472 <HAL_ADC_ConfigChannel+0x7c6>
 8003470:	4a23      	ldr	r2, [pc, #140]	; (8003500 <HAL_ADC_ConfigChannel+0x854>)
 8003472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f7ff f830 	bl	80024e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003482:	e031      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <HAL_ADC_ConfigChannel+0x87c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d12d      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800348e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d127      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_ADC_ConfigChannel+0x864>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d022      	beq.n	80034ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ac:	d004      	beq.n	80034b8 <HAL_ADC_ConfigChannel+0x80c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a17      	ldr	r2, [pc, #92]	; (8003510 <HAL_ADC_ConfigChannel+0x864>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x810>
 80034b8:	4a16      	ldr	r2, [pc, #88]	; (8003514 <HAL_ADC_ConfigChannel+0x868>)
 80034ba:	e000      	b.n	80034be <HAL_ADC_ConfigChannel+0x812>
 80034bc:	4a10      	ldr	r2, [pc, #64]	; (8003500 <HAL_ADC_ConfigChannel+0x854>)
 80034be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034c6:	4619      	mov	r1, r3
 80034c8:	4610      	mov	r0, r2
 80034ca:	f7ff f80a 	bl	80024e2 <LL_ADC_SetCommonPathInternalCh>
 80034ce:	e00c      	b.n	80034ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	f043 0220 	orr.w	r2, r3, #32
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80034e2:	e002      	b.n	80034ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e4:	bf00      	nop
 80034e6:	e000      	b.n	80034ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	37d8      	adds	r7, #216	; 0xd8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	50000700 	.word	0x50000700
 8003504:	c3210000 	.word	0xc3210000
 8003508:	90c00010 	.word	0x90c00010
 800350c:	50000600 	.word	0x50000600
 8003510:	50000100 	.word	0x50000100
 8003514:	50000300 	.word	0x50000300
 8003518:	20000000 	.word	0x20000000
 800351c:	053e2d63 	.word	0x053e2d63
 8003520:	c7520000 	.word	0xc7520000
 8003524:	50000500 	.word	0x50000500
 8003528:	cb840000 	.word	0xcb840000

0800352c <LL_ADC_IsEnabled>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <LL_ADC_IsEnabled+0x18>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <LL_ADC_IsEnabled+0x1a>
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_ADC_REG_IsConversionOngoing>:
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d101      	bne.n	800356a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b0ad      	sub	sp, #180	; 0xb4
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0f8      	b.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x210>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003602:	2300      	movs	r3, #0
 8003604:	66bb      	str	r3, [r7, #104]	; 0x68
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003612:	2300      	movs	r3, #0
 8003614:	66fb      	str	r3, [r7, #108]	; 0x6c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800361e:	d102      	bne.n	8003626 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003620:	4b74      	ldr	r3, [pc, #464]	; (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e009      	b.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a73      	ldr	r2, [pc, #460]	; (80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d102      	bne.n	8003636 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8003630:	4b72      	ldr	r3, [pc, #456]	; (80037fc <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	e001      	b.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0c9      	b.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x210>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ff79 	bl	8003552 <LL_ADC_REG_IsConversionOngoing>
 8003660:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff72 	bl	8003552 <LL_ADC_REG_IsConversionOngoing>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	f040 80aa 	bne.w	80037ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800367a:	2b00      	cmp	r3, #0
 800367c:	f040 80a5 	bne.w	80037ca <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003688:	d004      	beq.n	8003694 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a59      	ldr	r2, [pc, #356]	; (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8003694:	4b5a      	ldr	r3, [pc, #360]	; (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x224>)
 8003696:	e000      	b.n	800369a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8003698:	4b5a      	ldr	r3, [pc, #360]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x228>)
 800369a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d04f      	beq.n	8003746 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036ba:	035b      	lsls	r3, r3, #13
 80036bc:	430b      	orrs	r3, r1
 80036be:	431a      	orrs	r2, r3
 80036c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036c4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ce:	d004      	beq.n	80036da <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a47      	ldr	r2, [pc, #284]	; (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10f      	bne.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 80036da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036de:	f7ff ff25 	bl	800352c <LL_ADC_IsEnabled>
 80036e2:	4604      	mov	r4, r0
 80036e4:	4843      	ldr	r0, [pc, #268]	; (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80036e6:	f7ff ff21 	bl	800352c <LL_ADC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4323      	orrs	r3, r4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e012      	b.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x144>
 80036fa:	483f      	ldr	r0, [pc, #252]	; (80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 80036fc:	f7ff ff16 	bl	800352c <LL_ADC_IsEnabled>
 8003700:	4604      	mov	r4, r0
 8003702:	483e      	ldr	r0, [pc, #248]	; (80037fc <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8003704:	f7ff ff12 	bl	800352c <LL_ADC_IsEnabled>
 8003708:	4603      	mov	r3, r0
 800370a:	431c      	orrs	r4, r3
 800370c:	483e      	ldr	r0, [pc, #248]	; (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 800370e:	f7ff ff0d 	bl	800352c <LL_ADC_IsEnabled>
 8003712:	4603      	mov	r3, r0
 8003714:	4323      	orrs	r3, r4
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d05c      	beq.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003724:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800372e:	f023 030f 	bic.w	r3, r3, #15
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	6811      	ldr	r1, [r2, #0]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	6892      	ldr	r2, [r2, #8]
 800373a:	430a      	orrs	r2, r1
 800373c:	431a      	orrs	r2, r3
 800373e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003742:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003744:	e04b      	b.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x202>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003746:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003750:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003754:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800375e:	d004      	beq.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10f      	bne.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800376a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800376e:	f7ff fedd 	bl	800352c <LL_ADC_IsEnabled>
 8003772:	4604      	mov	r4, r0
 8003774:	481f      	ldr	r0, [pc, #124]	; (80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003776:	f7ff fed9 	bl	800352c <LL_ADC_IsEnabled>
 800377a:	4603      	mov	r3, r0
 800377c:	4323      	orrs	r3, r4
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	e012      	b.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>
 800378a:	481b      	ldr	r0, [pc, #108]	; (80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 800378c:	f7ff fece 	bl	800352c <LL_ADC_IsEnabled>
 8003790:	4604      	mov	r4, r0
 8003792:	481a      	ldr	r0, [pc, #104]	; (80037fc <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8003794:	f7ff feca 	bl	800352c <LL_ADC_IsEnabled>
 8003798:	4603      	mov	r3, r0
 800379a:	431c      	orrs	r4, r3
 800379c:	481a      	ldr	r0, [pc, #104]	; (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 800379e:	f7ff fec5 	bl	800352c <LL_ADC_IsEnabled>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4323      	orrs	r3, r4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d014      	beq.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037be:	f023 030f 	bic.w	r3, r3, #15
 80037c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80037c6:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037c8:	e009      	b.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x202>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80037dc:	e000      	b.n	80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x204>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037de:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037e8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	37b4      	adds	r7, #180	; 0xb4
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd90      	pop	{r4, r7, pc}
 80037f4:	50000100 	.word	0x50000100
 80037f8:	50000400 	.word	0x50000400
 80037fc:	50000500 	.word	0x50000500
 8003800:	50000300 	.word	0x50000300
 8003804:	50000700 	.word	0x50000700
 8003808:	50000600 	.word	0x50000600

0800380c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <__NVIC_SetPriorityGrouping+0x44>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003828:	4013      	ands	r3, r2
 800382a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800383e:	4a04      	ldr	r2, [pc, #16]	; (8003850 <__NVIC_SetPriorityGrouping+0x44>)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	60d3      	str	r3, [r2, #12]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <__NVIC_GetPriorityGrouping+0x18>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	f003 0307 	and.w	r3, r3, #7
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	2b00      	cmp	r3, #0
 8003880:	db0b      	blt.n	800389a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	f003 021f 	and.w	r2, r3, #31
 8003888:	4907      	ldr	r1, [pc, #28]	; (80038a8 <__NVIC_EnableIRQ+0x38>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2001      	movs	r0, #1
 8003892:	fa00 f202 	lsl.w	r2, r0, r2
 8003896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000e100 	.word	0xe000e100

080038ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	6039      	str	r1, [r7, #0]
 80038b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	db0a      	blt.n	80038d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	490c      	ldr	r1, [pc, #48]	; (80038f8 <__NVIC_SetPriority+0x4c>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	0112      	lsls	r2, r2, #4
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	440b      	add	r3, r1
 80038d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d4:	e00a      	b.n	80038ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4908      	ldr	r1, [pc, #32]	; (80038fc <__NVIC_SetPriority+0x50>)
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	3b04      	subs	r3, #4
 80038e4:	0112      	lsls	r2, r2, #4
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	440b      	add	r3, r1
 80038ea:	761a      	strb	r2, [r3, #24]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000e100 	.word	0xe000e100
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f1c3 0307 	rsb	r3, r3, #7
 800391a:	2b04      	cmp	r3, #4
 800391c:	bf28      	it	cs
 800391e:	2304      	movcs	r3, #4
 8003920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3304      	adds	r3, #4
 8003926:	2b06      	cmp	r3, #6
 8003928:	d902      	bls.n	8003930 <NVIC_EncodePriority+0x30>
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3b03      	subs	r3, #3
 800392e:	e000      	b.n	8003932 <NVIC_EncodePriority+0x32>
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43da      	mvns	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	401a      	ands	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	43d9      	mvns	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	4313      	orrs	r3, r2
         );
}
 800395a:	4618      	mov	r0, r3
 800395c:	3724      	adds	r7, #36	; 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ff4c 	bl	800380c <__NVIC_SetPriorityGrouping>
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800398a:	f7ff ff63 	bl	8003854 <__NVIC_GetPriorityGrouping>
 800398e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	6978      	ldr	r0, [r7, #20]
 8003996:	f7ff ffb3 	bl	8003900 <NVIC_EncodePriority>
 800399a:	4602      	mov	r2, r0
 800399c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff82 	bl	80038ac <__NVIC_SetPriority>
}
 80039a8:	bf00      	nop
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff56 	bl	8003870 <__NVIC_EnableIRQ>
}
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e034      	b.n	8003a48 <HAL_DAC_Init+0x7c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	791b      	ldrb	r3, [r3, #4]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d125      	bne.n	8003a34 <HAL_DAC_Init+0x68>
  {
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the DAC Callback settings */
    hdac->ConvCpltCallbackCh1           = HAL_DAC_ConvCpltCallbackCh1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <HAL_DAC_Init+0x84>)
 80039ec:	615a      	str	r2, [r3, #20]
    hdac->ConvHalfCpltCallbackCh1       = HAL_DAC_ConvHalfCpltCallbackCh1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <HAL_DAC_Init+0x88>)
 80039f2:	619a      	str	r2, [r3, #24]
    hdac->ErrorCallbackCh1              = HAL_DAC_ErrorCallbackCh1;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_DAC_Init+0x8c>)
 80039f8:	61da      	str	r2, [r3, #28]
    hdac->DMAUnderrunCallbackCh1        = HAL_DAC_DMAUnderrunCallbackCh1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <HAL_DAC_Init+0x90>)
 80039fe:	621a      	str	r2, [r3, #32]

    hdac->ConvCpltCallbackCh2           = HAL_DACEx_ConvCpltCallbackCh2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a17      	ldr	r2, [pc, #92]	; (8003a60 <HAL_DAC_Init+0x94>)
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
    hdac->ConvHalfCpltCallbackCh2       = HAL_DACEx_ConvHalfCpltCallbackCh2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_DAC_Init+0x98>)
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
    hdac->ErrorCallbackCh2              = HAL_DACEx_ErrorCallbackCh2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_DAC_Init+0x9c>)
 8003a10:	62da      	str	r2, [r3, #44]	; 0x2c
    hdac->DMAUnderrunCallbackCh2        = HAL_DACEx_DMAUnderrunCallbackCh2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <HAL_DAC_Init+0xa0>)
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30

    if (hdac->MspInitCallback == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <HAL_DAC_Init+0x5a>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a13      	ldr	r2, [pc, #76]	; (8003a70 <HAL_DAC_Init+0xa4>)
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	08003ccd 	.word	0x08003ccd
 8003a54:	08003ce1 	.word	0x08003ce1
 8003a58:	08003cf5 	.word	0x08003cf5
 8003a5c:	08003d09 	.word	0x08003d09
 8003a60:	080040ff 	.word	0x080040ff
 8003a64:	08004113 	.word	0x08004113
 8003a68:	08004127 	.word	0x08004127
 8003a6c:	0800413b 	.word	0x0800413b
 8003a70:	08001a11 	.word	0x08001a11

08003a74 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0b2      	b.n	8003bf2 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	795b      	ldrb	r3, [r3, #5]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_DAC_Start_DMA+0x24>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e0ac      	b.n	8003bf2 <HAL_DAC_Start_DMA+0x17e>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d129      	bne.n	8003afe <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	4a53      	ldr	r2, [pc, #332]	; (8003bfc <HAL_DAC_Start_DMA+0x188>)
 8003ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_DAC_Start_DMA+0x18c>)
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <HAL_DAC_Start_DMA+0x190>)
 8003ac0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ad0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_DAC_Start_DMA+0x6c>
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d005      	beq.n	8003aea <HAL_DAC_Start_DMA+0x76>
 8003ade:	e009      	b.n	8003af4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	61bb      	str	r3, [r7, #24]
        break;
 8003ae8:	e033      	b.n	8003b52 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	61bb      	str	r3, [r7, #24]
        break;
 8003af2:	e02e      	b.n	8003b52 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3310      	adds	r3, #16
 8003afa:	61bb      	str	r3, [r7, #24]
        break;
 8003afc:	e029      	b.n	8003b52 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	4a41      	ldr	r2, [pc, #260]	; (8003c08 <HAL_DAC_Start_DMA+0x194>)
 8003b04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	4a40      	ldr	r2, [pc, #256]	; (8003c0c <HAL_DAC_Start_DMA+0x198>)
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	4a3f      	ldr	r2, [pc, #252]	; (8003c10 <HAL_DAC_Start_DMA+0x19c>)
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b24:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_DAC_Start_DMA+0xc0>
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d005      	beq.n	8003b3e <HAL_DAC_Start_DMA+0xca>
 8003b32:	e009      	b.n	8003b48 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	61bb      	str	r3, [r7, #24]
        break;
 8003b3c:	e009      	b.n	8003b52 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3318      	adds	r3, #24
 8003b44:	61bb      	str	r3, [r7, #24]
        break;
 8003b46:	e004      	b.n	8003b52 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	331c      	adds	r3, #28
 8003b4e:	61bb      	str	r3, [r7, #24]
        break;
 8003b50:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d111      	bne.n	8003b7c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6898      	ldr	r0, [r3, #8]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	f000 fbcd 	bl	8004310 <HAL_DMA_Start_IT>
 8003b76:	4603      	mov	r3, r0
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e010      	b.n	8003b9e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	68d8      	ldr	r0, [r3, #12]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	f000 fbbb 	bl	8004310 <HAL_DMA_Start_IT>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003ba4:	7ffb      	ldrb	r3, [r7, #31]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d11c      	bne.n	8003be4 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <HAL_DAC_Start_DMA+0x1a0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <HAL_DAC_Start_DMA+0x1a4>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003bd4:	e002      	b.n	8003bdc <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f9      	bne.n	8003bd6 <HAL_DAC_Start_DMA+0x162>
 8003be2:	e005      	b.n	8003bf0 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f043 0204 	orr.w	r2, r3, #4
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	0800408d 	.word	0x0800408d
 8003c00:	080040b1 	.word	0x080040b1
 8003c04:	080040cf 	.word	0x080040cf
 8003c08:	0800414f 	.word	0x0800414f
 8003c0c:	08004173 	.word	0x08004173
 8003c10:	08004191 	.word	0x08004191
 8003c14:	20000000 	.word	0x20000000
 8003c18:	053e2d63 	.word	0x053e2d63

08003c1c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01e      	beq.n	8003c7c <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d019      	beq.n	8003c7c <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c72:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01e      	beq.n	8003cc4 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d019      	beq.n	8003cc4 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2204      	movs	r2, #4
 8003c94:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f043 0202 	orr.w	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003caa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003cba:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08a      	sub	sp, #40	; 0x28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_DAC_ConfigChannel+0x1c>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e19e      	b.n	800407a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	795b      	ldrb	r3, [r3, #5]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_DAC_ConfigChannel+0x2c>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e198      	b.n	800407a <HAL_DAC_ConfigChannel+0x35e>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2202      	movs	r2, #2
 8003d52:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d17a      	bne.n	8003e52 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d5c:	f7fe fba2 	bl	80024a4 <HAL_GetTick>
 8003d60:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d13d      	bne.n	8003de4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d68:	e018      	b.n	8003d9c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d6a:	f7fe fb9b 	bl	80024a4 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d911      	bls.n	8003d9c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f043 0208 	orr.w	r2, r3, #8
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2203      	movs	r2, #3
 8003d96:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e16e      	b.n	800407a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1df      	bne.n	8003d6a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
 8003db4:	e020      	b.n	8003df8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003db6:	f7fe fb75 	bl	80024a4 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d90f      	bls.n	8003de4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da0a      	bge.n	8003de4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f043 0208 	orr.w	r2, r3, #8
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2203      	movs	r2, #3
 8003dde:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e14a      	b.n	800407a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	dbe3      	blt.n	8003db6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	ea02 0103 	and.w	r1, r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	21ff      	movs	r1, #255	; 0xff
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	ea02 0103 	and.w	r1, r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d11d      	bne.n	8003e96 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	221f      	movs	r2, #31
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e72:	4013      	ands	r3, r2
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eae:	4013      	ands	r3, r2
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d102      	bne.n	8003ec0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	623b      	str	r3, [r7, #32]
 8003ebe:	e00f      	b.n	8003ee0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d102      	bne.n	8003ece <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	e008      	b.n	8003ee0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d102      	bne.n	8003edc <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	e001      	b.n	8003ee0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	6a3a      	ldr	r2, [r7, #32]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	4013      	ands	r3, r2
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	791b      	ldrb	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d102      	bne.n	8003f14 <HAL_DAC_ConfigChannel+0x1f8>
 8003f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f12:	e000      	b.n	8003f16 <HAL_DAC_ConfigChannel+0x1fa>
 8003f14:	2300      	movs	r3, #0
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	4013      	ands	r3, r2
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	795b      	ldrb	r3, [r3, #5]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_DAC_ConfigChannel+0x224>
 8003f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f3e:	e000      	b.n	8003f42 <HAL_DAC_ConfigChannel+0x226>
 8003f40:	2300      	movs	r3, #0
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d114      	bne.n	8003f82 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003f58:	f001 fcd2 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8003f5c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4a48      	ldr	r2, [pc, #288]	; (8004084 <HAL_DAC_ConfigChannel+0x368>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d904      	bls.n	8003f70 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6e:	e00f      	b.n	8003f90 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4a45      	ldr	r2, [pc, #276]	; (8004088 <HAL_DAC_ConfigChannel+0x36c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d90a      	bls.n	8003f8e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	e006      	b.n	8003f90 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8c:	e000      	b.n	8003f90 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003f8e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004004:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6819      	ldr	r1, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	22c0      	movs	r2, #192	; 0xc0
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43da      	mvns	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	400a      	ands	r2, r1
 8004020:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	089b      	lsrs	r3, r3, #2
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004050:	fa01 f303 	lsl.w	r3, r1, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	ea02 0103 	and.w	r1, r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	409a      	lsls	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004078:	7ffb      	ldrb	r3, [r7, #31]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3728      	adds	r7, #40	; 0x28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	09896800 	.word	0x09896800
 8004088:	04c4b400 	.word	0x04c4b400

0800408c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	4798      	blx	r3
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	711a      	strb	r2, [r3, #4]
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	4798      	blx	r3
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f043 0204 	orr.w	r2, r3, #4
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	4798      	blx	r3
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	711a      	strb	r2, [r3, #4]
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	4798      	blx	r3
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	711a      	strb	r2, [r3, #4]
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	4798      	blx	r3
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f043 0204 	orr.w	r2, r3, #4
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	4798      	blx	r3
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	711a      	strb	r2, [r3, #4]
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e08d      	b.n	80042ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <HAL_DMA_Init+0x138>)
 80041da:	429a      	cmp	r2, r3
 80041dc:	d80f      	bhi.n	80041fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b45      	ldr	r3, [pc, #276]	; (80042fc <HAL_DMA_Init+0x13c>)
 80041e6:	4413      	add	r3, r2
 80041e8:	4a45      	ldr	r2, [pc, #276]	; (8004300 <HAL_DMA_Init+0x140>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	009a      	lsls	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a42      	ldr	r2, [pc, #264]	; (8004304 <HAL_DMA_Init+0x144>)
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40
 80041fc:	e00e      	b.n	800421c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	4b40      	ldr	r3, [pc, #256]	; (8004308 <HAL_DMA_Init+0x148>)
 8004206:	4413      	add	r3, r2
 8004208:	4a3d      	ldr	r2, [pc, #244]	; (8004300 <HAL_DMA_Init+0x140>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	009a      	lsls	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a3c      	ldr	r2, [pc, #240]	; (800430c <HAL_DMA_Init+0x14c>)
 800421a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f9b6 	bl	80045e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800427c:	d102      	bne.n	8004284 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004298:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d010      	beq.n	80042c4 <HAL_DMA_Init+0x104>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d80c      	bhi.n	80042c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f9d6 	bl	800465c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	e008      	b.n	80042d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40020407 	.word	0x40020407
 80042fc:	bffdfff8 	.word	0xbffdfff8
 8004300:	cccccccd 	.word	0xcccccccd
 8004304:	40020000 	.word	0x40020000
 8004308:	bffdfbf8 	.word	0xbffdfbf8
 800430c:	40020400 	.word	0x40020400

08004310 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_DMA_Start_IT+0x20>
 800432c:	2302      	movs	r3, #2
 800432e:	e066      	b.n	80043fe <HAL_DMA_Start_IT+0xee>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	d155      	bne.n	80043f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f8fb 	bl	8004564 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 020e 	orr.w	r2, r2, #14
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e00f      	b.n	80043a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0204 	bic.w	r2, r2, #4
 8004396:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 020a 	orr.w	r2, r2, #10
 80043a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	e005      	b.n	80043fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
 80043fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	2204      	movs	r2, #4
 8004428:	409a      	lsls	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d026      	beq.n	8004480 <HAL_DMA_IRQHandler+0x7a>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d021      	beq.n	8004480 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0204 	bic.w	r2, r2, #4
 8004458:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f003 021f 	and.w	r2, r3, #31
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2104      	movs	r1, #4
 8004468:	fa01 f202 	lsl.w	r2, r1, r2
 800446c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	2b00      	cmp	r3, #0
 8004474:	d071      	beq.n	800455a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800447e:	e06c      	b.n	800455a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	2202      	movs	r2, #2
 800448a:	409a      	lsls	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d02e      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d029      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 020a 	bic.w	r2, r2, #10
 80044ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	2102      	movs	r1, #2
 80044d2:	fa01 f202 	lsl.w	r2, r1, r2
 80044d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d038      	beq.n	800455a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044f0:	e033      	b.n	800455a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	2208      	movs	r2, #8
 80044fc:	409a      	lsls	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d02a      	beq.n	800455c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d025      	beq.n	800455c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 020e 	bic.w	r2, r2, #14
 800451e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	2101      	movs	r1, #1
 800452e:	fa01 f202 	lsl.w	r2, r1, r2
 8004532:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800455a:	bf00      	nop
 800455c:	bf00      	nop
}
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800457a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800458c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	f003 021f 	and.w	r2, r3, #31
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	2101      	movs	r1, #1
 800459c:	fa01 f202 	lsl.w	r2, r1, r2
 80045a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d108      	bne.n	80045c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045c2:	e007      	b.n	80045d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d802      	bhi.n	80045fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80045f4:	4b15      	ldr	r3, [pc, #84]	; (800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e001      	b.n	80045fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80045fa:	4b15      	ldr	r3, [pc, #84]	; (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80045fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	3b08      	subs	r3, #8
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	091b      	lsrs	r3, r3, #4
 8004612:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	009a      	lsls	r2, r3, #2
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	461a      	mov	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800462a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	2201      	movs	r2, #1
 8004634:	409a      	lsls	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	651a      	str	r2, [r3, #80]	; 0x50
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40020407 	.word	0x40020407
 800464c:	40020800 	.word	0x40020800
 8004650:	40020820 	.word	0x40020820
 8004654:	cccccccd 	.word	0xcccccccd
 8004658:	40020880 	.word	0x40020880

0800465c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	461a      	mov	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800467e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3b01      	subs	r3, #1
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	2201      	movs	r2, #1
 800468a:	409a      	lsls	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	1000823f 	.word	0x1000823f
 80046a0:	40020940 	.word	0x40020940

080046a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046b2:	e15a      	b.n	800496a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	2101      	movs	r1, #1
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	fa01 f303 	lsl.w	r3, r1, r3
 80046c0:	4013      	ands	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 814c 	beq.w	8004964 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d005      	beq.n	80046e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d130      	bne.n	8004746 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	2203      	movs	r2, #3
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4013      	ands	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800471a:	2201      	movs	r2, #1
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4013      	ands	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	091b      	lsrs	r3, r3, #4
 8004730:	f003 0201 	and.w	r2, r3, #1
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	2b03      	cmp	r3, #3
 8004750:	d017      	beq.n	8004782 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	2203      	movs	r2, #3
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d123      	bne.n	80047d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	08da      	lsrs	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3208      	adds	r2, #8
 8004796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	220f      	movs	r2, #15
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4013      	ands	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	08da      	lsrs	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3208      	adds	r2, #8
 80047d0:	6939      	ldr	r1, [r7, #16]
 80047d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	2203      	movs	r2, #3
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4013      	ands	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0203 	and.w	r2, r3, #3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 80a6 	beq.w	8004964 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004818:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <HAL_GPIO_Init+0x2e4>)
 800481a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481c:	4a5a      	ldr	r2, [pc, #360]	; (8004988 <HAL_GPIO_Init+0x2e4>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6613      	str	r3, [r2, #96]	; 0x60
 8004824:	4b58      	ldr	r3, [pc, #352]	; (8004988 <HAL_GPIO_Init+0x2e4>)
 8004826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004830:	4a56      	ldr	r2, [pc, #344]	; (800498c <HAL_GPIO_Init+0x2e8>)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	089b      	lsrs	r3, r3, #2
 8004836:	3302      	adds	r3, #2
 8004838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	220f      	movs	r2, #15
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4013      	ands	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800485a:	d01f      	beq.n	800489c <HAL_GPIO_Init+0x1f8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a4c      	ldr	r2, [pc, #304]	; (8004990 <HAL_GPIO_Init+0x2ec>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d019      	beq.n	8004898 <HAL_GPIO_Init+0x1f4>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a4b      	ldr	r2, [pc, #300]	; (8004994 <HAL_GPIO_Init+0x2f0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <HAL_GPIO_Init+0x1f0>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a4a      	ldr	r2, [pc, #296]	; (8004998 <HAL_GPIO_Init+0x2f4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00d      	beq.n	8004890 <HAL_GPIO_Init+0x1ec>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a49      	ldr	r2, [pc, #292]	; (800499c <HAL_GPIO_Init+0x2f8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <HAL_GPIO_Init+0x1e8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a48      	ldr	r2, [pc, #288]	; (80049a0 <HAL_GPIO_Init+0x2fc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_GPIO_Init+0x1e4>
 8004884:	2305      	movs	r3, #5
 8004886:	e00a      	b.n	800489e <HAL_GPIO_Init+0x1fa>
 8004888:	2306      	movs	r3, #6
 800488a:	e008      	b.n	800489e <HAL_GPIO_Init+0x1fa>
 800488c:	2304      	movs	r3, #4
 800488e:	e006      	b.n	800489e <HAL_GPIO_Init+0x1fa>
 8004890:	2303      	movs	r3, #3
 8004892:	e004      	b.n	800489e <HAL_GPIO_Init+0x1fa>
 8004894:	2302      	movs	r3, #2
 8004896:	e002      	b.n	800489e <HAL_GPIO_Init+0x1fa>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <HAL_GPIO_Init+0x1fa>
 800489c:	2300      	movs	r3, #0
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	f002 0203 	and.w	r2, r2, #3
 80048a4:	0092      	lsls	r2, r2, #2
 80048a6:	4093      	lsls	r3, r2
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048ae:	4937      	ldr	r1, [pc, #220]	; (800498c <HAL_GPIO_Init+0x2e8>)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	089b      	lsrs	r3, r3, #2
 80048b4:	3302      	adds	r3, #2
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048bc:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <HAL_GPIO_Init+0x300>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048e0:	4a30      	ldr	r2, [pc, #192]	; (80049a4 <HAL_GPIO_Init+0x300>)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048e6:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <HAL_GPIO_Init+0x300>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	43db      	mvns	r3, r3
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4013      	ands	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800490a:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <HAL_GPIO_Init+0x300>)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_GPIO_Init+0x300>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	43db      	mvns	r3, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4013      	ands	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004934:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <HAL_GPIO_Init+0x300>)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800493a:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <HAL_GPIO_Init+0x300>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	43db      	mvns	r3, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4013      	ands	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800495e:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <HAL_GPIO_Init+0x300>)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3301      	adds	r3, #1
 8004968:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	f47f ae9d 	bne.w	80046b4 <HAL_GPIO_Init+0x10>
  }
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40021000 	.word	0x40021000
 800498c:	40010000 	.word	0x40010000
 8004990:	48000400 	.word	0x48000400
 8004994:	48000800 	.word	0x48000800
 8004998:	48000c00 	.word	0x48000c00
 800499c:	48001000 	.word	0x48001000
 80049a0:	48001400 	.word	0x48001400
 80049a4:	40010400 	.word	0x40010400

080049a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	807b      	strh	r3, [r7, #2]
 80049b4:	4613      	mov	r3, r2
 80049b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049b8:	787b      	ldrb	r3, [r7, #1]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049c4:	e002      	b.n	80049cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0c9      	b.n	8004b82 <HAL_OPAMP_Init+0x1aa>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d101      	bne.n	80049fe <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0c1      	b.n	8004b82 <HAL_OPAMP_Init+0x1aa>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d101      	bne.n	8004a0e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e0b9      	b.n	8004b82 <HAL_OPAMP_Init+0x1aa>
    assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_OPAMP_Init+0x50>
    {
      if (hopamp->MspInitCallback == NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <HAL_OPAMP_Init+0x50>
      {
        hopamp->MspInitCallback               = HAL_OPAMP_MspInit;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a59      	ldr	r2, [pc, #356]	; (8004b8c <HAL_OPAMP_Init+0x1b4>)
 8004a26:	63da      	str	r2, [r3, #60]	; 0x3c
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a28:	4b59      	ldr	r3, [pc, #356]	; (8004b90 <HAL_OPAMP_Init+0x1b8>)
 8004a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2c:	4a58      	ldr	r2, [pc, #352]	; (8004b90 <HAL_OPAMP_Init+0x1b8>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	6613      	str	r3, [r2, #96]	; 0x60
 8004a34:	4b56      	ldr	r3, [pc, #344]	; (8004b90 <HAL_OPAMP_Init+0x1b8>)
 8004a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d103      	bne.n	8004a54 <HAL_OPAMP_Init+0x7c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	4798      	blx	r3

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d003      	beq.n	8004a6c <HAL_OPAMP_Init+0x94>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b60      	cmp	r3, #96	; 0x60
 8004a6a:	d133      	bne.n	8004ad4 <HAL_OPAMP_Init+0xfc>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f023 0110 	bic.w	r1, r3, #16
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <HAL_OPAMP_Init+0x1bc>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6851      	ldr	r1, [r2, #4]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6892      	ldr	r2, [r2, #8]
 8004a94:	4311      	orrs	r1, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6912      	ldr	r2, [r2, #16]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	7d09      	ldrb	r1, [r1, #20]
 8004aa0:	2901      	cmp	r1, #1
 8004aa2:	d102      	bne.n	8004aaa <HAL_OPAMP_Init+0xd2>
 8004aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aa8:	e000      	b.n	8004aac <HAL_OPAMP_Init+0xd4>
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4311      	orrs	r1, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ab2:	4311      	orrs	r1, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ab8:	4311      	orrs	r1, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004abe:	04d2      	lsls	r2, r2, #19
 8004ac0:	4311      	orrs	r1, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ac6:	0612      	lsls	r2, r2, #24
 8004ac8:	4311      	orrs	r1, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e035      	b.n	8004b40 <HAL_OPAMP_Init+0x168>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 0110 	bic.w	r1, r3, #16
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <HAL_OPAMP_Init+0x1bc>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6851      	ldr	r1, [r2, #4]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6892      	ldr	r2, [r2, #8]
 8004afc:	4311      	orrs	r1, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68d2      	ldr	r2, [r2, #12]
 8004b02:	4311      	orrs	r1, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6912      	ldr	r2, [r2, #16]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	7d09      	ldrb	r1, [r1, #20]
 8004b0e:	2901      	cmp	r1, #1
 8004b10:	d102      	bne.n	8004b18 <HAL_OPAMP_Init+0x140>
 8004b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b16:	e000      	b.n	8004b1a <HAL_OPAMP_Init+0x142>
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4311      	orrs	r1, r2
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b20:	4311      	orrs	r1, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b26:	4311      	orrs	r1, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b2c:	04d2      	lsls	r2, r2, #19
 8004b2e:	4311      	orrs	r1, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b34:	0612      	lsls	r2, r2, #24
 8004b36:	4311      	orrs	r1, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	db10      	blt.n	8004b6c <HAL_OPAMP_Init+0x194>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <HAL_OPAMP_Init+0x1a8>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	08001bd9 	.word	0x08001bd9
 8004b90:	40021000 	.word	0x40021000
 8004b94:	e0003e11 	.word	0xe0003e11

08004b98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d141      	bne.n	8004c2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ba6:	4b4b      	ldr	r3, [pc, #300]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb2:	d131      	bne.n	8004c18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bb4:	4b47      	ldr	r3, [pc, #284]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bba:	4a46      	ldr	r2, [pc, #280]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bc4:	4b43      	ldr	r3, [pc, #268]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bcc:	4a41      	ldr	r2, [pc, #260]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bd4:	4b40      	ldr	r3, [pc, #256]	; (8004cd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2232      	movs	r2, #50	; 0x32
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	4a3f      	ldr	r2, [pc, #252]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	0c9b      	lsrs	r3, r3, #18
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bea:	e002      	b.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf2:	4b38      	ldr	r3, [pc, #224]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfe:	d102      	bne.n	8004c06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f2      	bne.n	8004bec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c06:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d158      	bne.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e057      	b.n	8004cc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c18:	4b2e      	ldr	r3, [pc, #184]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1e:	4a2d      	ldr	r2, [pc, #180]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c28:	e04d      	b.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c30:	d141      	bne.n	8004cb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c32:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3e:	d131      	bne.n	8004ca4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c40:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c46:	4a23      	ldr	r2, [pc, #140]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c50:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c58:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c60:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2232      	movs	r2, #50	; 0x32
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	0c9b      	lsrs	r3, r3, #18
 8004c72:	3301      	adds	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c76:	e002      	b.n	8004c7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c7e:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8a:	d102      	bne.n	8004c92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f2      	bne.n	8004c78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9e:	d112      	bne.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e011      	b.n	8004cc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004caa:	4a0a      	ldr	r2, [pc, #40]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cb4:	e007      	b.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cbe:	4a05      	ldr	r2, [pc, #20]	; (8004cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40007000 	.word	0x40007000
 8004cd8:	20000000 	.word	0x20000000
 8004cdc:	431bde83 	.word	0x431bde83

08004ce0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004ce8:	f7fd fbdc 	bl	80024a4 <HAL_GetTick>
 8004cec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e08f      	b.n	8004e18 <HAL_QSPI_Init+0x138>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d131      	bne.n	8004d68 <HAL_QSPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    /* Reset Callback pointers in HAL_QSPI_STATE_RESET only */
    hqspi->ErrorCallback         = HAL_QSPI_ErrorCallback;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a44      	ldr	r2, [pc, #272]	; (8004e20 <HAL_QSPI_Init+0x140>)
 8004d10:	64da      	str	r2, [r3, #76]	; 0x4c
    hqspi->AbortCpltCallback     = HAL_QSPI_AbortCpltCallback;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a43      	ldr	r2, [pc, #268]	; (8004e24 <HAL_QSPI_Init+0x144>)
 8004d16:	651a      	str	r2, [r3, #80]	; 0x50
    hqspi->FifoThresholdCallback = HAL_QSPI_FifoThresholdCallback;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a43      	ldr	r2, [pc, #268]	; (8004e28 <HAL_QSPI_Init+0x148>)
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
    hqspi->CmdCpltCallback       = HAL_QSPI_CmdCpltCallback;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a42      	ldr	r2, [pc, #264]	; (8004e2c <HAL_QSPI_Init+0x14c>)
 8004d22:	659a      	str	r2, [r3, #88]	; 0x58
    hqspi->RxCpltCallback        = HAL_QSPI_RxCpltCallback;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a42      	ldr	r2, [pc, #264]	; (8004e30 <HAL_QSPI_Init+0x150>)
 8004d28:	65da      	str	r2, [r3, #92]	; 0x5c
    hqspi->TxCpltCallback        = HAL_QSPI_TxCpltCallback;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a41      	ldr	r2, [pc, #260]	; (8004e34 <HAL_QSPI_Init+0x154>)
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60
    hqspi->RxHalfCpltCallback    = HAL_QSPI_RxHalfCpltCallback;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a41      	ldr	r2, [pc, #260]	; (8004e38 <HAL_QSPI_Init+0x158>)
 8004d34:	665a      	str	r2, [r3, #100]	; 0x64
    hqspi->TxHalfCpltCallback    = HAL_QSPI_TxHalfCpltCallback;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a40      	ldr	r2, [pc, #256]	; (8004e3c <HAL_QSPI_Init+0x15c>)
 8004d3a:	669a      	str	r2, [r3, #104]	; 0x68
    hqspi->StatusMatchCallback   = HAL_QSPI_StatusMatchCallback;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a40      	ldr	r2, [pc, #256]	; (8004e40 <HAL_QSPI_Init+0x160>)
 8004d40:	66da      	str	r2, [r3, #108]	; 0x6c
    hqspi->TimeOutCallback       = HAL_QSPI_TimeOutCallback;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a3f      	ldr	r2, [pc, #252]	; (8004e44 <HAL_QSPI_Init+0x164>)
 8004d46:	671a      	str	r2, [r3, #112]	; 0x70

    if(hqspi->MspInitCallback == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <HAL_QSPI_Init+0x76>
    {
      hqspi->MspInitCallback = HAL_QSPI_MspInit;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a3d      	ldr	r2, [pc, #244]	; (8004e48 <HAL_QSPI_Init+0x168>)
 8004d54:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004d5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8d8 	bl	8004f18 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	021a      	lsls	r2, r3, #8
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2120      	movs	r1, #32
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f8d0 	bl	8004f34 <QSPI_WaitFlagStateUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004d98:	7afb      	ldrb	r3, [r7, #11]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d137      	bne.n	8004e0e <HAL_QSPI_Init+0x12e>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004da8:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6852      	ldr	r2, [r2, #4]
 8004db0:	0611      	lsls	r1, r2, #24
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68d2      	ldr	r2, [r2, #12]
 8004db6:	4311      	orrs	r1, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	69d2      	ldr	r2, [r2, #28]
 8004dbc:	4311      	orrs	r1, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6a12      	ldr	r2, [r2, #32]
 8004dc2:	4311      	orrs	r1, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <HAL_QSPI_Init+0x16c>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6912      	ldr	r2, [r2, #16]
 8004dda:	0411      	lsls	r1, r2, #16
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6952      	ldr	r2, [r2, #20]
 8004de0:	4311      	orrs	r1, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6992      	ldr	r2, [r2, #24]
 8004de6:	4311      	orrs	r1, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004e16:	7afb      	ldrb	r3, [r7, #11]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	08004e51 	.word	0x08004e51
 8004e24:	08004e65 	.word	0x08004e65
 8004e28:	08004edd 	.word	0x08004edd
 8004e2c:	08004e79 	.word	0x08004e79
 8004e30:	08004e8d 	.word	0x08004e8d
 8004e34:	08004ea1 	.word	0x08004ea1
 8004e38:	08004eb5 	.word	0x08004eb5
 8004e3c:	08004ec9 	.word	0x08004ec9
 8004e40:	08004ef1 	.word	0x08004ef1
 8004e44:	08004f05 	.word	0x08004f05
 8004e48:	08001d49 	.word	0x08001d49
 8004e4c:	ffe0f8fe 	.word	0xffe0f8fe

08004e50 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_QSPI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_QSPI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004f44:	e01a      	b.n	8004f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f4c:	d016      	beq.n	8004f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fd faa9 	bl	80024a4 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2204      	movs	r2, #4
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e00e      	b.n	8004f9a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d1d6      	bne.n	8004f46 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e2fe      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d075      	beq.n	80050ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fc2:	4b97      	ldr	r3, [pc, #604]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
 8004fca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fcc:	4b94      	ldr	r3, [pc, #592]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	d102      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x3e>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d002      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x44>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d10b      	bne.n	8005000 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	4b8d      	ldr	r3, [pc, #564]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d05b      	beq.n	80050ac <HAL_RCC_OscConfig+0x108>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d157      	bne.n	80050ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e2d9      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d106      	bne.n	8005018 <HAL_RCC_OscConfig+0x74>
 800500a:	4b85      	ldr	r3, [pc, #532]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a84      	ldr	r2, [pc, #528]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e01d      	b.n	8005054 <HAL_RCC_OscConfig+0xb0>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x98>
 8005022:	4b7f      	ldr	r3, [pc, #508]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a7e      	ldr	r2, [pc, #504]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b7c      	ldr	r3, [pc, #496]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a7b      	ldr	r2, [pc, #492]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e00b      	b.n	8005054 <HAL_RCC_OscConfig+0xb0>
 800503c:	4b78      	ldr	r3, [pc, #480]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a77      	ldr	r2, [pc, #476]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4b75      	ldr	r3, [pc, #468]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a74      	ldr	r2, [pc, #464]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 800504e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d013      	beq.n	8005084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fd fa22 	bl	80024a4 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005064:	f7fd fa1e 	bl	80024a4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	; 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e29e      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005076:	4b6a      	ldr	r3, [pc, #424]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0xc0>
 8005082:	e014      	b.n	80050ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fd fa0e 	bl	80024a4 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800508c:	f7fd fa0a 	bl	80024a4 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	; 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e28a      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800509e:	4b60      	ldr	r3, [pc, #384]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0xe8>
 80050aa:	e000      	b.n	80050ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d075      	beq.n	80051a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ba:	4b59      	ldr	r3, [pc, #356]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050c4:	4b56      	ldr	r3, [pc, #344]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	d102      	bne.n	80050da <HAL_RCC_OscConfig+0x136>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d002      	beq.n	80050e0 <HAL_RCC_OscConfig+0x13c>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d11f      	bne.n	8005120 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050e0:	4b4f      	ldr	r3, [pc, #316]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_OscConfig+0x154>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e25d      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f8:	4b49      	ldr	r3, [pc, #292]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	061b      	lsls	r3, r3, #24
 8005106:	4946      	ldr	r1, [pc, #280]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005108:	4313      	orrs	r3, r2
 800510a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800510c:	4b45      	ldr	r3, [pc, #276]	; (8005224 <HAL_RCC_OscConfig+0x280>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f7fd f8ab 	bl	800226c <HAL_InitTick>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d043      	beq.n	80051a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e249      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d023      	beq.n	8005170 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005128:	4b3d      	ldr	r3, [pc, #244]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3c      	ldr	r2, [pc, #240]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 800512e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fd f9b6 	bl	80024a4 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513c:	f7fd f9b2 	bl	80024a4 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e232      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800514e:	4b34      	ldr	r3, [pc, #208]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f0      	beq.n	800513c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515a:	4b31      	ldr	r3, [pc, #196]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	061b      	lsls	r3, r3, #24
 8005168:	492d      	ldr	r1, [pc, #180]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 800516a:	4313      	orrs	r3, r2
 800516c:	604b      	str	r3, [r1, #4]
 800516e:	e01a      	b.n	80051a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005170:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2a      	ldr	r2, [pc, #168]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800517a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fd f992 	bl	80024a4 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005184:	f7fd f98e 	bl	80024a4 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e20e      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005196:	4b22      	ldr	r3, [pc, #136]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x1e0>
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d041      	beq.n	8005236 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01c      	beq.n	80051f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ba:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 80051bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c0:	4a17      	ldr	r2, [pc, #92]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ca:	f7fd f96b 	bl	80024a4 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d2:	f7fd f967 	bl	80024a4 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e1e7      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051e4:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 80051e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0ef      	beq.n	80051d2 <HAL_RCC_OscConfig+0x22e>
 80051f2:	e020      	b.n	8005236 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 80051f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051fa:	4a09      	ldr	r2, [pc, #36]	; (8005220 <HAL_RCC_OscConfig+0x27c>)
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fd f94e 	bl	80024a4 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800520a:	e00d      	b.n	8005228 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520c:	f7fd f94a 	bl	80024a4 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d906      	bls.n	8005228 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e1ca      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000
 8005224:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005228:	4b8c      	ldr	r3, [pc, #560]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 800522a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1ea      	bne.n	800520c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80a6 	beq.w	8005390 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005244:	2300      	movs	r3, #0
 8005246:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005248:	4b84      	ldr	r3, [pc, #528]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_RCC_OscConfig+0x2b4>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_RCC_OscConfig+0x2b6>
 8005258:	2300      	movs	r3, #0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00d      	beq.n	800527a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525e:	4b7f      	ldr	r3, [pc, #508]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 8005260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005262:	4a7e      	ldr	r2, [pc, #504]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 8005264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005268:	6593      	str	r3, [r2, #88]	; 0x58
 800526a:	4b7c      	ldr	r3, [pc, #496]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005276:	2301      	movs	r3, #1
 8005278:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800527a:	4b79      	ldr	r3, [pc, #484]	; (8005460 <HAL_RCC_OscConfig+0x4bc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d118      	bne.n	80052b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005286:	4b76      	ldr	r3, [pc, #472]	; (8005460 <HAL_RCC_OscConfig+0x4bc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a75      	ldr	r2, [pc, #468]	; (8005460 <HAL_RCC_OscConfig+0x4bc>)
 800528c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005292:	f7fd f907 	bl	80024a4 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800529a:	f7fd f903 	bl	80024a4 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e183      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ac:	4b6c      	ldr	r3, [pc, #432]	; (8005460 <HAL_RCC_OscConfig+0x4bc>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d108      	bne.n	80052d2 <HAL_RCC_OscConfig+0x32e>
 80052c0:	4b66      	ldr	r3, [pc, #408]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c6:	4a65      	ldr	r2, [pc, #404]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052d0:	e024      	b.n	800531c <HAL_RCC_OscConfig+0x378>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d110      	bne.n	80052fc <HAL_RCC_OscConfig+0x358>
 80052da:	4b60      	ldr	r3, [pc, #384]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e0:	4a5e      	ldr	r2, [pc, #376]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80052e2:	f043 0304 	orr.w	r3, r3, #4
 80052e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052ea:	4b5c      	ldr	r3, [pc, #368]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	4a5a      	ldr	r2, [pc, #360]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052fa:	e00f      	b.n	800531c <HAL_RCC_OscConfig+0x378>
 80052fc:	4b57      	ldr	r3, [pc, #348]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005302:	4a56      	ldr	r2, [pc, #344]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800530c:	4b53      	ldr	r3, [pc, #332]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005312:	4a52      	ldr	r2, [pc, #328]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 8005314:	f023 0304 	bic.w	r3, r3, #4
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d016      	beq.n	8005352 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fd f8be 	bl	80024a4 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532a:	e00a      	b.n	8005342 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532c:	f7fd f8ba 	bl	80024a4 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e138      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005342:	4b46      	ldr	r3, [pc, #280]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 8005344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0ed      	beq.n	800532c <HAL_RCC_OscConfig+0x388>
 8005350:	e015      	b.n	800537e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005352:	f7fd f8a7 	bl	80024a4 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005358:	e00a      	b.n	8005370 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535a:	f7fd f8a3 	bl	80024a4 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	f241 3288 	movw	r2, #5000	; 0x1388
 8005368:	4293      	cmp	r3, r2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e121      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005370:	4b3a      	ldr	r3, [pc, #232]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1ed      	bne.n	800535a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800537e:	7ffb      	ldrb	r3, [r7, #31]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d105      	bne.n	8005390 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005384:	4b35      	ldr	r3, [pc, #212]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	4a34      	ldr	r2, [pc, #208]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 800538a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d03c      	beq.n	8005416 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01c      	beq.n	80053de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053a4:	4b2d      	ldr	r3, [pc, #180]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80053a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053aa:	4a2c      	ldr	r2, [pc, #176]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fd f876 	bl	80024a4 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053bc:	f7fd f872 	bl	80024a4 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e0f2      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ce:	4b23      	ldr	r3, [pc, #140]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ef      	beq.n	80053bc <HAL_RCC_OscConfig+0x418>
 80053dc:	e01b      	b.n	8005416 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053de:	4b1f      	ldr	r3, [pc, #124]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80053e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053e4:	4a1d      	ldr	r2, [pc, #116]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fd f859 	bl	80024a4 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053f6:	f7fd f855 	bl	80024a4 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e0d5      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005408:	4b14      	ldr	r3, [pc, #80]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 800540a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1ef      	bne.n	80053f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 80c9 	beq.w	80055b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b0c      	cmp	r3, #12
 800542a:	f000 8083 	beq.w	8005534 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d15e      	bne.n	80054f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005436:	4b09      	ldr	r3, [pc, #36]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a08      	ldr	r2, [pc, #32]	; (800545c <HAL_RCC_OscConfig+0x4b8>)
 800543c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7fd f82f 	bl	80024a4 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005448:	e00c      	b.n	8005464 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544a:	f7fd f82b 	bl	80024a4 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d905      	bls.n	8005464 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e0ab      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
 800545c:	40021000 	.word	0x40021000
 8005460:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005464:	4b55      	ldr	r3, [pc, #340]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1ec      	bne.n	800544a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005470:	4b52      	ldr	r3, [pc, #328]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	4b52      	ldr	r3, [pc, #328]	; (80055c0 <HAL_RCC_OscConfig+0x61c>)
 8005476:	4013      	ands	r3, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6a11      	ldr	r1, [r2, #32]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005480:	3a01      	subs	r2, #1
 8005482:	0112      	lsls	r2, r2, #4
 8005484:	4311      	orrs	r1, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800548a:	0212      	lsls	r2, r2, #8
 800548c:	4311      	orrs	r1, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005492:	0852      	lsrs	r2, r2, #1
 8005494:	3a01      	subs	r2, #1
 8005496:	0552      	lsls	r2, r2, #21
 8005498:	4311      	orrs	r1, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800549e:	0852      	lsrs	r2, r2, #1
 80054a0:	3a01      	subs	r2, #1
 80054a2:	0652      	lsls	r2, r2, #25
 80054a4:	4311      	orrs	r1, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054aa:	06d2      	lsls	r2, r2, #27
 80054ac:	430a      	orrs	r2, r1
 80054ae:	4943      	ldr	r1, [pc, #268]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b4:	4b41      	ldr	r3, [pc, #260]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a40      	ldr	r2, [pc, #256]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 80054ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054c0:	4b3e      	ldr	r3, [pc, #248]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a3d      	ldr	r2, [pc, #244]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 80054c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054cc:	f7fc ffea 	bl	80024a4 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d4:	f7fc ffe6 	bl	80024a4 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e066      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054e6:	4b35      	ldr	r3, [pc, #212]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0x530>
 80054f2:	e05e      	b.n	80055b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f4:	4b31      	ldr	r3, [pc, #196]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a30      	ldr	r2, [pc, #192]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 80054fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005500:	f7fc ffd0 	bl	80024a4 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005508:	f7fc ffcc 	bl	80024a4 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e04c      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800551a:	4b28      	ldr	r3, [pc, #160]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f0      	bne.n	8005508 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005526:	4b25      	ldr	r3, [pc, #148]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	4924      	ldr	r1, [pc, #144]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <HAL_RCC_OscConfig+0x620>)
 800552e:	4013      	ands	r3, r2
 8005530:	60cb      	str	r3, [r1, #12]
 8005532:	e03e      	b.n	80055b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e039      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005540:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <HAL_RCC_OscConfig+0x618>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f003 0203 	and.w	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	429a      	cmp	r2, r3
 8005552:	d12c      	bne.n	80055ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	3b01      	subs	r3, #1
 8005560:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005562:	429a      	cmp	r2, r3
 8005564:	d123      	bne.n	80055ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005572:	429a      	cmp	r2, r3
 8005574:	d11b      	bne.n	80055ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d113      	bne.n	80055ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	3b01      	subs	r3, #1
 8005594:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005596:	429a      	cmp	r2, r3
 8005598:	d109      	bne.n	80055ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	3b01      	subs	r3, #1
 80055a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d001      	beq.n	80055b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40021000 	.word	0x40021000
 80055c0:	019f800c 	.word	0x019f800c
 80055c4:	feeefffc 	.word	0xfeeefffc

080055c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e11e      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e0:	4b91      	ldr	r3, [pc, #580]	; (8005828 <HAL_RCC_ClockConfig+0x260>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d910      	bls.n	8005610 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ee:	4b8e      	ldr	r3, [pc, #568]	; (8005828 <HAL_RCC_ClockConfig+0x260>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f023 020f 	bic.w	r2, r3, #15
 80055f6:	498c      	ldr	r1, [pc, #560]	; (8005828 <HAL_RCC_ClockConfig+0x260>)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fe:	4b8a      	ldr	r3, [pc, #552]	; (8005828 <HAL_RCC_ClockConfig+0x260>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d001      	beq.n	8005610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e106      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d073      	beq.n	8005704 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d129      	bne.n	8005678 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005624:	4b81      	ldr	r3, [pc, #516]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0f4      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005634:	f000 f9fa 	bl	8005a2c <RCC_GetSysClockFreqFromPLLSource>
 8005638:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4a7c      	ldr	r2, [pc, #496]	; (8005830 <HAL_RCC_ClockConfig+0x268>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d93f      	bls.n	80056c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005642:	4b7a      	ldr	r3, [pc, #488]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005656:	2b00      	cmp	r3, #0
 8005658:	d033      	beq.n	80056c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800565e:	2b00      	cmp	r3, #0
 8005660:	d12f      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005662:	4b72      	ldr	r3, [pc, #456]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800566a:	4a70      	ldr	r2, [pc, #448]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 800566c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005670:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005672:	2380      	movs	r3, #128	; 0x80
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	e024      	b.n	80056c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d107      	bne.n	8005690 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005680:	4b6a      	ldr	r3, [pc, #424]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0c6      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005690:	4b66      	ldr	r3, [pc, #408]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e0be      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056a0:	f000 f8ce 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80056a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4a61      	ldr	r2, [pc, #388]	; (8005830 <HAL_RCC_ClockConfig+0x268>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d909      	bls.n	80056c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056ae:	4b5f      	ldr	r3, [pc, #380]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056b6:	4a5d      	ldr	r2, [pc, #372]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056c2:	4b5a      	ldr	r3, [pc, #360]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f023 0203 	bic.w	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4957      	ldr	r1, [pc, #348]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d4:	f7fc fee6 	bl	80024a4 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056dc:	f7fc fee2 	bl	80024a4 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e095      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f2:	4b4e      	ldr	r3, [pc, #312]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 020c 	and.w	r2, r3, #12
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	429a      	cmp	r2, r3
 8005702:	d1eb      	bne.n	80056dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d023      	beq.n	8005758 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800571c:	4b43      	ldr	r3, [pc, #268]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4a42      	ldr	r2, [pc, #264]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005726:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005734:	4b3d      	ldr	r3, [pc, #244]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800573c:	4a3b      	ldr	r2, [pc, #236]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 800573e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005742:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005744:	4b39      	ldr	r3, [pc, #228]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4936      	ldr	r1, [pc, #216]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
 8005756:	e008      	b.n	800576a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d105      	bne.n	800576a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800575e:	4b33      	ldr	r3, [pc, #204]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4a32      	ldr	r2, [pc, #200]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 8005764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005768:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800576a:	4b2f      	ldr	r3, [pc, #188]	; (8005828 <HAL_RCC_ClockConfig+0x260>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d21d      	bcs.n	80057b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005778:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <HAL_RCC_ClockConfig+0x260>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f023 020f 	bic.w	r2, r3, #15
 8005780:	4929      	ldr	r1, [pc, #164]	; (8005828 <HAL_RCC_ClockConfig+0x260>)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005788:	f7fc fe8c 	bl	80024a4 <HAL_GetTick>
 800578c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f7fc fe88 	bl	80024a4 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	; 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e03b      	b.n	800581e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <HAL_RCC_ClockConfig+0x260>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d1ed      	bne.n	8005790 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4917      	ldr	r1, [pc, #92]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	490f      	ldr	r1, [pc, #60]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057f2:	f000 f825 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80057f6:	4602      	mov	r2, r0
 80057f8:	4b0c      	ldr	r3, [pc, #48]	; (800582c <HAL_RCC_ClockConfig+0x264>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	490c      	ldr	r1, [pc, #48]	; (8005834 <HAL_RCC_ClockConfig+0x26c>)
 8005804:	5ccb      	ldrb	r3, [r1, r3]
 8005806:	f003 031f 	and.w	r3, r3, #31
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	4a0a      	ldr	r2, [pc, #40]	; (8005838 <HAL_RCC_ClockConfig+0x270>)
 8005810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005812:	4b0a      	ldr	r3, [pc, #40]	; (800583c <HAL_RCC_ClockConfig+0x274>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc fd28 	bl	800226c <HAL_InitTick>
 800581c:	4603      	mov	r3, r0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40022000 	.word	0x40022000
 800582c:	40021000 	.word	0x40021000
 8005830:	04c4b400 	.word	0x04c4b400
 8005834:	0800bb40 	.word	0x0800bb40
 8005838:	20000000 	.word	0x20000000
 800583c:	20000004 	.word	0x20000004

08005840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005846:	4b2c      	ldr	r3, [pc, #176]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 030c 	and.w	r3, r3, #12
 800584e:	2b04      	cmp	r3, #4
 8005850:	d102      	bne.n	8005858 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005852:	4b2a      	ldr	r3, [pc, #168]	; (80058fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005854:	613b      	str	r3, [r7, #16]
 8005856:	e047      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005858:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 030c 	and.w	r3, r3, #12
 8005860:	2b08      	cmp	r3, #8
 8005862:	d102      	bne.n	800586a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005864:	4b25      	ldr	r3, [pc, #148]	; (80058fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	e03e      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800586a:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b0c      	cmp	r3, #12
 8005874:	d136      	bne.n	80058e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005876:	4b20      	ldr	r3, [pc, #128]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005880:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	3301      	adds	r3, #1
 800588c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b03      	cmp	r3, #3
 8005892:	d10c      	bne.n	80058ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005894:	4a19      	ldr	r2, [pc, #100]	; (80058fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800589e:	68d2      	ldr	r2, [r2, #12]
 80058a0:	0a12      	lsrs	r2, r2, #8
 80058a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	617b      	str	r3, [r7, #20]
      break;
 80058ac:	e00c      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058ae:	4a13      	ldr	r2, [pc, #76]	; (80058fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b6:	4a10      	ldr	r2, [pc, #64]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b8:	68d2      	ldr	r2, [r2, #12]
 80058ba:	0a12      	lsrs	r2, r2, #8
 80058bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058c0:	fb02 f303 	mul.w	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]
      break;
 80058c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	0e5b      	lsrs	r3, r3, #25
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	3301      	adds	r3, #1
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	e001      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80058e8:	693b      	ldr	r3, [r7, #16]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40021000 	.word	0x40021000
 80058fc:	00f42400 	.word	0x00f42400

08005900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005904:	4b03      	ldr	r3, [pc, #12]	; (8005914 <HAL_RCC_GetHCLKFreq+0x14>)
 8005906:	681b      	ldr	r3, [r3, #0]
}
 8005908:	4618      	mov	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000000 	.word	0x20000000

08005918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800591c:	f7ff fff0 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	0a1b      	lsrs	r3, r3, #8
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	4904      	ldr	r1, [pc, #16]	; (8005940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800592e:	5ccb      	ldrb	r3, [r1, r3]
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40021000 	.word	0x40021000
 8005940:	0800bb50 	.word	0x0800bb50

08005944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005948:	f7ff ffda 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b06      	ldr	r3, [pc, #24]	; (8005968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	0adb      	lsrs	r3, r3, #11
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	4904      	ldr	r1, [pc, #16]	; (800596c <HAL_RCC_GetPCLK2Freq+0x28>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40021000 	.word	0x40021000
 800596c:	0800bb50 	.word	0x0800bb50

08005970 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	220f      	movs	r2, #15
 800597e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005980:	4b12      	ldr	r3, [pc, #72]	; (80059cc <HAL_RCC_GetClockConfig+0x5c>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0203 	and.w	r2, r3, #3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800598c:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <HAL_RCC_GetClockConfig+0x5c>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <HAL_RCC_GetClockConfig+0x5c>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <HAL_RCC_GetClockConfig+0x5c>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	08db      	lsrs	r3, r3, #3
 80059aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80059b2:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <HAL_RCC_GetClockConfig+0x60>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 020f 	and.w	r2, r3, #15
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	601a      	str	r2, [r3, #0]
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40022000 	.word	0x40022000

080059d4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <HAL_RCC_EnableCSS+0x1c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a04      	ldr	r2, [pc, #16]	; (80059f0 <HAL_RCC_EnableCSS+0x1c>)
 80059de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059e2:	6013      	str	r3, [r2, #0]
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40021000 	.word	0x40021000

080059f4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80059f8:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <HAL_RCC_NMI_IRQHandler+0x24>)
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a04:	d105      	bne.n	8005a12 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005a06:	f000 f809 	bl	8005a1c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005a0a:	4b03      	ldr	r3, [pc, #12]	; (8005a18 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a10:	621a      	str	r2, [r3, #32]
  }
}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000

08005a1c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a32:	4b1e      	ldr	r3, [pc, #120]	; (8005aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a3c:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d10c      	bne.n	8005a6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a50:	4a17      	ldr	r2, [pc, #92]	; (8005ab0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	4a14      	ldr	r2, [pc, #80]	; (8005aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a5a:	68d2      	ldr	r2, [r2, #12]
 8005a5c:	0a12      	lsrs	r2, r2, #8
 8005a5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	617b      	str	r3, [r7, #20]
    break;
 8005a68:	e00c      	b.n	8005a84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a6a:	4a11      	ldr	r2, [pc, #68]	; (8005ab0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	4a0e      	ldr	r2, [pc, #56]	; (8005aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a74:	68d2      	ldr	r2, [r2, #12]
 8005a76:	0a12      	lsrs	r2, r2, #8
 8005a78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a7c:	fb02 f303 	mul.w	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]
    break;
 8005a82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a84:	4b09      	ldr	r3, [pc, #36]	; (8005aac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	0e5b      	lsrs	r3, r3, #25
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	3301      	adds	r3, #1
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a9e:	687b      	ldr	r3, [r7, #4]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	00f42400 	.word	0x00f42400

08005ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005abc:	2300      	movs	r3, #0
 8005abe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8098 	beq.w	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad6:	4b43      	ldr	r3, [pc, #268]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10d      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	4b40      	ldr	r3, [pc, #256]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	4a3f      	ldr	r2, [pc, #252]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aec:	6593      	str	r3, [r2, #88]	; 0x58
 8005aee:	4b3d      	ldr	r3, [pc, #244]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afa:	2301      	movs	r3, #1
 8005afc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005afe:	4b3a      	ldr	r3, [pc, #232]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a39      	ldr	r2, [pc, #228]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b0a:	f7fc fccb 	bl	80024a4 <HAL_GetTick>
 8005b0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b10:	e009      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b12:	f7fc fcc7 	bl	80024a4 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d902      	bls.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	74fb      	strb	r3, [r7, #19]
        break;
 8005b24:	e005      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b26:	4b30      	ldr	r3, [pc, #192]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0ef      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d159      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b38:	4b2a      	ldr	r3, [pc, #168]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01e      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d019      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b54:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b60:	4b20      	ldr	r3, [pc, #128]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b66:	4a1f      	ldr	r2, [pc, #124]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b70:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b80:	4a18      	ldr	r2, [pc, #96]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d016      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f7fc fc87 	bl	80024a4 <HAL_GetTick>
 8005b96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b98:	e00b      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9a:	f7fc fc83 	bl	80024a4 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d902      	bls.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	74fb      	strb	r3, [r7, #19]
            break;
 8005bb0:	e006      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0ec      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005bc0:	7cfb      	ldrb	r3, [r7, #19]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10b      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd4:	4903      	ldr	r1, [pc, #12]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bde:	7cfb      	ldrb	r3, [r7, #19]
 8005be0:	74bb      	strb	r3, [r7, #18]
 8005be2:	e005      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005be4:	40021000 	.word	0x40021000
 8005be8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
 8005bee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bf0:	7c7b      	ldrb	r3, [r7, #17]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d105      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf6:	4ba7      	ldr	r3, [pc, #668]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfa:	4aa6      	ldr	r2, [pc, #664]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c0e:	4ba1      	ldr	r3, [pc, #644]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c14:	f023 0203 	bic.w	r2, r3, #3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	499d      	ldr	r1, [pc, #628]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c30:	4b98      	ldr	r3, [pc, #608]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c36:	f023 020c 	bic.w	r2, r3, #12
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	4995      	ldr	r1, [pc, #596]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c52:	4b90      	ldr	r3, [pc, #576]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	498c      	ldr	r1, [pc, #560]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c74:	4b87      	ldr	r3, [pc, #540]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	4984      	ldr	r1, [pc, #528]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c96:	4b7f      	ldr	r3, [pc, #508]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	497b      	ldr	r1, [pc, #492]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cb8:	4b76      	ldr	r3, [pc, #472]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	4973      	ldr	r1, [pc, #460]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cda:	4b6e      	ldr	r3, [pc, #440]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	496a      	ldr	r1, [pc, #424]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cfc:	4b65      	ldr	r3, [pc, #404]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	4962      	ldr	r1, [pc, #392]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d1e:	4b5d      	ldr	r3, [pc, #372]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	4959      	ldr	r1, [pc, #356]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d40:	4b54      	ldr	r3, [pc, #336]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d46:	f023 0203 	bic.w	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	4951      	ldr	r1, [pc, #324]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d62:	4b4c      	ldr	r3, [pc, #304]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	4948      	ldr	r1, [pc, #288]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d015      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d84:	4b43      	ldr	r3, [pc, #268]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d92:	4940      	ldr	r1, [pc, #256]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da2:	d105      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005da4:	4b3b      	ldr	r3, [pc, #236]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a3a      	ldr	r2, [pc, #232]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d015      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005dbc:	4b35      	ldr	r3, [pc, #212]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dca:	4932      	ldr	r1, [pc, #200]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dda:	d105      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ddc:	4b2d      	ldr	r3, [pc, #180]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4a2c      	ldr	r2, [pc, #176]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005de6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d015      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005df4:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	4924      	ldr	r1, [pc, #144]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e12:	d105      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e14:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a1e      	ldr	r2, [pc, #120]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e1e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	4916      	ldr	r1, [pc, #88]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4a:	d105      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e4c:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a10      	ldr	r2, [pc, #64]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e56:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d019      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	4908      	ldr	r1, [pc, #32]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e82:	d109      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e84:	4b03      	ldr	r3, [pc, #12]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4a02      	ldr	r2, [pc, #8]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e8e:	60d3      	str	r3, [r2, #12]
 8005e90:	e002      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e92:	bf00      	nop
 8005e94:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d015      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ea4:	4b29      	ldr	r3, [pc, #164]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	4926      	ldr	r1, [pc, #152]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ec2:	d105      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ec4:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4a20      	ldr	r2, [pc, #128]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ece:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d015      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005edc:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eea:	4918      	ldr	r1, [pc, #96]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efa:	d105      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005efc:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4a12      	ldr	r2, [pc, #72]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f06:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d015      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f14:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f22:	490a      	ldr	r1, [pc, #40]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f32:	d105      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	4a04      	ldr	r2, [pc, #16]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f40:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40021000 	.word	0x40021000

08005f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e0c1      	b.n	80060e6 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d108      	bne.n	8005f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f72:	d009      	beq.n	8005f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	61da      	str	r2, [r3, #28]
 8005f7a:	e005      	b.n	8005f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d12a      	bne.n	8005ff0 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a52      	ldr	r2, [pc, #328]	; (80060f0 <HAL_SPI_Init+0x1a0>)
 8005fa6:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a52      	ldr	r2, [pc, #328]	; (80060f4 <HAL_SPI_Init+0x1a4>)
 8005fac:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a51      	ldr	r2, [pc, #324]	; (80060f8 <HAL_SPI_Init+0x1a8>)
 8005fb2:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a51      	ldr	r2, [pc, #324]	; (80060fc <HAL_SPI_Init+0x1ac>)
 8005fb8:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a50      	ldr	r2, [pc, #320]	; (8006100 <HAL_SPI_Init+0x1b0>)
 8005fbe:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a50      	ldr	r2, [pc, #320]	; (8006104 <HAL_SPI_Init+0x1b4>)
 8005fc4:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a4f      	ldr	r2, [pc, #316]	; (8006108 <HAL_SPI_Init+0x1b8>)
 8005fca:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a4f      	ldr	r2, [pc, #316]	; (800610c <HAL_SPI_Init+0x1bc>)
 8005fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a4b      	ldr	r2, [pc, #300]	; (8006110 <HAL_SPI_Init+0x1c0>)
 8005fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006006:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006010:	d902      	bls.n	8006018 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e002      	b.n	800601e <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800601c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006026:	d007      	beq.n	8006038 <HAL_SPI_Init+0xe8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006030:	d002      	beq.n	8006038 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607a:	ea42 0103 	orr.w	r1, r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	0c1b      	lsrs	r3, r3, #16
 8006094:	f003 0204 	and.w	r2, r3, #4
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80060b4:	ea42 0103 	orr.w	r1, r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	08006115 	.word	0x08006115
 80060f4:	08006129 	.word	0x08006129
 80060f8:	0800613d 	.word	0x0800613d
 80060fc:	08006151 	.word	0x08006151
 8006100:	08006165 	.word	0x08006165
 8006104:	08006179 	.word	0x08006179
 8006108:	0800618d 	.word	0x0800618d
 800610c:	080061a1 	.word	0x080061a1
 8006110:	08001e79 	.word	0x08001e79

08006114 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e054      	b.n	8006270 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d111      	bne.n	80061f6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fd1e 	bl	8006c1c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a23      	ldr	r2, [pc, #140]	; (8006278 <HAL_TIM_Base_Init+0xc4>)
 80061ec:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3304      	adds	r3, #4
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f000 fc53 	bl	8006ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	08002041 	.word	0x08002041

0800627c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b01      	cmp	r3, #1
 800628e:	d001      	beq.n	8006294 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e04c      	b.n	800632e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a26      	ldr	r2, [pc, #152]	; (800633c <HAL_TIM_Base_Start+0xc0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d022      	beq.n	80062ec <HAL_TIM_Base_Start+0x70>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ae:	d01d      	beq.n	80062ec <HAL_TIM_Base_Start+0x70>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a22      	ldr	r2, [pc, #136]	; (8006340 <HAL_TIM_Base_Start+0xc4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d018      	beq.n	80062ec <HAL_TIM_Base_Start+0x70>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a21      	ldr	r2, [pc, #132]	; (8006344 <HAL_TIM_Base_Start+0xc8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <HAL_TIM_Base_Start+0x70>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <HAL_TIM_Base_Start+0xcc>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <HAL_TIM_Base_Start+0x70>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1e      	ldr	r2, [pc, #120]	; (800634c <HAL_TIM_Base_Start+0xd0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_TIM_Base_Start+0x70>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <HAL_TIM_Base_Start+0xd4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIM_Base_Start+0x70>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1b      	ldr	r2, [pc, #108]	; (8006354 <HAL_TIM_Base_Start+0xd8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d115      	bne.n	8006318 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	4b19      	ldr	r3, [pc, #100]	; (8006358 <HAL_TIM_Base_Start+0xdc>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b06      	cmp	r3, #6
 80062fc:	d015      	beq.n	800632a <HAL_TIM_Base_Start+0xae>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006304:	d011      	beq.n	800632a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0201 	orr.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006316:	e008      	b.n	800632a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e000      	b.n	800632c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	40012c00 	.word	0x40012c00
 8006340:	40000400 	.word	0x40000400
 8006344:	40000800 	.word	0x40000800
 8006348:	40000c00 	.word	0x40000c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40014000 	.word	0x40014000
 8006354:	40015000 	.word	0x40015000
 8006358:	00010007 	.word	0x00010007

0800635c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d001      	beq.n	8006374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e054      	b.n	800641e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a26      	ldr	r2, [pc, #152]	; (800642c <HAL_TIM_Base_Start_IT+0xd0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d022      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0x80>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639e:	d01d      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0x80>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a22      	ldr	r2, [pc, #136]	; (8006430 <HAL_TIM_Base_Start_IT+0xd4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d018      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0x80>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a21      	ldr	r2, [pc, #132]	; (8006434 <HAL_TIM_Base_Start_IT+0xd8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d013      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0x80>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1f      	ldr	r2, [pc, #124]	; (8006438 <HAL_TIM_Base_Start_IT+0xdc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00e      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0x80>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1e      	ldr	r2, [pc, #120]	; (800643c <HAL_TIM_Base_Start_IT+0xe0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d009      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0x80>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1c      	ldr	r2, [pc, #112]	; (8006440 <HAL_TIM_Base_Start_IT+0xe4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0x80>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1b      	ldr	r2, [pc, #108]	; (8006444 <HAL_TIM_Base_Start_IT+0xe8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d115      	bne.n	8006408 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	4b19      	ldr	r3, [pc, #100]	; (8006448 <HAL_TIM_Base_Start_IT+0xec>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b06      	cmp	r3, #6
 80063ec:	d015      	beq.n	800641a <HAL_TIM_Base_Start_IT+0xbe>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f4:	d011      	beq.n	800641a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0201 	orr.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006406:	e008      	b.n	800641a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	e000      	b.n	800641c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40013400 	.word	0x40013400
 8006440:	40014000 	.word	0x40014000
 8006444:	40015000 	.word	0x40015000
 8006448:	00010007 	.word	0x00010007

0800644c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d026      	beq.n	80064bc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d021      	beq.n	80064bc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0202 	mvn.w	r2, #2
 8006480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	4798      	blx	r3
 80064a0:	e009      	b.n	80064b6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d026      	beq.n	8006514 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d021      	beq.n	8006514 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0204 	mvn.w	r2, #4
 80064d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
 80064f8:	e009      	b.n	800650e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d026      	beq.n	800656c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d021      	beq.n	800656c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0208 	mvn.w	r2, #8
 8006530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2204      	movs	r2, #4
 8006536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
 8006550:	e009      	b.n	8006566 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b00      	cmp	r3, #0
 8006574:	d026      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f003 0310 	and.w	r3, r3, #16
 800657c:	2b00      	cmp	r3, #0
 800657e:	d021      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0210 	mvn.w	r2, #16
 8006588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2208      	movs	r2, #8
 800658e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
 80065a8:	e009      	b.n	80065be <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00e      	beq.n	80065ec <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d009      	beq.n	80065ec <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0201 	mvn.w	r2, #1
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00e      	beq.n	800661e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00e      	beq.n	8006646 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662e:	2b00      	cmp	r3, #0
 8006630:	d009      	beq.n	8006646 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800663a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00e      	beq.n	800666e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00e      	beq.n	8006696 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f06f 0220 	mvn.w	r2, #32
 800668a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00e      	beq.n	80066be <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80066b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00e      	beq.n	80066e6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80066da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00e      	beq.n	800670e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d009      	beq.n	800670e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800672a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
	...

080067f4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	460b      	mov	r3, r1
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e14a      	b.n	8006aa6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b01      	cmp	r3, #1
 800681a:	f040 80dd 	bne.w	80069d8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800681e:	7afb      	ldrb	r3, [r7, #11]
 8006820:	2b1f      	cmp	r3, #31
 8006822:	f200 80d6 	bhi.w	80069d2 <HAL_TIM_RegisterCallback+0x1de>
 8006826:	a201      	add	r2, pc, #4	; (adr r2, 800682c <HAL_TIM_RegisterCallback+0x38>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	080068ad 	.word	0x080068ad
 8006830:	080068b5 	.word	0x080068b5
 8006834:	080068bd 	.word	0x080068bd
 8006838:	080068c5 	.word	0x080068c5
 800683c:	080068cd 	.word	0x080068cd
 8006840:	080068d5 	.word	0x080068d5
 8006844:	080068dd 	.word	0x080068dd
 8006848:	080068e5 	.word	0x080068e5
 800684c:	080068ed 	.word	0x080068ed
 8006850:	080068f5 	.word	0x080068f5
 8006854:	080068fd 	.word	0x080068fd
 8006858:	08006905 	.word	0x08006905
 800685c:	0800690d 	.word	0x0800690d
 8006860:	08006915 	.word	0x08006915
 8006864:	0800691f 	.word	0x0800691f
 8006868:	08006929 	.word	0x08006929
 800686c:	08006933 	.word	0x08006933
 8006870:	0800693d 	.word	0x0800693d
 8006874:	08006947 	.word	0x08006947
 8006878:	08006951 	.word	0x08006951
 800687c:	0800695b 	.word	0x0800695b
 8006880:	08006965 	.word	0x08006965
 8006884:	0800696f 	.word	0x0800696f
 8006888:	08006979 	.word	0x08006979
 800688c:	08006983 	.word	0x08006983
 8006890:	0800698d 	.word	0x0800698d
 8006894:	08006997 	.word	0x08006997
 8006898:	080069a1 	.word	0x080069a1
 800689c:	080069ab 	.word	0x080069ab
 80068a0:	080069b5 	.word	0x080069b5
 80068a4:	080069bf 	.word	0x080069bf
 80068a8:	080069c9 	.word	0x080069c9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80068b2:	e0f7      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80068ba:	e0f3      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80068c2:	e0ef      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80068ca:	e0eb      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80068d2:	e0e7      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80068da:	e0e3      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80068e2:	e0df      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80068ea:	e0db      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80068f2:	e0d7      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80068fa:	e0d3      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006902:	e0cf      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800690a:	e0cb      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006912:	e0c7      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800691c:	e0c2      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006926:	e0bd      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8006930:	e0b8      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800693a:	e0b3      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006944:	e0ae      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800694e:	e0a9      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006958:	e0a4      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8006962:	e09f      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800696c:	e09a      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006976:	e095      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8006980:	e090      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800698a:	e08b      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006994:	e086      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800699e:	e081      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 80069a8:	e07c      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 80069b2:	e077      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 80069bc:	e072      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 80069c6:	e06d      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 80069d0:	e068      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	75fb      	strb	r3, [r7, #23]
        break;
 80069d6:	e065      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d15d      	bne.n	8006aa0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80069e4:	7afb      	ldrb	r3, [r7, #11]
 80069e6:	2b0d      	cmp	r3, #13
 80069e8:	d857      	bhi.n	8006a9a <HAL_TIM_RegisterCallback+0x2a6>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <HAL_TIM_RegisterCallback+0x1fc>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a29 	.word	0x08006a29
 80069f4:	08006a31 	.word	0x08006a31
 80069f8:	08006a39 	.word	0x08006a39
 80069fc:	08006a41 	.word	0x08006a41
 8006a00:	08006a49 	.word	0x08006a49
 8006a04:	08006a51 	.word	0x08006a51
 8006a08:	08006a59 	.word	0x08006a59
 8006a0c:	08006a61 	.word	0x08006a61
 8006a10:	08006a69 	.word	0x08006a69
 8006a14:	08006a71 	.word	0x08006a71
 8006a18:	08006a79 	.word	0x08006a79
 8006a1c:	08006a81 	.word	0x08006a81
 8006a20:	08006a89 	.word	0x08006a89
 8006a24:	08006a91 	.word	0x08006a91
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006a2e:	e039      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006a36:	e035      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006a3e:	e031      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006a46:	e02d      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006a4e:	e029      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006a56:	e025      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006a5e:	e021      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006a66:	e01d      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006a6e:	e019      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006a76:	e015      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006a7e:	e011      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006a86:	e00d      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006a8e:	e009      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006a98:	e004      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	75fb      	strb	r3, [r7, #23]
        break;
 8006a9e:	e001      	b.n	8006aa4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop

08006ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a4c      	ldr	r2, [pc, #304]	; (8006bf8 <TIM_Base_SetConfig+0x144>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d017      	beq.n	8006afc <TIM_Base_SetConfig+0x48>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad2:	d013      	beq.n	8006afc <TIM_Base_SetConfig+0x48>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a49      	ldr	r2, [pc, #292]	; (8006bfc <TIM_Base_SetConfig+0x148>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00f      	beq.n	8006afc <TIM_Base_SetConfig+0x48>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a48      	ldr	r2, [pc, #288]	; (8006c00 <TIM_Base_SetConfig+0x14c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00b      	beq.n	8006afc <TIM_Base_SetConfig+0x48>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a47      	ldr	r2, [pc, #284]	; (8006c04 <TIM_Base_SetConfig+0x150>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d007      	beq.n	8006afc <TIM_Base_SetConfig+0x48>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a46      	ldr	r2, [pc, #280]	; (8006c08 <TIM_Base_SetConfig+0x154>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_Base_SetConfig+0x48>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a45      	ldr	r2, [pc, #276]	; (8006c0c <TIM_Base_SetConfig+0x158>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d108      	bne.n	8006b0e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a39      	ldr	r2, [pc, #228]	; (8006bf8 <TIM_Base_SetConfig+0x144>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d023      	beq.n	8006b5e <TIM_Base_SetConfig+0xaa>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1c:	d01f      	beq.n	8006b5e <TIM_Base_SetConfig+0xaa>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a36      	ldr	r2, [pc, #216]	; (8006bfc <TIM_Base_SetConfig+0x148>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01b      	beq.n	8006b5e <TIM_Base_SetConfig+0xaa>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a35      	ldr	r2, [pc, #212]	; (8006c00 <TIM_Base_SetConfig+0x14c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d017      	beq.n	8006b5e <TIM_Base_SetConfig+0xaa>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a34      	ldr	r2, [pc, #208]	; (8006c04 <TIM_Base_SetConfig+0x150>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <TIM_Base_SetConfig+0xaa>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a33      	ldr	r2, [pc, #204]	; (8006c08 <TIM_Base_SetConfig+0x154>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00f      	beq.n	8006b5e <TIM_Base_SetConfig+0xaa>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a33      	ldr	r2, [pc, #204]	; (8006c10 <TIM_Base_SetConfig+0x15c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_Base_SetConfig+0xaa>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a32      	ldr	r2, [pc, #200]	; (8006c14 <TIM_Base_SetConfig+0x160>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d007      	beq.n	8006b5e <TIM_Base_SetConfig+0xaa>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a31      	ldr	r2, [pc, #196]	; (8006c18 <TIM_Base_SetConfig+0x164>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_Base_SetConfig+0xaa>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2c      	ldr	r2, [pc, #176]	; (8006c0c <TIM_Base_SetConfig+0x158>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d108      	bne.n	8006b70 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a18      	ldr	r2, [pc, #96]	; (8006bf8 <TIM_Base_SetConfig+0x144>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d013      	beq.n	8006bc4 <TIM_Base_SetConfig+0x110>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a1a      	ldr	r2, [pc, #104]	; (8006c08 <TIM_Base_SetConfig+0x154>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00f      	beq.n	8006bc4 <TIM_Base_SetConfig+0x110>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a1a      	ldr	r2, [pc, #104]	; (8006c10 <TIM_Base_SetConfig+0x15c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00b      	beq.n	8006bc4 <TIM_Base_SetConfig+0x110>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <TIM_Base_SetConfig+0x160>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d007      	beq.n	8006bc4 <TIM_Base_SetConfig+0x110>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <TIM_Base_SetConfig+0x164>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_Base_SetConfig+0x110>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <TIM_Base_SetConfig+0x158>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d103      	bne.n	8006bcc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d105      	bne.n	8006bea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f023 0201 	bic.w	r2, r3, #1
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	611a      	str	r2, [r3, #16]
  }
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40012c00 	.word	0x40012c00
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	40013400 	.word	0x40013400
 8006c0c:	40015000 	.word	0x40015000
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40014400 	.word	0x40014400
 8006c18:	40014800 	.word	0x40014800

08006c1c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a26      	ldr	r2, [pc, #152]	; (8006cc0 <TIM_ResetCallback+0xa4>)
 8006c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a25      	ldr	r2, [pc, #148]	; (8006cc4 <TIM_ResetCallback+0xa8>)
 8006c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a24      	ldr	r2, [pc, #144]	; (8006cc8 <TIM_ResetCallback+0xac>)
 8006c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <TIM_ResetCallback+0xb0>)
 8006c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a22      	ldr	r2, [pc, #136]	; (8006cd0 <TIM_ResetCallback+0xb4>)
 8006c48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a21      	ldr	r2, [pc, #132]	; (8006cd4 <TIM_ResetCallback+0xb8>)
 8006c50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a20      	ldr	r2, [pc, #128]	; (8006cd8 <TIM_ResetCallback+0xbc>)
 8006c58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a1f      	ldr	r2, [pc, #124]	; (8006cdc <TIM_ResetCallback+0xc0>)
 8006c60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a1e      	ldr	r2, [pc, #120]	; (8006ce0 <TIM_ResetCallback+0xc4>)
 8006c68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ce4 <TIM_ResetCallback+0xc8>)
 8006c70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a1c      	ldr	r2, [pc, #112]	; (8006ce8 <TIM_ResetCallback+0xcc>)
 8006c78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <TIM_ResetCallback+0xd0>)
 8006c80:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <TIM_ResetCallback+0xd4>)
 8006c88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <TIM_ResetCallback+0xd8>)
 8006c90:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a18      	ldr	r2, [pc, #96]	; (8006cf8 <TIM_ResetCallback+0xdc>)
 8006c98:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a17      	ldr	r2, [pc, #92]	; (8006cfc <TIM_ResetCallback+0xe0>)
 8006ca0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <TIM_ResetCallback+0xe4>)
 8006ca8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a15      	ldr	r2, [pc, #84]	; (8006d04 <TIM_ResetCallback+0xe8>)
 8006cb0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	080015f5 	.word	0x080015f5
 8006cc4:	0800673f 	.word	0x0800673f
 8006cc8:	080067b7 	.word	0x080067b7
 8006ccc:	080067cb 	.word	0x080067cb
 8006cd0:	08006767 	.word	0x08006767
 8006cd4:	0800677b 	.word	0x0800677b
 8006cd8:	08006753 	.word	0x08006753
 8006cdc:	0800678f 	.word	0x0800678f
 8006ce0:	080067a3 	.word	0x080067a3
 8006ce4:	080067df 	.word	0x080067df
 8006ce8:	08006e35 	.word	0x08006e35
 8006cec:	08006e49 	.word	0x08006e49
 8006cf0:	08006e5d 	.word	0x08006e5d
 8006cf4:	08006e71 	.word	0x08006e71
 8006cf8:	08006e85 	.word	0x08006e85
 8006cfc:	08006e99 	.word	0x08006e99
 8006d00:	08006ead 	.word	0x08006ead
 8006d04:	08006ec1 	.word	0x08006ec1

08006d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e074      	b.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a34      	ldr	r2, [pc, #208]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a33      	ldr	r2, [pc, #204]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a31      	ldr	r2, [pc, #196]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d108      	bne.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a21      	ldr	r2, [pc, #132]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d022      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da0:	d01d      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1f      	ldr	r2, [pc, #124]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1d      	ldr	r2, [pc, #116]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1c      	ldr	r2, [pc, #112]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a11      	ldr	r2, [pc, #68]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10c      	bne.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40013400 	.word	0x40013400
 8006e20:	40015000 	.word	0x40015000
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40000c00 	.word	0x40000c00
 8006e30:	40014000 	.word	0x40014000

08006e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e050      	b.n	8006f88 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d114      	bne.n	8006f1a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f935 	bl	8007168 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d103      	bne.n	8006f10 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a21      	ldr	r2, [pc, #132]	; (8006f90 <HAL_UART_Init+0xbc>)
 8006f0c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2224      	movs	r2, #36	; 0x24
 8006f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0201 	bic.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fc62 	bl	8007804 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f963 	bl	800720c <UART_SetConfig>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e01b      	b.n	8006f88 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0201 	orr.w	r2, r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fce1 	bl	8007948 <UART_CheckIdleState>
 8006f86:	4603      	mov	r3, r0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	0800208d 	.word	0x0800208d

08006f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	; 0x28
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d17b      	bne.n	80070a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_UART_Transmit+0x26>
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e074      	b.n	80070a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2221      	movs	r2, #33	; 0x21
 8006fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fce:	f7fb fa69 	bl	80024a4 <HAL_GetTick>
 8006fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	88fa      	ldrh	r2, [r7, #6]
 8006fd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	88fa      	ldrh	r2, [r7, #6]
 8006fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fec:	d108      	bne.n	8007000 <HAL_UART_Transmit+0x6c>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	e003      	b.n	8007008 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007008:	e030      	b.n	800706c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2200      	movs	r2, #0
 8007012:	2180      	movs	r1, #128	; 0x80
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fd41 	bl	8007a9c <UART_WaitOnFlagUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e03d      	b.n	80070a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10b      	bne.n	800704a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007040:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	3302      	adds	r3, #2
 8007046:	61bb      	str	r3, [r7, #24]
 8007048:	e007      	b.n	800705a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	781a      	ldrb	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	3301      	adds	r3, #1
 8007058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1c8      	bne.n	800700a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2200      	movs	r2, #0
 8007080:	2140      	movs	r1, #64	; 0x40
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fd0a 	bl	8007a9c <UART_WaitOnFlagUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d005      	beq.n	800709a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e006      	b.n	80070a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e000      	b.n	80070a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070a6:	2302      	movs	r3, #2
  }
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3720      	adds	r7, #32
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a1a      	ldr	r2, [pc, #104]	; (80071dc <UART_InitCallbacksToDefault+0x74>)
 8007174:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a19      	ldr	r2, [pc, #100]	; (80071e0 <UART_InitCallbacksToDefault+0x78>)
 800717c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a18      	ldr	r2, [pc, #96]	; (80071e4 <UART_InitCallbacksToDefault+0x7c>)
 8007184:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a17      	ldr	r2, [pc, #92]	; (80071e8 <UART_InitCallbacksToDefault+0x80>)
 800718c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a16      	ldr	r2, [pc, #88]	; (80071ec <UART_InitCallbacksToDefault+0x84>)
 8007194:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a15      	ldr	r2, [pc, #84]	; (80071f0 <UART_InitCallbacksToDefault+0x88>)
 800719c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a14      	ldr	r2, [pc, #80]	; (80071f4 <UART_InitCallbacksToDefault+0x8c>)
 80071a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a13      	ldr	r2, [pc, #76]	; (80071f8 <UART_InitCallbacksToDefault+0x90>)
 80071ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a12      	ldr	r2, [pc, #72]	; (80071fc <UART_InitCallbacksToDefault+0x94>)
 80071b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a11      	ldr	r2, [pc, #68]	; (8007200 <UART_InitCallbacksToDefault+0x98>)
 80071bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a10      	ldr	r2, [pc, #64]	; (8007204 <UART_InitCallbacksToDefault+0x9c>)
 80071c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a0f      	ldr	r2, [pc, #60]	; (8007208 <UART_InitCallbacksToDefault+0xa0>)
 80071cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	080070c5 	.word	0x080070c5
 80071e0:	080070b1 	.word	0x080070b1
 80071e4:	080070ed 	.word	0x080070ed
 80071e8:	080070d9 	.word	0x080070d9
 80071ec:	08007101 	.word	0x08007101
 80071f0:	08007115 	.word	0x08007115
 80071f4:	08007129 	.word	0x08007129
 80071f8:	0800713d 	.word	0x0800713d
 80071fc:	08007c43 	.word	0x08007c43
 8007200:	08007c57 	.word	0x08007c57
 8007204:	08007c6b 	.word	0x08007c6b
 8007208:	08007151 	.word	0x08007151

0800720c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800720c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007210:	b08c      	sub	sp, #48	; 0x30
 8007212:	af00      	add	r7, sp, #0
 8007214:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	431a      	orrs	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	431a      	orrs	r2, r3
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	4313      	orrs	r3, r2
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4baa      	ldr	r3, [pc, #680]	; (80074e4 <UART_SetConfig+0x2d8>)
 800723c:	4013      	ands	r3, r2
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007244:	430b      	orrs	r3, r1
 8007246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a9f      	ldr	r2, [pc, #636]	; (80074e8 <UART_SetConfig+0x2dc>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007274:	4313      	orrs	r3, r2
 8007276:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007282:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800728c:	430b      	orrs	r3, r1
 800728e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	f023 010f 	bic.w	r1, r3, #15
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a90      	ldr	r2, [pc, #576]	; (80074ec <UART_SetConfig+0x2e0>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d125      	bne.n	80072fc <UART_SetConfig+0xf0>
 80072b0:	4b8f      	ldr	r3, [pc, #572]	; (80074f0 <UART_SetConfig+0x2e4>)
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d81a      	bhi.n	80072f4 <UART_SetConfig+0xe8>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <UART_SetConfig+0xb8>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072dd 	.word	0x080072dd
 80072d0:	080072ed 	.word	0x080072ed
 80072d4:	2301      	movs	r3, #1
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072da:	e116      	b.n	800750a <UART_SetConfig+0x2fe>
 80072dc:	2302      	movs	r3, #2
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e2:	e112      	b.n	800750a <UART_SetConfig+0x2fe>
 80072e4:	2304      	movs	r3, #4
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ea:	e10e      	b.n	800750a <UART_SetConfig+0x2fe>
 80072ec:	2308      	movs	r3, #8
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f2:	e10a      	b.n	800750a <UART_SetConfig+0x2fe>
 80072f4:	2310      	movs	r3, #16
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072fa:	e106      	b.n	800750a <UART_SetConfig+0x2fe>
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a7c      	ldr	r2, [pc, #496]	; (80074f4 <UART_SetConfig+0x2e8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d138      	bne.n	8007378 <UART_SetConfig+0x16c>
 8007306:	4b7a      	ldr	r3, [pc, #488]	; (80074f0 <UART_SetConfig+0x2e4>)
 8007308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730c:	f003 030c 	and.w	r3, r3, #12
 8007310:	2b0c      	cmp	r3, #12
 8007312:	d82d      	bhi.n	8007370 <UART_SetConfig+0x164>
 8007314:	a201      	add	r2, pc, #4	; (adr r2, 800731c <UART_SetConfig+0x110>)
 8007316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731a:	bf00      	nop
 800731c:	08007351 	.word	0x08007351
 8007320:	08007371 	.word	0x08007371
 8007324:	08007371 	.word	0x08007371
 8007328:	08007371 	.word	0x08007371
 800732c:	08007361 	.word	0x08007361
 8007330:	08007371 	.word	0x08007371
 8007334:	08007371 	.word	0x08007371
 8007338:	08007371 	.word	0x08007371
 800733c:	08007359 	.word	0x08007359
 8007340:	08007371 	.word	0x08007371
 8007344:	08007371 	.word	0x08007371
 8007348:	08007371 	.word	0x08007371
 800734c:	08007369 	.word	0x08007369
 8007350:	2300      	movs	r3, #0
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007356:	e0d8      	b.n	800750a <UART_SetConfig+0x2fe>
 8007358:	2302      	movs	r3, #2
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800735e:	e0d4      	b.n	800750a <UART_SetConfig+0x2fe>
 8007360:	2304      	movs	r3, #4
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007366:	e0d0      	b.n	800750a <UART_SetConfig+0x2fe>
 8007368:	2308      	movs	r3, #8
 800736a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800736e:	e0cc      	b.n	800750a <UART_SetConfig+0x2fe>
 8007370:	2310      	movs	r3, #16
 8007372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007376:	e0c8      	b.n	800750a <UART_SetConfig+0x2fe>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a5e      	ldr	r2, [pc, #376]	; (80074f8 <UART_SetConfig+0x2ec>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d125      	bne.n	80073ce <UART_SetConfig+0x1c2>
 8007382:	4b5b      	ldr	r3, [pc, #364]	; (80074f0 <UART_SetConfig+0x2e4>)
 8007384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007388:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800738c:	2b30      	cmp	r3, #48	; 0x30
 800738e:	d016      	beq.n	80073be <UART_SetConfig+0x1b2>
 8007390:	2b30      	cmp	r3, #48	; 0x30
 8007392:	d818      	bhi.n	80073c6 <UART_SetConfig+0x1ba>
 8007394:	2b20      	cmp	r3, #32
 8007396:	d00a      	beq.n	80073ae <UART_SetConfig+0x1a2>
 8007398:	2b20      	cmp	r3, #32
 800739a:	d814      	bhi.n	80073c6 <UART_SetConfig+0x1ba>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <UART_SetConfig+0x19a>
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d008      	beq.n	80073b6 <UART_SetConfig+0x1aa>
 80073a4:	e00f      	b.n	80073c6 <UART_SetConfig+0x1ba>
 80073a6:	2300      	movs	r3, #0
 80073a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ac:	e0ad      	b.n	800750a <UART_SetConfig+0x2fe>
 80073ae:	2302      	movs	r3, #2
 80073b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b4:	e0a9      	b.n	800750a <UART_SetConfig+0x2fe>
 80073b6:	2304      	movs	r3, #4
 80073b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073bc:	e0a5      	b.n	800750a <UART_SetConfig+0x2fe>
 80073be:	2308      	movs	r3, #8
 80073c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c4:	e0a1      	b.n	800750a <UART_SetConfig+0x2fe>
 80073c6:	2310      	movs	r3, #16
 80073c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073cc:	e09d      	b.n	800750a <UART_SetConfig+0x2fe>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a4a      	ldr	r2, [pc, #296]	; (80074fc <UART_SetConfig+0x2f0>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d125      	bne.n	8007424 <UART_SetConfig+0x218>
 80073d8:	4b45      	ldr	r3, [pc, #276]	; (80074f0 <UART_SetConfig+0x2e4>)
 80073da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073e2:	2bc0      	cmp	r3, #192	; 0xc0
 80073e4:	d016      	beq.n	8007414 <UART_SetConfig+0x208>
 80073e6:	2bc0      	cmp	r3, #192	; 0xc0
 80073e8:	d818      	bhi.n	800741c <UART_SetConfig+0x210>
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d00a      	beq.n	8007404 <UART_SetConfig+0x1f8>
 80073ee:	2b80      	cmp	r3, #128	; 0x80
 80073f0:	d814      	bhi.n	800741c <UART_SetConfig+0x210>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <UART_SetConfig+0x1f0>
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d008      	beq.n	800740c <UART_SetConfig+0x200>
 80073fa:	e00f      	b.n	800741c <UART_SetConfig+0x210>
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007402:	e082      	b.n	800750a <UART_SetConfig+0x2fe>
 8007404:	2302      	movs	r3, #2
 8007406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740a:	e07e      	b.n	800750a <UART_SetConfig+0x2fe>
 800740c:	2304      	movs	r3, #4
 800740e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007412:	e07a      	b.n	800750a <UART_SetConfig+0x2fe>
 8007414:	2308      	movs	r3, #8
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800741a:	e076      	b.n	800750a <UART_SetConfig+0x2fe>
 800741c:	2310      	movs	r3, #16
 800741e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007422:	e072      	b.n	800750a <UART_SetConfig+0x2fe>
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a35      	ldr	r2, [pc, #212]	; (8007500 <UART_SetConfig+0x2f4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d12a      	bne.n	8007484 <UART_SetConfig+0x278>
 800742e:	4b30      	ldr	r3, [pc, #192]	; (80074f0 <UART_SetConfig+0x2e4>)
 8007430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800743c:	d01a      	beq.n	8007474 <UART_SetConfig+0x268>
 800743e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007442:	d81b      	bhi.n	800747c <UART_SetConfig+0x270>
 8007444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007448:	d00c      	beq.n	8007464 <UART_SetConfig+0x258>
 800744a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744e:	d815      	bhi.n	800747c <UART_SetConfig+0x270>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <UART_SetConfig+0x250>
 8007454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007458:	d008      	beq.n	800746c <UART_SetConfig+0x260>
 800745a:	e00f      	b.n	800747c <UART_SetConfig+0x270>
 800745c:	2300      	movs	r3, #0
 800745e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007462:	e052      	b.n	800750a <UART_SetConfig+0x2fe>
 8007464:	2302      	movs	r3, #2
 8007466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746a:	e04e      	b.n	800750a <UART_SetConfig+0x2fe>
 800746c:	2304      	movs	r3, #4
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007472:	e04a      	b.n	800750a <UART_SetConfig+0x2fe>
 8007474:	2308      	movs	r3, #8
 8007476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800747a:	e046      	b.n	800750a <UART_SetConfig+0x2fe>
 800747c:	2310      	movs	r3, #16
 800747e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007482:	e042      	b.n	800750a <UART_SetConfig+0x2fe>
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <UART_SetConfig+0x2dc>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d13a      	bne.n	8007504 <UART_SetConfig+0x2f8>
 800748e:	4b18      	ldr	r3, [pc, #96]	; (80074f0 <UART_SetConfig+0x2e4>)
 8007490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800749c:	d01a      	beq.n	80074d4 <UART_SetConfig+0x2c8>
 800749e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074a2:	d81b      	bhi.n	80074dc <UART_SetConfig+0x2d0>
 80074a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a8:	d00c      	beq.n	80074c4 <UART_SetConfig+0x2b8>
 80074aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ae:	d815      	bhi.n	80074dc <UART_SetConfig+0x2d0>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <UART_SetConfig+0x2b0>
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b8:	d008      	beq.n	80074cc <UART_SetConfig+0x2c0>
 80074ba:	e00f      	b.n	80074dc <UART_SetConfig+0x2d0>
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c2:	e022      	b.n	800750a <UART_SetConfig+0x2fe>
 80074c4:	2302      	movs	r3, #2
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ca:	e01e      	b.n	800750a <UART_SetConfig+0x2fe>
 80074cc:	2304      	movs	r3, #4
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d2:	e01a      	b.n	800750a <UART_SetConfig+0x2fe>
 80074d4:	2308      	movs	r3, #8
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074da:	e016      	b.n	800750a <UART_SetConfig+0x2fe>
 80074dc:	2310      	movs	r3, #16
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074e2:	e012      	b.n	800750a <UART_SetConfig+0x2fe>
 80074e4:	cfff69f3 	.word	0xcfff69f3
 80074e8:	40008000 	.word	0x40008000
 80074ec:	40013800 	.word	0x40013800
 80074f0:	40021000 	.word	0x40021000
 80074f4:	40004400 	.word	0x40004400
 80074f8:	40004800 	.word	0x40004800
 80074fc:	40004c00 	.word	0x40004c00
 8007500:	40005000 	.word	0x40005000
 8007504:	2310      	movs	r3, #16
 8007506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4aae      	ldr	r2, [pc, #696]	; (80077c8 <UART_SetConfig+0x5bc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	f040 8097 	bne.w	8007644 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800751a:	2b08      	cmp	r3, #8
 800751c:	d823      	bhi.n	8007566 <UART_SetConfig+0x35a>
 800751e:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <UART_SetConfig+0x318>)
 8007520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007524:	08007549 	.word	0x08007549
 8007528:	08007567 	.word	0x08007567
 800752c:	08007551 	.word	0x08007551
 8007530:	08007567 	.word	0x08007567
 8007534:	08007557 	.word	0x08007557
 8007538:	08007567 	.word	0x08007567
 800753c:	08007567 	.word	0x08007567
 8007540:	08007567 	.word	0x08007567
 8007544:	0800755f 	.word	0x0800755f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007548:	f7fe f9e6 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 800754c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800754e:	e010      	b.n	8007572 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007550:	4b9e      	ldr	r3, [pc, #632]	; (80077cc <UART_SetConfig+0x5c0>)
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007554:	e00d      	b.n	8007572 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007556:	f7fe f973 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 800755a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800755c:	e009      	b.n	8007572 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800755e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007564:	e005      	b.n	8007572 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007570:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8130 	beq.w	80077da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	4a94      	ldr	r2, [pc, #592]	; (80077d0 <UART_SetConfig+0x5c4>)
 8007580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007584:	461a      	mov	r2, r3
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	fbb3 f3f2 	udiv	r3, r3, r2
 800758c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	4413      	add	r3, r2
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	429a      	cmp	r2, r3
 800759c:	d305      	bcc.n	80075aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d903      	bls.n	80075b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075b0:	e113      	b.n	80077da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	2200      	movs	r2, #0
 80075b6:	60bb      	str	r3, [r7, #8]
 80075b8:	60fa      	str	r2, [r7, #12]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	4a84      	ldr	r2, [pc, #528]	; (80077d0 <UART_SetConfig+0x5c4>)
 80075c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2200      	movs	r2, #0
 80075c8:	603b      	str	r3, [r7, #0]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075d4:	f7f8 fe2c 	bl	8000230 <__aeabi_uldivmod>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4610      	mov	r0, r2
 80075de:	4619      	mov	r1, r3
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	020b      	lsls	r3, r1, #8
 80075ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075ee:	0202      	lsls	r2, r0, #8
 80075f0:	6979      	ldr	r1, [r7, #20]
 80075f2:	6849      	ldr	r1, [r1, #4]
 80075f4:	0849      	lsrs	r1, r1, #1
 80075f6:	2000      	movs	r0, #0
 80075f8:	460c      	mov	r4, r1
 80075fa:	4605      	mov	r5, r0
 80075fc:	eb12 0804 	adds.w	r8, r2, r4
 8007600:	eb43 0905 	adc.w	r9, r3, r5
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	469a      	mov	sl, r3
 800760c:	4693      	mov	fp, r2
 800760e:	4652      	mov	r2, sl
 8007610:	465b      	mov	r3, fp
 8007612:	4640      	mov	r0, r8
 8007614:	4649      	mov	r1, r9
 8007616:	f7f8 fe0b 	bl	8000230 <__aeabi_uldivmod>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4613      	mov	r3, r2
 8007620:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007628:	d308      	bcc.n	800763c <UART_SetConfig+0x430>
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007630:	d204      	bcs.n	800763c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6a3a      	ldr	r2, [r7, #32]
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	e0ce      	b.n	80077da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007642:	e0ca      	b.n	80077da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800764c:	d166      	bne.n	800771c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800764e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007652:	2b08      	cmp	r3, #8
 8007654:	d827      	bhi.n	80076a6 <UART_SetConfig+0x49a>
 8007656:	a201      	add	r2, pc, #4	; (adr r2, 800765c <UART_SetConfig+0x450>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	08007681 	.word	0x08007681
 8007660:	08007689 	.word	0x08007689
 8007664:	08007691 	.word	0x08007691
 8007668:	080076a7 	.word	0x080076a7
 800766c:	08007697 	.word	0x08007697
 8007670:	080076a7 	.word	0x080076a7
 8007674:	080076a7 	.word	0x080076a7
 8007678:	080076a7 	.word	0x080076a7
 800767c:	0800769f 	.word	0x0800769f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007680:	f7fe f94a 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8007684:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007686:	e014      	b.n	80076b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007688:	f7fe f95c 	bl	8005944 <HAL_RCC_GetPCLK2Freq>
 800768c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800768e:	e010      	b.n	80076b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007690:	4b4e      	ldr	r3, [pc, #312]	; (80077cc <UART_SetConfig+0x5c0>)
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007694:	e00d      	b.n	80076b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007696:	f7fe f8d3 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 800769a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800769c:	e009      	b.n	80076b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800769e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076a4:	e005      	b.n	80076b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 8090 	beq.w	80077da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	4a44      	ldr	r2, [pc, #272]	; (80077d0 <UART_SetConfig+0x5c4>)
 80076c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076cc:	005a      	lsls	r2, r3, #1
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	441a      	add	r2, r3
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	fbb2 f3f3 	udiv	r3, r2, r3
 80076de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	2b0f      	cmp	r3, #15
 80076e4:	d916      	bls.n	8007714 <UART_SetConfig+0x508>
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ec:	d212      	bcs.n	8007714 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f023 030f 	bic.w	r3, r3, #15
 80076f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	085b      	lsrs	r3, r3, #1
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	b29a      	uxth	r2, r3
 8007704:	8bfb      	ldrh	r3, [r7, #30]
 8007706:	4313      	orrs	r3, r2
 8007708:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	8bfa      	ldrh	r2, [r7, #30]
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	e062      	b.n	80077da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800771a:	e05e      	b.n	80077da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800771c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007720:	2b08      	cmp	r3, #8
 8007722:	d828      	bhi.n	8007776 <UART_SetConfig+0x56a>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <UART_SetConfig+0x520>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	08007751 	.word	0x08007751
 8007730:	08007759 	.word	0x08007759
 8007734:	08007761 	.word	0x08007761
 8007738:	08007777 	.word	0x08007777
 800773c:	08007767 	.word	0x08007767
 8007740:	08007777 	.word	0x08007777
 8007744:	08007777 	.word	0x08007777
 8007748:	08007777 	.word	0x08007777
 800774c:	0800776f 	.word	0x0800776f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007750:	f7fe f8e2 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8007754:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007756:	e014      	b.n	8007782 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007758:	f7fe f8f4 	bl	8005944 <HAL_RCC_GetPCLK2Freq>
 800775c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800775e:	e010      	b.n	8007782 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007760:	4b1a      	ldr	r3, [pc, #104]	; (80077cc <UART_SetConfig+0x5c0>)
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007764:	e00d      	b.n	8007782 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007766:	f7fe f86b 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 800776a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800776c:	e009      	b.n	8007782 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800776e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007774:	e005      	b.n	8007782 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007780:	bf00      	nop
    }

    if (pclk != 0U)
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	2b00      	cmp	r3, #0
 8007786:	d028      	beq.n	80077da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	4a10      	ldr	r2, [pc, #64]	; (80077d0 <UART_SetConfig+0x5c4>)
 800778e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007792:	461a      	mov	r2, r3
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	fbb3 f2f2 	udiv	r2, r3, r2
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	085b      	lsrs	r3, r3, #1
 80077a0:	441a      	add	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	2b0f      	cmp	r3, #15
 80077b0:	d910      	bls.n	80077d4 <UART_SetConfig+0x5c8>
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b8:	d20c      	bcs.n	80077d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	b29a      	uxth	r2, r3
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	60da      	str	r2, [r3, #12]
 80077c4:	e009      	b.n	80077da <UART_SetConfig+0x5ce>
 80077c6:	bf00      	nop
 80077c8:	40008000 	.word	0x40008000
 80077cc:	00f42400 	.word	0x00f42400
 80077d0:	0800bb58 	.word	0x0800bb58
      }
      else
      {
        ret = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2201      	movs	r2, #1
 80077de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2200      	movs	r2, #0
 80077ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2200      	movs	r2, #0
 80077f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80077f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3730      	adds	r7, #48	; 0x30
 80077fe:	46bd      	mov	sp, r7
 8007800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	f003 0308 	and.w	r3, r3, #8
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00a      	beq.n	800782e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	f003 0304 	and.w	r3, r3, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ba:	f003 0320 	and.w	r3, r3, #32
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d01a      	beq.n	800791a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007902:	d10a      	bne.n	800791a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	605a      	str	r2, [r3, #4]
  }
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b098      	sub	sp, #96	; 0x60
 800794c:	af02      	add	r7, sp, #8
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007958:	f7fa fda4 	bl	80024a4 <HAL_GetTick>
 800795c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0308 	and.w	r3, r3, #8
 8007968:	2b08      	cmp	r3, #8
 800796a:	d12f      	bne.n	80079cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800796c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007974:	2200      	movs	r2, #0
 8007976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f88e 	bl	8007a9c <UART_WaitOnFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d022      	beq.n	80079cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800799a:	653b      	str	r3, [r7, #80]	; 0x50
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a4:	647b      	str	r3, [r7, #68]	; 0x44
 80079a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e6      	bne.n	8007986 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e063      	b.n	8007a94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d149      	bne.n	8007a6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e2:	2200      	movs	r2, #0
 80079e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f857 	bl	8007a9c <UART_WaitOnFlagUntilTimeout>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d03c      	beq.n	8007a6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	623b      	str	r3, [r7, #32]
   return(result);
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a12:	633b      	str	r3, [r7, #48]	; 0x30
 8007a14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e6      	bne.n	80079f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f023 0301 	bic.w	r3, r3, #1
 8007a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a46:	61fa      	str	r2, [r7, #28]
 8007a48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	69b9      	ldr	r1, [r7, #24]
 8007a4c:	69fa      	ldr	r2, [r7, #28]
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	617b      	str	r3, [r7, #20]
   return(result);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e012      	b.n	8007a94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3758      	adds	r7, #88	; 0x58
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aac:	e04f      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab4:	d04b      	beq.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab6:	f7fa fcf5 	bl	80024a4 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d302      	bcc.n	8007acc <UART_WaitOnFlagUntilTimeout+0x30>
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e04e      	b.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d037      	beq.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b80      	cmp	r3, #128	; 0x80
 8007ae2:	d034      	beq.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2b40      	cmp	r3, #64	; 0x40
 8007ae8:	d031      	beq.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	f003 0308 	and.w	r3, r3, #8
 8007af4:	2b08      	cmp	r3, #8
 8007af6:	d110      	bne.n	8007b1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2208      	movs	r2, #8
 8007afe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f838 	bl	8007b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2208      	movs	r2, #8
 8007b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e029      	b.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b28:	d111      	bne.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f81e 	bl	8007b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e00f      	b.n	8007b6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4013      	ands	r3, r2
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	bf0c      	ite	eq
 8007b5e:	2301      	moveq	r3, #1
 8007b60:	2300      	movne	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d0a0      	beq.n	8007aae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b095      	sub	sp, #84	; 0x54
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e6      	bne.n	8007b7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bc6:	f023 0301 	bic.w	r3, r3, #1
 8007bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e3      	bne.n	8007bb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d118      	bne.n	8007c22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f023 0310 	bic.w	r3, r3, #16
 8007c04:	647b      	str	r3, [r7, #68]	; 0x44
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c0e:	61bb      	str	r3, [r7, #24]
 8007c10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6979      	ldr	r1, [r7, #20]
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e6      	bne.n	8007bf0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c36:	bf00      	nop
 8007c38:	3754      	adds	r7, #84	; 0x54
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b083      	sub	sp, #12
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c4a:	bf00      	nop
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c72:	bf00      	nop
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b085      	sub	sp, #20
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d101      	bne.n	8007c94 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c90:	2302      	movs	r3, #2
 8007c92:	e027      	b.n	8007ce4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2224      	movs	r2, #36	; 0x24
 8007ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0201 	bic.w	r2, r2, #1
 8007cba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007cc2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e02d      	b.n	8007d64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2224      	movs	r2, #36	; 0x24
 8007d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0201 	bic.w	r2, r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f84f 	bl	8007de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d101      	bne.n	8007d84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d80:	2302      	movs	r3, #2
 8007d82:	e02d      	b.n	8007de0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2224      	movs	r2, #36	; 0x24
 8007d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f811 	bl	8007de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d108      	bne.n	8007e0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e08:	e031      	b.n	8007e6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e0a:	2308      	movs	r3, #8
 8007e0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e0e:	2308      	movs	r3, #8
 8007e10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	0e5b      	lsrs	r3, r3, #25
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	0f5b      	lsrs	r3, r3, #29
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	7b3a      	ldrb	r2, [r7, #12]
 8007e36:	4911      	ldr	r1, [pc, #68]	; (8007e7c <UARTEx_SetNbDataToProcess+0x94>)
 8007e38:	5c8a      	ldrb	r2, [r1, r2]
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e3e:	7b3a      	ldrb	r2, [r7, #12]
 8007e40:	490f      	ldr	r1, [pc, #60]	; (8007e80 <UARTEx_SetNbDataToProcess+0x98>)
 8007e42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	7b7a      	ldrb	r2, [r7, #13]
 8007e54:	4909      	ldr	r1, [pc, #36]	; (8007e7c <UARTEx_SetNbDataToProcess+0x94>)
 8007e56:	5c8a      	ldrb	r2, [r1, r2]
 8007e58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e5c:	7b7a      	ldrb	r2, [r7, #13]
 8007e5e:	4908      	ldr	r1, [pc, #32]	; (8007e80 <UARTEx_SetNbDataToProcess+0x98>)
 8007e60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e62:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e6e:	bf00      	nop
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	0800bb70 	.word	0x0800bb70
 8007e80:	0800bb78 	.word	0x0800bb78

08007e84 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e04a      	b.n	8007f2c <HAL_USART_Init+0xa8>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d114      	bne.n	8007ecc <HAL_USART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    USART_InitCallbacksToDefault(husart);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f88a 	bl	8007fc4 <USART_InitCallbacksToDefault>

    if (husart->MspInitCallback == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d103      	bne.n	8007ec2 <HAL_USART_Init+0x3e>
    {
      husart->MspInitCallback = HAL_USART_MspInit;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a1d      	ldr	r2, [pc, #116]	; (8007f34 <HAL_USART_Init+0xb0>)
 8007ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0201 	bic.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f8db 	bl	80080a0 <USART_SetConfig>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_USART_Init+0x70>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e01b      	b.n	8007f2c <HAL_USART_Init+0xa8>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f02:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f12:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0201 	orr.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fba3 	bl	8008670 <USART_CheckIdleState>
 8007f2a:	4603      	mov	r3, r0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	0800217d 	.word	0x0800217d

08007f38 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_USART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback can be implemented in the user file.
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_USART_RxHalfCpltCallback>:
  * @brief Rx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_RxHalfCpltCallback can be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_USART_AbortCpltCallback>:
  * @brief  USART Abort Complete callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USART_AbortCpltCallback(USART_HandleTypeDef *husart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USART_InitCallbacksToDefault>:
  * @param  husart USART handle.
  * @retval none
  */
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
void USART_InitCallbacksToDefault(USART_HandleTypeDef *husart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Init the USART Callback settings */
  husart->TxHalfCpltCallback        = HAL_USART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a10      	ldr	r2, [pc, #64]	; (8008010 <USART_InitCallbacksToDefault+0x4c>)
 8007fd0:	661a      	str	r2, [r3, #96]	; 0x60
  husart->TxCpltCallback            = HAL_USART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a0f      	ldr	r2, [pc, #60]	; (8008014 <USART_InitCallbacksToDefault+0x50>)
 8007fd6:	665a      	str	r2, [r3, #100]	; 0x64
  husart->RxHalfCpltCallback        = HAL_USART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a0f      	ldr	r2, [pc, #60]	; (8008018 <USART_InitCallbacksToDefault+0x54>)
 8007fdc:	669a      	str	r2, [r3, #104]	; 0x68
  husart->RxCpltCallback            = HAL_USART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a0e      	ldr	r2, [pc, #56]	; (800801c <USART_InitCallbacksToDefault+0x58>)
 8007fe2:	66da      	str	r2, [r3, #108]	; 0x6c
  husart->TxRxCpltCallback          = HAL_USART_TxRxCpltCallback;          /* Legacy weak TxRxCpltCallback          */
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a0e      	ldr	r2, [pc, #56]	; (8008020 <USART_InitCallbacksToDefault+0x5c>)
 8007fe8:	671a      	str	r2, [r3, #112]	; 0x70
  husart->ErrorCallback             = HAL_USART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a0d      	ldr	r2, [pc, #52]	; (8008024 <USART_InitCallbacksToDefault+0x60>)
 8007fee:	675a      	str	r2, [r3, #116]	; 0x74
  husart->AbortCpltCallback         = HAL_USART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a0d      	ldr	r2, [pc, #52]	; (8008028 <USART_InitCallbacksToDefault+0x64>)
 8007ff4:	679a      	str	r2, [r3, #120]	; 0x78
  husart->RxFifoFullCallback        = HAL_USARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a0c      	ldr	r2, [pc, #48]	; (800802c <USART_InitCallbacksToDefault+0x68>)
 8007ffa:	67da      	str	r2, [r3, #124]	; 0x7c
  husart->TxFifoEmptyCallback       = HAL_USARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a0c      	ldr	r2, [pc, #48]	; (8008030 <USART_InitCallbacksToDefault+0x6c>)
 8008000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	08007f4d 	.word	0x08007f4d
 8008014:	08007f39 	.word	0x08007f39
 8008018:	08007f75 	.word	0x08007f75
 800801c:	08007f61 	.word	0x08007f61
 8008020:	08007f89 	.word	0x08007f89
 8008024:	08007f9d 	.word	0x08007f9d
 8008028:	08007fb1 	.word	0x08007fb1
 800802c:	080086f7 	.word	0x080086f7
 8008030:	0800870b 	.word	0x0800870b

08008034 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	603b      	str	r3, [r7, #0]
 8008040:	4613      	mov	r3, r2
 8008042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008044:	e018      	b.n	8008078 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800804c:	d014      	beq.n	8008078 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800804e:	f7fa fa29 	bl	80024a4 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	429a      	cmp	r2, r3
 800805c:	d302      	bcc.n	8008064 <USART_WaitOnFlagUntilTimeout+0x30>
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d109      	bne.n	8008078 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e00f      	b.n	8008098 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	69da      	ldr	r2, [r3, #28]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	4013      	ands	r3, r2
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	429a      	cmp	r2, r3
 8008086:	bf0c      	ite	eq
 8008088:	2301      	moveq	r3, #1
 800808a:	2300      	movne	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	461a      	mov	r2, r3
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	429a      	cmp	r2, r3
 8008094:	d0d7      	beq.n	8008046 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	4b96      	ldr	r3, [pc, #600]	; (8008328 <USART_SetConfig+0x288>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6812      	ldr	r2, [r2, #0]
 80080d4:	6979      	ldr	r1, [r7, #20]
 80080d6:	430b      	orrs	r3, r1
 80080d8:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80080da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080de:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699a      	ldr	r2, [r3, #24]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800810e:	f023 0309 	bic.w	r3, r3, #9
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	6979      	ldr	r1, [r7, #20]
 8008118:	430b      	orrs	r3, r1
 800811a:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	f023 010f 	bic.w	r1, r3, #15
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a7d      	ldr	r2, [pc, #500]	; (800832c <USART_SetConfig+0x28c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d120      	bne.n	800817e <USART_SetConfig+0xde>
 800813c:	4b7c      	ldr	r3, [pc, #496]	; (8008330 <USART_SetConfig+0x290>)
 800813e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	2b03      	cmp	r3, #3
 8008148:	d816      	bhi.n	8008178 <USART_SetConfig+0xd8>
 800814a:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <USART_SetConfig+0xb0>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	08008161 	.word	0x08008161
 8008154:	0800816d 	.word	0x0800816d
 8008158:	08008167 	.word	0x08008167
 800815c:	08008173 	.word	0x08008173
 8008160:	2301      	movs	r3, #1
 8008162:	77fb      	strb	r3, [r7, #31]
 8008164:	e06b      	b.n	800823e <USART_SetConfig+0x19e>
 8008166:	2302      	movs	r3, #2
 8008168:	77fb      	strb	r3, [r7, #31]
 800816a:	e068      	b.n	800823e <USART_SetConfig+0x19e>
 800816c:	2304      	movs	r3, #4
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	e065      	b.n	800823e <USART_SetConfig+0x19e>
 8008172:	2308      	movs	r3, #8
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e062      	b.n	800823e <USART_SetConfig+0x19e>
 8008178:	2310      	movs	r3, #16
 800817a:	77fb      	strb	r3, [r7, #31]
 800817c:	e05f      	b.n	800823e <USART_SetConfig+0x19e>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a6c      	ldr	r2, [pc, #432]	; (8008334 <USART_SetConfig+0x294>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d132      	bne.n	80081ee <USART_SetConfig+0x14e>
 8008188:	4b69      	ldr	r3, [pc, #420]	; (8008330 <USART_SetConfig+0x290>)
 800818a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818e:	f003 030c 	and.w	r3, r3, #12
 8008192:	2b0c      	cmp	r3, #12
 8008194:	d828      	bhi.n	80081e8 <USART_SetConfig+0x148>
 8008196:	a201      	add	r2, pc, #4	; (adr r2, 800819c <USART_SetConfig+0xfc>)
 8008198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819c:	080081d1 	.word	0x080081d1
 80081a0:	080081e9 	.word	0x080081e9
 80081a4:	080081e9 	.word	0x080081e9
 80081a8:	080081e9 	.word	0x080081e9
 80081ac:	080081dd 	.word	0x080081dd
 80081b0:	080081e9 	.word	0x080081e9
 80081b4:	080081e9 	.word	0x080081e9
 80081b8:	080081e9 	.word	0x080081e9
 80081bc:	080081d7 	.word	0x080081d7
 80081c0:	080081e9 	.word	0x080081e9
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	080081e9 	.word	0x080081e9
 80081cc:	080081e3 	.word	0x080081e3
 80081d0:	2300      	movs	r3, #0
 80081d2:	77fb      	strb	r3, [r7, #31]
 80081d4:	e033      	b.n	800823e <USART_SetConfig+0x19e>
 80081d6:	2302      	movs	r3, #2
 80081d8:	77fb      	strb	r3, [r7, #31]
 80081da:	e030      	b.n	800823e <USART_SetConfig+0x19e>
 80081dc:	2304      	movs	r3, #4
 80081de:	77fb      	strb	r3, [r7, #31]
 80081e0:	e02d      	b.n	800823e <USART_SetConfig+0x19e>
 80081e2:	2308      	movs	r3, #8
 80081e4:	77fb      	strb	r3, [r7, #31]
 80081e6:	e02a      	b.n	800823e <USART_SetConfig+0x19e>
 80081e8:	2310      	movs	r3, #16
 80081ea:	77fb      	strb	r3, [r7, #31]
 80081ec:	e027      	b.n	800823e <USART_SetConfig+0x19e>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a51      	ldr	r2, [pc, #324]	; (8008338 <USART_SetConfig+0x298>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d120      	bne.n	800823a <USART_SetConfig+0x19a>
 80081f8:	4b4d      	ldr	r3, [pc, #308]	; (8008330 <USART_SetConfig+0x290>)
 80081fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008202:	2b30      	cmp	r3, #48	; 0x30
 8008204:	d013      	beq.n	800822e <USART_SetConfig+0x18e>
 8008206:	2b30      	cmp	r3, #48	; 0x30
 8008208:	d814      	bhi.n	8008234 <USART_SetConfig+0x194>
 800820a:	2b20      	cmp	r3, #32
 800820c:	d009      	beq.n	8008222 <USART_SetConfig+0x182>
 800820e:	2b20      	cmp	r3, #32
 8008210:	d810      	bhi.n	8008234 <USART_SetConfig+0x194>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <USART_SetConfig+0x17c>
 8008216:	2b10      	cmp	r3, #16
 8008218:	d006      	beq.n	8008228 <USART_SetConfig+0x188>
 800821a:	e00b      	b.n	8008234 <USART_SetConfig+0x194>
 800821c:	2300      	movs	r3, #0
 800821e:	77fb      	strb	r3, [r7, #31]
 8008220:	e00d      	b.n	800823e <USART_SetConfig+0x19e>
 8008222:	2302      	movs	r3, #2
 8008224:	77fb      	strb	r3, [r7, #31]
 8008226:	e00a      	b.n	800823e <USART_SetConfig+0x19e>
 8008228:	2304      	movs	r3, #4
 800822a:	77fb      	strb	r3, [r7, #31]
 800822c:	e007      	b.n	800823e <USART_SetConfig+0x19e>
 800822e:	2308      	movs	r3, #8
 8008230:	77fb      	strb	r3, [r7, #31]
 8008232:	e004      	b.n	800823e <USART_SetConfig+0x19e>
 8008234:	2310      	movs	r3, #16
 8008236:	77fb      	strb	r3, [r7, #31]
 8008238:	e001      	b.n	800823e <USART_SetConfig+0x19e>
 800823a:	2310      	movs	r3, #16
 800823c:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800823e:	7ffb      	ldrb	r3, [r7, #31]
 8008240:	2b08      	cmp	r3, #8
 8008242:	f200 81e2 	bhi.w	800860a <USART_SetConfig+0x56a>
 8008246:	a201      	add	r2, pc, #4	; (adr r2, 800824c <USART_SetConfig+0x1ac>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	08008271 	.word	0x08008271
 8008250:	0800833d 	.word	0x0800833d
 8008254:	080083f3 	.word	0x080083f3
 8008258:	0800860b 	.word	0x0800860b
 800825c:	080084a3 	.word	0x080084a3
 8008260:	0800860b 	.word	0x0800860b
 8008264:	0800860b 	.word	0x0800860b
 8008268:	0800860b 	.word	0x0800860b
 800826c:	08008559 	.word	0x08008559
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008270:	f7fd fb52 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8008274:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	d044      	beq.n	8008308 <USART_SetConfig+0x268>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	2b01      	cmp	r3, #1
 8008284:	d03e      	beq.n	8008304 <USART_SetConfig+0x264>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	2b02      	cmp	r3, #2
 800828c:	d038      	beq.n	8008300 <USART_SetConfig+0x260>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	2b03      	cmp	r3, #3
 8008294:	d032      	beq.n	80082fc <USART_SetConfig+0x25c>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	2b04      	cmp	r3, #4
 800829c:	d02c      	beq.n	80082f8 <USART_SetConfig+0x258>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b05      	cmp	r3, #5
 80082a4:	d026      	beq.n	80082f4 <USART_SetConfig+0x254>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b06      	cmp	r3, #6
 80082ac:	d020      	beq.n	80082f0 <USART_SetConfig+0x250>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b07      	cmp	r3, #7
 80082b4:	d01a      	beq.n	80082ec <USART_SetConfig+0x24c>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	2b08      	cmp	r3, #8
 80082bc:	d014      	beq.n	80082e8 <USART_SetConfig+0x248>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	2b09      	cmp	r3, #9
 80082c4:	d00e      	beq.n	80082e4 <USART_SetConfig+0x244>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	2b0a      	cmp	r3, #10
 80082cc:	d008      	beq.n	80082e0 <USART_SetConfig+0x240>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	2b0b      	cmp	r3, #11
 80082d4:	d102      	bne.n	80082dc <USART_SetConfig+0x23c>
 80082d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082da:	e016      	b.n	800830a <USART_SetConfig+0x26a>
 80082dc:	2301      	movs	r3, #1
 80082de:	e014      	b.n	800830a <USART_SetConfig+0x26a>
 80082e0:	2380      	movs	r3, #128	; 0x80
 80082e2:	e012      	b.n	800830a <USART_SetConfig+0x26a>
 80082e4:	2340      	movs	r3, #64	; 0x40
 80082e6:	e010      	b.n	800830a <USART_SetConfig+0x26a>
 80082e8:	2320      	movs	r3, #32
 80082ea:	e00e      	b.n	800830a <USART_SetConfig+0x26a>
 80082ec:	2310      	movs	r3, #16
 80082ee:	e00c      	b.n	800830a <USART_SetConfig+0x26a>
 80082f0:	230c      	movs	r3, #12
 80082f2:	e00a      	b.n	800830a <USART_SetConfig+0x26a>
 80082f4:	230a      	movs	r3, #10
 80082f6:	e008      	b.n	800830a <USART_SetConfig+0x26a>
 80082f8:	2308      	movs	r3, #8
 80082fa:	e006      	b.n	800830a <USART_SetConfig+0x26a>
 80082fc:	2306      	movs	r3, #6
 80082fe:	e004      	b.n	800830a <USART_SetConfig+0x26a>
 8008300:	2304      	movs	r3, #4
 8008302:	e002      	b.n	800830a <USART_SetConfig+0x26a>
 8008304:	2302      	movs	r3, #2
 8008306:	e000      	b.n	800830a <USART_SetConfig+0x26a>
 8008308:	2301      	movs	r3, #1
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008310:	005a      	lsls	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	085b      	lsrs	r3, r3, #1
 8008318:	441a      	add	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008322:	61bb      	str	r3, [r7, #24]
      break;
 8008324:	e174      	b.n	8008610 <USART_SetConfig+0x570>
 8008326:	bf00      	nop
 8008328:	cfff69f3 	.word	0xcfff69f3
 800832c:	40013800 	.word	0x40013800
 8008330:	40021000 	.word	0x40021000
 8008334:	40004400 	.word	0x40004400
 8008338:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800833c:	f7fd fb02 	bl	8005944 <HAL_RCC_GetPCLK2Freq>
 8008340:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b00      	cmp	r3, #0
 8008348:	d044      	beq.n	80083d4 <USART_SetConfig+0x334>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	2b01      	cmp	r3, #1
 8008350:	d03e      	beq.n	80083d0 <USART_SetConfig+0x330>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	2b02      	cmp	r3, #2
 8008358:	d038      	beq.n	80083cc <USART_SetConfig+0x32c>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	2b03      	cmp	r3, #3
 8008360:	d032      	beq.n	80083c8 <USART_SetConfig+0x328>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	2b04      	cmp	r3, #4
 8008368:	d02c      	beq.n	80083c4 <USART_SetConfig+0x324>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	2b05      	cmp	r3, #5
 8008370:	d026      	beq.n	80083c0 <USART_SetConfig+0x320>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	2b06      	cmp	r3, #6
 8008378:	d020      	beq.n	80083bc <USART_SetConfig+0x31c>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	2b07      	cmp	r3, #7
 8008380:	d01a      	beq.n	80083b8 <USART_SetConfig+0x318>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	2b08      	cmp	r3, #8
 8008388:	d014      	beq.n	80083b4 <USART_SetConfig+0x314>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	2b09      	cmp	r3, #9
 8008390:	d00e      	beq.n	80083b0 <USART_SetConfig+0x310>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008396:	2b0a      	cmp	r3, #10
 8008398:	d008      	beq.n	80083ac <USART_SetConfig+0x30c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	2b0b      	cmp	r3, #11
 80083a0:	d102      	bne.n	80083a8 <USART_SetConfig+0x308>
 80083a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083a6:	e016      	b.n	80083d6 <USART_SetConfig+0x336>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e014      	b.n	80083d6 <USART_SetConfig+0x336>
 80083ac:	2380      	movs	r3, #128	; 0x80
 80083ae:	e012      	b.n	80083d6 <USART_SetConfig+0x336>
 80083b0:	2340      	movs	r3, #64	; 0x40
 80083b2:	e010      	b.n	80083d6 <USART_SetConfig+0x336>
 80083b4:	2320      	movs	r3, #32
 80083b6:	e00e      	b.n	80083d6 <USART_SetConfig+0x336>
 80083b8:	2310      	movs	r3, #16
 80083ba:	e00c      	b.n	80083d6 <USART_SetConfig+0x336>
 80083bc:	230c      	movs	r3, #12
 80083be:	e00a      	b.n	80083d6 <USART_SetConfig+0x336>
 80083c0:	230a      	movs	r3, #10
 80083c2:	e008      	b.n	80083d6 <USART_SetConfig+0x336>
 80083c4:	2308      	movs	r3, #8
 80083c6:	e006      	b.n	80083d6 <USART_SetConfig+0x336>
 80083c8:	2306      	movs	r3, #6
 80083ca:	e004      	b.n	80083d6 <USART_SetConfig+0x336>
 80083cc:	2304      	movs	r3, #4
 80083ce:	e002      	b.n	80083d6 <USART_SetConfig+0x336>
 80083d0:	2302      	movs	r3, #2
 80083d2:	e000      	b.n	80083d6 <USART_SetConfig+0x336>
 80083d4:	2301      	movs	r3, #1
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083dc:	005a      	lsls	r2, r3, #1
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	441a      	add	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ee:	61bb      	str	r3, [r7, #24]
      break;
 80083f0:	e10e      	b.n	8008610 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d044      	beq.n	8008484 <USART_SetConfig+0x3e4>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d03e      	beq.n	8008480 <USART_SetConfig+0x3e0>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	2b02      	cmp	r3, #2
 8008408:	d038      	beq.n	800847c <USART_SetConfig+0x3dc>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	2b03      	cmp	r3, #3
 8008410:	d032      	beq.n	8008478 <USART_SetConfig+0x3d8>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	2b04      	cmp	r3, #4
 8008418:	d02c      	beq.n	8008474 <USART_SetConfig+0x3d4>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841e:	2b05      	cmp	r3, #5
 8008420:	d026      	beq.n	8008470 <USART_SetConfig+0x3d0>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	2b06      	cmp	r3, #6
 8008428:	d020      	beq.n	800846c <USART_SetConfig+0x3cc>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842e:	2b07      	cmp	r3, #7
 8008430:	d01a      	beq.n	8008468 <USART_SetConfig+0x3c8>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008436:	2b08      	cmp	r3, #8
 8008438:	d014      	beq.n	8008464 <USART_SetConfig+0x3c4>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	2b09      	cmp	r3, #9
 8008440:	d00e      	beq.n	8008460 <USART_SetConfig+0x3c0>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	2b0a      	cmp	r3, #10
 8008448:	d008      	beq.n	800845c <USART_SetConfig+0x3bc>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	2b0b      	cmp	r3, #11
 8008450:	d102      	bne.n	8008458 <USART_SetConfig+0x3b8>
 8008452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008456:	e016      	b.n	8008486 <USART_SetConfig+0x3e6>
 8008458:	2301      	movs	r3, #1
 800845a:	e014      	b.n	8008486 <USART_SetConfig+0x3e6>
 800845c:	2380      	movs	r3, #128	; 0x80
 800845e:	e012      	b.n	8008486 <USART_SetConfig+0x3e6>
 8008460:	2340      	movs	r3, #64	; 0x40
 8008462:	e010      	b.n	8008486 <USART_SetConfig+0x3e6>
 8008464:	2320      	movs	r3, #32
 8008466:	e00e      	b.n	8008486 <USART_SetConfig+0x3e6>
 8008468:	2310      	movs	r3, #16
 800846a:	e00c      	b.n	8008486 <USART_SetConfig+0x3e6>
 800846c:	230c      	movs	r3, #12
 800846e:	e00a      	b.n	8008486 <USART_SetConfig+0x3e6>
 8008470:	230a      	movs	r3, #10
 8008472:	e008      	b.n	8008486 <USART_SetConfig+0x3e6>
 8008474:	2308      	movs	r3, #8
 8008476:	e006      	b.n	8008486 <USART_SetConfig+0x3e6>
 8008478:	2306      	movs	r3, #6
 800847a:	e004      	b.n	8008486 <USART_SetConfig+0x3e6>
 800847c:	2304      	movs	r3, #4
 800847e:	e002      	b.n	8008486 <USART_SetConfig+0x3e6>
 8008480:	2302      	movs	r3, #2
 8008482:	e000      	b.n	8008486 <USART_SetConfig+0x3e6>
 8008484:	2301      	movs	r3, #1
 8008486:	4a79      	ldr	r2, [pc, #484]	; (800866c <USART_SetConfig+0x5cc>)
 8008488:	fbb2 f3f3 	udiv	r3, r2, r3
 800848c:	005a      	lsls	r2, r3, #1
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	085b      	lsrs	r3, r3, #1
 8008494:	441a      	add	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	fbb2 f3f3 	udiv	r3, r2, r3
 800849e:	61bb      	str	r3, [r7, #24]
      break;
 80084a0:	e0b6      	b.n	8008610 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80084a2:	f7fd f9cd 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80084a6:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d044      	beq.n	800853a <USART_SetConfig+0x49a>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d03e      	beq.n	8008536 <USART_SetConfig+0x496>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d038      	beq.n	8008532 <USART_SetConfig+0x492>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d032      	beq.n	800852e <USART_SetConfig+0x48e>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d02c      	beq.n	800852a <USART_SetConfig+0x48a>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	2b05      	cmp	r3, #5
 80084d6:	d026      	beq.n	8008526 <USART_SetConfig+0x486>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084dc:	2b06      	cmp	r3, #6
 80084de:	d020      	beq.n	8008522 <USART_SetConfig+0x482>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	2b07      	cmp	r3, #7
 80084e6:	d01a      	beq.n	800851e <USART_SetConfig+0x47e>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d014      	beq.n	800851a <USART_SetConfig+0x47a>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	2b09      	cmp	r3, #9
 80084f6:	d00e      	beq.n	8008516 <USART_SetConfig+0x476>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fc:	2b0a      	cmp	r3, #10
 80084fe:	d008      	beq.n	8008512 <USART_SetConfig+0x472>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	2b0b      	cmp	r3, #11
 8008506:	d102      	bne.n	800850e <USART_SetConfig+0x46e>
 8008508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800850c:	e016      	b.n	800853c <USART_SetConfig+0x49c>
 800850e:	2301      	movs	r3, #1
 8008510:	e014      	b.n	800853c <USART_SetConfig+0x49c>
 8008512:	2380      	movs	r3, #128	; 0x80
 8008514:	e012      	b.n	800853c <USART_SetConfig+0x49c>
 8008516:	2340      	movs	r3, #64	; 0x40
 8008518:	e010      	b.n	800853c <USART_SetConfig+0x49c>
 800851a:	2320      	movs	r3, #32
 800851c:	e00e      	b.n	800853c <USART_SetConfig+0x49c>
 800851e:	2310      	movs	r3, #16
 8008520:	e00c      	b.n	800853c <USART_SetConfig+0x49c>
 8008522:	230c      	movs	r3, #12
 8008524:	e00a      	b.n	800853c <USART_SetConfig+0x49c>
 8008526:	230a      	movs	r3, #10
 8008528:	e008      	b.n	800853c <USART_SetConfig+0x49c>
 800852a:	2308      	movs	r3, #8
 800852c:	e006      	b.n	800853c <USART_SetConfig+0x49c>
 800852e:	2306      	movs	r3, #6
 8008530:	e004      	b.n	800853c <USART_SetConfig+0x49c>
 8008532:	2304      	movs	r3, #4
 8008534:	e002      	b.n	800853c <USART_SetConfig+0x49c>
 8008536:	2302      	movs	r3, #2
 8008538:	e000      	b.n	800853c <USART_SetConfig+0x49c>
 800853a:	2301      	movs	r3, #1
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008542:	005a      	lsls	r2, r3, #1
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	085b      	lsrs	r3, r3, #1
 800854a:	441a      	add	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	fbb2 f3f3 	udiv	r3, r2, r3
 8008554:	61bb      	str	r3, [r7, #24]
      break;
 8008556:	e05b      	b.n	8008610 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	2b00      	cmp	r3, #0
 800855e:	d044      	beq.n	80085ea <USART_SetConfig+0x54a>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	2b01      	cmp	r3, #1
 8008566:	d03e      	beq.n	80085e6 <USART_SetConfig+0x546>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856c:	2b02      	cmp	r3, #2
 800856e:	d038      	beq.n	80085e2 <USART_SetConfig+0x542>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	2b03      	cmp	r3, #3
 8008576:	d032      	beq.n	80085de <USART_SetConfig+0x53e>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	2b04      	cmp	r3, #4
 800857e:	d02c      	beq.n	80085da <USART_SetConfig+0x53a>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	2b05      	cmp	r3, #5
 8008586:	d026      	beq.n	80085d6 <USART_SetConfig+0x536>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	2b06      	cmp	r3, #6
 800858e:	d020      	beq.n	80085d2 <USART_SetConfig+0x532>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	2b07      	cmp	r3, #7
 8008596:	d01a      	beq.n	80085ce <USART_SetConfig+0x52e>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859c:	2b08      	cmp	r3, #8
 800859e:	d014      	beq.n	80085ca <USART_SetConfig+0x52a>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	2b09      	cmp	r3, #9
 80085a6:	d00e      	beq.n	80085c6 <USART_SetConfig+0x526>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	2b0a      	cmp	r3, #10
 80085ae:	d008      	beq.n	80085c2 <USART_SetConfig+0x522>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b4:	2b0b      	cmp	r3, #11
 80085b6:	d102      	bne.n	80085be <USART_SetConfig+0x51e>
 80085b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085bc:	e016      	b.n	80085ec <USART_SetConfig+0x54c>
 80085be:	2301      	movs	r3, #1
 80085c0:	e014      	b.n	80085ec <USART_SetConfig+0x54c>
 80085c2:	2380      	movs	r3, #128	; 0x80
 80085c4:	e012      	b.n	80085ec <USART_SetConfig+0x54c>
 80085c6:	2340      	movs	r3, #64	; 0x40
 80085c8:	e010      	b.n	80085ec <USART_SetConfig+0x54c>
 80085ca:	2320      	movs	r3, #32
 80085cc:	e00e      	b.n	80085ec <USART_SetConfig+0x54c>
 80085ce:	2310      	movs	r3, #16
 80085d0:	e00c      	b.n	80085ec <USART_SetConfig+0x54c>
 80085d2:	230c      	movs	r3, #12
 80085d4:	e00a      	b.n	80085ec <USART_SetConfig+0x54c>
 80085d6:	230a      	movs	r3, #10
 80085d8:	e008      	b.n	80085ec <USART_SetConfig+0x54c>
 80085da:	2308      	movs	r3, #8
 80085dc:	e006      	b.n	80085ec <USART_SetConfig+0x54c>
 80085de:	2306      	movs	r3, #6
 80085e0:	e004      	b.n	80085ec <USART_SetConfig+0x54c>
 80085e2:	2304      	movs	r3, #4
 80085e4:	e002      	b.n	80085ec <USART_SetConfig+0x54c>
 80085e6:	2302      	movs	r3, #2
 80085e8:	e000      	b.n	80085ec <USART_SetConfig+0x54c>
 80085ea:	2301      	movs	r3, #1
 80085ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80085f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f4:	005a      	lsls	r2, r3, #1
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	441a      	add	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	fbb2 f3f3 	udiv	r3, r2, r3
 8008606:	61bb      	str	r3, [r7, #24]
      break;
 8008608:	e002      	b.n	8008610 <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	77bb      	strb	r3, [r7, #30]
      break;
 800860e:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	2b0f      	cmp	r3, #15
 8008614:	d916      	bls.n	8008644 <USART_SetConfig+0x5a4>
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800861c:	d212      	bcs.n	8008644 <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f023 030f 	bic.w	r3, r3, #15
 8008626:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	085b      	lsrs	r3, r3, #1
 800862c:	b29b      	uxth	r3, r3
 800862e:	f003 0307 	and.w	r3, r3, #7
 8008632:	b29a      	uxth	r2, r3
 8008634:	89fb      	ldrh	r3, [r7, #14]
 8008636:	4313      	orrs	r3, r2
 8008638:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	89fa      	ldrh	r2, [r7, #14]
 8008640:	60da      	str	r2, [r3, #12]
 8008642:	e001      	b.n	8008648 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8008660:	7fbb      	ldrb	r3, [r7, #30]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3720      	adds	r7, #32
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	00f42400 	.word	0x00f42400

08008670 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af02      	add	r7, sp, #8
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800867e:	f7f9 ff11 	bl	80024a4 <HAL_GetTick>
 8008682:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	2b08      	cmp	r3, #8
 8008690:	d10e      	bne.n	80086b0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fcc7 	bl	8008034 <USART_WaitOnFlagUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e01e      	b.n	80086ee <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0304 	and.w	r3, r3, #4
 80086ba:	2b04      	cmp	r3, #4
 80086bc:	d10e      	bne.n	80086dc <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80086be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff fcb1 	bl	8008034 <USART_WaitOnFlagUntilTimeout>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e008      	b.n	80086ee <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800871e:	b480      	push	{r7}
 8008720:	b085      	sub	sp, #20
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_USARTEx_DisableFifoMode+0x16>
 8008730:	2302      	movs	r3, #2
 8008732:	e027      	b.n	8008784 <HAL_USARTEx_DisableFifoMode+0x66>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0201 	bic.w	r2, r2, #1
 800875a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008762:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80087a4:	2302      	movs	r3, #2
 80087a6:	e02d      	b.n	8008804 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0201 	bic.w	r2, r2, #1
 80087ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f84f 	bl	8008888 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800881c:	2b01      	cmp	r3, #1
 800881e:	d101      	bne.n	8008824 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8008820:	2302      	movs	r3, #2
 8008822:	e02d      	b.n	8008880 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2202      	movs	r2, #2
 8008830:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0201 	bic.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f811 	bl	8008888 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088a4:	e02f      	b.n	8008906 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088a6:	2308      	movs	r3, #8
 80088a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088aa:	2308      	movs	r3, #8
 80088ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80088b4:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80088c4:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	7b3a      	ldrb	r2, [r7, #12]
 80088d2:	4910      	ldr	r1, [pc, #64]	; (8008914 <USARTEx_SetNbDataToProcess+0x8c>)
 80088d4:	5c8a      	ldrb	r2, [r1, r2]
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 80088da:	7b3a      	ldrb	r2, [r7, #12]
 80088dc:	490e      	ldr	r1, [pc, #56]	; (8008918 <USARTEx_SetNbDataToProcess+0x90>)
 80088de:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	7b7a      	ldrb	r2, [r7, #13]
 80088ee:	4909      	ldr	r1, [pc, #36]	; (8008914 <USARTEx_SetNbDataToProcess+0x8c>)
 80088f0:	5c8a      	ldrb	r2, [r1, r2]
 80088f2:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80088f6:	7b7a      	ldrb	r2, [r7, #13]
 80088f8:	4907      	ldr	r1, [pc, #28]	; (8008918 <USARTEx_SetNbDataToProcess+0x90>)
 80088fa:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008900:	b29a      	uxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8008906:	bf00      	nop
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	0800bb80 	.word	0x0800bb80
 8008918:	0800bb88 	.word	0x0800bb88

0800891c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8008920:	4907      	ldr	r1, [pc, #28]	; (8008940 <MX_FATFS_Init+0x24>)
 8008922:	4808      	ldr	r0, [pc, #32]	; (8008944 <MX_FATFS_Init+0x28>)
 8008924:	f000 f8b6 	bl	8008a94 <FATFS_LinkDriver>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800892e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008932:	e003      	b.n	800893c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8008934:	4b04      	ldr	r3, [pc, #16]	; (8008948 <MX_FATFS_Init+0x2c>)
 8008936:	2201      	movs	r2, #1
 8008938:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800893a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800893c:	4618      	mov	r0, r3
 800893e:	bd80      	pop	{r7, pc}
 8008940:	20000e58 	.word	0x20000e58
 8008944:	20000010 	.word	0x20000010
 8008948:	20000e5c 	.word	0x20000e5c

0800894c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008956:	4b06      	ldr	r3, [pc, #24]	; (8008970 <USER_initialize+0x24>)
 8008958:	2201      	movs	r2, #1
 800895a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800895c:	4b04      	ldr	r3, [pc, #16]	; (8008970 <USER_initialize+0x24>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	2000000c 	.word	0x2000000c

08008974 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <USER_status+0x24>)
 8008980:	2201      	movs	r2, #1
 8008982:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008984:	4b04      	ldr	r3, [pc, #16]	; (8008998 <USER_status+0x24>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800898a:	4618      	mov	r0, r3
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	2000000c 	.word	0x2000000c

0800899c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	607a      	str	r2, [r7, #4]
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80089ac:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	4603      	mov	r3, r0
 80089c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80089ca:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	603a      	str	r2, [r7, #0]
 80089e2:	71fb      	strb	r3, [r7, #7]
 80089e4:	460b      	mov	r3, r1
 80089e6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	73fb      	strb	r3, [r7, #15]
    return res;
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
	...

080089fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	4613      	mov	r3, r2
 8008a08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a12:	4b1f      	ldr	r3, [pc, #124]	; (8008a90 <FATFS_LinkDriverEx+0x94>)
 8008a14:	7a5b      	ldrb	r3, [r3, #9]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d131      	bne.n	8008a80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a1c:	4b1c      	ldr	r3, [pc, #112]	; (8008a90 <FATFS_LinkDriverEx+0x94>)
 8008a1e:	7a5b      	ldrb	r3, [r3, #9]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	461a      	mov	r2, r3
 8008a24:	4b1a      	ldr	r3, [pc, #104]	; (8008a90 <FATFS_LinkDriverEx+0x94>)
 8008a26:	2100      	movs	r1, #0
 8008a28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a2a:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <FATFS_LinkDriverEx+0x94>)
 8008a2c:	7a5b      	ldrb	r3, [r3, #9]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	4a17      	ldr	r2, [pc, #92]	; (8008a90 <FATFS_LinkDriverEx+0x94>)
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a3a:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <FATFS_LinkDriverEx+0x94>)
 8008a3c:	7a5b      	ldrb	r3, [r3, #9]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	461a      	mov	r2, r3
 8008a42:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <FATFS_LinkDriverEx+0x94>)
 8008a44:	4413      	add	r3, r2
 8008a46:	79fa      	ldrb	r2, [r7, #7]
 8008a48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a4a:	4b11      	ldr	r3, [pc, #68]	; (8008a90 <FATFS_LinkDriverEx+0x94>)
 8008a4c:	7a5b      	ldrb	r3, [r3, #9]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	b2d1      	uxtb	r1, r2
 8008a54:	4a0e      	ldr	r2, [pc, #56]	; (8008a90 <FATFS_LinkDriverEx+0x94>)
 8008a56:	7251      	strb	r1, [r2, #9]
 8008a58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a5a:	7dbb      	ldrb	r3, [r7, #22]
 8008a5c:	3330      	adds	r3, #48	; 0x30
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	3301      	adds	r3, #1
 8008a68:	223a      	movs	r2, #58	; 0x3a
 8008a6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	3302      	adds	r3, #2
 8008a70:	222f      	movs	r2, #47	; 0x2f
 8008a72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	3303      	adds	r3, #3
 8008a78:	2200      	movs	r2, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	20000e60 	.word	0x20000e60

08008a94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7ff ffaa 	bl	80089fc <FATFS_LinkDriverEx>
 8008aa8:	4603      	mov	r3, r0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <__NVIC_SetPriority>:
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	6039      	str	r1, [r7, #0]
 8008abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	db0a      	blt.n	8008ade <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	490c      	ldr	r1, [pc, #48]	; (8008b00 <__NVIC_SetPriority+0x4c>)
 8008ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ad2:	0112      	lsls	r2, r2, #4
 8008ad4:	b2d2      	uxtb	r2, r2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008adc:	e00a      	b.n	8008af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	4908      	ldr	r1, [pc, #32]	; (8008b04 <__NVIC_SetPriority+0x50>)
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	3b04      	subs	r3, #4
 8008aec:	0112      	lsls	r2, r2, #4
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	440b      	add	r3, r1
 8008af2:	761a      	strb	r2, [r3, #24]
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	e000e100 	.word	0xe000e100
 8008b04:	e000ed00 	.word	0xe000ed00

08008b08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008b0c:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <SysTick_Handler+0x1c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008b10:	f001 fe20 	bl	800a754 <xTaskGetSchedulerState>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d001      	beq.n	8008b1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008b1a:	f002 fc05 	bl	800b328 <xPortSysTickHandler>
  }
}
 8008b1e:	bf00      	nop
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	e000e010 	.word	0xe000e010

08008b28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	f06f 0004 	mvn.w	r0, #4
 8008b32:	f7ff ffbf 	bl	8008ab4 <__NVIC_SetPriority>
#endif
}
 8008b36:	bf00      	nop
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b42:	f3ef 8305 	mrs	r3, IPSR
 8008b46:	603b      	str	r3, [r7, #0]
  return(result);
 8008b48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008b4e:	f06f 0305 	mvn.w	r3, #5
 8008b52:	607b      	str	r3, [r7, #4]
 8008b54:	e00c      	b.n	8008b70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008b56:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <osKernelInitialize+0x44>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d105      	bne.n	8008b6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008b5e:	4b08      	ldr	r3, [pc, #32]	; (8008b80 <osKernelInitialize+0x44>)
 8008b60:	2201      	movs	r2, #1
 8008b62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	607b      	str	r3, [r7, #4]
 8008b68:	e002      	b.n	8008b70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008b70:	687b      	ldr	r3, [r7, #4]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	20000e6c 	.word	0x20000e6c

08008b84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b8a:	f3ef 8305 	mrs	r3, IPSR
 8008b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8008b90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008b96:	f06f 0305 	mvn.w	r3, #5
 8008b9a:	607b      	str	r3, [r7, #4]
 8008b9c:	e010      	b.n	8008bc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008b9e:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <osKernelStart+0x48>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d109      	bne.n	8008bba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ba6:	f7ff ffbf 	bl	8008b28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008baa:	4b08      	ldr	r3, [pc, #32]	; (8008bcc <osKernelStart+0x48>)
 8008bac:	2202      	movs	r2, #2
 8008bae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008bb0:	f001 f964 	bl	8009e7c <vTaskStartScheduler>
      stat = osOK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	607b      	str	r3, [r7, #4]
 8008bb8:	e002      	b.n	8008bc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008bc0:	687b      	ldr	r3, [r7, #4]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000e6c 	.word	0x20000e6c

08008bd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08e      	sub	sp, #56	; 0x38
 8008bd4:	af04      	add	r7, sp, #16
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008be0:	f3ef 8305 	mrs	r3, IPSR
 8008be4:	617b      	str	r3, [r7, #20]
  return(result);
 8008be6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d17e      	bne.n	8008cea <osThreadNew+0x11a>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d07b      	beq.n	8008cea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008bf2:	2380      	movs	r3, #128	; 0x80
 8008bf4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008bf6:	2318      	movs	r3, #24
 8008bf8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d045      	beq.n	8008c96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <osThreadNew+0x48>
        name = attr->name;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d008      	beq.n	8008c3e <osThreadNew+0x6e>
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	2b38      	cmp	r3, #56	; 0x38
 8008c30:	d805      	bhi.n	8008c3e <osThreadNew+0x6e>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <osThreadNew+0x72>
        return (NULL);
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e054      	b.n	8008cec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	089b      	lsrs	r3, r3, #2
 8008c50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00e      	beq.n	8008c78 <osThreadNew+0xa8>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	2bbb      	cmp	r3, #187	; 0xbb
 8008c60:	d90a      	bls.n	8008c78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <osThreadNew+0xa8>
        mem = 1;
 8008c72:	2301      	movs	r3, #1
 8008c74:	61bb      	str	r3, [r7, #24]
 8008c76:	e010      	b.n	8008c9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10c      	bne.n	8008c9a <osThreadNew+0xca>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d108      	bne.n	8008c9a <osThreadNew+0xca>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d104      	bne.n	8008c9a <osThreadNew+0xca>
          mem = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	61bb      	str	r3, [r7, #24]
 8008c94:	e001      	b.n	8008c9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d110      	bne.n	8008cc2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ca8:	9202      	str	r2, [sp, #8]
 8008caa:	9301      	str	r3, [sp, #4]
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	6a3a      	ldr	r2, [r7, #32]
 8008cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 fe0c 	bl	80098d4 <xTaskCreateStatic>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	613b      	str	r3, [r7, #16]
 8008cc0:	e013      	b.n	8008cea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d110      	bne.n	8008cea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	f107 0310 	add.w	r3, r7, #16
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 fe57 	bl	800998e <xTaskCreate>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d001      	beq.n	8008cea <osThreadNew+0x11a>
            hTask = NULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008cea:	693b      	ldr	r3, [r7, #16]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3728      	adds	r7, #40	; 0x28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cfc:	f3ef 8305 	mrs	r3, IPSR
 8008d00:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <osDelay+0x1c>
    stat = osErrorISR;
 8008d08:	f06f 0305 	mvn.w	r3, #5
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	e007      	b.n	8008d20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d002      	beq.n	8008d20 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 f804 	bl	8009d28 <vTaskDelay>
    }
  }

  return (stat);
 8008d20:	68fb      	ldr	r3, [r7, #12]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4a07      	ldr	r2, [pc, #28]	; (8008d58 <vApplicationGetIdleTaskMemory+0x2c>)
 8008d3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	4a06      	ldr	r2, [pc, #24]	; (8008d5c <vApplicationGetIdleTaskMemory+0x30>)
 8008d42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2280      	movs	r2, #128	; 0x80
 8008d48:	601a      	str	r2, [r3, #0]
}
 8008d4a:	bf00      	nop
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	20000e70 	.word	0x20000e70
 8008d5c:	20000f2c 	.word	0x20000f2c

08008d60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4a07      	ldr	r2, [pc, #28]	; (8008d8c <vApplicationGetTimerTaskMemory+0x2c>)
 8008d70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	4a06      	ldr	r2, [pc, #24]	; (8008d90 <vApplicationGetTimerTaskMemory+0x30>)
 8008d76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d7e:	601a      	str	r2, [r3, #0]
}
 8008d80:	bf00      	nop
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	2000112c 	.word	0x2000112c
 8008d90:	200011e8 	.word	0x200011e8

08008d94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f103 0208 	add.w	r2, r3, #8
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f103 0208 	add.w	r2, r3, #8
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f103 0208 	add.w	r2, r3, #8
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008de2:	bf00      	nop
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dee:	b480      	push	{r7}
 8008df0:	b085      	sub	sp, #20
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	689a      	ldr	r2, [r3, #8]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	601a      	str	r2, [r3, #0]
}
 8008e2a:	bf00      	nop
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e36:	b480      	push	{r7}
 8008e38:	b085      	sub	sp, #20
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e4c:	d103      	bne.n	8008e56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	e00c      	b.n	8008e70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	e002      	b.n	8008e64 <vListInsert+0x2e>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d2f6      	bcs.n	8008e5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	601a      	str	r2, [r3, #0]
}
 8008e9c:	bf00      	nop
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6892      	ldr	r2, [r2, #8]
 8008ebe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	6852      	ldr	r2, [r2, #4]
 8008ec8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d103      	bne.n	8008edc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689a      	ldr	r2, [r3, #8]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	1e5a      	subs	r2, r3, #1
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f26:	f002 f96d 	bl	800b204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f32:	68f9      	ldr	r1, [r7, #12]
 8008f34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f36:	fb01 f303 	mul.w	r3, r1, r3
 8008f3a:	441a      	add	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f56:	3b01      	subs	r3, #1
 8008f58:	68f9      	ldr	r1, [r7, #12]
 8008f5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	441a      	add	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	22ff      	movs	r2, #255	; 0xff
 8008f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	22ff      	movs	r2, #255	; 0xff
 8008f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d114      	bne.n	8008fa6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d01a      	beq.n	8008fba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3310      	adds	r3, #16
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f001 fa11 	bl	800a3b0 <xTaskRemoveFromEventList>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d012      	beq.n	8008fba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f94:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <xQueueGenericReset+0xcc>)
 8008f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	e009      	b.n	8008fba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3310      	adds	r3, #16
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff fef2 	bl	8008d94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3324      	adds	r3, #36	; 0x24
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7ff feed 	bl	8008d94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008fba:	f002 f953 	bl	800b264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008fbe:	2301      	movs	r3, #1
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	e000ed04 	.word	0xe000ed04

08008fcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08e      	sub	sp, #56	; 0x38
 8008fd0:	af02      	add	r7, sp, #8
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10a      	bne.n	8008ff6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <xQueueGenericCreateStatic+0x52>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <xQueueGenericCreateStatic+0x56>
 800901e:	2301      	movs	r3, #1
 8009020:	e000      	b.n	8009024 <xQueueGenericCreateStatic+0x58>
 8009022:	2300      	movs	r3, #0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10a      	bne.n	800903e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	623b      	str	r3, [r7, #32]
}
 800903a:	bf00      	nop
 800903c:	e7fe      	b.n	800903c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d102      	bne.n	800904a <xQueueGenericCreateStatic+0x7e>
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <xQueueGenericCreateStatic+0x82>
 800904a:	2301      	movs	r3, #1
 800904c:	e000      	b.n	8009050 <xQueueGenericCreateStatic+0x84>
 800904e:	2300      	movs	r3, #0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	61fb      	str	r3, [r7, #28]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800906a:	2350      	movs	r3, #80	; 0x50
 800906c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b50      	cmp	r3, #80	; 0x50
 8009072:	d00a      	beq.n	800908a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	61bb      	str	r3, [r7, #24]
}
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800908a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00d      	beq.n	80090b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800909e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	4613      	mov	r3, r2
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	68b9      	ldr	r1, [r7, #8]
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 f805 	bl	80090bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3730      	adds	r7, #48	; 0x30
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	69ba      	ldr	r2, [r7, #24]
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	e002      	b.n	80090de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80090ea:	2101      	movs	r1, #1
 80090ec:	69b8      	ldr	r0, [r7, #24]
 80090ee:	f7ff ff05 	bl	8008efc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	78fa      	ldrb	r2, [r7, #3]
 80090f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08e      	sub	sp, #56	; 0x38
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009112:	2300      	movs	r3, #0
 8009114:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10a      	bne.n	8009136 <xQueueGenericSend+0x32>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d103      	bne.n	8009144 <xQueueGenericSend+0x40>
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <xQueueGenericSend+0x44>
 8009144:	2301      	movs	r3, #1
 8009146:	e000      	b.n	800914a <xQueueGenericSend+0x46>
 8009148:	2300      	movs	r3, #0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <xQueueGenericSend+0x60>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009160:	bf00      	nop
 8009162:	e7fe      	b.n	8009162 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d103      	bne.n	8009172 <xQueueGenericSend+0x6e>
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916e:	2b01      	cmp	r3, #1
 8009170:	d101      	bne.n	8009176 <xQueueGenericSend+0x72>
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <xQueueGenericSend+0x74>
 8009176:	2300      	movs	r3, #0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <xQueueGenericSend+0x8e>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	623b      	str	r3, [r7, #32]
}
 800918e:	bf00      	nop
 8009190:	e7fe      	b.n	8009190 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009192:	f001 fadf 	bl	800a754 <xTaskGetSchedulerState>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d102      	bne.n	80091a2 <xQueueGenericSend+0x9e>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <xQueueGenericSend+0xa2>
 80091a2:	2301      	movs	r3, #1
 80091a4:	e000      	b.n	80091a8 <xQueueGenericSend+0xa4>
 80091a6:	2300      	movs	r3, #0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10a      	bne.n	80091c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	61fb      	str	r3, [r7, #28]
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091c2:	f002 f81f 	bl	800b204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d302      	bcc.n	80091d8 <xQueueGenericSend+0xd4>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d129      	bne.n	800922c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091de:	f000 fa0b 	bl	80095f8 <prvCopyDataToQueue>
 80091e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d010      	beq.n	800920e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	3324      	adds	r3, #36	; 0x24
 80091f0:	4618      	mov	r0, r3
 80091f2:	f001 f8dd 	bl	800a3b0 <xTaskRemoveFromEventList>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d013      	beq.n	8009224 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80091fc:	4b3f      	ldr	r3, [pc, #252]	; (80092fc <xQueueGenericSend+0x1f8>)
 80091fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	e00a      	b.n	8009224 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d007      	beq.n	8009224 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009214:	4b39      	ldr	r3, [pc, #228]	; (80092fc <xQueueGenericSend+0x1f8>)
 8009216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009224:	f002 f81e 	bl	800b264 <vPortExitCritical>
				return pdPASS;
 8009228:	2301      	movs	r3, #1
 800922a:	e063      	b.n	80092f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d103      	bne.n	800923a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009232:	f002 f817 	bl	800b264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009236:	2300      	movs	r3, #0
 8009238:	e05c      	b.n	80092f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800923a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923c:	2b00      	cmp	r3, #0
 800923e:	d106      	bne.n	800924e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009240:	f107 0314 	add.w	r3, r7, #20
 8009244:	4618      	mov	r0, r3
 8009246:	f001 f917 	bl	800a478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800924a:	2301      	movs	r3, #1
 800924c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800924e:	f002 f809 	bl	800b264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009252:	f000 fe83 	bl	8009f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009256:	f001 ffd5 	bl	800b204 <vPortEnterCritical>
 800925a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009260:	b25b      	sxtb	r3, r3
 8009262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009266:	d103      	bne.n	8009270 <xQueueGenericSend+0x16c>
 8009268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926a:	2200      	movs	r2, #0
 800926c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009276:	b25b      	sxtb	r3, r3
 8009278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800927c:	d103      	bne.n	8009286 <xQueueGenericSend+0x182>
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	2200      	movs	r2, #0
 8009282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009286:	f001 ffed 	bl	800b264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800928a:	1d3a      	adds	r2, r7, #4
 800928c:	f107 0314 	add.w	r3, r7, #20
 8009290:	4611      	mov	r1, r2
 8009292:	4618      	mov	r0, r3
 8009294:	f001 f906 	bl	800a4a4 <xTaskCheckForTimeOut>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d124      	bne.n	80092e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800929e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092a0:	f000 faa2 	bl	80097e8 <prvIsQueueFull>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d018      	beq.n	80092dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	3310      	adds	r3, #16
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	4611      	mov	r1, r2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 f82c 	bl	800a310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80092b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ba:	f000 fa2d 	bl	8009718 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80092be:	f000 fe5b 	bl	8009f78 <xTaskResumeAll>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f47f af7c 	bne.w	80091c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80092ca:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <xQueueGenericSend+0x1f8>)
 80092cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	e772      	b.n	80091c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80092dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092de:	f000 fa1b 	bl	8009718 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092e2:	f000 fe49 	bl	8009f78 <xTaskResumeAll>
 80092e6:	e76c      	b.n	80091c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80092e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ea:	f000 fa15 	bl	8009718 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092ee:	f000 fe43 	bl	8009f78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80092f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3738      	adds	r7, #56	; 0x38
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	e000ed04 	.word	0xe000ed04

08009300 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b090      	sub	sp, #64	; 0x40
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10a      	bne.n	800932e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800932a:	bf00      	nop
 800932c:	e7fe      	b.n	800932c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d103      	bne.n	800933c <xQueueGenericSendFromISR+0x3c>
 8009334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	d101      	bne.n	8009340 <xQueueGenericSendFromISR+0x40>
 800933c:	2301      	movs	r3, #1
 800933e:	e000      	b.n	8009342 <xQueueGenericSendFromISR+0x42>
 8009340:	2300      	movs	r3, #0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10a      	bne.n	800935c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009358:	bf00      	nop
 800935a:	e7fe      	b.n	800935a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b02      	cmp	r3, #2
 8009360:	d103      	bne.n	800936a <xQueueGenericSendFromISR+0x6a>
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009366:	2b01      	cmp	r3, #1
 8009368:	d101      	bne.n	800936e <xQueueGenericSendFromISR+0x6e>
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <xQueueGenericSendFromISR+0x70>
 800936e:	2300      	movs	r3, #0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	623b      	str	r3, [r7, #32]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800938a:	f002 f81d 	bl	800b3c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800938e:	f3ef 8211 	mrs	r2, BASEPRI
 8009392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	61fa      	str	r2, [r7, #28]
 80093a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80093a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d302      	bcc.n	80093bc <xQueueGenericSendFromISR+0xbc>
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d12f      	bne.n	800941c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093d2:	f000 f911 	bl	80095f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80093da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093de:	d112      	bne.n	8009406 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d016      	beq.n	8009416 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ea:	3324      	adds	r3, #36	; 0x24
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 ffdf 	bl	800a3b0 <xTaskRemoveFromEventList>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00e      	beq.n	8009416 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2201      	movs	r2, #1
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	e007      	b.n	8009416 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009406:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800940a:	3301      	adds	r3, #1
 800940c:	b2db      	uxtb	r3, r3
 800940e:	b25a      	sxtb	r2, r3
 8009410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009416:	2301      	movs	r3, #1
 8009418:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800941a:	e001      	b.n	8009420 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800941c:	2300      	movs	r3, #0
 800941e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009422:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800942a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800942c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800942e:	4618      	mov	r0, r3
 8009430:	3740      	adds	r7, #64	; 0x40
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08c      	sub	sp, #48	; 0x30
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009444:	2300      	movs	r3, #0
 8009446:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10a      	bne.n	8009468 <xQueueReceive+0x30>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	623b      	str	r3, [r7, #32]
}
 8009464:	bf00      	nop
 8009466:	e7fe      	b.n	8009466 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d103      	bne.n	8009476 <xQueueReceive+0x3e>
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <xQueueReceive+0x42>
 8009476:	2301      	movs	r3, #1
 8009478:	e000      	b.n	800947c <xQueueReceive+0x44>
 800947a:	2300      	movs	r3, #0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10a      	bne.n	8009496 <xQueueReceive+0x5e>
	__asm volatile
 8009480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	61fb      	str	r3, [r7, #28]
}
 8009492:	bf00      	nop
 8009494:	e7fe      	b.n	8009494 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009496:	f001 f95d 	bl	800a754 <xTaskGetSchedulerState>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <xQueueReceive+0x6e>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <xQueueReceive+0x72>
 80094a6:	2301      	movs	r3, #1
 80094a8:	e000      	b.n	80094ac <xQueueReceive+0x74>
 80094aa:	2300      	movs	r3, #0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10a      	bne.n	80094c6 <xQueueReceive+0x8e>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	61bb      	str	r3, [r7, #24]
}
 80094c2:	bf00      	nop
 80094c4:	e7fe      	b.n	80094c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094c6:	f001 fe9d 	bl	800b204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d01f      	beq.n	8009516 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094d6:	68b9      	ldr	r1, [r7, #8]
 80094d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094da:	f000 f8f7 	bl	80096cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	1e5a      	subs	r2, r3, #1
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00f      	beq.n	800950e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f0:	3310      	adds	r3, #16
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 ff5c 	bl	800a3b0 <xTaskRemoveFromEventList>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d007      	beq.n	800950e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094fe:	4b3d      	ldr	r3, [pc, #244]	; (80095f4 <xQueueReceive+0x1bc>)
 8009500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800950e:	f001 fea9 	bl	800b264 <vPortExitCritical>
				return pdPASS;
 8009512:	2301      	movs	r3, #1
 8009514:	e069      	b.n	80095ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d103      	bne.n	8009524 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800951c:	f001 fea2 	bl	800b264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009520:	2300      	movs	r3, #0
 8009522:	e062      	b.n	80095ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d106      	bne.n	8009538 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800952a:	f107 0310 	add.w	r3, r7, #16
 800952e:	4618      	mov	r0, r3
 8009530:	f000 ffa2 	bl	800a478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009534:	2301      	movs	r3, #1
 8009536:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009538:	f001 fe94 	bl	800b264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800953c:	f000 fd0e 	bl	8009f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009540:	f001 fe60 	bl	800b204 <vPortEnterCritical>
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800954a:	b25b      	sxtb	r3, r3
 800954c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009550:	d103      	bne.n	800955a <xQueueReceive+0x122>
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009560:	b25b      	sxtb	r3, r3
 8009562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009566:	d103      	bne.n	8009570 <xQueueReceive+0x138>
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	2200      	movs	r2, #0
 800956c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009570:	f001 fe78 	bl	800b264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009574:	1d3a      	adds	r2, r7, #4
 8009576:	f107 0310 	add.w	r3, r7, #16
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f000 ff91 	bl	800a4a4 <xTaskCheckForTimeOut>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d123      	bne.n	80095d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800958a:	f000 f917 	bl	80097bc <prvIsQueueEmpty>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d017      	beq.n	80095c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	3324      	adds	r3, #36	; 0x24
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	4611      	mov	r1, r2
 800959c:	4618      	mov	r0, r3
 800959e:	f000 feb7 	bl	800a310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a4:	f000 f8b8 	bl	8009718 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095a8:	f000 fce6 	bl	8009f78 <xTaskResumeAll>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d189      	bne.n	80094c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80095b2:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <xQueueReceive+0x1bc>)
 80095b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	e780      	b.n	80094c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80095c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c6:	f000 f8a7 	bl	8009718 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095ca:	f000 fcd5 	bl	8009f78 <xTaskResumeAll>
 80095ce:	e77a      	b.n	80094c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80095d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095d2:	f000 f8a1 	bl	8009718 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095d6:	f000 fccf 	bl	8009f78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095dc:	f000 f8ee 	bl	80097bc <prvIsQueueEmpty>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f43f af6f 	beq.w	80094c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80095e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3730      	adds	r7, #48	; 0x30
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	e000ed04 	.word	0xe000ed04

080095f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10d      	bne.n	8009632 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d14d      	bne.n	80096ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	4618      	mov	r0, r3
 8009624:	f001 f8b4 	bl	800a790 <xTaskPriorityDisinherit>
 8009628:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	609a      	str	r2, [r3, #8]
 8009630:	e043      	b.n	80096ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d119      	bne.n	800966c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6858      	ldr	r0, [r3, #4]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	461a      	mov	r2, r3
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	f002 f910 	bl	800b868 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	441a      	add	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	429a      	cmp	r2, r3
 8009660:	d32b      	bcc.n	80096ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	605a      	str	r2, [r3, #4]
 800966a:	e026      	b.n	80096ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68d8      	ldr	r0, [r3, #12]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009674:	461a      	mov	r2, r3
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	f002 f8f6 	bl	800b868 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	425b      	negs	r3, r3
 8009686:	441a      	add	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d207      	bcs.n	80096a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	425b      	negs	r3, r3
 80096a2:	441a      	add	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d105      	bne.n	80096ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80096c2:	697b      	ldr	r3, [r7, #20]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d018      	beq.n	8009710 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68da      	ldr	r2, [r3, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	441a      	add	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68da      	ldr	r2, [r3, #12]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d303      	bcc.n	8009700 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68d9      	ldr	r1, [r3, #12]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	461a      	mov	r2, r3
 800970a:	6838      	ldr	r0, [r7, #0]
 800970c:	f002 f8ac 	bl	800b868 <memcpy>
	}
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009720:	f001 fd70 	bl	800b204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800972a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800972c:	e011      	b.n	8009752 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	2b00      	cmp	r3, #0
 8009734:	d012      	beq.n	800975c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3324      	adds	r3, #36	; 0x24
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fe38 	bl	800a3b0 <xTaskRemoveFromEventList>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009746:	f000 ff0f 	bl	800a568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	3b01      	subs	r3, #1
 800974e:	b2db      	uxtb	r3, r3
 8009750:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009756:	2b00      	cmp	r3, #0
 8009758:	dce9      	bgt.n	800972e <prvUnlockQueue+0x16>
 800975a:	e000      	b.n	800975e <prvUnlockQueue+0x46>
					break;
 800975c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	22ff      	movs	r2, #255	; 0xff
 8009762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009766:	f001 fd7d 	bl	800b264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800976a:	f001 fd4b 	bl	800b204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009774:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009776:	e011      	b.n	800979c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d012      	beq.n	80097a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3310      	adds	r3, #16
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fe13 	bl	800a3b0 <xTaskRemoveFromEventList>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009790:	f000 feea 	bl	800a568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	3b01      	subs	r3, #1
 8009798:	b2db      	uxtb	r3, r3
 800979a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800979c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dce9      	bgt.n	8009778 <prvUnlockQueue+0x60>
 80097a4:	e000      	b.n	80097a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	22ff      	movs	r2, #255	; 0xff
 80097ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80097b0:	f001 fd58 	bl	800b264 <vPortExitCritical>
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097c4:	f001 fd1e 	bl	800b204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097d0:	2301      	movs	r3, #1
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	e001      	b.n	80097da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097da:	f001 fd43 	bl	800b264 <vPortExitCritical>

	return xReturn;
 80097de:	68fb      	ldr	r3, [r7, #12]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097f0:	f001 fd08 	bl	800b204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d102      	bne.n	8009806 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009800:	2301      	movs	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e001      	b.n	800980a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800980a:	f001 fd2b 	bl	800b264 <vPortExitCritical>

	return xReturn;
 800980e:	68fb      	ldr	r3, [r7, #12]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009822:	2300      	movs	r3, #0
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	e014      	b.n	8009852 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009828:	4a0f      	ldr	r2, [pc, #60]	; (8009868 <vQueueAddToRegistry+0x50>)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10b      	bne.n	800984c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009834:	490c      	ldr	r1, [pc, #48]	; (8009868 <vQueueAddToRegistry+0x50>)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800983e:	4a0a      	ldr	r2, [pc, #40]	; (8009868 <vQueueAddToRegistry+0x50>)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	4413      	add	r3, r2
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800984a:	e006      	b.n	800985a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b07      	cmp	r3, #7
 8009856:	d9e7      	bls.n	8009828 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	200015e8 	.word	0x200015e8

0800986c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800987c:	f001 fcc2 	bl	800b204 <vPortEnterCritical>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009886:	b25b      	sxtb	r3, r3
 8009888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800988c:	d103      	bne.n	8009896 <vQueueWaitForMessageRestricted+0x2a>
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800989c:	b25b      	sxtb	r3, r3
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a2:	d103      	bne.n	80098ac <vQueueWaitForMessageRestricted+0x40>
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098ac:	f001 fcda 	bl	800b264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d106      	bne.n	80098c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	3324      	adds	r3, #36	; 0x24
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fd49 	bl	800a358 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80098c6:	6978      	ldr	r0, [r7, #20]
 80098c8:	f7ff ff26 	bl	8009718 <prvUnlockQueue>
	}
 80098cc:	bf00      	nop
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af04      	add	r7, sp, #16
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10a      	bne.n	80098fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	623b      	str	r3, [r7, #32]
}
 80098fa:	bf00      	nop
 80098fc:	e7fe      	b.n	80098fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10a      	bne.n	800991a <xTaskCreateStatic+0x46>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	61fb      	str	r3, [r7, #28]
}
 8009916:	bf00      	nop
 8009918:	e7fe      	b.n	8009918 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800991a:	23bc      	movs	r3, #188	; 0xbc
 800991c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2bbc      	cmp	r3, #188	; 0xbc
 8009922:	d00a      	beq.n	800993a <xTaskCreateStatic+0x66>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	61bb      	str	r3, [r7, #24]
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800993a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	2b00      	cmp	r3, #0
 8009940:	d01e      	beq.n	8009980 <xTaskCreateStatic+0xac>
 8009942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01b      	beq.n	8009980 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009950:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	2202      	movs	r2, #2
 8009956:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800995a:	2300      	movs	r3, #0
 800995c:	9303      	str	r3, [sp, #12]
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	9302      	str	r3, [sp, #8]
 8009962:	f107 0314 	add.w	r3, r7, #20
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	68b9      	ldr	r1, [r7, #8]
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 f850 	bl	8009a18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800997a:	f000 f8f3 	bl	8009b64 <prvAddNewTaskToReadyList>
 800997e:	e001      	b.n	8009984 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009980:	2300      	movs	r3, #0
 8009982:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009984:	697b      	ldr	r3, [r7, #20]
	}
 8009986:	4618      	mov	r0, r3
 8009988:	3728      	adds	r7, #40	; 0x28
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800998e:	b580      	push	{r7, lr}
 8009990:	b08c      	sub	sp, #48	; 0x30
 8009992:	af04      	add	r7, sp, #16
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	603b      	str	r3, [r7, #0]
 800999a:	4613      	mov	r3, r2
 800999c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800999e:	88fb      	ldrh	r3, [r7, #6]
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4618      	mov	r0, r3
 80099a4:	f001 fd50 	bl	800b448 <pvPortMalloc>
 80099a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00e      	beq.n	80099ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80099b0:	20bc      	movs	r0, #188	; 0xbc
 80099b2:	f001 fd49 	bl	800b448 <pvPortMalloc>
 80099b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	631a      	str	r2, [r3, #48]	; 0x30
 80099c4:	e005      	b.n	80099d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80099c6:	6978      	ldr	r0, [r7, #20]
 80099c8:	f001 fe0a 	bl	800b5e0 <vPortFree>
 80099cc:	e001      	b.n	80099d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d017      	beq.n	8009a08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099e0:	88fa      	ldrh	r2, [r7, #6]
 80099e2:	2300      	movs	r3, #0
 80099e4:	9303      	str	r3, [sp, #12]
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	9302      	str	r3, [sp, #8]
 80099ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 f80e 	bl	8009a18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099fc:	69f8      	ldr	r0, [r7, #28]
 80099fe:	f000 f8b1 	bl	8009b64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a02:	2301      	movs	r3, #1
 8009a04:	61bb      	str	r3, [r7, #24]
 8009a06:	e002      	b.n	8009a0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a0e:	69bb      	ldr	r3, [r7, #24]
	}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3720      	adds	r7, #32
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	461a      	mov	r2, r3
 8009a30:	21a5      	movs	r1, #165	; 0xa5
 8009a32:	f001 ff27 	bl	800b884 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a40:	3b01      	subs	r3, #1
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	f003 0307 	and.w	r3, r3, #7
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	617b      	str	r3, [r7, #20]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d01f      	beq.n	8009ab6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a76:	2300      	movs	r3, #0
 8009a78:	61fb      	str	r3, [r7, #28]
 8009a7a:	e012      	b.n	8009aa2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	4413      	add	r3, r2
 8009a82:	7819      	ldrb	r1, [r3, #0]
 8009a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	3334      	adds	r3, #52	; 0x34
 8009a8c:	460a      	mov	r2, r1
 8009a8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	4413      	add	r3, r2
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d006      	beq.n	8009aaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	61fb      	str	r3, [r7, #28]
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	2b0f      	cmp	r3, #15
 8009aa6:	d9e9      	bls.n	8009a7c <prvInitialiseNewTask+0x64>
 8009aa8:	e000      	b.n	8009aac <prvInitialiseNewTask+0x94>
			{
				break;
 8009aaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ab4:	e003      	b.n	8009abe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	2b37      	cmp	r3, #55	; 0x37
 8009ac2:	d901      	bls.n	8009ac8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ac4:	2337      	movs	r3, #55	; 0x37
 8009ac6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009acc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ad2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	3304      	adds	r3, #4
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff f978 	bl	8008dd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	3318      	adds	r3, #24
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7ff f973 	bl	8008dd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	3354      	adds	r3, #84	; 0x54
 8009b18:	2260      	movs	r2, #96	; 0x60
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f001 feb1 	bl	800b884 <memset>
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	4a0c      	ldr	r2, [pc, #48]	; (8009b58 <prvInitialiseNewTask+0x140>)
 8009b26:	659a      	str	r2, [r3, #88]	; 0x58
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	4a0c      	ldr	r2, [pc, #48]	; (8009b5c <prvInitialiseNewTask+0x144>)
 8009b2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	4a0b      	ldr	r2, [pc, #44]	; (8009b60 <prvInitialiseNewTask+0x148>)
 8009b32:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	68f9      	ldr	r1, [r7, #12]
 8009b38:	69b8      	ldr	r0, [r7, #24]
 8009b3a:	f001 fa39 	bl	800afb0 <pxPortInitialiseStack>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b50:	bf00      	nop
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	0800bbb0 	.word	0x0800bbb0
 8009b5c:	0800bbd0 	.word	0x0800bbd0
 8009b60:	0800bb90 	.word	0x0800bb90

08009b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b6c:	f001 fb4a 	bl	800b204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b70:	4b2d      	ldr	r3, [pc, #180]	; (8009c28 <prvAddNewTaskToReadyList+0xc4>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3301      	adds	r3, #1
 8009b76:	4a2c      	ldr	r2, [pc, #176]	; (8009c28 <prvAddNewTaskToReadyList+0xc4>)
 8009b78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b7a:	4b2c      	ldr	r3, [pc, #176]	; (8009c2c <prvAddNewTaskToReadyList+0xc8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d109      	bne.n	8009b96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b82:	4a2a      	ldr	r2, [pc, #168]	; (8009c2c <prvAddNewTaskToReadyList+0xc8>)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b88:	4b27      	ldr	r3, [pc, #156]	; (8009c28 <prvAddNewTaskToReadyList+0xc4>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d110      	bne.n	8009bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b90:	f000 fd0e 	bl	800a5b0 <prvInitialiseTaskLists>
 8009b94:	e00d      	b.n	8009bb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b96:	4b26      	ldr	r3, [pc, #152]	; (8009c30 <prvAddNewTaskToReadyList+0xcc>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d109      	bne.n	8009bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b9e:	4b23      	ldr	r3, [pc, #140]	; (8009c2c <prvAddNewTaskToReadyList+0xc8>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d802      	bhi.n	8009bb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009bac:	4a1f      	ldr	r2, [pc, #124]	; (8009c2c <prvAddNewTaskToReadyList+0xc8>)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009bb2:	4b20      	ldr	r3, [pc, #128]	; (8009c34 <prvAddNewTaskToReadyList+0xd0>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	4a1e      	ldr	r2, [pc, #120]	; (8009c34 <prvAddNewTaskToReadyList+0xd0>)
 8009bba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009bbc:	4b1d      	ldr	r3, [pc, #116]	; (8009c34 <prvAddNewTaskToReadyList+0xd0>)
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc8:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <prvAddNewTaskToReadyList+0xd4>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d903      	bls.n	8009bd8 <prvAddNewTaskToReadyList+0x74>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd4:	4a18      	ldr	r2, [pc, #96]	; (8009c38 <prvAddNewTaskToReadyList+0xd4>)
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bdc:	4613      	mov	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4a15      	ldr	r2, [pc, #84]	; (8009c3c <prvAddNewTaskToReadyList+0xd8>)
 8009be6:	441a      	add	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	3304      	adds	r3, #4
 8009bec:	4619      	mov	r1, r3
 8009bee:	4610      	mov	r0, r2
 8009bf0:	f7ff f8fd 	bl	8008dee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009bf4:	f001 fb36 	bl	800b264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009bf8:	4b0d      	ldr	r3, [pc, #52]	; (8009c30 <prvAddNewTaskToReadyList+0xcc>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00e      	beq.n	8009c1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c00:	4b0a      	ldr	r3, [pc, #40]	; (8009c2c <prvAddNewTaskToReadyList+0xc8>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d207      	bcs.n	8009c1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <prvAddNewTaskToReadyList+0xdc>)
 8009c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c1e:	bf00      	nop
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20001afc 	.word	0x20001afc
 8009c2c:	20001628 	.word	0x20001628
 8009c30:	20001b08 	.word	0x20001b08
 8009c34:	20001b18 	.word	0x20001b18
 8009c38:	20001b04 	.word	0x20001b04
 8009c3c:	2000162c 	.word	0x2000162c
 8009c40:	e000ed04 	.word	0xe000ed04

08009c44 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009c4c:	f001 fada 	bl	800b204 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d102      	bne.n	8009c5c <vTaskDelete+0x18>
 8009c56:	4b2c      	ldr	r3, [pc, #176]	; (8009d08 <vTaskDelete+0xc4>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	e000      	b.n	8009c5e <vTaskDelete+0x1a>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	3304      	adds	r3, #4
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7ff f91f 	bl	8008ea8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d004      	beq.n	8009c7c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3318      	adds	r3, #24
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7ff f916 	bl	8008ea8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009c7c:	4b23      	ldr	r3, [pc, #140]	; (8009d0c <vTaskDelete+0xc8>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	3301      	adds	r3, #1
 8009c82:	4a22      	ldr	r2, [pc, #136]	; (8009d0c <vTaskDelete+0xc8>)
 8009c84:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009c86:	4b20      	ldr	r3, [pc, #128]	; (8009d08 <vTaskDelete+0xc4>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d10b      	bne.n	8009ca8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3304      	adds	r3, #4
 8009c94:	4619      	mov	r1, r3
 8009c96:	481e      	ldr	r0, [pc, #120]	; (8009d10 <vTaskDelete+0xcc>)
 8009c98:	f7ff f8a9 	bl	8008dee <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009c9c:	4b1d      	ldr	r3, [pc, #116]	; (8009d14 <vTaskDelete+0xd0>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	4a1c      	ldr	r2, [pc, #112]	; (8009d14 <vTaskDelete+0xd0>)
 8009ca4:	6013      	str	r3, [r2, #0]
 8009ca6:	e009      	b.n	8009cbc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009ca8:	4b1b      	ldr	r3, [pc, #108]	; (8009d18 <vTaskDelete+0xd4>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	4a1a      	ldr	r2, [pc, #104]	; (8009d18 <vTaskDelete+0xd4>)
 8009cb0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 fcea 	bl	800a68c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009cb8:	f000 fd1c 	bl	800a6f4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009cbc:	f001 fad2 	bl	800b264 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009cc0:	4b16      	ldr	r3, [pc, #88]	; (8009d1c <vTaskDelete+0xd8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01b      	beq.n	8009d00 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009cc8:	4b0f      	ldr	r3, [pc, #60]	; (8009d08 <vTaskDelete+0xc4>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d116      	bne.n	8009d00 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009cd2:	4b13      	ldr	r3, [pc, #76]	; (8009d20 <vTaskDelete+0xdc>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <vTaskDelete+0xac>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	60bb      	str	r3, [r7, #8]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009cf0:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <vTaskDelete+0xe0>)
 8009cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d00:	bf00      	nop
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	20001628 	.word	0x20001628
 8009d0c:	20001b18 	.word	0x20001b18
 8009d10:	20001ad0 	.word	0x20001ad0
 8009d14:	20001ae4 	.word	0x20001ae4
 8009d18:	20001afc 	.word	0x20001afc
 8009d1c:	20001b08 	.word	0x20001b08
 8009d20:	20001b24 	.word	0x20001b24
 8009d24:	e000ed04 	.word	0xe000ed04

08009d28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d30:	2300      	movs	r3, #0
 8009d32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d017      	beq.n	8009d6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d3a:	4b13      	ldr	r3, [pc, #76]	; (8009d88 <vTaskDelay+0x60>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00a      	beq.n	8009d58 <vTaskDelay+0x30>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	60bb      	str	r3, [r7, #8]
}
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d58:	f000 f900 	bl	8009f5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fd84 	bl	800a86c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d64:	f000 f908 	bl	8009f78 <xTaskResumeAll>
 8009d68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d107      	bne.n	8009d80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d70:	4b06      	ldr	r3, [pc, #24]	; (8009d8c <vTaskDelay+0x64>)
 8009d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d76:	601a      	str	r2, [r3, #0]
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d80:	bf00      	nop
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	20001b24 	.word	0x20001b24
 8009d8c:	e000ed04 	.word	0xe000ed04

08009d90 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009d98:	f001 fa34 	bl	800b204 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <vTaskSuspend+0x18>
 8009da2:	4b30      	ldr	r3, [pc, #192]	; (8009e64 <vTaskSuspend+0xd4>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	e000      	b.n	8009daa <vTaskSuspend+0x1a>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3304      	adds	r3, #4
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff f879 	bl	8008ea8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d004      	beq.n	8009dc8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3318      	adds	r3, #24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff f870 	bl	8008ea8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4826      	ldr	r0, [pc, #152]	; (8009e68 <vTaskSuspend+0xd8>)
 8009dd0:	f7ff f80d 	bl	8008dee <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d103      	bne.n	8009de8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009de8:	f001 fa3c 	bl	800b264 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009dec:	4b1f      	ldr	r3, [pc, #124]	; (8009e6c <vTaskSuspend+0xdc>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d005      	beq.n	8009e00 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009df4:	f001 fa06 	bl	800b204 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009df8:	f000 fc7c 	bl	800a6f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009dfc:	f001 fa32 	bl	800b264 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009e00:	4b18      	ldr	r3, [pc, #96]	; (8009e64 <vTaskSuspend+0xd4>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d127      	bne.n	8009e5a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009e0a:	4b18      	ldr	r3, [pc, #96]	; (8009e6c <vTaskSuspend+0xdc>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d017      	beq.n	8009e42 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009e12:	4b17      	ldr	r3, [pc, #92]	; (8009e70 <vTaskSuspend+0xe0>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <vTaskSuspend+0xa0>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	60bb      	str	r3, [r7, #8]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8009e30:	4b10      	ldr	r3, [pc, #64]	; (8009e74 <vTaskSuspend+0xe4>)
 8009e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e40:	e00b      	b.n	8009e5a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009e42:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <vTaskSuspend+0xd8>)
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <vTaskSuspend+0xe8>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d103      	bne.n	8009e56 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <vTaskSuspend+0xd4>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]
	}
 8009e54:	e001      	b.n	8009e5a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009e56:	f000 f9f7 	bl	800a248 <vTaskSwitchContext>
	}
 8009e5a:	bf00      	nop
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	20001628 	.word	0x20001628
 8009e68:	20001ae8 	.word	0x20001ae8
 8009e6c:	20001b08 	.word	0x20001b08
 8009e70:	20001b24 	.word	0x20001b24
 8009e74:	e000ed04 	.word	0xe000ed04
 8009e78:	20001afc 	.word	0x20001afc

08009e7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08a      	sub	sp, #40	; 0x28
 8009e80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e8a:	463a      	mov	r2, r7
 8009e8c:	1d39      	adds	r1, r7, #4
 8009e8e:	f107 0308 	add.w	r3, r7, #8
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe ff4a 	bl	8008d2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	9202      	str	r2, [sp, #8]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	460a      	mov	r2, r1
 8009eaa:	4924      	ldr	r1, [pc, #144]	; (8009f3c <vTaskStartScheduler+0xc0>)
 8009eac:	4824      	ldr	r0, [pc, #144]	; (8009f40 <vTaskStartScheduler+0xc4>)
 8009eae:	f7ff fd11 	bl	80098d4 <xTaskCreateStatic>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	4a23      	ldr	r2, [pc, #140]	; (8009f44 <vTaskStartScheduler+0xc8>)
 8009eb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009eb8:	4b22      	ldr	r3, [pc, #136]	; (8009f44 <vTaskStartScheduler+0xc8>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	e001      	b.n	8009eca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d102      	bne.n	8009ed6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ed0:	f000 fd20 	bl	800a914 <xTimerCreateTimerTask>
 8009ed4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d11b      	bne.n	8009f14 <vTaskStartScheduler+0x98>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	613b      	str	r3, [r7, #16]
}
 8009eee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ef0:	4b15      	ldr	r3, [pc, #84]	; (8009f48 <vTaskStartScheduler+0xcc>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3354      	adds	r3, #84	; 0x54
 8009ef6:	4a15      	ldr	r2, [pc, #84]	; (8009f4c <vTaskStartScheduler+0xd0>)
 8009ef8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009efa:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <vTaskStartScheduler+0xd4>)
 8009efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f02:	4b14      	ldr	r3, [pc, #80]	; (8009f54 <vTaskStartScheduler+0xd8>)
 8009f04:	2201      	movs	r2, #1
 8009f06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f08:	4b13      	ldr	r3, [pc, #76]	; (8009f58 <vTaskStartScheduler+0xdc>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f0e:	f001 f8d7 	bl	800b0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f12:	e00e      	b.n	8009f32 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f1a:	d10a      	bne.n	8009f32 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	60fb      	str	r3, [r7, #12]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <vTaskStartScheduler+0xb4>
}
 8009f32:	bf00      	nop
 8009f34:	3718      	adds	r7, #24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	0800bb04 	.word	0x0800bb04
 8009f40:	0800a581 	.word	0x0800a581
 8009f44:	20001b20 	.word	0x20001b20
 8009f48:	20001628 	.word	0x20001628
 8009f4c:	20000028 	.word	0x20000028
 8009f50:	20001b1c 	.word	0x20001b1c
 8009f54:	20001b08 	.word	0x20001b08
 8009f58:	20001b00 	.word	0x20001b00

08009f5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f60:	4b04      	ldr	r3, [pc, #16]	; (8009f74 <vTaskSuspendAll+0x18>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3301      	adds	r3, #1
 8009f66:	4a03      	ldr	r2, [pc, #12]	; (8009f74 <vTaskSuspendAll+0x18>)
 8009f68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f6a:	bf00      	nop
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr
 8009f74:	20001b24 	.word	0x20001b24

08009f78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f86:	4b42      	ldr	r3, [pc, #264]	; (800a090 <xTaskResumeAll+0x118>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10a      	bne.n	8009fa4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	603b      	str	r3, [r7, #0]
}
 8009fa0:	bf00      	nop
 8009fa2:	e7fe      	b.n	8009fa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009fa4:	f001 f92e 	bl	800b204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009fa8:	4b39      	ldr	r3, [pc, #228]	; (800a090 <xTaskResumeAll+0x118>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	4a38      	ldr	r2, [pc, #224]	; (800a090 <xTaskResumeAll+0x118>)
 8009fb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fb2:	4b37      	ldr	r3, [pc, #220]	; (800a090 <xTaskResumeAll+0x118>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d162      	bne.n	800a080 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009fba:	4b36      	ldr	r3, [pc, #216]	; (800a094 <xTaskResumeAll+0x11c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d05e      	beq.n	800a080 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fc2:	e02f      	b.n	800a024 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fc4:	4b34      	ldr	r3, [pc, #208]	; (800a098 <xTaskResumeAll+0x120>)
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3318      	adds	r3, #24
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fe ff69 	bl	8008ea8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe ff64 	bl	8008ea8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe4:	4b2d      	ldr	r3, [pc, #180]	; (800a09c <xTaskResumeAll+0x124>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d903      	bls.n	8009ff4 <xTaskResumeAll+0x7c>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff0:	4a2a      	ldr	r2, [pc, #168]	; (800a09c <xTaskResumeAll+0x124>)
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4a27      	ldr	r2, [pc, #156]	; (800a0a0 <xTaskResumeAll+0x128>)
 800a002:	441a      	add	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3304      	adds	r3, #4
 800a008:	4619      	mov	r1, r3
 800a00a:	4610      	mov	r0, r2
 800a00c:	f7fe feef 	bl	8008dee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a014:	4b23      	ldr	r3, [pc, #140]	; (800a0a4 <xTaskResumeAll+0x12c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d302      	bcc.n	800a024 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a01e:	4b22      	ldr	r3, [pc, #136]	; (800a0a8 <xTaskResumeAll+0x130>)
 800a020:	2201      	movs	r2, #1
 800a022:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a024:	4b1c      	ldr	r3, [pc, #112]	; (800a098 <xTaskResumeAll+0x120>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1cb      	bne.n	8009fc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a032:	f000 fb5f 	bl	800a6f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a036:	4b1d      	ldr	r3, [pc, #116]	; (800a0ac <xTaskResumeAll+0x134>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d010      	beq.n	800a064 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a042:	f000 f847 	bl	800a0d4 <xTaskIncrementTick>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a04c:	4b16      	ldr	r3, [pc, #88]	; (800a0a8 <xTaskResumeAll+0x130>)
 800a04e:	2201      	movs	r2, #1
 800a050:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	3b01      	subs	r3, #1
 800a056:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1f1      	bne.n	800a042 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a05e:	4b13      	ldr	r3, [pc, #76]	; (800a0ac <xTaskResumeAll+0x134>)
 800a060:	2200      	movs	r2, #0
 800a062:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a064:	4b10      	ldr	r3, [pc, #64]	; (800a0a8 <xTaskResumeAll+0x130>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d009      	beq.n	800a080 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a06c:	2301      	movs	r3, #1
 800a06e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a070:	4b0f      	ldr	r3, [pc, #60]	; (800a0b0 <xTaskResumeAll+0x138>)
 800a072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a076:	601a      	str	r2, [r3, #0]
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a080:	f001 f8f0 	bl	800b264 <vPortExitCritical>

	return xAlreadyYielded;
 800a084:	68bb      	ldr	r3, [r7, #8]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20001b24 	.word	0x20001b24
 800a094:	20001afc 	.word	0x20001afc
 800a098:	20001abc 	.word	0x20001abc
 800a09c:	20001b04 	.word	0x20001b04
 800a0a0:	2000162c 	.word	0x2000162c
 800a0a4:	20001628 	.word	0x20001628
 800a0a8:	20001b10 	.word	0x20001b10
 800a0ac:	20001b0c 	.word	0x20001b0c
 800a0b0:	e000ed04 	.word	0xe000ed04

0800a0b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a0ba:	4b05      	ldr	r3, [pc, #20]	; (800a0d0 <xTaskGetTickCount+0x1c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a0c0:	687b      	ldr	r3, [r7, #4]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	20001b00 	.word	0x20001b00

0800a0d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0de:	4b4f      	ldr	r3, [pc, #316]	; (800a21c <xTaskIncrementTick+0x148>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f040 808f 	bne.w	800a206 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0e8:	4b4d      	ldr	r3, [pc, #308]	; (800a220 <xTaskIncrementTick+0x14c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0f0:	4a4b      	ldr	r2, [pc, #300]	; (800a220 <xTaskIncrementTick+0x14c>)
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d120      	bne.n	800a13e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a0fc:	4b49      	ldr	r3, [pc, #292]	; (800a224 <xTaskIncrementTick+0x150>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <xTaskIncrementTick+0x48>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	603b      	str	r3, [r7, #0]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <xTaskIncrementTick+0x46>
 800a11c:	4b41      	ldr	r3, [pc, #260]	; (800a224 <xTaskIncrementTick+0x150>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	60fb      	str	r3, [r7, #12]
 800a122:	4b41      	ldr	r3, [pc, #260]	; (800a228 <xTaskIncrementTick+0x154>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a3f      	ldr	r2, [pc, #252]	; (800a224 <xTaskIncrementTick+0x150>)
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	4a3f      	ldr	r2, [pc, #252]	; (800a228 <xTaskIncrementTick+0x154>)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6013      	str	r3, [r2, #0]
 800a130:	4b3e      	ldr	r3, [pc, #248]	; (800a22c <xTaskIncrementTick+0x158>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3301      	adds	r3, #1
 800a136:	4a3d      	ldr	r2, [pc, #244]	; (800a22c <xTaskIncrementTick+0x158>)
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	f000 fadb 	bl	800a6f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a13e:	4b3c      	ldr	r3, [pc, #240]	; (800a230 <xTaskIncrementTick+0x15c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	429a      	cmp	r2, r3
 800a146:	d349      	bcc.n	800a1dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a148:	4b36      	ldr	r3, [pc, #216]	; (800a224 <xTaskIncrementTick+0x150>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d104      	bne.n	800a15c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a152:	4b37      	ldr	r3, [pc, #220]	; (800a230 <xTaskIncrementTick+0x15c>)
 800a154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a158:	601a      	str	r2, [r3, #0]
					break;
 800a15a:	e03f      	b.n	800a1dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a15c:	4b31      	ldr	r3, [pc, #196]	; (800a224 <xTaskIncrementTick+0x150>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d203      	bcs.n	800a17c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a174:	4a2e      	ldr	r2, [pc, #184]	; (800a230 <xTaskIncrementTick+0x15c>)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a17a:	e02f      	b.n	800a1dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	3304      	adds	r3, #4
 800a180:	4618      	mov	r0, r3
 800a182:	f7fe fe91 	bl	8008ea8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d004      	beq.n	800a198 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	3318      	adds	r3, #24
 800a192:	4618      	mov	r0, r3
 800a194:	f7fe fe88 	bl	8008ea8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19c:	4b25      	ldr	r3, [pc, #148]	; (800a234 <xTaskIncrementTick+0x160>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d903      	bls.n	800a1ac <xTaskIncrementTick+0xd8>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a8:	4a22      	ldr	r2, [pc, #136]	; (800a234 <xTaskIncrementTick+0x160>)
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4a1f      	ldr	r2, [pc, #124]	; (800a238 <xTaskIncrementTick+0x164>)
 800a1ba:	441a      	add	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	3304      	adds	r3, #4
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	f7fe fe13 	bl	8008dee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1cc:	4b1b      	ldr	r3, [pc, #108]	; (800a23c <xTaskIncrementTick+0x168>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d3b8      	bcc.n	800a148 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1da:	e7b5      	b.n	800a148 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1dc:	4b17      	ldr	r3, [pc, #92]	; (800a23c <xTaskIncrementTick+0x168>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e2:	4915      	ldr	r1, [pc, #84]	; (800a238 <xTaskIncrementTick+0x164>)
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	440b      	add	r3, r1
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d901      	bls.n	800a1f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a1f8:	4b11      	ldr	r3, [pc, #68]	; (800a240 <xTaskIncrementTick+0x16c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d007      	beq.n	800a210 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a200:	2301      	movs	r3, #1
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	e004      	b.n	800a210 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a206:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <xTaskIncrementTick+0x170>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3301      	adds	r3, #1
 800a20c:	4a0d      	ldr	r2, [pc, #52]	; (800a244 <xTaskIncrementTick+0x170>)
 800a20e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a210:	697b      	ldr	r3, [r7, #20]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	20001b24 	.word	0x20001b24
 800a220:	20001b00 	.word	0x20001b00
 800a224:	20001ab4 	.word	0x20001ab4
 800a228:	20001ab8 	.word	0x20001ab8
 800a22c:	20001b14 	.word	0x20001b14
 800a230:	20001b1c 	.word	0x20001b1c
 800a234:	20001b04 	.word	0x20001b04
 800a238:	2000162c 	.word	0x2000162c
 800a23c:	20001628 	.word	0x20001628
 800a240:	20001b10 	.word	0x20001b10
 800a244:	20001b0c 	.word	0x20001b0c

0800a248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a24e:	4b2a      	ldr	r3, [pc, #168]	; (800a2f8 <vTaskSwitchContext+0xb0>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d003      	beq.n	800a25e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a256:	4b29      	ldr	r3, [pc, #164]	; (800a2fc <vTaskSwitchContext+0xb4>)
 800a258:	2201      	movs	r2, #1
 800a25a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a25c:	e046      	b.n	800a2ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a25e:	4b27      	ldr	r3, [pc, #156]	; (800a2fc <vTaskSwitchContext+0xb4>)
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a264:	4b26      	ldr	r3, [pc, #152]	; (800a300 <vTaskSwitchContext+0xb8>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	e010      	b.n	800a28e <vTaskSwitchContext+0x46>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10a      	bne.n	800a288 <vTaskSwitchContext+0x40>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	607b      	str	r3, [r7, #4]
}
 800a284:	bf00      	nop
 800a286:	e7fe      	b.n	800a286 <vTaskSwitchContext+0x3e>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	60fb      	str	r3, [r7, #12]
 800a28e:	491d      	ldr	r1, [pc, #116]	; (800a304 <vTaskSwitchContext+0xbc>)
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	4613      	mov	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	440b      	add	r3, r1
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0e4      	beq.n	800a26c <vTaskSwitchContext+0x24>
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4a15      	ldr	r2, [pc, #84]	; (800a304 <vTaskSwitchContext+0xbc>)
 800a2ae:	4413      	add	r3, r2
 800a2b0:	60bb      	str	r3, [r7, #8]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	605a      	str	r2, [r3, #4]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d104      	bne.n	800a2d2 <vTaskSwitchContext+0x8a>
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	605a      	str	r2, [r3, #4]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	4a0b      	ldr	r2, [pc, #44]	; (800a308 <vTaskSwitchContext+0xc0>)
 800a2da:	6013      	str	r3, [r2, #0]
 800a2dc:	4a08      	ldr	r2, [pc, #32]	; (800a300 <vTaskSwitchContext+0xb8>)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <vTaskSwitchContext+0xc0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3354      	adds	r3, #84	; 0x54
 800a2e8:	4a08      	ldr	r2, [pc, #32]	; (800a30c <vTaskSwitchContext+0xc4>)
 800a2ea:	6013      	str	r3, [r2, #0]
}
 800a2ec:	bf00      	nop
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	20001b24 	.word	0x20001b24
 800a2fc:	20001b10 	.word	0x20001b10
 800a300:	20001b04 	.word	0x20001b04
 800a304:	2000162c 	.word	0x2000162c
 800a308:	20001628 	.word	0x20001628
 800a30c:	20000028 	.word	0x20000028

0800a310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	60fb      	str	r3, [r7, #12]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a336:	4b07      	ldr	r3, [pc, #28]	; (800a354 <vTaskPlaceOnEventList+0x44>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3318      	adds	r3, #24
 800a33c:	4619      	mov	r1, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7fe fd79 	bl	8008e36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a344:	2101      	movs	r1, #1
 800a346:	6838      	ldr	r0, [r7, #0]
 800a348:	f000 fa90 	bl	800a86c <prvAddCurrentTaskToDelayedList>
}
 800a34c:	bf00      	nop
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20001628 	.word	0x20001628

0800a358 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10a      	bne.n	800a380 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	617b      	str	r3, [r7, #20]
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a380:	4b0a      	ldr	r3, [pc, #40]	; (800a3ac <vTaskPlaceOnEventListRestricted+0x54>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3318      	adds	r3, #24
 800a386:	4619      	mov	r1, r3
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f7fe fd30 	bl	8008dee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a398:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a39a:	6879      	ldr	r1, [r7, #4]
 800a39c:	68b8      	ldr	r0, [r7, #8]
 800a39e:	f000 fa65 	bl	800a86c <prvAddCurrentTaskToDelayedList>
	}
 800a3a2:	bf00      	nop
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20001628 	.word	0x20001628

0800a3b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10a      	bne.n	800a3dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	60fb      	str	r3, [r7, #12]
}
 800a3d8:	bf00      	nop
 800a3da:	e7fe      	b.n	800a3da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	3318      	adds	r3, #24
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe fd61 	bl	8008ea8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3e6:	4b1e      	ldr	r3, [pc, #120]	; (800a460 <xTaskRemoveFromEventList+0xb0>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d11d      	bne.n	800a42a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fd58 	bl	8008ea8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fc:	4b19      	ldr	r3, [pc, #100]	; (800a464 <xTaskRemoveFromEventList+0xb4>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d903      	bls.n	800a40c <xTaskRemoveFromEventList+0x5c>
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a408:	4a16      	ldr	r2, [pc, #88]	; (800a464 <xTaskRemoveFromEventList+0xb4>)
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4a13      	ldr	r2, [pc, #76]	; (800a468 <xTaskRemoveFromEventList+0xb8>)
 800a41a:	441a      	add	r2, r3
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	3304      	adds	r3, #4
 800a420:	4619      	mov	r1, r3
 800a422:	4610      	mov	r0, r2
 800a424:	f7fe fce3 	bl	8008dee <vListInsertEnd>
 800a428:	e005      	b.n	800a436 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	3318      	adds	r3, #24
 800a42e:	4619      	mov	r1, r3
 800a430:	480e      	ldr	r0, [pc, #56]	; (800a46c <xTaskRemoveFromEventList+0xbc>)
 800a432:	f7fe fcdc 	bl	8008dee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43a:	4b0d      	ldr	r3, [pc, #52]	; (800a470 <xTaskRemoveFromEventList+0xc0>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	429a      	cmp	r2, r3
 800a442:	d905      	bls.n	800a450 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a444:	2301      	movs	r3, #1
 800a446:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a448:	4b0a      	ldr	r3, [pc, #40]	; (800a474 <xTaskRemoveFromEventList+0xc4>)
 800a44a:	2201      	movs	r2, #1
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	e001      	b.n	800a454 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a454:	697b      	ldr	r3, [r7, #20]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	20001b24 	.word	0x20001b24
 800a464:	20001b04 	.word	0x20001b04
 800a468:	2000162c 	.word	0x2000162c
 800a46c:	20001abc 	.word	0x20001abc
 800a470:	20001628 	.word	0x20001628
 800a474:	20001b10 	.word	0x20001b10

0800a478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a480:	4b06      	ldr	r3, [pc, #24]	; (800a49c <vTaskInternalSetTimeOutState+0x24>)
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a488:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <vTaskInternalSetTimeOutState+0x28>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	605a      	str	r2, [r3, #4]
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	20001b14 	.word	0x20001b14
 800a4a0:	20001b00 	.word	0x20001b00

0800a4a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	613b      	str	r3, [r7, #16]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10a      	bne.n	800a4e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	60fb      	str	r3, [r7, #12]
}
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a4e6:	f000 fe8d 	bl	800b204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a4ea:	4b1d      	ldr	r3, [pc, #116]	; (800a560 <xTaskCheckForTimeOut+0xbc>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	69ba      	ldr	r2, [r7, #24]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a502:	d102      	bne.n	800a50a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a504:	2300      	movs	r3, #0
 800a506:	61fb      	str	r3, [r7, #28]
 800a508:	e023      	b.n	800a552 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	4b15      	ldr	r3, [pc, #84]	; (800a564 <xTaskCheckForTimeOut+0xc0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	d007      	beq.n	800a526 <xTaskCheckForTimeOut+0x82>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	69ba      	ldr	r2, [r7, #24]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d302      	bcc.n	800a526 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a520:	2301      	movs	r3, #1
 800a522:	61fb      	str	r3, [r7, #28]
 800a524:	e015      	b.n	800a552 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d20b      	bcs.n	800a548 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	1ad2      	subs	r2, r2, r3
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff ff9b 	bl	800a478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a542:	2300      	movs	r3, #0
 800a544:	61fb      	str	r3, [r7, #28]
 800a546:	e004      	b.n	800a552 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2200      	movs	r2, #0
 800a54c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a54e:	2301      	movs	r3, #1
 800a550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a552:	f000 fe87 	bl	800b264 <vPortExitCritical>

	return xReturn;
 800a556:	69fb      	ldr	r3, [r7, #28]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3720      	adds	r7, #32
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20001b00 	.word	0x20001b00
 800a564:	20001b14 	.word	0x20001b14

0800a568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a568:	b480      	push	{r7}
 800a56a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a56c:	4b03      	ldr	r3, [pc, #12]	; (800a57c <vTaskMissedYield+0x14>)
 800a56e:	2201      	movs	r2, #1
 800a570:	601a      	str	r2, [r3, #0]
}
 800a572:	bf00      	nop
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	20001b10 	.word	0x20001b10

0800a580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a588:	f000 f852 	bl	800a630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a58c:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <prvIdleTask+0x28>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d9f9      	bls.n	800a588 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a594:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <prvIdleTask+0x2c>)
 800a596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a59a:	601a      	str	r2, [r3, #0]
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5a4:	e7f0      	b.n	800a588 <prvIdleTask+0x8>
 800a5a6:	bf00      	nop
 800a5a8:	2000162c 	.word	0x2000162c
 800a5ac:	e000ed04 	.word	0xe000ed04

0800a5b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	607b      	str	r3, [r7, #4]
 800a5ba:	e00c      	b.n	800a5d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4a12      	ldr	r2, [pc, #72]	; (800a610 <prvInitialiseTaskLists+0x60>)
 800a5c8:	4413      	add	r3, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe fbe2 	bl	8008d94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	607b      	str	r3, [r7, #4]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b37      	cmp	r3, #55	; 0x37
 800a5da:	d9ef      	bls.n	800a5bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a5dc:	480d      	ldr	r0, [pc, #52]	; (800a614 <prvInitialiseTaskLists+0x64>)
 800a5de:	f7fe fbd9 	bl	8008d94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5e2:	480d      	ldr	r0, [pc, #52]	; (800a618 <prvInitialiseTaskLists+0x68>)
 800a5e4:	f7fe fbd6 	bl	8008d94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5e8:	480c      	ldr	r0, [pc, #48]	; (800a61c <prvInitialiseTaskLists+0x6c>)
 800a5ea:	f7fe fbd3 	bl	8008d94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a5ee:	480c      	ldr	r0, [pc, #48]	; (800a620 <prvInitialiseTaskLists+0x70>)
 800a5f0:	f7fe fbd0 	bl	8008d94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a5f4:	480b      	ldr	r0, [pc, #44]	; (800a624 <prvInitialiseTaskLists+0x74>)
 800a5f6:	f7fe fbcd 	bl	8008d94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5fa:	4b0b      	ldr	r3, [pc, #44]	; (800a628 <prvInitialiseTaskLists+0x78>)
 800a5fc:	4a05      	ldr	r2, [pc, #20]	; (800a614 <prvInitialiseTaskLists+0x64>)
 800a5fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <prvInitialiseTaskLists+0x7c>)
 800a602:	4a05      	ldr	r2, [pc, #20]	; (800a618 <prvInitialiseTaskLists+0x68>)
 800a604:	601a      	str	r2, [r3, #0]
}
 800a606:	bf00      	nop
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	2000162c 	.word	0x2000162c
 800a614:	20001a8c 	.word	0x20001a8c
 800a618:	20001aa0 	.word	0x20001aa0
 800a61c:	20001abc 	.word	0x20001abc
 800a620:	20001ad0 	.word	0x20001ad0
 800a624:	20001ae8 	.word	0x20001ae8
 800a628:	20001ab4 	.word	0x20001ab4
 800a62c:	20001ab8 	.word	0x20001ab8

0800a630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a636:	e019      	b.n	800a66c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a638:	f000 fde4 	bl	800b204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a63c:	4b10      	ldr	r3, [pc, #64]	; (800a680 <prvCheckTasksWaitingTermination+0x50>)
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3304      	adds	r3, #4
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe fc2d 	bl	8008ea8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a64e:	4b0d      	ldr	r3, [pc, #52]	; (800a684 <prvCheckTasksWaitingTermination+0x54>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3b01      	subs	r3, #1
 800a654:	4a0b      	ldr	r2, [pc, #44]	; (800a684 <prvCheckTasksWaitingTermination+0x54>)
 800a656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a658:	4b0b      	ldr	r3, [pc, #44]	; (800a688 <prvCheckTasksWaitingTermination+0x58>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3b01      	subs	r3, #1
 800a65e:	4a0a      	ldr	r2, [pc, #40]	; (800a688 <prvCheckTasksWaitingTermination+0x58>)
 800a660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a662:	f000 fdff 	bl	800b264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f810 	bl	800a68c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a66c:	4b06      	ldr	r3, [pc, #24]	; (800a688 <prvCheckTasksWaitingTermination+0x58>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1e1      	bne.n	800a638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20001ad0 	.word	0x20001ad0
 800a684:	20001afc 	.word	0x20001afc
 800a688:	20001ae4 	.word	0x20001ae4

0800a68c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3354      	adds	r3, #84	; 0x54
 800a698:	4618      	mov	r0, r3
 800a69a:	f001 f909 	bl	800b8b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d108      	bne.n	800a6ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 ff97 	bl	800b5e0 <vPortFree>
				vPortFree( pxTCB );
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 ff94 	bl	800b5e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a6b8:	e018      	b.n	800a6ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d103      	bne.n	800a6cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 ff8b 	bl	800b5e0 <vPortFree>
	}
 800a6ca:	e00f      	b.n	800a6ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d00a      	beq.n	800a6ec <prvDeleteTCB+0x60>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	60fb      	str	r3, [r7, #12]
}
 800a6e8:	bf00      	nop
 800a6ea:	e7fe      	b.n	800a6ea <prvDeleteTCB+0x5e>
	}
 800a6ec:	bf00      	nop
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6fa:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <prvResetNextTaskUnblockTime+0x38>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d104      	bne.n	800a70e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a704:	4b0a      	ldr	r3, [pc, #40]	; (800a730 <prvResetNextTaskUnblockTime+0x3c>)
 800a706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a70a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a70c:	e008      	b.n	800a720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a70e:	4b07      	ldr	r3, [pc, #28]	; (800a72c <prvResetNextTaskUnblockTime+0x38>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	4a04      	ldr	r2, [pc, #16]	; (800a730 <prvResetNextTaskUnblockTime+0x3c>)
 800a71e:	6013      	str	r3, [r2, #0]
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	20001ab4 	.word	0x20001ab4
 800a730:	20001b1c 	.word	0x20001b1c

0800a734 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a73a:	4b05      	ldr	r3, [pc, #20]	; (800a750 <xTaskGetCurrentTaskHandle+0x1c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a740:	687b      	ldr	r3, [r7, #4]
	}
 800a742:	4618      	mov	r0, r3
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	20001628 	.word	0x20001628

0800a754 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a75a:	4b0b      	ldr	r3, [pc, #44]	; (800a788 <xTaskGetSchedulerState+0x34>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a762:	2301      	movs	r3, #1
 800a764:	607b      	str	r3, [r7, #4]
 800a766:	e008      	b.n	800a77a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a768:	4b08      	ldr	r3, [pc, #32]	; (800a78c <xTaskGetSchedulerState+0x38>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d102      	bne.n	800a776 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a770:	2302      	movs	r3, #2
 800a772:	607b      	str	r3, [r7, #4]
 800a774:	e001      	b.n	800a77a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a776:	2300      	movs	r3, #0
 800a778:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a77a:	687b      	ldr	r3, [r7, #4]
	}
 800a77c:	4618      	mov	r0, r3
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	20001b08 	.word	0x20001b08
 800a78c:	20001b24 	.word	0x20001b24

0800a790 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a79c:	2300      	movs	r3, #0
 800a79e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d056      	beq.n	800a854 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7a6:	4b2e      	ldr	r3, [pc, #184]	; (800a860 <xTaskPriorityDisinherit+0xd0>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d00a      	beq.n	800a7c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	60fb      	str	r3, [r7, #12]
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10a      	bne.n	800a7e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	60bb      	str	r3, [r7, #8]
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e8:	1e5a      	subs	r2, r3, #1
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d02c      	beq.n	800a854 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d128      	bne.n	800a854 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	3304      	adds	r3, #4
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fb4e 	bl	8008ea8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a824:	4b0f      	ldr	r3, [pc, #60]	; (800a864 <xTaskPriorityDisinherit+0xd4>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d903      	bls.n	800a834 <xTaskPriorityDisinherit+0xa4>
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	4a0c      	ldr	r2, [pc, #48]	; (800a864 <xTaskPriorityDisinherit+0xd4>)
 800a832:	6013      	str	r3, [r2, #0]
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a838:	4613      	mov	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4413      	add	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4a09      	ldr	r2, [pc, #36]	; (800a868 <xTaskPriorityDisinherit+0xd8>)
 800a842:	441a      	add	r2, r3
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	3304      	adds	r3, #4
 800a848:	4619      	mov	r1, r3
 800a84a:	4610      	mov	r0, r2
 800a84c:	f7fe facf 	bl	8008dee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a850:	2301      	movs	r3, #1
 800a852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a854:	697b      	ldr	r3, [r7, #20]
	}
 800a856:	4618      	mov	r0, r3
 800a858:	3718      	adds	r7, #24
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	20001628 	.word	0x20001628
 800a864:	20001b04 	.word	0x20001b04
 800a868:	2000162c 	.word	0x2000162c

0800a86c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a876:	4b21      	ldr	r3, [pc, #132]	; (800a8fc <prvAddCurrentTaskToDelayedList+0x90>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a87c:	4b20      	ldr	r3, [pc, #128]	; (800a900 <prvAddCurrentTaskToDelayedList+0x94>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	3304      	adds	r3, #4
 800a882:	4618      	mov	r0, r3
 800a884:	f7fe fb10 	bl	8008ea8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a88e:	d10a      	bne.n	800a8a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d007      	beq.n	800a8a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a896:	4b1a      	ldr	r3, [pc, #104]	; (800a900 <prvAddCurrentTaskToDelayedList+0x94>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3304      	adds	r3, #4
 800a89c:	4619      	mov	r1, r3
 800a89e:	4819      	ldr	r0, [pc, #100]	; (800a904 <prvAddCurrentTaskToDelayedList+0x98>)
 800a8a0:	f7fe faa5 	bl	8008dee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8a4:	e026      	b.n	800a8f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8ae:	4b14      	ldr	r3, [pc, #80]	; (800a900 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d209      	bcs.n	800a8d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8be:	4b12      	ldr	r3, [pc, #72]	; (800a908 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	4b0f      	ldr	r3, [pc, #60]	; (800a900 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4610      	mov	r0, r2
 800a8cc:	f7fe fab3 	bl	8008e36 <vListInsert>
}
 800a8d0:	e010      	b.n	800a8f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8d2:	4b0e      	ldr	r3, [pc, #56]	; (800a90c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	f7fe faa9 	bl	8008e36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8e4:	4b0a      	ldr	r3, [pc, #40]	; (800a910 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d202      	bcs.n	800a8f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a8ee:	4a08      	ldr	r2, [pc, #32]	; (800a910 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	6013      	str	r3, [r2, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20001b00 	.word	0x20001b00
 800a900:	20001628 	.word	0x20001628
 800a904:	20001ae8 	.word	0x20001ae8
 800a908:	20001ab8 	.word	0x20001ab8
 800a90c:	20001ab4 	.word	0x20001ab4
 800a910:	20001b1c 	.word	0x20001b1c

0800a914 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08a      	sub	sp, #40	; 0x28
 800a918:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a91e:	f000 fb07 	bl	800af30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a922:	4b1c      	ldr	r3, [pc, #112]	; (800a994 <xTimerCreateTimerTask+0x80>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d021      	beq.n	800a96e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a932:	1d3a      	adds	r2, r7, #4
 800a934:	f107 0108 	add.w	r1, r7, #8
 800a938:	f107 030c 	add.w	r3, r7, #12
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe fa0f 	bl	8008d60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a942:	6879      	ldr	r1, [r7, #4]
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	9202      	str	r2, [sp, #8]
 800a94a:	9301      	str	r3, [sp, #4]
 800a94c:	2302      	movs	r3, #2
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	2300      	movs	r3, #0
 800a952:	460a      	mov	r2, r1
 800a954:	4910      	ldr	r1, [pc, #64]	; (800a998 <xTimerCreateTimerTask+0x84>)
 800a956:	4811      	ldr	r0, [pc, #68]	; (800a99c <xTimerCreateTimerTask+0x88>)
 800a958:	f7fe ffbc 	bl	80098d4 <xTaskCreateStatic>
 800a95c:	4603      	mov	r3, r0
 800a95e:	4a10      	ldr	r2, [pc, #64]	; (800a9a0 <xTimerCreateTimerTask+0x8c>)
 800a960:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a962:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <xTimerCreateTimerTask+0x8c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a96a:	2301      	movs	r3, #1
 800a96c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10a      	bne.n	800a98a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	613b      	str	r3, [r7, #16]
}
 800a986:	bf00      	nop
 800a988:	e7fe      	b.n	800a988 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a98a:	697b      	ldr	r3, [r7, #20]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	20001b58 	.word	0x20001b58
 800a998:	0800bb0c 	.word	0x0800bb0c
 800a99c:	0800aad9 	.word	0x0800aad9
 800a9a0:	20001b5c 	.word	0x20001b5c

0800a9a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b08a      	sub	sp, #40	; 0x28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
 800a9b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	623b      	str	r3, [r7, #32]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a9d2:	4b1a      	ldr	r3, [pc, #104]	; (800aa3c <xTimerGenericCommand+0x98>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d02a      	beq.n	800aa30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2b05      	cmp	r3, #5
 800a9ea:	dc18      	bgt.n	800aa1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9ec:	f7ff feb2 	bl	800a754 <xTaskGetSchedulerState>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d109      	bne.n	800aa0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9f6:	4b11      	ldr	r3, [pc, #68]	; (800aa3c <xTimerGenericCommand+0x98>)
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	f107 0110 	add.w	r1, r7, #16
 800a9fe:	2300      	movs	r3, #0
 800aa00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa02:	f7fe fb7f 	bl	8009104 <xQueueGenericSend>
 800aa06:	6278      	str	r0, [r7, #36]	; 0x24
 800aa08:	e012      	b.n	800aa30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa0a:	4b0c      	ldr	r3, [pc, #48]	; (800aa3c <xTimerGenericCommand+0x98>)
 800aa0c:	6818      	ldr	r0, [r3, #0]
 800aa0e:	f107 0110 	add.w	r1, r7, #16
 800aa12:	2300      	movs	r3, #0
 800aa14:	2200      	movs	r2, #0
 800aa16:	f7fe fb75 	bl	8009104 <xQueueGenericSend>
 800aa1a:	6278      	str	r0, [r7, #36]	; 0x24
 800aa1c:	e008      	b.n	800aa30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa1e:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <xTimerGenericCommand+0x98>)
 800aa20:	6818      	ldr	r0, [r3, #0]
 800aa22:	f107 0110 	add.w	r1, r7, #16
 800aa26:	2300      	movs	r3, #0
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	f7fe fc69 	bl	8009300 <xQueueGenericSendFromISR>
 800aa2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3728      	adds	r7, #40	; 0x28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20001b58 	.word	0x20001b58

0800aa40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b088      	sub	sp, #32
 800aa44:	af02      	add	r7, sp, #8
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa4a:	4b22      	ldr	r3, [pc, #136]	; (800aad4 <prvProcessExpiredTimer+0x94>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	3304      	adds	r3, #4
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fe fa25 	bl	8008ea8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d022      	beq.n	800aab2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	699a      	ldr	r2, [r3, #24]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	18d1      	adds	r1, r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	6978      	ldr	r0, [r7, #20]
 800aa7a:	f000 f8d1 	bl	800ac20 <prvInsertTimerInActiveList>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d01f      	beq.n	800aac4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa84:	2300      	movs	r3, #0
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	2300      	movs	r3, #0
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	6978      	ldr	r0, [r7, #20]
 800aa90:	f7ff ff88 	bl	800a9a4 <xTimerGenericCommand>
 800aa94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d113      	bne.n	800aac4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	60fb      	str	r3, [r7, #12]
}
 800aaae:	bf00      	nop
 800aab0:	e7fe      	b.n	800aab0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aab8:	f023 0301 	bic.w	r3, r3, #1
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	6978      	ldr	r0, [r7, #20]
 800aaca:	4798      	blx	r3
}
 800aacc:	bf00      	nop
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	20001b50 	.word	0x20001b50

0800aad8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aae0:	f107 0308 	add.w	r3, r7, #8
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 f857 	bl	800ab98 <prvGetNextExpireTime>
 800aaea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f000 f803 	bl	800aafc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aaf6:	f000 f8d5 	bl	800aca4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aafa:	e7f1      	b.n	800aae0 <prvTimerTask+0x8>

0800aafc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab06:	f7ff fa29 	bl	8009f5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab0a:	f107 0308 	add.w	r3, r7, #8
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 f866 	bl	800abe0 <prvSampleTimeNow>
 800ab14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d130      	bne.n	800ab7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <prvProcessTimerOrBlockTask+0x3c>
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d806      	bhi.n	800ab38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab2a:	f7ff fa25 	bl	8009f78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab2e:	68f9      	ldr	r1, [r7, #12]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7ff ff85 	bl	800aa40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab36:	e024      	b.n	800ab82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d008      	beq.n	800ab50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab3e:	4b13      	ldr	r3, [pc, #76]	; (800ab8c <prvProcessTimerOrBlockTask+0x90>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d101      	bne.n	800ab4c <prvProcessTimerOrBlockTask+0x50>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e000      	b.n	800ab4e <prvProcessTimerOrBlockTask+0x52>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab50:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <prvProcessTimerOrBlockTask+0x94>)
 800ab52:	6818      	ldr	r0, [r3, #0]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	f7fe fe85 	bl	800986c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab62:	f7ff fa09 	bl	8009f78 <xTaskResumeAll>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d10a      	bne.n	800ab82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab6c:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <prvProcessTimerOrBlockTask+0x98>)
 800ab6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	f3bf 8f6f 	isb	sy
}
 800ab7c:	e001      	b.n	800ab82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab7e:	f7ff f9fb 	bl	8009f78 <xTaskResumeAll>
}
 800ab82:	bf00      	nop
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20001b54 	.word	0x20001b54
 800ab90:	20001b58 	.word	0x20001b58
 800ab94:	e000ed04 	.word	0xe000ed04

0800ab98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aba0:	4b0e      	ldr	r3, [pc, #56]	; (800abdc <prvGetNextExpireTime+0x44>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <prvGetNextExpireTime+0x16>
 800abaa:	2201      	movs	r2, #1
 800abac:	e000      	b.n	800abb0 <prvGetNextExpireTime+0x18>
 800abae:	2200      	movs	r2, #0
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d105      	bne.n	800abc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abbc:	4b07      	ldr	r3, [pc, #28]	; (800abdc <prvGetNextExpireTime+0x44>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60fb      	str	r3, [r7, #12]
 800abc6:	e001      	b.n	800abcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800abcc:	68fb      	ldr	r3, [r7, #12]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	20001b50 	.word	0x20001b50

0800abe0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800abe8:	f7ff fa64 	bl	800a0b4 <xTaskGetTickCount>
 800abec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800abee:	4b0b      	ldr	r3, [pc, #44]	; (800ac1c <prvSampleTimeNow+0x3c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d205      	bcs.n	800ac04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800abf8:	f000 f936 	bl	800ae68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	e002      	b.n	800ac0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac0a:	4a04      	ldr	r2, [pc, #16]	; (800ac1c <prvSampleTimeNow+0x3c>)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac10:	68fb      	ldr	r3, [r7, #12]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20001b60 	.word	0x20001b60

0800ac20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
 800ac2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d812      	bhi.n	800ac6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	1ad2      	subs	r2, r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d302      	bcc.n	800ac5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac54:	2301      	movs	r3, #1
 800ac56:	617b      	str	r3, [r7, #20]
 800ac58:	e01b      	b.n	800ac92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac5a:	4b10      	ldr	r3, [pc, #64]	; (800ac9c <prvInsertTimerInActiveList+0x7c>)
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3304      	adds	r3, #4
 800ac62:	4619      	mov	r1, r3
 800ac64:	4610      	mov	r0, r2
 800ac66:	f7fe f8e6 	bl	8008e36 <vListInsert>
 800ac6a:	e012      	b.n	800ac92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d206      	bcs.n	800ac82 <prvInsertTimerInActiveList+0x62>
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d302      	bcc.n	800ac82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	e007      	b.n	800ac92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac82:	4b07      	ldr	r3, [pc, #28]	; (800aca0 <prvInsertTimerInActiveList+0x80>)
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3304      	adds	r3, #4
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	f7fe f8d2 	bl	8008e36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac92:	697b      	ldr	r3, [r7, #20]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20001b54 	.word	0x20001b54
 800aca0:	20001b50 	.word	0x20001b50

0800aca4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08e      	sub	sp, #56	; 0x38
 800aca8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acaa:	e0ca      	b.n	800ae42 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	da18      	bge.n	800ace4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800acb2:	1d3b      	adds	r3, r7, #4
 800acb4:	3304      	adds	r3, #4
 800acb6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10a      	bne.n	800acd4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	61fb      	str	r3, [r7, #28]
}
 800acd0:	bf00      	nop
 800acd2:	e7fe      	b.n	800acd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acda:	6850      	ldr	r0, [r2, #4]
 800acdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acde:	6892      	ldr	r2, [r2, #8]
 800ace0:	4611      	mov	r1, r2
 800ace2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f2c0 80aa 	blt.w	800ae40 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d004      	beq.n	800ad02 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfa:	3304      	adds	r3, #4
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe f8d3 	bl	8008ea8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad02:	463b      	mov	r3, r7
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff ff6b 	bl	800abe0 <prvSampleTimeNow>
 800ad0a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b09      	cmp	r3, #9
 800ad10:	f200 8097 	bhi.w	800ae42 <prvProcessReceivedCommands+0x19e>
 800ad14:	a201      	add	r2, pc, #4	; (adr r2, 800ad1c <prvProcessReceivedCommands+0x78>)
 800ad16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad1a:	bf00      	nop
 800ad1c:	0800ad45 	.word	0x0800ad45
 800ad20:	0800ad45 	.word	0x0800ad45
 800ad24:	0800ad45 	.word	0x0800ad45
 800ad28:	0800adb9 	.word	0x0800adb9
 800ad2c:	0800adcd 	.word	0x0800adcd
 800ad30:	0800ae17 	.word	0x0800ae17
 800ad34:	0800ad45 	.word	0x0800ad45
 800ad38:	0800ad45 	.word	0x0800ad45
 800ad3c:	0800adb9 	.word	0x0800adb9
 800ad40:	0800adcd 	.word	0x0800adcd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad4a:	f043 0301 	orr.w	r3, r3, #1
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	18d1      	adds	r1, r2, r3
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad64:	f7ff ff5c 	bl	800ac20 <prvInsertTimerInActiveList>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d069      	beq.n	800ae42 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad7c:	f003 0304 	and.w	r3, r3, #4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d05e      	beq.n	800ae42 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	441a      	add	r2, r3
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	2300      	movs	r3, #0
 800ad92:	2100      	movs	r1, #0
 800ad94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad96:	f7ff fe05 	bl	800a9a4 <xTimerGenericCommand>
 800ad9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad9c:	6a3b      	ldr	r3, [r7, #32]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d14f      	bne.n	800ae42 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	61bb      	str	r3, [r7, #24]
}
 800adb4:	bf00      	nop
 800adb6:	e7fe      	b.n	800adb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adbe:	f023 0301 	bic.w	r3, r3, #1
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800adca:	e03a      	b.n	800ae42 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800add2:	f043 0301 	orr.w	r3, r3, #1
 800add6:	b2da      	uxtb	r2, r3
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10a      	bne.n	800ae02 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	617b      	str	r3, [r7, #20]
}
 800adfe:	bf00      	nop
 800ae00:	e7fe      	b.n	800ae00 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	699a      	ldr	r2, [r3, #24]
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	18d1      	adds	r1, r2, r3
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae10:	f7ff ff06 	bl	800ac20 <prvInsertTimerInActiveList>
					break;
 800ae14:	e015      	b.n	800ae42 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae1c:	f003 0302 	and.w	r3, r3, #2
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d103      	bne.n	800ae2c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ae24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae26:	f000 fbdb 	bl	800b5e0 <vPortFree>
 800ae2a:	e00a      	b.n	800ae42 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae32:	f023 0301 	bic.w	r3, r3, #1
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae3e:	e000      	b.n	800ae42 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ae40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae42:	4b08      	ldr	r3, [pc, #32]	; (800ae64 <prvProcessReceivedCommands+0x1c0>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	1d39      	adds	r1, r7, #4
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe faf4 	bl	8009438 <xQueueReceive>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f47f af2a 	bne.w	800acac <prvProcessReceivedCommands+0x8>
	}
}
 800ae58:	bf00      	nop
 800ae5a:	bf00      	nop
 800ae5c:	3730      	adds	r7, #48	; 0x30
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20001b58 	.word	0x20001b58

0800ae68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b088      	sub	sp, #32
 800ae6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae6e:	e048      	b.n	800af02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae70:	4b2d      	ldr	r3, [pc, #180]	; (800af28 <prvSwitchTimerLists+0xc0>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae7a:	4b2b      	ldr	r3, [pc, #172]	; (800af28 <prvSwitchTimerLists+0xc0>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	3304      	adds	r3, #4
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fe f80d 	bl	8008ea8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae9c:	f003 0304 	and.w	r3, r3, #4
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d02e      	beq.n	800af02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	4413      	add	r3, r2
 800aeac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d90e      	bls.n	800aed4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aec2:	4b19      	ldr	r3, [pc, #100]	; (800af28 <prvSwitchTimerLists+0xc0>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3304      	adds	r3, #4
 800aeca:	4619      	mov	r1, r3
 800aecc:	4610      	mov	r0, r2
 800aece:	f7fd ffb2 	bl	8008e36 <vListInsert>
 800aed2:	e016      	b.n	800af02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aed4:	2300      	movs	r3, #0
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	2300      	movs	r3, #0
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	2100      	movs	r1, #0
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f7ff fd60 	bl	800a9a4 <xTimerGenericCommand>
 800aee4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10a      	bne.n	800af02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	603b      	str	r3, [r7, #0]
}
 800aefe:	bf00      	nop
 800af00:	e7fe      	b.n	800af00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af02:	4b09      	ldr	r3, [pc, #36]	; (800af28 <prvSwitchTimerLists+0xc0>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1b1      	bne.n	800ae70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af0c:	4b06      	ldr	r3, [pc, #24]	; (800af28 <prvSwitchTimerLists+0xc0>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af12:	4b06      	ldr	r3, [pc, #24]	; (800af2c <prvSwitchTimerLists+0xc4>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a04      	ldr	r2, [pc, #16]	; (800af28 <prvSwitchTimerLists+0xc0>)
 800af18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af1a:	4a04      	ldr	r2, [pc, #16]	; (800af2c <prvSwitchTimerLists+0xc4>)
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	6013      	str	r3, [r2, #0]
}
 800af20:	bf00      	nop
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	20001b50 	.word	0x20001b50
 800af2c:	20001b54 	.word	0x20001b54

0800af30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af36:	f000 f965 	bl	800b204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af3a:	4b15      	ldr	r3, [pc, #84]	; (800af90 <prvCheckForValidListAndQueue+0x60>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d120      	bne.n	800af84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af42:	4814      	ldr	r0, [pc, #80]	; (800af94 <prvCheckForValidListAndQueue+0x64>)
 800af44:	f7fd ff26 	bl	8008d94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af48:	4813      	ldr	r0, [pc, #76]	; (800af98 <prvCheckForValidListAndQueue+0x68>)
 800af4a:	f7fd ff23 	bl	8008d94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <prvCheckForValidListAndQueue+0x6c>)
 800af50:	4a10      	ldr	r2, [pc, #64]	; (800af94 <prvCheckForValidListAndQueue+0x64>)
 800af52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af54:	4b12      	ldr	r3, [pc, #72]	; (800afa0 <prvCheckForValidListAndQueue+0x70>)
 800af56:	4a10      	ldr	r2, [pc, #64]	; (800af98 <prvCheckForValidListAndQueue+0x68>)
 800af58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af5a:	2300      	movs	r3, #0
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <prvCheckForValidListAndQueue+0x74>)
 800af60:	4a11      	ldr	r2, [pc, #68]	; (800afa8 <prvCheckForValidListAndQueue+0x78>)
 800af62:	2110      	movs	r1, #16
 800af64:	200a      	movs	r0, #10
 800af66:	f7fe f831 	bl	8008fcc <xQueueGenericCreateStatic>
 800af6a:	4603      	mov	r3, r0
 800af6c:	4a08      	ldr	r2, [pc, #32]	; (800af90 <prvCheckForValidListAndQueue+0x60>)
 800af6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af70:	4b07      	ldr	r3, [pc, #28]	; (800af90 <prvCheckForValidListAndQueue+0x60>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d005      	beq.n	800af84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af78:	4b05      	ldr	r3, [pc, #20]	; (800af90 <prvCheckForValidListAndQueue+0x60>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	490b      	ldr	r1, [pc, #44]	; (800afac <prvCheckForValidListAndQueue+0x7c>)
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fe fc4a 	bl	8009818 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af84:	f000 f96e 	bl	800b264 <vPortExitCritical>
}
 800af88:	bf00      	nop
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	20001b58 	.word	0x20001b58
 800af94:	20001b28 	.word	0x20001b28
 800af98:	20001b3c 	.word	0x20001b3c
 800af9c:	20001b50 	.word	0x20001b50
 800afa0:	20001b54 	.word	0x20001b54
 800afa4:	20001c04 	.word	0x20001c04
 800afa8:	20001b64 	.word	0x20001b64
 800afac:	0800bb14 	.word	0x0800bb14

0800afb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	3b04      	subs	r3, #4
 800afc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800afc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3b04      	subs	r3, #4
 800afce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f023 0201 	bic.w	r2, r3, #1
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3b04      	subs	r3, #4
 800afde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800afe0:	4a0c      	ldr	r2, [pc, #48]	; (800b014 <pxPortInitialiseStack+0x64>)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	3b14      	subs	r3, #20
 800afea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3b04      	subs	r3, #4
 800aff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f06f 0202 	mvn.w	r2, #2
 800affe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3b20      	subs	r3, #32
 800b004:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b006:	68fb      	ldr	r3, [r7, #12]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	0800b019 	.word	0x0800b019

0800b018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b022:	4b12      	ldr	r3, [pc, #72]	; (800b06c <prvTaskExitError+0x54>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b02a:	d00a      	beq.n	800b042 <prvTaskExitError+0x2a>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	60fb      	str	r3, [r7, #12]
}
 800b03e:	bf00      	nop
 800b040:	e7fe      	b.n	800b040 <prvTaskExitError+0x28>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	60bb      	str	r3, [r7, #8]
}
 800b054:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b056:	bf00      	nop
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0fc      	beq.n	800b058 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b05e:	bf00      	nop
 800b060:	bf00      	nop
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	20000024 	.word	0x20000024

0800b070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b070:	4b07      	ldr	r3, [pc, #28]	; (800b090 <pxCurrentTCBConst2>)
 800b072:	6819      	ldr	r1, [r3, #0]
 800b074:	6808      	ldr	r0, [r1, #0]
 800b076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07a:	f380 8809 	msr	PSP, r0
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f04f 0000 	mov.w	r0, #0
 800b086:	f380 8811 	msr	BASEPRI, r0
 800b08a:	4770      	bx	lr
 800b08c:	f3af 8000 	nop.w

0800b090 <pxCurrentTCBConst2>:
 800b090:	20001628 	.word	0x20001628
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b094:	bf00      	nop
 800b096:	bf00      	nop

0800b098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b098:	4808      	ldr	r0, [pc, #32]	; (800b0bc <prvPortStartFirstTask+0x24>)
 800b09a:	6800      	ldr	r0, [r0, #0]
 800b09c:	6800      	ldr	r0, [r0, #0]
 800b09e:	f380 8808 	msr	MSP, r0
 800b0a2:	f04f 0000 	mov.w	r0, #0
 800b0a6:	f380 8814 	msr	CONTROL, r0
 800b0aa:	b662      	cpsie	i
 800b0ac:	b661      	cpsie	f
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	df00      	svc	0
 800b0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b0ba:	bf00      	nop
 800b0bc:	e000ed08 	.word	0xe000ed08

0800b0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b0c6:	4b46      	ldr	r3, [pc, #280]	; (800b1e0 <xPortStartScheduler+0x120>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a46      	ldr	r2, [pc, #280]	; (800b1e4 <xPortStartScheduler+0x124>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d10a      	bne.n	800b0e6 <xPortStartScheduler+0x26>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	613b      	str	r3, [r7, #16]
}
 800b0e2:	bf00      	nop
 800b0e4:	e7fe      	b.n	800b0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b0e6:	4b3e      	ldr	r3, [pc, #248]	; (800b1e0 <xPortStartScheduler+0x120>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a3f      	ldr	r2, [pc, #252]	; (800b1e8 <xPortStartScheduler+0x128>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d10a      	bne.n	800b106 <xPortStartScheduler+0x46>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	60fb      	str	r3, [r7, #12]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b106:	4b39      	ldr	r3, [pc, #228]	; (800b1ec <xPortStartScheduler+0x12c>)
 800b108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	22ff      	movs	r2, #255	; 0xff
 800b116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b120:	78fb      	ldrb	r3, [r7, #3]
 800b122:	b2db      	uxtb	r3, r3
 800b124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	4b31      	ldr	r3, [pc, #196]	; (800b1f0 <xPortStartScheduler+0x130>)
 800b12c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b12e:	4b31      	ldr	r3, [pc, #196]	; (800b1f4 <xPortStartScheduler+0x134>)
 800b130:	2207      	movs	r2, #7
 800b132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b134:	e009      	b.n	800b14a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b136:	4b2f      	ldr	r3, [pc, #188]	; (800b1f4 <xPortStartScheduler+0x134>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	4a2d      	ldr	r2, [pc, #180]	; (800b1f4 <xPortStartScheduler+0x134>)
 800b13e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b140:	78fb      	ldrb	r3, [r7, #3]
 800b142:	b2db      	uxtb	r3, r3
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	b2db      	uxtb	r3, r3
 800b148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b152:	2b80      	cmp	r3, #128	; 0x80
 800b154:	d0ef      	beq.n	800b136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b156:	4b27      	ldr	r3, [pc, #156]	; (800b1f4 <xPortStartScheduler+0x134>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f1c3 0307 	rsb	r3, r3, #7
 800b15e:	2b04      	cmp	r3, #4
 800b160:	d00a      	beq.n	800b178 <xPortStartScheduler+0xb8>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	60bb      	str	r3, [r7, #8]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b178:	4b1e      	ldr	r3, [pc, #120]	; (800b1f4 <xPortStartScheduler+0x134>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	021b      	lsls	r3, r3, #8
 800b17e:	4a1d      	ldr	r2, [pc, #116]	; (800b1f4 <xPortStartScheduler+0x134>)
 800b180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b182:	4b1c      	ldr	r3, [pc, #112]	; (800b1f4 <xPortStartScheduler+0x134>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b18a:	4a1a      	ldr	r2, [pc, #104]	; (800b1f4 <xPortStartScheduler+0x134>)
 800b18c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	b2da      	uxtb	r2, r3
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b196:	4b18      	ldr	r3, [pc, #96]	; (800b1f8 <xPortStartScheduler+0x138>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a17      	ldr	r2, [pc, #92]	; (800b1f8 <xPortStartScheduler+0x138>)
 800b19c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b1a2:	4b15      	ldr	r3, [pc, #84]	; (800b1f8 <xPortStartScheduler+0x138>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a14      	ldr	r2, [pc, #80]	; (800b1f8 <xPortStartScheduler+0x138>)
 800b1a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b1ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b1ae:	f000 f8dd 	bl	800b36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b1b2:	4b12      	ldr	r3, [pc, #72]	; (800b1fc <xPortStartScheduler+0x13c>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b1b8:	f000 f8fc 	bl	800b3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b1bc:	4b10      	ldr	r3, [pc, #64]	; (800b200 <xPortStartScheduler+0x140>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a0f      	ldr	r2, [pc, #60]	; (800b200 <xPortStartScheduler+0x140>)
 800b1c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b1c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b1c8:	f7ff ff66 	bl	800b098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b1cc:	f7ff f83c 	bl	800a248 <vTaskSwitchContext>
	prvTaskExitError();
 800b1d0:	f7ff ff22 	bl	800b018 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3718      	adds	r7, #24
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	e000ed00 	.word	0xe000ed00
 800b1e4:	410fc271 	.word	0x410fc271
 800b1e8:	410fc270 	.word	0x410fc270
 800b1ec:	e000e400 	.word	0xe000e400
 800b1f0:	20001c54 	.word	0x20001c54
 800b1f4:	20001c58 	.word	0x20001c58
 800b1f8:	e000ed20 	.word	0xe000ed20
 800b1fc:	20000024 	.word	0x20000024
 800b200:	e000ef34 	.word	0xe000ef34

0800b204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
	__asm volatile
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	607b      	str	r3, [r7, #4]
}
 800b21c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b21e:	4b0f      	ldr	r3, [pc, #60]	; (800b25c <vPortEnterCritical+0x58>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3301      	adds	r3, #1
 800b224:	4a0d      	ldr	r2, [pc, #52]	; (800b25c <vPortEnterCritical+0x58>)
 800b226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b228:	4b0c      	ldr	r3, [pc, #48]	; (800b25c <vPortEnterCritical+0x58>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d10f      	bne.n	800b250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b230:	4b0b      	ldr	r3, [pc, #44]	; (800b260 <vPortEnterCritical+0x5c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	b2db      	uxtb	r3, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00a      	beq.n	800b250 <vPortEnterCritical+0x4c>
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	603b      	str	r3, [r7, #0]
}
 800b24c:	bf00      	nop
 800b24e:	e7fe      	b.n	800b24e <vPortEnterCritical+0x4a>
	}
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	20000024 	.word	0x20000024
 800b260:	e000ed04 	.word	0xe000ed04

0800b264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b26a:	4b12      	ldr	r3, [pc, #72]	; (800b2b4 <vPortExitCritical+0x50>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10a      	bne.n	800b288 <vPortExitCritical+0x24>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	607b      	str	r3, [r7, #4]
}
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b288:	4b0a      	ldr	r3, [pc, #40]	; (800b2b4 <vPortExitCritical+0x50>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	4a09      	ldr	r2, [pc, #36]	; (800b2b4 <vPortExitCritical+0x50>)
 800b290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b292:	4b08      	ldr	r3, [pc, #32]	; (800b2b4 <vPortExitCritical+0x50>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d105      	bne.n	800b2a6 <vPortExitCritical+0x42>
 800b29a:	2300      	movs	r3, #0
 800b29c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	f383 8811 	msr	BASEPRI, r3
}
 800b2a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b2a6:	bf00      	nop
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	20000024 	.word	0x20000024
	...

0800b2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b2c0:	f3ef 8009 	mrs	r0, PSP
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	4b15      	ldr	r3, [pc, #84]	; (800b320 <pxCurrentTCBConst>)
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	f01e 0f10 	tst.w	lr, #16
 800b2d0:	bf08      	it	eq
 800b2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2da:	6010      	str	r0, [r2, #0]
 800b2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b2e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b2e4:	f380 8811 	msr	BASEPRI, r0
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f7fe ffaa 	bl	800a248 <vTaskSwitchContext>
 800b2f4:	f04f 0000 	mov.w	r0, #0
 800b2f8:	f380 8811 	msr	BASEPRI, r0
 800b2fc:	bc09      	pop	{r0, r3}
 800b2fe:	6819      	ldr	r1, [r3, #0]
 800b300:	6808      	ldr	r0, [r1, #0]
 800b302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b306:	f01e 0f10 	tst.w	lr, #16
 800b30a:	bf08      	it	eq
 800b30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b310:	f380 8809 	msr	PSP, r0
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	f3af 8000 	nop.w

0800b320 <pxCurrentTCBConst>:
 800b320:	20001628 	.word	0x20001628
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b324:	bf00      	nop
 800b326:	bf00      	nop

0800b328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	607b      	str	r3, [r7, #4]
}
 800b340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b342:	f7fe fec7 	bl	800a0d4 <xTaskIncrementTick>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d003      	beq.n	800b354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b34c:	4b06      	ldr	r3, [pc, #24]	; (800b368 <xPortSysTickHandler+0x40>)
 800b34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	2300      	movs	r3, #0
 800b356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	f383 8811 	msr	BASEPRI, r3
}
 800b35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	e000ed04 	.word	0xe000ed04

0800b36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b36c:	b480      	push	{r7}
 800b36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b370:	4b0b      	ldr	r3, [pc, #44]	; (800b3a0 <vPortSetupTimerInterrupt+0x34>)
 800b372:	2200      	movs	r2, #0
 800b374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b376:	4b0b      	ldr	r3, [pc, #44]	; (800b3a4 <vPortSetupTimerInterrupt+0x38>)
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b37c:	4b0a      	ldr	r3, [pc, #40]	; (800b3a8 <vPortSetupTimerInterrupt+0x3c>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a0a      	ldr	r2, [pc, #40]	; (800b3ac <vPortSetupTimerInterrupt+0x40>)
 800b382:	fba2 2303 	umull	r2, r3, r2, r3
 800b386:	099b      	lsrs	r3, r3, #6
 800b388:	4a09      	ldr	r2, [pc, #36]	; (800b3b0 <vPortSetupTimerInterrupt+0x44>)
 800b38a:	3b01      	subs	r3, #1
 800b38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b38e:	4b04      	ldr	r3, [pc, #16]	; (800b3a0 <vPortSetupTimerInterrupt+0x34>)
 800b390:	2207      	movs	r2, #7
 800b392:	601a      	str	r2, [r3, #0]
}
 800b394:	bf00      	nop
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	e000e010 	.word	0xe000e010
 800b3a4:	e000e018 	.word	0xe000e018
 800b3a8:	20000000 	.word	0x20000000
 800b3ac:	10624dd3 	.word	0x10624dd3
 800b3b0:	e000e014 	.word	0xe000e014

0800b3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b3c4 <vPortEnableVFP+0x10>
 800b3b8:	6801      	ldr	r1, [r0, #0]
 800b3ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b3be:	6001      	str	r1, [r0, #0]
 800b3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b3c2:	bf00      	nop
 800b3c4:	e000ed88 	.word	0xe000ed88

0800b3c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b3ce:	f3ef 8305 	mrs	r3, IPSR
 800b3d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b0f      	cmp	r3, #15
 800b3d8:	d914      	bls.n	800b404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b3da:	4a17      	ldr	r2, [pc, #92]	; (800b438 <vPortValidateInterruptPriority+0x70>)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	4413      	add	r3, r2
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b3e4:	4b15      	ldr	r3, [pc, #84]	; (800b43c <vPortValidateInterruptPriority+0x74>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	7afa      	ldrb	r2, [r7, #11]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d20a      	bcs.n	800b404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	607b      	str	r3, [r7, #4]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b404:	4b0e      	ldr	r3, [pc, #56]	; (800b440 <vPortValidateInterruptPriority+0x78>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b40c:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <vPortValidateInterruptPriority+0x7c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	429a      	cmp	r2, r3
 800b412:	d90a      	bls.n	800b42a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	603b      	str	r3, [r7, #0]
}
 800b426:	bf00      	nop
 800b428:	e7fe      	b.n	800b428 <vPortValidateInterruptPriority+0x60>
	}
 800b42a:	bf00      	nop
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	e000e3f0 	.word	0xe000e3f0
 800b43c:	20001c54 	.word	0x20001c54
 800b440:	e000ed0c 	.word	0xe000ed0c
 800b444:	20001c58 	.word	0x20001c58

0800b448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b08a      	sub	sp, #40	; 0x28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b450:	2300      	movs	r3, #0
 800b452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b454:	f7fe fd82 	bl	8009f5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b458:	4b5b      	ldr	r3, [pc, #364]	; (800b5c8 <pvPortMalloc+0x180>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d101      	bne.n	800b464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b460:	f000 f920 	bl	800b6a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b464:	4b59      	ldr	r3, [pc, #356]	; (800b5cc <pvPortMalloc+0x184>)
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4013      	ands	r3, r2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f040 8093 	bne.w	800b598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d01d      	beq.n	800b4b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b478:	2208      	movs	r2, #8
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4413      	add	r3, r2
 800b47e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f003 0307 	and.w	r3, r3, #7
 800b486:	2b00      	cmp	r3, #0
 800b488:	d014      	beq.n	800b4b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f023 0307 	bic.w	r3, r3, #7
 800b490:	3308      	adds	r3, #8
 800b492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f003 0307 	and.w	r3, r3, #7
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00a      	beq.n	800b4b4 <pvPortMalloc+0x6c>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	617b      	str	r3, [r7, #20]
}
 800b4b0:	bf00      	nop
 800b4b2:	e7fe      	b.n	800b4b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d06e      	beq.n	800b598 <pvPortMalloc+0x150>
 800b4ba:	4b45      	ldr	r3, [pc, #276]	; (800b5d0 <pvPortMalloc+0x188>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d869      	bhi.n	800b598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b4c4:	4b43      	ldr	r3, [pc, #268]	; (800b5d4 <pvPortMalloc+0x18c>)
 800b4c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4c8:	4b42      	ldr	r3, [pc, #264]	; (800b5d4 <pvPortMalloc+0x18c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4ce:	e004      	b.n	800b4da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d903      	bls.n	800b4ec <pvPortMalloc+0xa4>
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1f1      	bne.n	800b4d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b4ec:	4b36      	ldr	r3, [pc, #216]	; (800b5c8 <pvPortMalloc+0x180>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d050      	beq.n	800b598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2208      	movs	r2, #8
 800b4fc:	4413      	add	r3, r2
 800b4fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	1ad2      	subs	r2, r2, r3
 800b510:	2308      	movs	r3, #8
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	429a      	cmp	r2, r3
 800b516:	d91f      	bls.n	800b558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4413      	add	r3, r2
 800b51e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	f003 0307 	and.w	r3, r3, #7
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00a      	beq.n	800b540 <pvPortMalloc+0xf8>
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	613b      	str	r3, [r7, #16]
}
 800b53c:	bf00      	nop
 800b53e:	e7fe      	b.n	800b53e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	1ad2      	subs	r2, r2, r3
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b552:	69b8      	ldr	r0, [r7, #24]
 800b554:	f000 f908 	bl	800b768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b558:	4b1d      	ldr	r3, [pc, #116]	; (800b5d0 <pvPortMalloc+0x188>)
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	4a1b      	ldr	r2, [pc, #108]	; (800b5d0 <pvPortMalloc+0x188>)
 800b564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b566:	4b1a      	ldr	r3, [pc, #104]	; (800b5d0 <pvPortMalloc+0x188>)
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	4b1b      	ldr	r3, [pc, #108]	; (800b5d8 <pvPortMalloc+0x190>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d203      	bcs.n	800b57a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b572:	4b17      	ldr	r3, [pc, #92]	; (800b5d0 <pvPortMalloc+0x188>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a18      	ldr	r2, [pc, #96]	; (800b5d8 <pvPortMalloc+0x190>)
 800b578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	685a      	ldr	r2, [r3, #4]
 800b57e:	4b13      	ldr	r3, [pc, #76]	; (800b5cc <pvPortMalloc+0x184>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	431a      	orrs	r2, r3
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	2200      	movs	r2, #0
 800b58c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b58e:	4b13      	ldr	r3, [pc, #76]	; (800b5dc <pvPortMalloc+0x194>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3301      	adds	r3, #1
 800b594:	4a11      	ldr	r2, [pc, #68]	; (800b5dc <pvPortMalloc+0x194>)
 800b596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b598:	f7fe fcee 	bl	8009f78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	f003 0307 	and.w	r3, r3, #7
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00a      	beq.n	800b5bc <pvPortMalloc+0x174>
	__asm volatile
 800b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	60fb      	str	r3, [r7, #12]
}
 800b5b8:	bf00      	nop
 800b5ba:	e7fe      	b.n	800b5ba <pvPortMalloc+0x172>
	return pvReturn;
 800b5bc:	69fb      	ldr	r3, [r7, #28]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3728      	adds	r7, #40	; 0x28
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20002864 	.word	0x20002864
 800b5cc:	20002878 	.word	0x20002878
 800b5d0:	20002868 	.word	0x20002868
 800b5d4:	2000285c 	.word	0x2000285c
 800b5d8:	2000286c 	.word	0x2000286c
 800b5dc:	20002870 	.word	0x20002870

0800b5e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d04d      	beq.n	800b68e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5f2:	2308      	movs	r3, #8
 800b5f4:	425b      	negs	r3, r3
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	4b24      	ldr	r3, [pc, #144]	; (800b698 <vPortFree+0xb8>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4013      	ands	r3, r2
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10a      	bne.n	800b624 <vPortFree+0x44>
	__asm volatile
 800b60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b612:	f383 8811 	msr	BASEPRI, r3
 800b616:	f3bf 8f6f 	isb	sy
 800b61a:	f3bf 8f4f 	dsb	sy
 800b61e:	60fb      	str	r3, [r7, #12]
}
 800b620:	bf00      	nop
 800b622:	e7fe      	b.n	800b622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00a      	beq.n	800b642 <vPortFree+0x62>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	60bb      	str	r3, [r7, #8]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	685a      	ldr	r2, [r3, #4]
 800b646:	4b14      	ldr	r3, [pc, #80]	; (800b698 <vPortFree+0xb8>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4013      	ands	r3, r2
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d01e      	beq.n	800b68e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d11a      	bne.n	800b68e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	4b0e      	ldr	r3, [pc, #56]	; (800b698 <vPortFree+0xb8>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	43db      	mvns	r3, r3
 800b662:	401a      	ands	r2, r3
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b668:	f7fe fc78 	bl	8009f5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	685a      	ldr	r2, [r3, #4]
 800b670:	4b0a      	ldr	r3, [pc, #40]	; (800b69c <vPortFree+0xbc>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4413      	add	r3, r2
 800b676:	4a09      	ldr	r2, [pc, #36]	; (800b69c <vPortFree+0xbc>)
 800b678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b67a:	6938      	ldr	r0, [r7, #16]
 800b67c:	f000 f874 	bl	800b768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b680:	4b07      	ldr	r3, [pc, #28]	; (800b6a0 <vPortFree+0xc0>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3301      	adds	r3, #1
 800b686:	4a06      	ldr	r2, [pc, #24]	; (800b6a0 <vPortFree+0xc0>)
 800b688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b68a:	f7fe fc75 	bl	8009f78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b68e:	bf00      	nop
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	20002878 	.word	0x20002878
 800b69c:	20002868 	.word	0x20002868
 800b6a0:	20002874 	.word	0x20002874

0800b6a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b6ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6b0:	4b27      	ldr	r3, [pc, #156]	; (800b750 <prvHeapInit+0xac>)
 800b6b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f003 0307 	and.w	r3, r3, #7
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00c      	beq.n	800b6d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3307      	adds	r3, #7
 800b6c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f023 0307 	bic.w	r3, r3, #7
 800b6ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	4a1f      	ldr	r2, [pc, #124]	; (800b750 <prvHeapInit+0xac>)
 800b6d4:	4413      	add	r3, r2
 800b6d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6dc:	4a1d      	ldr	r2, [pc, #116]	; (800b754 <prvHeapInit+0xb0>)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b6e2:	4b1c      	ldr	r3, [pc, #112]	; (800b754 <prvHeapInit+0xb0>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6f0:	2208      	movs	r2, #8
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	1a9b      	subs	r3, r3, r2
 800b6f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f023 0307 	bic.w	r3, r3, #7
 800b6fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	4a15      	ldr	r2, [pc, #84]	; (800b758 <prvHeapInit+0xb4>)
 800b704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b706:	4b14      	ldr	r3, [pc, #80]	; (800b758 <prvHeapInit+0xb4>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2200      	movs	r2, #0
 800b70c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b70e:	4b12      	ldr	r3, [pc, #72]	; (800b758 <prvHeapInit+0xb4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2200      	movs	r2, #0
 800b714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	1ad2      	subs	r2, r2, r3
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b724:	4b0c      	ldr	r3, [pc, #48]	; (800b758 <prvHeapInit+0xb4>)
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	4a0a      	ldr	r2, [pc, #40]	; (800b75c <prvHeapInit+0xb8>)
 800b732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	4a09      	ldr	r2, [pc, #36]	; (800b760 <prvHeapInit+0xbc>)
 800b73a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b73c:	4b09      	ldr	r3, [pc, #36]	; (800b764 <prvHeapInit+0xc0>)
 800b73e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b742:	601a      	str	r2, [r3, #0]
}
 800b744:	bf00      	nop
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr
 800b750:	20001c5c 	.word	0x20001c5c
 800b754:	2000285c 	.word	0x2000285c
 800b758:	20002864 	.word	0x20002864
 800b75c:	2000286c 	.word	0x2000286c
 800b760:	20002868 	.word	0x20002868
 800b764:	20002878 	.word	0x20002878

0800b768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b770:	4b28      	ldr	r3, [pc, #160]	; (800b814 <prvInsertBlockIntoFreeList+0xac>)
 800b772:	60fb      	str	r3, [r7, #12]
 800b774:	e002      	b.n	800b77c <prvInsertBlockIntoFreeList+0x14>
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	429a      	cmp	r2, r3
 800b784:	d8f7      	bhi.n	800b776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	4413      	add	r3, r2
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	429a      	cmp	r2, r3
 800b796:	d108      	bne.n	800b7aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	441a      	add	r2, r3
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	441a      	add	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d118      	bne.n	800b7f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	4b15      	ldr	r3, [pc, #84]	; (800b818 <prvInsertBlockIntoFreeList+0xb0>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d00d      	beq.n	800b7e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685a      	ldr	r2, [r3, #4]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	441a      	add	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	601a      	str	r2, [r3, #0]
 800b7e4:	e008      	b.n	800b7f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	; (800b818 <prvInsertBlockIntoFreeList+0xb0>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	e003      	b.n	800b7f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d002      	beq.n	800b806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b806:	bf00      	nop
 800b808:	3714      	adds	r7, #20
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	2000285c 	.word	0x2000285c
 800b818:	20002864 	.word	0x20002864

0800b81c <__libc_init_array>:
 800b81c:	b570      	push	{r4, r5, r6, lr}
 800b81e:	4d0d      	ldr	r5, [pc, #52]	; (800b854 <__libc_init_array+0x38>)
 800b820:	4c0d      	ldr	r4, [pc, #52]	; (800b858 <__libc_init_array+0x3c>)
 800b822:	1b64      	subs	r4, r4, r5
 800b824:	10a4      	asrs	r4, r4, #2
 800b826:	2600      	movs	r6, #0
 800b828:	42a6      	cmp	r6, r4
 800b82a:	d109      	bne.n	800b840 <__libc_init_array+0x24>
 800b82c:	4d0b      	ldr	r5, [pc, #44]	; (800b85c <__libc_init_array+0x40>)
 800b82e:	4c0c      	ldr	r4, [pc, #48]	; (800b860 <__libc_init_array+0x44>)
 800b830:	f000 f8f2 	bl	800ba18 <_init>
 800b834:	1b64      	subs	r4, r4, r5
 800b836:	10a4      	asrs	r4, r4, #2
 800b838:	2600      	movs	r6, #0
 800b83a:	42a6      	cmp	r6, r4
 800b83c:	d105      	bne.n	800b84a <__libc_init_array+0x2e>
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	f855 3b04 	ldr.w	r3, [r5], #4
 800b844:	4798      	blx	r3
 800b846:	3601      	adds	r6, #1
 800b848:	e7ee      	b.n	800b828 <__libc_init_array+0xc>
 800b84a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b84e:	4798      	blx	r3
 800b850:	3601      	adds	r6, #1
 800b852:	e7f2      	b.n	800b83a <__libc_init_array+0x1e>
 800b854:	0800bbf8 	.word	0x0800bbf8
 800b858:	0800bbf8 	.word	0x0800bbf8
 800b85c:	0800bbf8 	.word	0x0800bbf8
 800b860:	0800bbfc 	.word	0x0800bbfc

0800b864 <__retarget_lock_acquire_recursive>:
 800b864:	4770      	bx	lr

0800b866 <__retarget_lock_release_recursive>:
 800b866:	4770      	bx	lr

0800b868 <memcpy>:
 800b868:	440a      	add	r2, r1
 800b86a:	4291      	cmp	r1, r2
 800b86c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b870:	d100      	bne.n	800b874 <memcpy+0xc>
 800b872:	4770      	bx	lr
 800b874:	b510      	push	{r4, lr}
 800b876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b87a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b87e:	4291      	cmp	r1, r2
 800b880:	d1f9      	bne.n	800b876 <memcpy+0xe>
 800b882:	bd10      	pop	{r4, pc}

0800b884 <memset>:
 800b884:	4402      	add	r2, r0
 800b886:	4603      	mov	r3, r0
 800b888:	4293      	cmp	r3, r2
 800b88a:	d100      	bne.n	800b88e <memset+0xa>
 800b88c:	4770      	bx	lr
 800b88e:	f803 1b01 	strb.w	r1, [r3], #1
 800b892:	e7f9      	b.n	800b888 <memset+0x4>

0800b894 <cleanup_glue>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	460c      	mov	r4, r1
 800b898:	6809      	ldr	r1, [r1, #0]
 800b89a:	4605      	mov	r5, r0
 800b89c:	b109      	cbz	r1, 800b8a2 <cleanup_glue+0xe>
 800b89e:	f7ff fff9 	bl	800b894 <cleanup_glue>
 800b8a2:	4621      	mov	r1, r4
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8aa:	f000 b869 	b.w	800b980 <_free_r>
	...

0800b8b0 <_reclaim_reent>:
 800b8b0:	4b2c      	ldr	r3, [pc, #176]	; (800b964 <_reclaim_reent+0xb4>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4283      	cmp	r3, r0
 800b8b6:	b570      	push	{r4, r5, r6, lr}
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	d051      	beq.n	800b960 <_reclaim_reent+0xb0>
 800b8bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b8be:	b143      	cbz	r3, 800b8d2 <_reclaim_reent+0x22>
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d14a      	bne.n	800b95c <_reclaim_reent+0xac>
 800b8c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8c8:	6819      	ldr	r1, [r3, #0]
 800b8ca:	b111      	cbz	r1, 800b8d2 <_reclaim_reent+0x22>
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f000 f857 	bl	800b980 <_free_r>
 800b8d2:	6961      	ldr	r1, [r4, #20]
 800b8d4:	b111      	cbz	r1, 800b8dc <_reclaim_reent+0x2c>
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f000 f852 	bl	800b980 <_free_r>
 800b8dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b8de:	b111      	cbz	r1, 800b8e6 <_reclaim_reent+0x36>
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f000 f84d 	bl	800b980 <_free_r>
 800b8e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8e8:	b111      	cbz	r1, 800b8f0 <_reclaim_reent+0x40>
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 f848 	bl	800b980 <_free_r>
 800b8f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b8f2:	b111      	cbz	r1, 800b8fa <_reclaim_reent+0x4a>
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f000 f843 	bl	800b980 <_free_r>
 800b8fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b8fc:	b111      	cbz	r1, 800b904 <_reclaim_reent+0x54>
 800b8fe:	4620      	mov	r0, r4
 800b900:	f000 f83e 	bl	800b980 <_free_r>
 800b904:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b906:	b111      	cbz	r1, 800b90e <_reclaim_reent+0x5e>
 800b908:	4620      	mov	r0, r4
 800b90a:	f000 f839 	bl	800b980 <_free_r>
 800b90e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b910:	b111      	cbz	r1, 800b918 <_reclaim_reent+0x68>
 800b912:	4620      	mov	r0, r4
 800b914:	f000 f834 	bl	800b980 <_free_r>
 800b918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b91a:	b111      	cbz	r1, 800b922 <_reclaim_reent+0x72>
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 f82f 	bl	800b980 <_free_r>
 800b922:	69a3      	ldr	r3, [r4, #24]
 800b924:	b1e3      	cbz	r3, 800b960 <_reclaim_reent+0xb0>
 800b926:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b928:	4620      	mov	r0, r4
 800b92a:	4798      	blx	r3
 800b92c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b92e:	b1b9      	cbz	r1, 800b960 <_reclaim_reent+0xb0>
 800b930:	4620      	mov	r0, r4
 800b932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b936:	f7ff bfad 	b.w	800b894 <cleanup_glue>
 800b93a:	5949      	ldr	r1, [r1, r5]
 800b93c:	b941      	cbnz	r1, 800b950 <_reclaim_reent+0xa0>
 800b93e:	3504      	adds	r5, #4
 800b940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b942:	2d80      	cmp	r5, #128	; 0x80
 800b944:	68d9      	ldr	r1, [r3, #12]
 800b946:	d1f8      	bne.n	800b93a <_reclaim_reent+0x8a>
 800b948:	4620      	mov	r0, r4
 800b94a:	f000 f819 	bl	800b980 <_free_r>
 800b94e:	e7ba      	b.n	800b8c6 <_reclaim_reent+0x16>
 800b950:	680e      	ldr	r6, [r1, #0]
 800b952:	4620      	mov	r0, r4
 800b954:	f000 f814 	bl	800b980 <_free_r>
 800b958:	4631      	mov	r1, r6
 800b95a:	e7ef      	b.n	800b93c <_reclaim_reent+0x8c>
 800b95c:	2500      	movs	r5, #0
 800b95e:	e7ef      	b.n	800b940 <_reclaim_reent+0x90>
 800b960:	bd70      	pop	{r4, r5, r6, pc}
 800b962:	bf00      	nop
 800b964:	20000028 	.word	0x20000028

0800b968 <__malloc_lock>:
 800b968:	4801      	ldr	r0, [pc, #4]	; (800b970 <__malloc_lock+0x8>)
 800b96a:	f7ff bf7b 	b.w	800b864 <__retarget_lock_acquire_recursive>
 800b96e:	bf00      	nop
 800b970:	2000287c 	.word	0x2000287c

0800b974 <__malloc_unlock>:
 800b974:	4801      	ldr	r0, [pc, #4]	; (800b97c <__malloc_unlock+0x8>)
 800b976:	f7ff bf76 	b.w	800b866 <__retarget_lock_release_recursive>
 800b97a:	bf00      	nop
 800b97c:	2000287c 	.word	0x2000287c

0800b980 <_free_r>:
 800b980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b982:	2900      	cmp	r1, #0
 800b984:	d044      	beq.n	800ba10 <_free_r+0x90>
 800b986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b98a:	9001      	str	r0, [sp, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f1a1 0404 	sub.w	r4, r1, #4
 800b992:	bfb8      	it	lt
 800b994:	18e4      	addlt	r4, r4, r3
 800b996:	f7ff ffe7 	bl	800b968 <__malloc_lock>
 800b99a:	4a1e      	ldr	r2, [pc, #120]	; (800ba14 <_free_r+0x94>)
 800b99c:	9801      	ldr	r0, [sp, #4]
 800b99e:	6813      	ldr	r3, [r2, #0]
 800b9a0:	b933      	cbnz	r3, 800b9b0 <_free_r+0x30>
 800b9a2:	6063      	str	r3, [r4, #4]
 800b9a4:	6014      	str	r4, [r2, #0]
 800b9a6:	b003      	add	sp, #12
 800b9a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9ac:	f7ff bfe2 	b.w	800b974 <__malloc_unlock>
 800b9b0:	42a3      	cmp	r3, r4
 800b9b2:	d908      	bls.n	800b9c6 <_free_r+0x46>
 800b9b4:	6825      	ldr	r5, [r4, #0]
 800b9b6:	1961      	adds	r1, r4, r5
 800b9b8:	428b      	cmp	r3, r1
 800b9ba:	bf01      	itttt	eq
 800b9bc:	6819      	ldreq	r1, [r3, #0]
 800b9be:	685b      	ldreq	r3, [r3, #4]
 800b9c0:	1949      	addeq	r1, r1, r5
 800b9c2:	6021      	streq	r1, [r4, #0]
 800b9c4:	e7ed      	b.n	800b9a2 <_free_r+0x22>
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	b10b      	cbz	r3, 800b9d0 <_free_r+0x50>
 800b9cc:	42a3      	cmp	r3, r4
 800b9ce:	d9fa      	bls.n	800b9c6 <_free_r+0x46>
 800b9d0:	6811      	ldr	r1, [r2, #0]
 800b9d2:	1855      	adds	r5, r2, r1
 800b9d4:	42a5      	cmp	r5, r4
 800b9d6:	d10b      	bne.n	800b9f0 <_free_r+0x70>
 800b9d8:	6824      	ldr	r4, [r4, #0]
 800b9da:	4421      	add	r1, r4
 800b9dc:	1854      	adds	r4, r2, r1
 800b9de:	42a3      	cmp	r3, r4
 800b9e0:	6011      	str	r1, [r2, #0]
 800b9e2:	d1e0      	bne.n	800b9a6 <_free_r+0x26>
 800b9e4:	681c      	ldr	r4, [r3, #0]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	6053      	str	r3, [r2, #4]
 800b9ea:	4421      	add	r1, r4
 800b9ec:	6011      	str	r1, [r2, #0]
 800b9ee:	e7da      	b.n	800b9a6 <_free_r+0x26>
 800b9f0:	d902      	bls.n	800b9f8 <_free_r+0x78>
 800b9f2:	230c      	movs	r3, #12
 800b9f4:	6003      	str	r3, [r0, #0]
 800b9f6:	e7d6      	b.n	800b9a6 <_free_r+0x26>
 800b9f8:	6825      	ldr	r5, [r4, #0]
 800b9fa:	1961      	adds	r1, r4, r5
 800b9fc:	428b      	cmp	r3, r1
 800b9fe:	bf04      	itt	eq
 800ba00:	6819      	ldreq	r1, [r3, #0]
 800ba02:	685b      	ldreq	r3, [r3, #4]
 800ba04:	6063      	str	r3, [r4, #4]
 800ba06:	bf04      	itt	eq
 800ba08:	1949      	addeq	r1, r1, r5
 800ba0a:	6021      	streq	r1, [r4, #0]
 800ba0c:	6054      	str	r4, [r2, #4]
 800ba0e:	e7ca      	b.n	800b9a6 <_free_r+0x26>
 800ba10:	b003      	add	sp, #12
 800ba12:	bd30      	pop	{r4, r5, pc}
 800ba14:	20002880 	.word	0x20002880

0800ba18 <_init>:
 800ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1a:	bf00      	nop
 800ba1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba1e:	bc08      	pop	{r3}
 800ba20:	469e      	mov	lr, r3
 800ba22:	4770      	bx	lr

0800ba24 <_fini>:
 800ba24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba26:	bf00      	nop
 800ba28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2a:	bc08      	pop	{r3}
 800ba2c:	469e      	mov	lr, r3
 800ba2e:	4770      	bx	lr
