
PLAYER_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram1_low    00004000  20004000  20004000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .sram1_upper  0000c000  20008000  20008000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .sram2        00000000  20014000  20014000  00034000  2**0
                  CONTENTS
  3 .ccm_sram_all 00000000  20018000  20018000  00034000  2**0
                  CONTENTS
  4 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .text         0000c1c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       0000020c  0800c3a8  0800c3a8  0001c3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0800c5b4  0800c5b4  00034000  2**0
                  CONTENTS
  8 .ARM          00000008  0800c5b4  0800c5b4  0001c5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0800c5bc  0800c5bc  00034000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  0800c5bc  0800c5bc  0001c5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000004  0800c5c0  0800c5c0  0001c5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000008c  20000000  0800c5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00002804  2000008c  0800c650  0002008c  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  20002890  0800c650  00022890  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY
 16 .debug_info   00033136  00000000  00000000  00034030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00005a04  00000000  00000000  00067166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000026a0  00000000  00000000  0006cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002458  00000000  00000000  0006f210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000070ea  00000000  00000000  00071668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002db2e  00000000  00000000  00078752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012b6b5  00000000  00000000  000a6280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001d1935  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000aadc  00000000  00000000  001d1988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c390 	.word	0x0800c390

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	0800c390 	.word	0x0800c390

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <braeden_main>:
#include <FreeRTOS.h>
#include <task.h>

void braeden_main(void *ignore) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 80005dc:	f00a f95a 	bl	800a894 <xTaskGetCurrentTaskHandle>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f009 fc84 	bl	8009ef0 <vTaskSuspend>
	vTaskDelete(NULL);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f009 fbdb 	bl	8009da4 <vTaskDelete>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <bryant_main>:
#include <FreeRTOS.h>
#include <task.h>

extern uint8_t audio_buffer[49152]; //Can be recast to a more appropriate type.

void bryant_main(void *ignore) {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]


	vTaskSuspend(xTaskGetCurrentTaskHandle()); //LEAVE AT THE END
 80005fe:	f00a f949 	bl	800a894 <xTaskGetCurrentTaskHandle>
 8000602:	4603      	mov	r3, r0
 8000604:	4618      	mov	r0, r3
 8000606:	f009 fc73 	bl	8009ef0 <vTaskSuspend>
	vTaskDelete(NULL);
 800060a:	2000      	movs	r0, #0
 800060c:	f009 fbca 	bl	8009da4 <vTaskDelete>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <update_green_DMA_addr>:
extern UART_HandleTypeDef huart5;
//DAC_DHR12LD

size_t audio_dma_current_index;

void update_green_DMA_addr(TIM_HandleTypeDef *htim){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	audio_dma_current_index = (audio_dma_current_index+4)%AUD_BUFFER_SIZE;
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <update_green_DMA_addr+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	1d19      	adds	r1, r3, #4
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <update_green_DMA_addr+0x68>)
 8000628:	fba3 2301 	umull	r2, r3, r3, r1
 800062c:	0bda      	lsrs	r2, r3, #15
 800062e:	4613      	mov	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	4413      	add	r3, r2
 8000634:	039b      	lsls	r3, r3, #14
 8000636:	1aca      	subs	r2, r1, r3
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <update_green_DMA_addr+0x64>)
 800063a:	601a      	str	r2, [r3, #0]
	const char *tim_msg = "DMA Update started or wrapped\n";
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <update_green_DMA_addr+0x6c>)
 800063e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart5,tim_msg,strlen(tim_msg), 0xFFFF);
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff fded 	bl	8000220 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29a      	uxth	r2, r3
 800064a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <update_green_DMA_addr+0x70>)
 8000652:	f006 fd4d 	bl	80070f0 <HAL_UART_Transmit>
	if ((audio_dma_current_index==0))	HAL_UART_Transmit(&huart5,tim_msg,strlen(tim_msg), 0xFFFF);
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <update_green_DMA_addr+0x64>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d10a      	bne.n	8000674 <update_green_DMA_addr+0x5c>
 800065e:	68f8      	ldr	r0, [r7, #12]
 8000660:	f7ff fdde 	bl	8000220 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <update_green_DMA_addr+0x70>)
 8000670:	f006 fd3e 	bl	80070f0 <HAL_UART_Transmit>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000a8 	.word	0x200000a8
 8000680:	aaaaaaab 	.word	0xaaaaaaab
 8000684:	0800c3a8 	.word	0x0800c3a8
 8000688:	20000934 	.word	0x20000934

0800068c <jeremy_main>:

size_t get_audio_buffer_current_index(void){
	return audio_dma_current_index;
}

void jeremy_main(void *ignore) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b09c      	sub	sp, #112	; 0x70
 8000690:	af02      	add	r7, sp, #8
 8000692:	6078      	str	r0, [r7, #4]
	const char *jeremy_main_msg = "Entered Jeremy Main\n";
 8000694:	4b38      	ldr	r3, [pc, #224]	; (8000778 <jeremy_main+0xec>)
 8000696:	663b      	str	r3, [r7, #96]	; 0x60
	const char *jeremy_main_cb = "Registered timer callback\n";
 8000698:	4b38      	ldr	r3, [pc, #224]	; (800077c <jeremy_main+0xf0>)
 800069a:	65fb      	str	r3, [r7, #92]	; 0x5c
	const char *jeremy_main_dma = "Initiated DMA\n";
 800069c:	4b38      	ldr	r3, [pc, #224]	; (8000780 <jeremy_main+0xf4>)
 800069e:	65bb      	str	r3, [r7, #88]	; 0x58
	const char *jeremy_main_tim = "Initiated Timer\n";
 80006a0:	4b38      	ldr	r3, [pc, #224]	; (8000784 <jeremy_main+0xf8>)
 80006a2:	657b      	str	r3, [r7, #84]	; 0x54
	char buf[75];

	HAL_UART_Transmit(&huart5,jeremy_main_msg,strlen(jeremy_main_msg), 0xFFFF);
 80006a4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80006a6:	f7ff fdbb 	bl	8000220 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80006b4:	4834      	ldr	r0, [pc, #208]	; (8000788 <jeremy_main+0xfc>)
 80006b6:	f006 fd1b 	bl	80070f0 <HAL_UART_Transmit>

	HAL_TIM_RegisterCallback(&AUDIO_44_1_KHZ_TIMER, HAL_TIM_PERIOD_ELAPSED_CB_ID, update_green_DMA_addr);
 80006ba:	4a34      	ldr	r2, [pc, #208]	; (800078c <jeremy_main+0x100>)
 80006bc:	210e      	movs	r1, #14
 80006be:	4834      	ldr	r0, [pc, #208]	; (8000790 <jeremy_main+0x104>)
 80006c0:	f006 f946 	bl	8006950 <HAL_TIM_RegisterCallback>
	HAL_UART_Transmit(&huart5,jeremy_main_cb,strlen(jeremy_main_cb), 0xFFFF);
 80006c4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80006c6:	f7ff fdab 	bl	8000220 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80006d4:	482c      	ldr	r0, [pc, #176]	; (8000788 <jeremy_main+0xfc>)
 80006d6:	f006 fd0b 	bl	80070f0 <HAL_UART_Transmit>

	HAL_TIM_Base_Start(&AUDIO_44_1_KHZ_TIMER);
 80006da:	482d      	ldr	r0, [pc, #180]	; (8000790 <jeremy_main+0x104>)
 80006dc:	f005 fe7c 	bl	80063d8 <HAL_TIM_Base_Start>
	HAL_UART_Transmit(&huart5,jeremy_main_tim,strlen(jeremy_main_tim), 0xFFFF);
 80006e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80006e2:	f7ff fd9d 	bl	8000220 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80006f0:	4825      	ldr	r0, [pc, #148]	; (8000788 <jeremy_main+0xfc>)
 80006f2:	f006 fcfd 	bl	80070f0 <HAL_UART_Transmit>
	//HAL_DAC_Start(&AUD_GREEN_DAC, DAC_CHANNEL_1);
	//HAL_DAC_Start(&AUD_GREEN_DAC, DAC_CHANNEL_2);

	HAL_DAC_Start_DMA(&AUD_GREEN_DAC, DAC_CHANNEL_1, (uint32_t*)audio_buffer, (AUD_BUFFER_SIZE>>2)-1 , DAC_ALIGN_12B_L);
 80006f6:	2304      	movs	r3, #4
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	f642 73ff 	movw	r3, #12287	; 0x2fff
 80006fe:	4a25      	ldr	r2, [pc, #148]	; (8000794 <jeremy_main+0x108>)
 8000700:	2100      	movs	r1, #0
 8000702:	4825      	ldr	r0, [pc, #148]	; (8000798 <jeremy_main+0x10c>)
 8000704:	f003 fa64 	bl	8003bd0 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(&AUD_GREEN_DAC, DAC_CHANNEL_2, (uint32_t*)(audio_buffer+2), (AUD_BUFFER_SIZE>>2)-1 , DAC_ALIGN_12B_L);
 8000708:	4a24      	ldr	r2, [pc, #144]	; (800079c <jeremy_main+0x110>)
 800070a:	2304      	movs	r3, #4
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8000712:	2110      	movs	r1, #16
 8000714:	4820      	ldr	r0, [pc, #128]	; (8000798 <jeremy_main+0x10c>)
 8000716:	f003 fa5b 	bl	8003bd0 <HAL_DAC_Start_DMA>

	HAL_UART_Transmit(&huart5,jeremy_main_dma,strlen(jeremy_main_dma), 0xFFFF);
 800071a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800071c:	f7ff fd80 	bl	8000220 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000728:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800072a:	4817      	ldr	r0, [pc, #92]	; (8000788 <jeremy_main+0xfc>)
 800072c:	f006 fce0 	bl	80070f0 <HAL_UART_Transmit>
	audio_dma_current_index = 0; //Reset the index now, in case it had counted up before we started DMA. its okay to be a ways behind the dma.
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <jeremy_main+0x114>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
	for(int i=0; 1; i++){
 8000736:	2300      	movs	r3, #0
 8000738:	667b      	str	r3, [r7, #100]	; 0x64
		sprintf(buf, "Uptime: %d\nBuf: %i\n\n", i, audio_dma_current_index);
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <jeremy_main+0x114>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f107 0008 	add.w	r0, r7, #8
 8000742:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000744:	4917      	ldr	r1, [pc, #92]	; (80007a4 <jeremy_main+0x118>)
 8000746:	f00b fa69 	bl	800bc1c <siprintf>
		HAL_UART_Transmit(&huart5, buf, strlen(buf), 0xFFFF);
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd66 	bl	8000220 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	f107 0108 	add.w	r1, r7, #8
 800075c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <jeremy_main+0xfc>)
 8000762:	f006 fcc5 	bl	80070f0 <HAL_UART_Transmit>
		vTaskDelay(1000);
 8000766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076a:	f009 fb8d 	bl	8009e88 <vTaskDelay>
	for(int i=0; 1; i++){
 800076e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000770:	3301      	adds	r3, #1
 8000772:	667b      	str	r3, [r7, #100]	; 0x64
 8000774:	e7e1      	b.n	800073a <jeremy_main+0xae>
 8000776:	bf00      	nop
 8000778:	0800c3c8 	.word	0x0800c3c8
 800077c:	0800c3e0 	.word	0x0800c3e0
 8000780:	0800c3fc 	.word	0x0800c3fc
 8000784:	0800c40c 	.word	0x0800c40c
 8000788:	20000934 	.word	0x20000934
 800078c:	08000619 	.word	0x08000619
 8000790:	20000868 	.word	0x20000868
 8000794:	20008000 	.word	0x20008000
 8000798:	200003a4 	.word	0x200003a4
 800079c:	20008002 	.word	0x20008002
 80007a0:	200000a8 	.word	0x200000a8
 80007a4:	0800c420 	.word	0x0800c420

080007a8 <wyatt_main>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "jeremy.h"
//#include "wyatt.h"
void wyatt_main(void *ignore){vTaskDelete(NULL);}; //temporary measure
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	2000      	movs	r0, #0
 80007b2:	f009 faf7 	bl	8009da4 <vTaskDelete>
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f001 fef0 	bl	80025aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f89d 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 feb1 	bl	8001534 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d2:	f000 fe85 	bl	80014e0 <MX_DMA_Init>
  MX_DAC1_Init();
 80007d6:	f000 fb09 	bl	8000dec <MX_DAC1_Init>
  MX_DAC2_Init();
 80007da:	f000 fb4b 	bl	8000e74 <MX_DAC2_Init>
  MX_DAC3_Init();
 80007de:	f000 fb83 	bl	8000ee8 <MX_DAC3_Init>
  MX_DAC4_Init();
 80007e2:	f000 fbc5 	bl	8000f70 <MX_DAC4_Init>
  MX_OPAMP1_Init();
 80007e6:	f000 fc07 	bl	8000ff8 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80007ea:	f000 fc2b 	bl	8001044 <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 80007ee:	f000 fc4f 	bl	8001090 <MX_OPAMP4_Init>
  MX_OPAMP5_Init();
 80007f2:	f000 fc73 	bl	80010dc <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 80007f6:	f000 fc97 	bl	8001128 <MX_OPAMP6_Init>
  MX_QUADSPI1_Init();
 80007fa:	f000 fcbb 	bl	8001174 <MX_QUADSPI1_Init>
  MX_SPI2_Init();
 80007fe:	f000 fce1 	bl	80011c4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000802:	f000 fd1d 	bl	8001240 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000806:	f000 fd59 	bl	80012bc <MX_SPI4_Init>
  MX_UART5_Init();
 800080a:	f000 fdcb 	bl	80013a4 <MX_UART5_Init>
  MX_USART3_Init();
 800080e:	f000 fe19 	bl	8001444 <MX_USART3_Init>
  MX_ADC1_Init();
 8000812:	f000 f8c9 	bl	80009a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000816:	f000 f93f 	bl	8000a98 <MX_ADC2_Init>
  MX_ADC3_Init();
 800081a:	f000 f9a3 	bl	8000b64 <MX_ADC3_Init>
  MX_ADC4_Init();
 800081e:	f000 fa19 	bl	8000c54 <MX_ADC4_Init>
  MX_ADC5_Init();
 8000822:	f000 fa7d 	bl	8000d20 <MX_ADC5_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000826:	f008 f929 	bl	8008a7c <MX_FATFS_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <main+0x74>
    Error_Handler();
 8000830:	f000 ff6a 	bl	8001708 <Error_Handler>
  }
  MX_TIM6_Init();
 8000834:	f000 fd80 	bl	8001338 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000838:	f008 fa30 	bl	8008c9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800083c:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <main+0xfc>)
 800083e:	2100      	movs	r1, #0
 8000840:	481f      	ldr	r0, [pc, #124]	; (80008c0 <main+0x100>)
 8000842:	f008 fa75 	bl	8008d30 <osThreadNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <main+0x104>)
 800084a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  static StaticTask_t threads[4];
  xTaskCreateStatic(wyatt_main, 	"wyatt_main_thread", 	1024, NULL, 5, (StackType_t *)wyatt_memspace, 	&threads[0]);
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <main+0x108>)
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <main+0x10c>)
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	2305      	movs	r3, #5
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2300      	movs	r3, #0
 800085a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800085e:	491c      	ldr	r1, [pc, #112]	; (80008d0 <main+0x110>)
 8000860:	481c      	ldr	r0, [pc, #112]	; (80008d4 <main+0x114>)
 8000862:	f009 f8e7 	bl	8009a34 <xTaskCreateStatic>
  xTaskCreateStatic(jeremy_main, 	"jeremy_main_thread", 	1024, NULL, 5, (StackType_t *)jeremy_memspace, 	&threads[1]);
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <main+0x118>)
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <main+0x11c>)
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	2305      	movs	r3, #5
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000878:	4919      	ldr	r1, [pc, #100]	; (80008e0 <main+0x120>)
 800087a:	481a      	ldr	r0, [pc, #104]	; (80008e4 <main+0x124>)
 800087c:	f009 f8da 	bl	8009a34 <xTaskCreateStatic>
  xTaskCreateStatic(bryant_main, 	"bryant_main_thread", 	1024, NULL, 5, (StackType_t *)bryant_memspace, 	&threads[2]);
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <main+0x128>)
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <main+0x12c>)
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	2305      	movs	r3, #5
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000892:	4917      	ldr	r1, [pc, #92]	; (80008f0 <main+0x130>)
 8000894:	4817      	ldr	r0, [pc, #92]	; (80008f4 <main+0x134>)
 8000896:	f009 f8cd 	bl	8009a34 <xTaskCreateStatic>
  xTaskCreateStatic(braeden_main, 	"braeden_main_thread", 	1024, NULL, 5, (StackType_t *)braeden_memspace, &threads[3]);
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <main+0x138>)
 800089c:	9302      	str	r3, [sp, #8]
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <main+0x13c>)
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	2305      	movs	r3, #5
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2300      	movs	r3, #0
 80008a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ac:	4914      	ldr	r1, [pc, #80]	; (8000900 <main+0x140>)
 80008ae:	4815      	ldr	r0, [pc, #84]	; (8000904 <main+0x144>)
 80008b0:	f009 f8c0 	bl	8009a34 <xTaskCreateStatic>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008b4:	f008 fa16 	bl	8008ce4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <main+0xf8>
 80008ba:	bf00      	nop
 80008bc:	0800c4ac 	.word	0x0800c4ac
 80008c0:	080016d5 	.word	0x080016d5
 80008c4:	20000a8c 	.word	0x20000a8c
 80008c8:	20000a90 	.word	0x20000a90
 80008cc:	20004000 	.word	0x20004000
 80008d0:	0800c444 	.word	0x0800c444
 80008d4:	080007a9 	.word	0x080007a9
 80008d8:	20000b4c 	.word	0x20000b4c
 80008dc:	20007000 	.word	0x20007000
 80008e0:	0800c458 	.word	0x0800c458
 80008e4:	0800068d 	.word	0x0800068d
 80008e8:	20000c08 	.word	0x20000c08
 80008ec:	20005000 	.word	0x20005000
 80008f0:	0800c46c 	.word	0x0800c46c
 80008f4:	080005f7 	.word	0x080005f7
 80008f8:	20000cc4 	.word	0x20000cc4
 80008fc:	20006000 	.word	0x20006000
 8000900:	0800c480 	.word	0x0800c480
 8000904:	080005d5 	.word	0x080005d5

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0318 	add.w	r3, r7, #24
 8000912:	2238      	movs	r2, #56	; 0x38
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f00b f86a 	bl	800b9f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800092a:	2000      	movs	r0, #0
 800092c:	f004 f9e2 	bl	8004cf4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000930:	2303      	movs	r3, #3
 8000932:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000938:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000940:	2340      	movs	r3, #64	; 0x40
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2302      	movs	r3, #2
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000948:	2303      	movs	r3, #3
 800094a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800094c:	2301      	movs	r3, #1
 800094e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000950:	2314      	movs	r3, #20
 8000952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000958:	2304      	movs	r3, #4
 800095a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	4618      	mov	r0, r3
 8000966:	f004 fbcb 	bl	8005100 <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000970:	f000 feca 	bl	8001708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2303      	movs	r3, #3
 800097a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2104      	movs	r1, #4
 800098c:	4618      	mov	r0, r3
 800098e:	f004 fec9 	bl	8005724 <HAL_RCC_ClockConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000998:	f000 feb6 	bl	8001708 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800099c:	f005 f8c8 	bl	8005b30 <HAL_RCC_EnableCSS>
}
 80009a0:	bf00      	nop
 80009a2:	3750      	adds	r7, #80	; 0x50
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2220      	movs	r2, #32
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f00b f815 	bl	800b9f0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009c6:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <MX_ADC1_Init+0xe8>)
 80009c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009ce:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <MX_ADC1_Init+0xe8>)
 80009d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009d6:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <MX_ADC1_Init+0xe8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <MX_ADC1_Init+0xe8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <MX_ADC1_Init+0xe8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <MX_ADC1_Init+0xe8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_ADC1_Init+0xe8>)
 80009f0:	2204      	movs	r2, #4
 80009f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_ADC1_Init+0xe8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <MX_ADC1_Init+0xe8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000a00:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_ADC1_Init+0xe8>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_ADC1_Init+0xe8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_ADC1_Init+0xe8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_ADC1_Init+0xe8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_ADC1_Init+0xe8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_ADC1_Init+0xe8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_ADC1_Init+0xe8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a30:	4817      	ldr	r0, [pc, #92]	; (8000a90 <MX_ADC1_Init+0xe8>)
 8000a32:	f001 ffc7 	bl	80029c4 <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a3c:	f000 fe64 	bl	8001708 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_ADC1_Init+0xe8>)
 8000a4c:	f002 fe74 	bl	8003738 <HAL_ADCEx_MultiModeConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a56:	f000 fe57 	bl	8001708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_ADC1_Init+0xec>)
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5e:	2306      	movs	r3, #6
 8000a60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a66:	237f      	movs	r3, #127	; 0x7f
 8000a68:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4619      	mov	r1, r3
 8000a76:	4806      	ldr	r0, [pc, #24]	; (8000a90 <MX_ADC1_Init+0xe8>)
 8000a78:	f002 f9c6 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a82:	f000 fe41 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	3730      	adds	r7, #48	; 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000ac 	.word	0x200000ac
 8000a94:	08600004 	.word	0x08600004

08000a98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00a ffa3 	bl	800b9f0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000aac:	4a2b      	ldr	r2, [pc, #172]	; (8000b5c <MX_ADC2_Init+0xc4>)
 8000aae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ab2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ab6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b12:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000b14:	f001 ff56 	bl	80029c4 <HAL_ADC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000b1e:	f000 fdf3 	bl	8001708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_ADC2_Init+0xc8>)
 8000b24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b26:	2306      	movs	r3, #6
 8000b28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b2e:	237f      	movs	r3, #127	; 0x7f
 8000b30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b32:	2304      	movs	r3, #4
 8000b34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000b40:	f002 f962 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000b4a:	f000 fddd 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000144 	.word	0x20000144
 8000b5c:	50000100 	.word	0x50000100
 8000b60:	10c00010 	.word	0x10c00010

08000b64 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	; 0x30
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2220      	movs	r2, #32
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f00a ff37 	bl	800b9f0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b82:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000b84:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <MX_ADC3_Init+0xe8>)
 8000b86:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000b8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b8e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b90:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b96:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba2:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba8:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000baa:	2204      	movs	r2, #4
 8000bac:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bea:	4817      	ldr	r0, [pc, #92]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000bec:	f001 feea 	bl	80029c4 <HAL_ADC_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000bf6:	f000 fd87 	bl	8001708 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	4810      	ldr	r0, [pc, #64]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000c06:	f002 fd97 	bl	8003738 <HAL_ADCEx_MultiModeConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000c10:	f000 fd7a 	bl	8001708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_ADC3_Init+0xec>)
 8000c16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c18:	2306      	movs	r3, #6
 8000c1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c20:	237f      	movs	r3, #127	; 0x7f
 8000c22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c24:	2304      	movs	r3, #4
 8000c26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_ADC3_Init+0xe4>)
 8000c32:	f002 f8e9 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000c3c:	f000 fd64 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3730      	adds	r7, #48	; 0x30
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200001dc 	.word	0x200001dc
 8000c4c:	50000400 	.word	0x50000400
 8000c50:	21800100 	.word	0x21800100

08000c54 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f00a fec5 	bl	800b9f0 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000c66:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000c68:	4a2b      	ldr	r2, [pc, #172]	; (8000d18 <MX_ADC4_Init+0xc4>)
 8000c6a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000c6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c72:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000cce:	4811      	ldr	r0, [pc, #68]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000cd0:	f001 fe78 	bl	80029c4 <HAL_ADC_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000cda:	f000 fd15 	bl	8001708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_ADC4_Init+0xc8>)
 8000ce0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce2:	2306      	movs	r3, #6
 8000ce4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cea:	237f      	movs	r3, #127	; 0x7f
 8000cec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_ADC4_Init+0xc0>)
 8000cfc:	f002 f884 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000d06:	f000 fcff 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000274 	.word	0x20000274
 8000d18:	50000500 	.word	0x50000500
 8000d1c:	25b00200 	.word	0x25b00200

08000d20 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	2220      	movs	r2, #32
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f00a fe5f 	bl	800b9f0 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d34:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <MX_ADC5_Init+0xc4>)
 8000d36:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d3e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000d9a:	4811      	ldr	r0, [pc, #68]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000d9c:	f001 fe12 	bl	80029c4 <HAL_ADC_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000da6:	f000 fcaf 	bl	8001708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_ADC5_Init+0xc8>)
 8000dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dae:	2306      	movs	r3, #6
 8000db0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000db6:	237f      	movs	r3, #127	; 0x7f
 8000db8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_ADC5_Init+0xc0>)
 8000dc8:	f002 f81e 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000dd2:	f000 fc99 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3720      	adds	r7, #32
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000030c 	.word	0x2000030c
 8000de4:	50000600 	.word	0x50000600
 8000de8:	08600004 	.word	0x08600004

08000dec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2230      	movs	r2, #48	; 0x30
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f00a fdf9 	bl	800b9f0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_DAC1_Init+0x80>)
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <MX_DAC1_Init+0x84>)
 8000e02:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e04:	4819      	ldr	r0, [pc, #100]	; (8000e6c <MX_DAC1_Init+0x80>)
 8000e06:	f002 fe8f 	bl	8003b28 <HAL_DAC_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e10:	f000 fc7a 	bl	8001708 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000e14:	2302      	movs	r3, #2
 8000e16:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000e24:	231e      	movs	r3, #30
 8000e26:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <MX_DAC1_Init+0x80>)
 8000e40:	f003 f81a 	bl	8003e78 <HAL_DAC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000e4a:	f000 fc5d 	bl	8001708 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2210      	movs	r2, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_DAC1_Init+0x80>)
 8000e56:	f003 f80f 	bl	8003e78 <HAL_DAC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000e60:	f000 fc52 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200003a4 	.word	0x200003a4
 8000e70:	50000800 	.word	0x50000800

08000e74 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2230      	movs	r2, #48	; 0x30
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f00a fdb5 	bl	800b9f0 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_DAC2_Init+0x6c>)
 8000e88:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <MX_DAC2_Init+0x70>)
 8000e8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000e8c:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <MX_DAC2_Init+0x6c>)
 8000e8e:	f002 fe4b 	bl	8003b28 <HAL_DAC_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000e98:	f000 fc36 	bl	8001708 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_DAC2_Init+0x6c>)
 8000ec8:	f002 ffd6 	bl	8003e78 <HAL_DAC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000ed2:	f000 fc19 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3730      	adds	r7, #48	; 0x30
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200003e0 	.word	0x200003e0
 8000ee4:	50000c00 	.word	0x50000c00

08000ee8 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	; 0x30
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2230      	movs	r2, #48	; 0x30
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00a fd7b 	bl	800b9f0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_DAC3_Init+0x80>)
 8000efc:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <MX_DAC3_Init+0x84>)
 8000efe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000f00:	4819      	ldr	r0, [pc, #100]	; (8000f68 <MX_DAC3_Init+0x80>)
 8000f02:	f002 fe11 	bl	8003b28 <HAL_DAC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000f0c:	f000 fbfc 	bl	8001708 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f10:	2302      	movs	r3, #2
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480b      	ldr	r0, [pc, #44]	; (8000f68 <MX_DAC3_Init+0x80>)
 8000f3c:	f002 ff9c 	bl	8003e78 <HAL_DAC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000f46:	f000 fbdf 	bl	8001708 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_DAC3_Init+0x80>)
 8000f52:	f002 ff91 	bl	8003e78 <HAL_DAC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000f5c:	f000 fbd4 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3730      	adds	r7, #48	; 0x30
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000041c 	.word	0x2000041c
 8000f6c:	50001000 	.word	0x50001000

08000f70 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2230      	movs	r2, #48	; 0x30
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f00a fd37 	bl	800b9f0 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_DAC4_Init+0x80>)
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <MX_DAC4_Init+0x84>)
 8000f86:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8000f88:	4819      	ldr	r0, [pc, #100]	; (8000ff0 <MX_DAC4_Init+0x80>)
 8000f8a:	f002 fdcd 	bl	8003b28 <HAL_DAC_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8000f94:	f000 fbb8 	bl	8001708 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <MX_DAC4_Init+0x80>)
 8000fc4:	f002 ff58 	bl	8003e78 <HAL_DAC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8000fce:	f000 fb9b 	bl	8001708 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_DAC4_Init+0x80>)
 8000fda:	f002 ff4d 	bl	8003e78 <HAL_DAC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_DAC4_Init+0x78>
  {
    Error_Handler();
 8000fe4:	f000 fb90 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3730      	adds	r7, #48	; 0x30
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000458 	.word	0x20000458
 8000ff4:	50001400 	.word	0x50001400

08000ff8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_OPAMP1_Init+0x44>)
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <MX_OPAMP1_Init+0x48>)
 8001000:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_OPAMP1_Init+0x44>)
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_OPAMP1_Init+0x44>)
 800100a:	2260      	movs	r2, #96	; 0x60
 800100c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_OPAMP1_Init+0x44>)
 8001010:	220c      	movs	r2, #12
 8001012:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_OPAMP1_Init+0x44>)
 8001016:	2200      	movs	r2, #0
 8001018:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_OPAMP1_Init+0x44>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_OPAMP1_Init+0x44>)
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_OPAMP1_Init+0x44>)
 8001028:	f003 fd84 	bl	8004b34 <HAL_OPAMP_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8001032:	f000 fb69 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200004f4 	.word	0x200004f4
 8001040:	40010300 	.word	0x40010300

08001044 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_OPAMP3_Init+0x44>)
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <MX_OPAMP3_Init+0x48>)
 800104c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_OPAMP3_Init+0x44>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_OPAMP3_Init+0x44>)
 8001056:	2260      	movs	r2, #96	; 0x60
 8001058:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_OPAMP3_Init+0x44>)
 800105c:	220c      	movs	r2, #12
 800105e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_OPAMP3_Init+0x44>)
 8001062:	2200      	movs	r2, #0
 8001064:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_OPAMP3_Init+0x44>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_OPAMP3_Init+0x44>)
 800106e:	2200      	movs	r2, #0
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_OPAMP3_Init+0x44>)
 8001074:	f003 fd5e 	bl	8004b34 <HAL_OPAMP_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 800107e:	f000 fb43 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000538 	.word	0x20000538
 800108c:	40010308 	.word	0x40010308

08001090 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_OPAMP4_Init+0x44>)
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <MX_OPAMP4_Init+0x48>)
 8001098:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_OPAMP4_Init+0x44>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_OPAMP4_Init+0x44>)
 80010a2:	2260      	movs	r2, #96	; 0x60
 80010a4:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_OPAMP4_Init+0x44>)
 80010a8:	220c      	movs	r2, #12
 80010aa:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_OPAMP4_Init+0x44>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_OPAMP4_Init+0x44>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_OPAMP4_Init+0x44>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_OPAMP4_Init+0x44>)
 80010c0:	f003 fd38 	bl	8004b34 <HAL_OPAMP_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 80010ca:	f000 fb1d 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000057c 	.word	0x2000057c
 80010d8:	4001030c 	.word	0x4001030c

080010dc <MX_OPAMP5_Init>:
  * @brief OPAMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP5_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_OPAMP5_Init+0x44>)
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <MX_OPAMP5_Init+0x48>)
 80010e4:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_OPAMP5_Init+0x44>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_FOLLOWER_MODE;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_OPAMP5_Init+0x44>)
 80010ee:	2260      	movs	r2, #96	; 0x60
 80010f0:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_OPAMP5_Init+0x44>)
 80010f4:	220c      	movs	r2, #12
 80010f6:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = DISABLE;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_OPAMP5_Init+0x44>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_OPAMP5_Init+0x44>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_OPAMP5_Init+0x44>)
 8001106:	2200      	movs	r2, #0
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_OPAMP5_Init+0x44>)
 800110c:	f003 fd12 	bl	8004b34 <HAL_OPAMP_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_OPAMP5_Init+0x3e>
  {
    Error_Handler();
 8001116:	f000 faf7 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200005c0 	.word	0x200005c0
 8001124:	40010310 	.word	0x40010310

08001128 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_OPAMP6_Init+0x44>)
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <MX_OPAMP6_Init+0x48>)
 8001130:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_OPAMP6_Init+0x44>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_OPAMP6_Init+0x44>)
 800113a:	2260      	movs	r2, #96	; 0x60
 800113c:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_OPAMP6_Init+0x44>)
 8001140:	220c      	movs	r2, #12
 8001142:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_OPAMP6_Init+0x44>)
 8001146:	2200      	movs	r2, #0
 8001148:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_OPAMP6_Init+0x44>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_OPAMP6_Init+0x44>)
 8001152:	2200      	movs	r2, #0
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_OPAMP6_Init+0x44>)
 8001158:	f003 fcec 	bl	8004b34 <HAL_OPAMP_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 8001162:	f000 fad1 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000604 	.word	0x20000604
 8001170:	40010314 	.word	0x40010314

08001174 <MX_QUADSPI1_Init>:
  * @brief QUADSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  /* QUADSPI1 parameter configuration*/
  hqspi1.Instance = QUADSPI;
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_QUADSPI1_Init+0x48>)
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <MX_QUADSPI1_Init+0x4c>)
 800117c:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 1;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_QUADSPI1_Init+0x48>)
 8001180:	2201      	movs	r2, #1
 8001182:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <MX_QUADSPI1_Init+0x48>)
 8001186:	2201      	movs	r2, #1
 8001188:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_QUADSPI1_Init+0x48>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 25;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MX_QUADSPI1_Init+0x48>)
 8001192:	2219      	movs	r2, #25
 8001194:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_QUADSPI1_Init+0x48>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_3;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_QUADSPI1_Init+0x48>)
 800119e:	2201      	movs	r2, #1
 80011a0:	619a      	str	r2, [r3, #24]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_QUADSPI1_Init+0x48>)
 80011a4:	2240      	movs	r2, #64	; 0x40
 80011a6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_QUADSPI1_Init+0x48>)
 80011aa:	f003 fe47 	bl	8004e3c <HAL_QSPI_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_QUADSPI1_Init+0x44>
  {
    Error_Handler();
 80011b4:	f000 faa8 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000648 	.word	0x20000648
 80011c0:	a0001000 	.word	0xa0001000

080011c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_SPI2_Init+0x74>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <MX_SPI2_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_SPI2_Init+0x74>)
 80011d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_SPI2_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_SPI2_Init+0x74>)
 80011de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_SPI2_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <MX_SPI2_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_SPI2_Init+0x74>)
 80011f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_SPI2_Init+0x74>)
 80011fa:	2208      	movs	r2, #8
 80011fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_SPI2_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_SPI2_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_SPI2_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_SPI2_Init+0x74>)
 8001212:	2207      	movs	r2, #7
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_SPI2_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_SPI2_Init+0x74>)
 800121e:	2208      	movs	r2, #8
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_SPI2_Init+0x74>)
 8001224:	f004 ff42 	bl	80060ac <HAL_SPI_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 fa6b 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200006c4 	.word	0x200006c4
 800123c:	40003800 	.word	0x40003800

08001240 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_SPI3_Init+0x74>)
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_SPI3_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_SPI3_Init+0x74>)
 800124c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001250:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_SPI3_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_SPI3_Init+0x74>)
 800125a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800125e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_SPI3_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_SPI3_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_SPI3_Init+0x74>)
 800126e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001272:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_SPI3_Init+0x74>)
 8001276:	2208      	movs	r2, #8
 8001278:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_SPI3_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_SPI3_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_SPI3_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_SPI3_Init+0x74>)
 800128e:	2207      	movs	r2, #7
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_SPI3_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_SPI3_Init+0x74>)
 800129a:	2208      	movs	r2, #8
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_SPI3_Init+0x74>)
 80012a0:	f004 ff04 	bl	80060ac <HAL_SPI_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f000 fa2d 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000750 	.word	0x20000750
 80012b8:	40003c00 	.word	0x40003c00

080012bc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_SPI4_Init+0x74>)
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <MX_SPI4_Init+0x78>)
 80012c4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_SPI4_Init+0x74>)
 80012c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012cc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_SPI4_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_SPI4_Init+0x74>)
 80012d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012da:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_SPI4_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_SPI4_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_SPI4_Init+0x74>)
 80012ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ee:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_SPI4_Init+0x74>)
 80012f2:	2208      	movs	r2, #8
 80012f4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_SPI4_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_SPI4_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_SPI4_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_SPI4_Init+0x74>)
 800130a:	2207      	movs	r2, #7
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_SPI4_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_SPI4_Init+0x74>)
 8001316:	2208      	movs	r2, #8
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_SPI4_Init+0x74>)
 800131c:	f004 fec6 	bl	80060ac <HAL_SPI_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001326:	f000 f9ef 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200007dc 	.word	0x200007dc
 8001334:	40013c00 	.word	0x40013c00

08001338 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_TIM6_Init+0x64>)
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <MX_TIM6_Init+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_TIM6_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_TIM6_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3627;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_TIM6_Init+0x64>)
 800135c:	f640 622b 	movw	r2, #3627	; 0xe2b
 8001360:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_TIM6_Init+0x64>)
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM6_Init+0x64>)
 800136a:	f004 ffd1 	bl	8006310 <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001374:	f000 f9c8 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001378:	2320      	movs	r3, #32
 800137a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM6_Init+0x64>)
 8001386:	f005 fd6d 	bl	8006e64 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001390:	f000 f9ba 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000868 	.word	0x20000868
 80013a0:	40001000 	.word	0x40001000

080013a4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_UART5_Init+0x98>)
 80013aa:	4a25      	ldr	r2, [pc, #148]	; (8001440 <MX_UART5_Init+0x9c>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80013ae:	4b23      	ldr	r3, [pc, #140]	; (800143c <MX_UART5_Init+0x98>)
 80013b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_UART5_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_UART5_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_UART5_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_UART5_Init+0x98>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_UART5_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_UART5_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_UART5_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_UART5_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_UART5_Init+0x98>)
 80013e8:	2208      	movs	r2, #8
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_UART5_Init+0x98>)
 80013ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013f2:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80013f4:	4811      	ldr	r0, [pc, #68]	; (800143c <MX_UART5_Init+0x98>)
 80013f6:	f005 fe1b 	bl	8007030 <HAL_UART_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_UART5_Init+0x60>
  {
    Error_Handler();
 8001400:	f000 f982 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_UART5_Init+0x98>)
 8001408:	f006 fd22 	bl	8007e50 <HAL_UARTEx_SetTxFifoThreshold>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_UART5_Init+0x72>
  {
    Error_Handler();
 8001412:	f000 f979 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <MX_UART5_Init+0x98>)
 800141a:	f006 fd57 	bl	8007ecc <HAL_UARTEx_SetRxFifoThreshold>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_UART5_Init+0x84>
  {
    Error_Handler();
 8001424:	f000 f970 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart5) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_UART5_Init+0x98>)
 800142a:	f006 fcd6 	bl	8007dda <HAL_UARTEx_EnableFifoMode>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_UART5_Init+0x94>
  {
    Error_Handler();
 8001434:	f000 f968 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000934 	.word	0x20000934
 8001440:	40005000 	.word	0x40005000

08001444 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_USART3_Init+0x90>)
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <MX_USART3_Init+0x94>)
 800144c:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_USART3_Init+0x90>)
 8001450:	4a22      	ldr	r2, [pc, #136]	; (80014dc <MX_USART3_Init+0x98>)
 8001452:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_USART3_Init+0x90>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_USART3_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_USART3_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_USART3_Init+0x90>)
 8001468:	220c      	movs	r2, #12
 800146a:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_USART3_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_USART3_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_USART3_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_USART3_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_USART3_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 800148a:	4812      	ldr	r0, [pc, #72]	; (80014d4 <MX_USART3_Init+0x90>)
 800148c:	f006 fdaa 	bl	8007fe4 <HAL_USART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART3_Init+0x56>
  {
    Error_Handler();
 8001496:	f000 f937 	bl	8001708 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart3, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149a:	2100      	movs	r1, #0
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_USART3_Init+0x90>)
 800149e:	f007 fa27 	bl	80088f0 <HAL_USARTEx_SetTxFifoThreshold>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_USART3_Init+0x68>
  {
    Error_Handler();
 80014a8:	f000 f92e 	bl	8001708 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart3, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <MX_USART3_Init+0x90>)
 80014b0:	f007 fa5c 	bl	800896c <HAL_USARTEx_SetRxFifoThreshold>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART3_Init+0x7a>
  {
    Error_Handler();
 80014ba:	f000 f925 	bl	8001708 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart3) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART3_Init+0x90>)
 80014c0:	f007 f9dd 	bl	800887e <HAL_USARTEx_DisableFifoMode>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART3_Init+0x8a>
  {
    Error_Handler();
 80014ca:	f000 f91d 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000a00 	.word	0x20000a00
 80014d8:	40004800 	.word	0x40004800
 80014dc:	007a1200 	.word	0x007a1200

080014e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_DMA_Init+0x50>)
 80014e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ea:	4a11      	ldr	r2, [pc, #68]	; (8001530 <MX_DMA_Init+0x50>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6493      	str	r3, [r2, #72]	; 0x48
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_DMA_Init+0x50>)
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_DMA_Init+0x50>)
 8001500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <MX_DMA_Init+0x50>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6493      	str	r3, [r2, #72]	; 0x48
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_DMA_Init+0x50>)
 800150c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	200b      	movs	r0, #11
 800151c:	f002 fadc 	bl	8003ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001520:	200b      	movs	r0, #11
 8001522:	f002 faf3 	bl	8003b0c <HAL_NVIC_EnableIRQ>

}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <MX_GPIO_Init+0x18c>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a5c      	ldr	r2, [pc, #368]	; (80016c0 <MX_GPIO_Init+0x18c>)
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <MX_GPIO_Init+0x18c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <MX_GPIO_Init+0x18c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <MX_GPIO_Init+0x18c>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b54      	ldr	r3, [pc, #336]	; (80016c0 <MX_GPIO_Init+0x18c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	4b51      	ldr	r3, [pc, #324]	; (80016c0 <MX_GPIO_Init+0x18c>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a50      	ldr	r2, [pc, #320]	; (80016c0 <MX_GPIO_Init+0x18c>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b4e      	ldr	r3, [pc, #312]	; (80016c0 <MX_GPIO_Init+0x18c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <MX_GPIO_Init+0x18c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a4a      	ldr	r2, [pc, #296]	; (80016c0 <MX_GPIO_Init+0x18c>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <MX_GPIO_Init+0x18c>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <MX_GPIO_Init+0x18c>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a44      	ldr	r2, [pc, #272]	; (80016c0 <MX_GPIO_Init+0x18c>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <MX_GPIO_Init+0x18c>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015c2:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <MX_GPIO_Init+0x18c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a3e      	ldr	r2, [pc, #248]	; (80016c0 <MX_GPIO_Init+0x18c>)
 80015c8:	f043 0320 	orr.w	r3, r3, #32
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <MX_GPIO_Init+0x18c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_NRST_GPIO_Port, TFT_NRST_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	4839      	ldr	r0, [pc, #228]	; (80016c4 <MX_GPIO_Init+0x190>)
 80015e0:	f003 fa90 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 7101 	mov.w	r1, #516	; 0x204
 80015ea:	4837      	ldr	r0, [pc, #220]	; (80016c8 <MX_GPIO_Init+0x194>)
 80015ec:	f003 fa8a 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f240 210b 	movw	r1, #523	; 0x20b
 80015f6:	4835      	ldr	r0, [pc, #212]	; (80016cc <MX_GPIO_Init+0x198>)
 80015f8:	f003 fa84 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_SPI_DC_GPIO_Port, TFT_SPI_DC_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2101      	movs	r1, #1
 8001600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001604:	f003 fa7e 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_NRST_Pin */
  GPIO_InitStruct.Pin = TFT_NRST_Pin;
 8001608:	2340      	movs	r3, #64	; 0x40
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_NRST_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4829      	ldr	r0, [pc, #164]	; (80016c4 <MX_GPIO_Init+0x190>)
 8001620:	f003 f8ee 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRIDGE_CLK_Pin */
  GPIO_InitStruct.Pin = BRIDGE_CLK_Pin;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001634:	2304      	movs	r3, #4
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BRIDGE_CLK_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4824      	ldr	r0, [pc, #144]	; (80016d0 <MX_GPIO_Init+0x19c>)
 8001640:	f003 f8de 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUD_ORANGE_R_OUTPUT_EN_Pin AUD_ORANGE_L_OUTPUT_EN_Pin */
  GPIO_InitStruct.Pin = AUD_ORANGE_R_OUTPUT_EN_Pin|AUD_ORANGE_L_OUTPUT_EN_Pin;
 8001644:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	481a      	ldr	r0, [pc, #104]	; (80016c8 <MX_GPIO_Init+0x194>)
 800165e:	f003 f8cf 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pins : MICRO_SD_CS_Pin AUD_GREEN_L_OUTPUT_EN_Pin AUD_GREEN_R_OUTPUT_EN_Pin ROT_B_Pin */
  GPIO_InitStruct.Pin = MICRO_SD_CS_Pin|AUD_GREEN_L_OUTPUT_EN_Pin|AUD_GREEN_R_OUTPUT_EN_Pin|ROT_B_Pin;
 8001662:	f240 230b 	movw	r3, #523	; 0x20b
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4814      	ldr	r0, [pc, #80]	; (80016cc <MX_GPIO_Init+0x198>)
 800167c:	f003 f8c0 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_A_Pin ROT_S2_Pin ROT_S1_Pin ROT_C_Pin */
  GPIO_InitStruct.Pin = ROT_A_Pin|ROT_S2_Pin|ROT_S1_Pin|ROT_C_Pin;
 8001680:	2374      	movs	r3, #116	; 0x74
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <MX_GPIO_Init+0x198>)
 8001694:	f003 f8b4 	bl	8004800 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_SPI_DC_Pin */
  GPIO_InitStruct.Pin = TFT_SPI_DC_Pin;
 8001698:	2301      	movs	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_SPI_DC_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b2:	f003 f8a5 	bl	8004800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b6:	bf00      	nop
 80016b8:	3730      	adds	r7, #48	; 0x30
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	48001400 	.word	0x48001400
 80016cc:	48000800 	.word	0x48000800
 80016d0:	48000c00 	.word	0x48000c00

080016d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016dc:	2001      	movs	r0, #1
 80016de:	f007 fbb9 	bl	8008e54 <osDelay>
 80016e2:	e7fb      	b.n	80016dc <StartDefaultTask+0x8>

080016e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016f6:	f000 ff71 	bl	80025dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40001400 	.word	0x40001400

08001708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001710:	e7fe      	b.n	8001710 <Error_Handler+0x8>
	...

08001714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_MspInit+0x4c>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <HAL_MspInit+0x4c>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6613      	str	r3, [r2, #96]	; 0x60
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_MspInit+0x4c>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_MspInit+0x4c>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_MspInit+0x4c>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_MspInit+0x4c>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	210f      	movs	r1, #15
 800174e:	f06f 0001 	mvn.w	r0, #1
 8001752:	f002 f9c1 	bl	8003ad8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0a8      	sub	sp, #160	; 0xa0
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800177c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001780:	2254      	movs	r2, #84	; 0x54
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f00a f933 	bl	800b9f0 <memset>
  if(hadc->Instance==ADC1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001792:	d141      	bne.n	8001818 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800179a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800179e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fa33 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80017b0:	f7ff ffaa 	bl	8001708 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017b4:	4b84      	ldr	r3, [pc, #528]	; (80019c8 <HAL_ADC_MspInit+0x264>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a83      	ldr	r2, [pc, #524]	; (80019c8 <HAL_ADC_MspInit+0x264>)
 80017bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017be:	4b82      	ldr	r3, [pc, #520]	; (80019c8 <HAL_ADC_MspInit+0x264>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d10b      	bne.n	80017de <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017c6:	4b81      	ldr	r3, [pc, #516]	; (80019cc <HAL_ADC_MspInit+0x268>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4a80      	ldr	r2, [pc, #512]	; (80019cc <HAL_ADC_MspInit+0x268>)
 80017cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4b7e      	ldr	r3, [pc, #504]	; (80019cc <HAL_ADC_MspInit+0x268>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
 80017dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <HAL_ADC_MspInit+0x268>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4a7a      	ldr	r2, [pc, #488]	; (80019cc <HAL_ADC_MspInit+0x268>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4b78      	ldr	r3, [pc, #480]	; (80019cc <HAL_ADC_MspInit+0x268>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
 80017f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AUD_GRN_MIC_POSTAMP_Pin;
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fc:	2303      	movs	r3, #3
 80017fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_GRN_MIC_POSTAMP_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f002 fff5 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8001816:	e165      	b.n	8001ae4 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a6c      	ldr	r2, [pc, #432]	; (80019d0 <HAL_ADC_MspInit+0x26c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d141      	bne.n	80018a6 <HAL_ADC_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001828:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800182c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001832:	4618      	mov	r0, r3
 8001834:	f004 f9ec 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_ADC_MspInit+0xde>
      Error_Handler();
 800183e:	f7ff ff63 	bl	8001708 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001842:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <HAL_ADC_MspInit+0x264>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a5f      	ldr	r2, [pc, #380]	; (80019c8 <HAL_ADC_MspInit+0x264>)
 800184a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800184c:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <HAL_ADC_MspInit+0x264>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d10b      	bne.n	800186c <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001854:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <HAL_ADC_MspInit+0x268>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	4a5c      	ldr	r2, [pc, #368]	; (80019cc <HAL_ADC_MspInit+0x268>)
 800185a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800185e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001860:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <HAL_ADC_MspInit+0x268>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b57      	ldr	r3, [pc, #348]	; (80019cc <HAL_ADC_MspInit+0x268>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	4a56      	ldr	r2, [pc, #344]	; (80019cc <HAL_ADC_MspInit+0x268>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001878:	4b54      	ldr	r3, [pc, #336]	; (80019cc <HAL_ADC_MspInit+0x268>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
 8001882:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_S_Pin;
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188a:	2303      	movs	r3, #3
 800188c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_S_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f002 ffae 	bl	8004800 <HAL_GPIO_Init>
}
 80018a4:	e11e      	b.n	8001ae4 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC3)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a4a      	ldr	r2, [pc, #296]	; (80019d4 <HAL_ADC_MspInit+0x270>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d142      	bne.n	8001936 <HAL_ADC_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80018b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80018b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80018ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 f9a4 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_ADC_MspInit+0x16e>
      Error_Handler();
 80018ce:	f7ff ff1b 	bl	8001708 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_ADC_MspInit+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	4a3f      	ldr	r2, [pc, #252]	; (80019d8 <HAL_ADC_MspInit+0x274>)
 80018da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80018dc:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <HAL_ADC_MspInit+0x274>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d10b      	bne.n	80018fc <HAL_ADC_MspInit+0x198>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80018e4:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_ADC_MspInit+0x268>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	4a38      	ldr	r2, [pc, #224]	; (80019cc <HAL_ADC_MspInit+0x268>)
 80018ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f0:	4b36      	ldr	r3, [pc, #216]	; (80019cc <HAL_ADC_MspInit+0x268>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fc:	4b33      	ldr	r3, [pc, #204]	; (80019cc <HAL_ADC_MspInit+0x268>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	4a32      	ldr	r2, [pc, #200]	; (80019cc <HAL_ADC_MspInit+0x268>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001908:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_ADC_MspInit+0x268>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	623b      	str	r3, [r7, #32]
 8001912:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_R1_Pin;
 8001914:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001918:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191c:	2303      	movs	r3, #3
 800191e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_R1_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800192c:	4619      	mov	r1, r3
 800192e:	482b      	ldr	r0, [pc, #172]	; (80019dc <HAL_ADC_MspInit+0x278>)
 8001930:	f002 ff66 	bl	8004800 <HAL_GPIO_Init>
}
 8001934:	e0d6      	b.n	8001ae4 <HAL_ADC_MspInit+0x380>
  else if(hadc->Instance==ADC4)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a29      	ldr	r2, [pc, #164]	; (80019e0 <HAL_ADC_MspInit+0x27c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d151      	bne.n	80019e4 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001946:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800194a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800194e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001952:	4618      	mov	r0, r3
 8001954:	f004 f95c 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_ADC_MspInit+0x1fe>
      Error_Handler();
 800195e:	f7ff fed3 	bl	8001708 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_ADC_MspInit+0x274>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <HAL_ADC_MspInit+0x274>)
 800196a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_ADC_MspInit+0x274>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d10b      	bne.n	800198c <HAL_ADC_MspInit+0x228>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_ADC_MspInit+0x268>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <HAL_ADC_MspInit+0x268>)
 800197a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_ADC_MspInit+0x268>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_ADC_MspInit+0x268>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_ADC_MspInit+0x268>)
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_ADC_MspInit+0x268>)
 800199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PINK_BUFFERED_ANALOG_IN_T_Pin;
 80019a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ac:	2303      	movs	r3, #3
 80019ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(PINK_BUFFERED_ANALOG_IN_T_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019bc:	4619      	mov	r1, r3
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <HAL_ADC_MspInit+0x278>)
 80019c0:	f002 ff1e 	bl	8004800 <HAL_GPIO_Init>
}
 80019c4:	e08e      	b.n	8001ae4 <HAL_ADC_MspInit+0x380>
 80019c6:	bf00      	nop
 80019c8:	20000d80 	.word	0x20000d80
 80019cc:	40021000 	.word	0x40021000
 80019d0:	50000100 	.word	0x50000100
 80019d4:	50000400 	.word	0x50000400
 80019d8:	20000d84 	.word	0x20000d84
 80019dc:	48000c00 	.word	0x48000c00
 80019e0:	50000500 	.word	0x50000500
  else if(hadc->Instance==ADC5)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a40      	ldr	r2, [pc, #256]	; (8001aec <HAL_ADC_MspInit+0x388>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d17a      	bne.n	8001ae4 <HAL_ADC_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80019ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80019f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a00:	4618      	mov	r0, r3
 8001a02:	f004 f905 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_ADC_MspInit+0x2ac>
      Error_Handler();
 8001a0c:	f7ff fe7c 	bl	8001708 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001a10:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <HAL_ADC_MspInit+0x38c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	4a36      	ldr	r2, [pc, #216]	; (8001af0 <HAL_ADC_MspInit+0x38c>)
 8001a18:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001a1a:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_ADC_MspInit+0x38c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10b      	bne.n	8001a3a <HAL_ADC_MspInit+0x2d6>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001a22:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a33      	ldr	r2, [pc, #204]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b31      	ldr	r3, [pc, #196]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a21      	ldr	r2, [pc, #132]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <HAL_ADC_MspInit+0x390>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = AUD_ORANGE_S_UNBUFFERED_IN_Pin;
 8001a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_ORANGE_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa0:	f002 feae 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_T_UNBUFFERED_IN_Pin|AUD_BLACK_R1_UNBUFFERED_IN_Pin|VOLUME_ANALOG_IN_Pin;
 8001aa4:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8001aa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aac:	2303      	movs	r3, #3
 8001aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001abc:	4619      	mov	r1, r3
 8001abe:	480e      	ldr	r0, [pc, #56]	; (8001af8 <HAL_ADC_MspInit+0x394>)
 8001ac0:	f002 fe9e 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUD_BLACK_S_UNBUFFERED_IN_Pin;
 8001ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001acc:	2303      	movs	r3, #3
 8001ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(AUD_BLACK_S_UNBUFFERED_IN_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001adc:	4619      	mov	r1, r3
 8001ade:	4807      	ldr	r0, [pc, #28]	; (8001afc <HAL_ADC_MspInit+0x398>)
 8001ae0:	f002 fe8e 	bl	8004800 <HAL_GPIO_Init>
}
 8001ae4:	bf00      	nop
 8001ae6:	37a0      	adds	r7, #160	; 0xa0
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	50000600 	.word	0x50000600
 8001af0:	20000d84 	.word	0x20000d84
 8001af4:	40021000 	.word	0x40021000
 8001af8:	48000c00 	.word	0x48000c00
 8001afc:	48001000 	.word	0x48001000

08001b00 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	; 0x38
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a63      	ldr	r2, [pc, #396]	; (8001cac <HAL_DAC_MspInit+0x1ac>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d159      	bne.n	8001bd6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b22:	4b63      	ldr	r3, [pc, #396]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a62      	ldr	r2, [pc, #392]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b36:	623b      	str	r3, [r7, #32]
 8001b38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	4a5c      	ldr	r2, [pc, #368]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b46:	4b5a      	ldr	r3, [pc, #360]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = AUD_GREEN_L_PREAMP_AUDIO_Pin|AUD_GREEN_R_PREAMP_AUDIO_Pin;
 8001b52:	2330      	movs	r3, #48	; 0x30
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b56:	2303      	movs	r3, #3
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b68:	f002 fe4a 	bl	8004800 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001b6c:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001b6e:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_DAC_MspInit+0x1b8>)
 8001b70:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001b72:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001b74:	2206      	movs	r2, #6
 8001b76:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b78:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7e:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b90:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b92:	4b48      	ldr	r3, [pc, #288]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b98:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001b9a:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ba0:	4b44      	ldr	r3, [pc, #272]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001ba2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001ba8:	4842      	ldr	r0, [pc, #264]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001baa:	f002 fbb7 	bl	800431c <HAL_DMA_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001bb4:	f7ff fda8 	bl	8001708 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a3e      	ldr	r2, [pc, #248]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	; (8001cb4 <HAL_DAC_MspInit+0x1b4>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2105      	movs	r1, #5
 8001bc8:	2036      	movs	r0, #54	; 0x36
 8001bca:	f001 ff85 	bl	8003ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bce:	2036      	movs	r0, #54	; 0x36
 8001bd0:	f001 ff9c 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8001bd4:	e065      	b.n	8001ca2 <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a38      	ldr	r2, [pc, #224]	; (8001cbc <HAL_DAC_MspInit+0x1bc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d12d      	bne.n	8001c3c <HAL_DAC_MspInit+0x13c>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001be0:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	4a2c      	ldr	r2, [pc, #176]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TFT_LED_LVL_Pin;
 8001c10:	2340      	movs	r3, #64	; 0x40
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c14:	2303      	movs	r3, #3
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TFT_LED_LVL_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	4619      	mov	r1, r3
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c26:	f002 fdeb 	bl	8004800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	2037      	movs	r0, #55	; 0x37
 8001c30:	f001 ff52 	bl	8003ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001c34:	2037      	movs	r0, #55	; 0x37
 8001c36:	f001 ff69 	bl	8003b0c <HAL_NVIC_EnableIRQ>
}
 8001c3a:	e032      	b.n	8001ca2 <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_DAC_MspInit+0x1c0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d114      	bne.n	8001c70 <HAL_DAC_MspInit+0x170>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2105      	movs	r1, #5
 8001c62:	2036      	movs	r0, #54	; 0x36
 8001c64:	f001 ff38 	bl	8003ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c68:	2036      	movs	r0, #54	; 0x36
 8001c6a:	f001 ff4f 	bl	8003b0c <HAL_NVIC_EnableIRQ>
}
 8001c6e:	e018      	b.n	8001ca2 <HAL_DAC_MspInit+0x1a2>
  else if(hdac->Instance==DAC4)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <HAL_DAC_MspInit+0x1c4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d113      	bne.n	8001ca2 <HAL_DAC_MspInit+0x1a2>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001c80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_DAC_MspInit+0x1b0>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 15, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	210f      	movs	r1, #15
 8001c96:	2037      	movs	r0, #55	; 0x37
 8001c98:	f001 ff1e 	bl	8003ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001c9c:	2037      	movs	r0, #55	; 0x37
 8001c9e:	f001 ff35 	bl	8003b0c <HAL_NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3738      	adds	r7, #56	; 0x38
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	50000800 	.word	0x50000800
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	20000494 	.word	0x20000494
 8001cb8:	40020008 	.word	0x40020008
 8001cbc:	50000c00 	.word	0x50000c00
 8001cc0:	50001000 	.word	0x50001000
 8001cc4:	50001400 	.word	0x50001400

08001cc8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_OPAMP_MspInit+0x154>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d119      	bne.n	8001d1e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = AUD_ORANGE_L_PREAMP_AUDIO_Pin;
 8001d02:	2304      	movs	r3, #4
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d06:	2303      	movs	r3, #3
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_L_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f002 fd72 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8001d1c:	e07a      	b.n	8001e14 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP3)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <HAL_OPAMP_MspInit+0x15c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d118      	bne.n	8001d5a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	4a3c      	ldr	r2, [pc, #240]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d34:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AUD_ORANGE_PREAMP_AUDIO_Pin;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d44:	2303      	movs	r3, #3
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUD_ORANGE_PREAMP_AUDIO_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	4619      	mov	r1, r3
 8001d52:	4835      	ldr	r0, [pc, #212]	; (8001e28 <HAL_OPAMP_MspInit+0x160>)
 8001d54:	f002 fd54 	bl	8004800 <HAL_GPIO_Init>
}
 8001d58:	e05c      	b.n	8001e14 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP4)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a33      	ldr	r2, [pc, #204]	; (8001e2c <HAL_OPAMP_MspInit+0x164>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d119      	bne.n	8001d98 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	4a2d      	ldr	r2, [pc, #180]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d82:	2303      	movs	r3, #3
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4825      	ldr	r0, [pc, #148]	; (8001e28 <HAL_OPAMP_MspInit+0x160>)
 8001d92:	f002 fd35 	bl	8004800 <HAL_GPIO_Init>
}
 8001d96:	e03d      	b.n	8001e14 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP5)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a24      	ldr	r2, [pc, #144]	; (8001e30 <HAL_OPAMP_MspInit+0x168>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d11a      	bne.n	8001dd8 <HAL_OPAMP_MspInit+0x110>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd2:	f002 fd15 	bl	8004800 <HAL_GPIO_Init>
}
 8001dd6:	e01d      	b.n	8001e14 <HAL_OPAMP_MspInit+0x14c>
  else if(hopamp->Instance==OPAMP6)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_OPAMP_MspInit+0x16c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d118      	bne.n	8001e14 <HAL_OPAMP_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_OPAMP_MspInit+0x158>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e00:	2303      	movs	r3, #3
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4806      	ldr	r0, [pc, #24]	; (8001e28 <HAL_OPAMP_MspInit+0x160>)
 8001e10:	f002 fcf6 	bl	8004800 <HAL_GPIO_Init>
}
 8001e14:	bf00      	nop
 8001e16:	3730      	adds	r7, #48	; 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40010300 	.word	0x40010300
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010308 	.word	0x40010308
 8001e28:	48000400 	.word	0x48000400
 8001e2c:	4001030c 	.word	0x4001030c
 8001e30:	40010310 	.word	0x40010310
 8001e34:	40010314 	.word	0x40010314

08001e38 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b0a0      	sub	sp, #128	; 0x80
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	2254      	movs	r2, #84	; 0x54
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f009 fdc9 	bl	800b9f0 <memset>
  if(hqspi->Instance==QUADSPI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a3c      	ldr	r2, [pc, #240]	; (8001f54 <HAL_QSPI_MspInit+0x11c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d170      	bne.n	8001f4a <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001e68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 feca 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 8001e82:	f7ff fc41 	bl	8001708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e86:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8a:	4a33      	ldr	r2, [pc, #204]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6513      	str	r3, [r2, #80]	; 0x50
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a2d      	ldr	r2, [pc, #180]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001ebc:	f043 0320 	orr.w	r3, r3, #32
 8001ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec2:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001ed4:	f043 0310 	orr.w	r3, r3, #16
 8001ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_QSPI_MspInit+0x120>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
    PE15     ------> QUADSPI1_BK1_IO3
    PE11     ------> QUADSPI1_BK1_NCS
    PE14     ------> QUADSPI1_BK1_IO2
    PE13     ------> QUADSPI1_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7
 8001ee6:	23f8      	movs	r3, #248	; 0xf8
 8001ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001efe:	4619      	mov	r1, r3
 8001f00:	4816      	ldr	r0, [pc, #88]	; (8001f5c <HAL_QSPI_MspInit+0x124>)
 8001f02:	f002 fc7d 	bl	8004800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f18:	230a      	movs	r3, #10
 8001f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f20:	4619      	mov	r1, r3
 8001f22:	480f      	ldr	r0, [pc, #60]	; (8001f60 <HAL_QSPI_MspInit+0x128>)
 8001f24:	f002 fc6c 	bl	8004800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14
 8001f28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f42:	4619      	mov	r1, r3
 8001f44:	4807      	ldr	r0, [pc, #28]	; (8001f64 <HAL_QSPI_MspInit+0x12c>)
 8001f46:	f002 fc5b 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3780      	adds	r7, #128	; 0x80
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	a0001000 	.word	0xa0001000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000c00 	.word	0x48000c00
 8001f60:	48001400 	.word	0x48001400
 8001f64:	48001000 	.word	0x48001000

08001f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b090      	sub	sp, #64	; 0x40
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a62      	ldr	r2, [pc, #392]	; (8002110 <HAL_SPI_MspInit+0x1a8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d146      	bne.n	8002018 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f8a:	4b62      	ldr	r3, [pc, #392]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	4a61      	ldr	r2, [pc, #388]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6593      	str	r3, [r2, #88]	; 0x58
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa2:	4b5c      	ldr	r3, [pc, #368]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	4a5b      	ldr	r2, [pc, #364]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fae:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	4b56      	ldr	r3, [pc, #344]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a55      	ldr	r2, [pc, #340]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
    PD15     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001fe4:	2306      	movs	r3, #6
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fec:	4619      	mov	r1, r3
 8001fee:	484a      	ldr	r0, [pc, #296]	; (8002118 <HAL_SPI_MspInit+0x1b0>)
 8001ff0:	f002 fc06 	bl	8004800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8001ff4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002006:	2305      	movs	r3, #5
 8002008:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800200e:	4619      	mov	r1, r3
 8002010:	4842      	ldr	r0, [pc, #264]	; (800211c <HAL_SPI_MspInit+0x1b4>)
 8002012:	f002 fbf5 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002016:	e077      	b.n	8002108 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a40      	ldr	r2, [pc, #256]	; (8002120 <HAL_SPI_MspInit+0x1b8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d145      	bne.n	80020ae <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002022:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8002028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a35      	ldr	r2, [pc, #212]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b33      	ldr	r3, [pc, #204]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a2f      	ldr	r2, [pc, #188]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800206a:	2320      	movs	r3, #32
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800207a:	2306      	movs	r3, #6
 800207c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002082:	4619      	mov	r1, r3
 8002084:	4825      	ldr	r0, [pc, #148]	; (800211c <HAL_SPI_MspInit+0x1b4>)
 8002086:	f002 fbbb 	bl	8004800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800208a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800209c:	2306      	movs	r3, #6
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a4:	4619      	mov	r1, r3
 80020a6:	481f      	ldr	r0, [pc, #124]	; (8002124 <HAL_SPI_MspInit+0x1bc>)
 80020a8:	f002 fbaa 	bl	8004800 <HAL_GPIO_Init>
}
 80020ac:	e02c      	b.n	8002108 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI4)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_SPI_MspInit+0x1c0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d127      	bne.n	8002108 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 80020ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020bc:	4a15      	ldr	r2, [pc, #84]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 80020be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c2:	6613      	str	r3, [r2, #96]	; 0x60
 80020c4:	4b13      	ldr	r3, [pc, #76]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 80020c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 80020d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d4:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_SPI_MspInit+0x1ac>)
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_2;
 80020e8:	2374      	movs	r3, #116	; 0x74
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020f8:	2305      	movs	r3, #5
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002100:	4619      	mov	r1, r3
 8002102:	480a      	ldr	r0, [pc, #40]	; (800212c <HAL_SPI_MspInit+0x1c4>)
 8002104:	f002 fb7c 	bl	8004800 <HAL_GPIO_Init>
}
 8002108:	bf00      	nop
 800210a:	3740      	adds	r7, #64	; 0x40
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40003800 	.word	0x40003800
 8002114:	40021000 	.word	0x40021000
 8002118:	48000c00 	.word	0x48000c00
 800211c:	48000400 	.word	0x48000400
 8002120:	40003c00 	.word	0x40003c00
 8002124:	48000800 	.word	0x48000800
 8002128:	40013c00 	.word	0x40013c00
 800212c:	48001000 	.word	0x48001000

08002130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_TIM_Base_MspInit+0x44>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d113      	bne.n	800216a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <HAL_TIM_Base_MspInit+0x48>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <HAL_TIM_Base_MspInit+0x48>)
 8002148:	f043 0310 	orr.w	r3, r3, #16
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_TIM_Base_MspInit+0x48>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2105      	movs	r1, #5
 800215e:	2036      	movs	r0, #54	; 0x36
 8002160:	f001 fcba 	bl	8003ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002164:	2036      	movs	r0, #54	; 0x36
 8002166:	f001 fcd1 	bl	8003b0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40001000 	.word	0x40001000
 8002178:	40021000 	.word	0x40021000

0800217c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0a0      	sub	sp, #128	; 0x80
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002194:	f107 0318 	add.w	r3, r7, #24
 8002198:	2254      	movs	r2, #84	; 0x54
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f009 fc27 	bl	800b9f0 <memset>
  if(huart->Instance==UART5)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2d      	ldr	r2, [pc, #180]	; (800225c <HAL_UART_MspInit+0xe0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d153      	bne.n	8002254 <HAL_UART_MspInit+0xd8>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80021ac:	2310      	movs	r3, #16
 80021ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 80021b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b6:	f107 0318 	add.w	r3, r7, #24
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 fd28 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021c6:	f7ff fa9f 	bl	8001708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80021ca:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_UART_MspInit+0xe4>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a24      	ldr	r2, [pc, #144]	; (8002260 <HAL_UART_MspInit+0xe4>)
 80021d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
 80021d6:	4b22      	ldr	r3, [pc, #136]	; (8002260 <HAL_UART_MspInit+0xe4>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <HAL_UART_MspInit+0xe4>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_UART_MspInit+0xe4>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <HAL_UART_MspInit+0xe4>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_UART_MspInit+0xe4>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_UART_MspInit+0xe4>)
 8002200:	f043 0308 	orr.w	r3, r3, #8
 8002204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_UART_MspInit+0xe4>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002216:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002224:	2305      	movs	r3, #5
 8002226:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002228:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800222c:	4619      	mov	r1, r3
 800222e:	480d      	ldr	r0, [pc, #52]	; (8002264 <HAL_UART_MspInit+0xe8>)
 8002230:	f002 fae6 	bl	8004800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002234:	2304      	movs	r3, #4
 8002236:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002244:	2305      	movs	r3, #5
 8002246:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002248:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800224c:	4619      	mov	r1, r3
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <HAL_UART_MspInit+0xec>)
 8002250:	f002 fad6 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002254:	bf00      	nop
 8002256:	3780      	adds	r7, #128	; 0x80
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40005000 	.word	0x40005000
 8002260:	40021000 	.word	0x40021000
 8002264:	48000800 	.word	0x48000800
 8002268:	48000c00 	.word	0x48000c00

0800226c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0a0      	sub	sp, #128	; 0x80
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	2254      	movs	r2, #84	; 0x54
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f009 fbaf 	bl	800b9f0 <memset>
  if(husart->Instance==USART3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2d      	ldr	r2, [pc, #180]	; (800234c <HAL_USART_MspInit+0xe0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d153      	bne.n	8002344 <HAL_USART_MspInit+0xd8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800229c:	2304      	movs	r3, #4
 800229e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a4:	f107 0318 	add.w	r3, r7, #24
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fcb1 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80022b4:	f7ff fa28 	bl	8001708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <HAL_USART_MspInit+0xe4>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	4a24      	ldr	r2, [pc, #144]	; (8002350 <HAL_USART_MspInit+0xe4>)
 80022be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c2:	6593      	str	r3, [r2, #88]	; 0x58
 80022c4:	4b22      	ldr	r3, [pc, #136]	; (8002350 <HAL_USART_MspInit+0xe4>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d0:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_USART_MspInit+0xe4>)
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_USART_MspInit+0xe4>)
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022dc:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_USART_MspInit+0xe4>)
 80022de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_USART_MspInit+0xe4>)
 80022ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_USART_MspInit+0xe4>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f4:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_USART_MspInit+0xe4>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB9     ------> USART3_TX
    PD10     ------> USART3_CK
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002304:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002312:	2307      	movs	r3, #7
 8002314:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800231a:	4619      	mov	r1, r3
 800231c:	480d      	ldr	r0, [pc, #52]	; (8002354 <HAL_USART_MspInit+0xe8>)
 800231e:	f002 fa6f 	bl	8004800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002322:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002326:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002334:	2307      	movs	r3, #7
 8002336:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002338:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800233c:	4619      	mov	r1, r3
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <HAL_USART_MspInit+0xec>)
 8002340:	f002 fa5e 	bl	8004800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002344:	bf00      	nop
 8002346:	3780      	adds	r7, #128	; 0x80
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40004800 	.word	0x40004800
 8002350:	40021000 	.word	0x40021000
 8002354:	48000400 	.word	0x48000400
 8002358:	48000c00 	.word	0x48000c00

0800235c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	; 0x30
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_InitTick+0xc4>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	4a2b      	ldr	r2, [pc, #172]	; (8002420 <HAL_InitTick+0xc4>)
 8002372:	f043 0320 	orr.w	r3, r3, #32
 8002376:	6593      	str	r3, [r2, #88]	; 0x58
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_InitTick+0xc4>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002384:	f107 020c 	add.w	r2, r7, #12
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fb9c 	bl	8005acc <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002394:	f003 fb6e 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8002398:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	4a21      	ldr	r2, [pc, #132]	; (8002424 <HAL_InitTick+0xc8>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0c9b      	lsrs	r3, r3, #18
 80023a4:	3b01      	subs	r3, #1
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80023a8:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <HAL_InitTick+0xcc>)
 80023aa:	4a20      	ldr	r2, [pc, #128]	; (800242c <HAL_InitTick+0xd0>)
 80023ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80023ae:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_InitTick+0xcc>)
 80023b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_InitTick+0xcc>)
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_InitTick+0xcc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_InitTick+0xcc>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80023c8:	4817      	ldr	r0, [pc, #92]	; (8002428 <HAL_InitTick+0xcc>)
 80023ca:	f003 ffa1 	bl	8006310 <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80023d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11b      	bne.n	8002414 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80023dc:	4812      	ldr	r0, [pc, #72]	; (8002428 <HAL_InitTick+0xcc>)
 80023de:	f004 f86b 	bl	80064b8 <HAL_TIM_Base_Start_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80023e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d111      	bne.n	8002414 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80023f0:	2037      	movs	r0, #55	; 0x37
 80023f2:	f001 fb8b 	bl	8003b0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b0f      	cmp	r3, #15
 80023fa:	d808      	bhi.n	800240e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_DAC_IRQn, TickPriority, 0U);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	2037      	movs	r0, #55	; 0x37
 8002402:	f001 fb69 	bl	8003ad8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <HAL_InitTick+0xd4>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	e002      	b.n	8002414 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002418:	4618      	mov	r0, r3
 800241a:	3730      	adds	r7, #48	; 0x30
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	431bde83 	.word	0x431bde83
 8002428:	20000d88 	.word	0x20000d88
 800242c:	40001400 	.word	0x40001400
 8002430:	20000004 	.word	0x20000004

08002434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002438:	f003 fb8a 	bl	8005b50 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800243c:	e7fe      	b.n	800243c <NMI_Handler+0x8>

0800243e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <MemManage_Handler+0x4>

0800244a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <UsageFault_Handler+0x4>

08002456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <DMA1_Channel1_IRQHandler+0x10>)
 800246a:	f002 f87a 	bl	8004562 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000494 	.word	0x20000494

08002478 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800247c:	4805      	ldr	r0, [pc, #20]	; (8002494 <TIM6_DAC_IRQHandler+0x1c>)
 800247e:	f004 f893 	bl	80065a8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002482:	4805      	ldr	r0, [pc, #20]	; (8002498 <TIM6_DAC_IRQHandler+0x20>)
 8002484:	f001 fc78 	bl	8003d78 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac3);
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <TIM6_DAC_IRQHandler+0x24>)
 800248a:	f001 fc75 	bl	8003d78 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000868 	.word	0x20000868
 8002498:	200003a4 	.word	0x200003a4
 800249c:	2000041c 	.word	0x2000041c

080024a0 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80024a4:	4805      	ldr	r0, [pc, #20]	; (80024bc <TIM7_DAC_IRQHandler+0x1c>)
 80024a6:	f004 f87f 	bl	80065a8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac2);
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <TIM7_DAC_IRQHandler+0x20>)
 80024ac:	f001 fc64 	bl	8003d78 <HAL_DAC_IRQHandler>
  HAL_DAC_IRQHandler(&hdac4);
 80024b0:	4804      	ldr	r0, [pc, #16]	; (80024c4 <TIM7_DAC_IRQHandler+0x24>)
 80024b2:	f001 fc61 	bl	8003d78 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000d88 	.word	0x20000d88
 80024c0:	200003e0 	.word	0x200003e0
 80024c4:	20000458 	.word	0x20000458

080024c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <_sbrk+0x5c>)
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <_sbrk+0x60>)
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <_sbrk+0x64>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <_sbrk+0x64>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <_sbrk+0x68>)
 80024e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d207      	bcs.n	8002508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f8:	f009 fa40 	bl	800b97c <__errno>
 80024fc:	4603      	mov	r3, r0
 80024fe:	220c      	movs	r2, #12
 8002500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002506:	e009      	b.n	800251c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	4a05      	ldr	r2, [pc, #20]	; (800252c <_sbrk+0x64>)
 8002518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800251a:	68fb      	ldr	r3, [r7, #12]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20004000 	.word	0x20004000
 8002528:	00000400 	.word	0x00000400
 800252c:	20000e54 	.word	0x20000e54
 8002530:	20002890 	.word	0x20002890

08002534 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <SystemInit+0x20>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	4a05      	ldr	r2, [pc, #20]	; (8002554 <SystemInit+0x20>)
 8002540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002558:	480d      	ldr	r0, [pc, #52]	; (8002590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800255a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800255c:	f7ff ffea 	bl	8002534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <LoopForever+0x6>)
  ldr r1, =_edata
 8002562:	490d      	ldr	r1, [pc, #52]	; (8002598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002564:	4a0d      	ldr	r2, [pc, #52]	; (800259c <LoopForever+0xe>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002568:	e002      	b.n	8002570 <LoopCopyDataInit>

0800256a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800256c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256e:	3304      	adds	r3, #4

08002570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002574:	d3f9      	bcc.n	800256a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002578:	4c0a      	ldr	r4, [pc, #40]	; (80025a4 <LoopForever+0x16>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800257c:	e001      	b.n	8002582 <LoopFillZerobss>

0800257e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002580:	3204      	adds	r2, #4

08002582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002584:	d3fb      	bcc.n	800257e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002586:	f009 f9ff 	bl	800b988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800258a:	f7fe f919 	bl	80007c0 <main>

0800258e <LoopForever>:

LoopForever:
    b LoopForever
 800258e:	e7fe      	b.n	800258e <LoopForever>
  ldr   r0, =_estack
 8002590:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002598:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800259c:	0800c5c4 	.word	0x0800c5c4
  ldr r2, =_sbss
 80025a0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80025a4:	20002890 	.word	0x20002890

080025a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025a8:	e7fe      	b.n	80025a8 <ADC1_2_IRQHandler>

080025aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f001 fa84 	bl	8003ac2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ba:	200f      	movs	r0, #15
 80025bc:	f7ff fece 	bl	800235c <HAL_InitTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	71fb      	strb	r3, [r7, #7]
 80025ca:	e001      	b.n	80025d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025cc:	f7ff f8a2 	bl	8001714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025d0:	79fb      	ldrb	r3, [r7, #7]

}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_IncTick+0x1c>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_IncTick+0x20>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a03      	ldr	r2, [pc, #12]	; (80025f8 <HAL_IncTick+0x1c>)
 80025ec:	6013      	str	r3, [r2, #0]
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	20000e58 	.word	0x20000e58
 80025fc:	20000008 	.word	0x20000008

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000e58 	.word	0x20000e58

08002618 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	609a      	str	r2, [r3, #8]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3360      	adds	r3, #96	; 0x60
 8002692:	461a      	mov	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <LL_ADC_SetOffset+0x44>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026b8:	bf00      	nop
 80026ba:	371c      	adds	r7, #28
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	03fff000 	.word	0x03fff000

080026c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3360      	adds	r3, #96	; 0x60
 80026d6:	461a      	mov	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3360      	adds	r3, #96	; 0x60
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	431a      	orrs	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800272a:	b480      	push	{r7}
 800272c:	b087      	sub	sp, #28
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3360      	adds	r3, #96	; 0x60
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	431a      	orrs	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3360      	adds	r3, #96	; 0x60
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	431a      	orrs	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	615a      	str	r2, [r3, #20]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3330      	adds	r3, #48	; 0x30
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	4413      	add	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	211f      	movs	r1, #31
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	401a      	ands	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0e9b      	lsrs	r3, r3, #26
 80027f4:	f003 011f 	and.w	r1, r3, #31
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	431a      	orrs	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002808:	bf00      	nop
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3314      	adds	r3, #20
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	0e5b      	lsrs	r3, r3, #25
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	4413      	add	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	0d1b      	lsrs	r3, r3, #20
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	2107      	movs	r1, #7
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	401a      	ands	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0d1b      	lsrs	r3, r3, #20
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	431a      	orrs	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f003 0318 	and.w	r3, r3, #24
 800288e:	4908      	ldr	r1, [pc, #32]	; (80028b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002890:	40d9      	lsrs	r1, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	400b      	ands	r3, r1
 8002896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289a:	431a      	orrs	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	0007ffff 	.word	0x0007ffff

080028b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6093      	str	r3, [r2, #8]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ec:	d101      	bne.n	80028f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002910:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002914:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800293c:	d101      	bne.n	8002942 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <LL_ADC_IsEnabled+0x18>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <LL_ADC_IsEnabled+0x1a>
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d101      	bne.n	800298e <LL_ADC_REG_IsConversionOngoing+0x18>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d101      	bne.n	80029b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1e4      	b.n	8002da8 <HAL_ADC_Init+0x3e4>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d133      	bne.n	8002a54 <HAL_ADC_Init+0x90>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a68      	ldr	r2, [pc, #416]	; (8002b90 <HAL_ADC_Init+0x1cc>)
 80029f0:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a67      	ldr	r2, [pc, #412]	; (8002b94 <HAL_ADC_Init+0x1d0>)
 80029f6:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a67      	ldr	r2, [pc, #412]	; (8002b98 <HAL_ADC_Init+0x1d4>)
 80029fc:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a66      	ldr	r2, [pc, #408]	; (8002b9c <HAL_ADC_Init+0x1d8>)
 8002a02:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a66      	ldr	r2, [pc, #408]	; (8002ba0 <HAL_ADC_Init+0x1dc>)
 8002a08:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <HAL_ADC_Init+0x1e0>)
 8002a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a64      	ldr	r2, [pc, #400]	; (8002ba8 <HAL_ADC_Init+0x1e4>)
 8002a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a63      	ldr	r2, [pc, #396]	; (8002bac <HAL_ADC_Init+0x1e8>)
 8002a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a62      	ldr	r2, [pc, #392]	; (8002bb0 <HAL_ADC_Init+0x1ec>)
 8002a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    if (hadc->MspInitCallback == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <HAL_ADC_Init+0x78>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a5f      	ldr	r2, [pc, #380]	; (8002bb4 <HAL_ADC_Init+0x1f0>)
 8002a38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff3d 	bl	80028d8 <LL_ADC_IsDeepPowerDownEnabled>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <HAL_ADC_Init+0xaa>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff23 	bl	80028b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff58 	bl	8002928 <LL_ADC_IsInternalRegulatorEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d115      	bne.n	8002aaa <HAL_ADC_Init+0xe6>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff3c 	bl	8002900 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a88:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <HAL_ADC_Init+0x1f4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	4a4b      	ldr	r2, [pc, #300]	; (8002bbc <HAL_ADC_Init+0x1f8>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a9c:	e002      	b.n	8002aa4 <HAL_ADC_Init+0xe0>
    {
      wait_loop_index--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f9      	bne.n	8002a9e <HAL_ADC_Init+0xda>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff3a 	bl	8002928 <LL_ADC_IsInternalRegulatorEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_ADC_Init+0x112>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	f043 0210 	orr.w	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff4b 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002ae0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8153 	bne.w	8002d96 <HAL_ADC_Init+0x3d2>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 814f 	bne.w	8002d96 <HAL_ADC_Init+0x3d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b00:	f043 0202 	orr.w	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff1f 	bl	8002950 <LL_ADC_IsEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d164      	bne.n	8002be2 <HAL_ADC_Init+0x21e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b20:	d004      	beq.n	8002b2c <HAL_ADC_Init+0x168>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <HAL_ADC_Init+0x1fc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10f      	bne.n	8002b4c <HAL_ADC_Init+0x188>
 8002b2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b30:	f7ff ff0e 	bl	8002950 <LL_ADC_IsEnabled>
 8002b34:	4604      	mov	r4, r0
 8002b36:	4822      	ldr	r0, [pc, #136]	; (8002bc0 <HAL_ADC_Init+0x1fc>)
 8002b38:	f7ff ff0a 	bl	8002950 <LL_ADC_IsEnabled>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4323      	orrs	r3, r4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e012      	b.n	8002b72 <HAL_ADC_Init+0x1ae>
 8002b4c:	481d      	ldr	r0, [pc, #116]	; (8002bc4 <HAL_ADC_Init+0x200>)
 8002b4e:	f7ff feff 	bl	8002950 <LL_ADC_IsEnabled>
 8002b52:	4604      	mov	r4, r0
 8002b54:	481c      	ldr	r0, [pc, #112]	; (8002bc8 <HAL_ADC_Init+0x204>)
 8002b56:	f7ff fefb 	bl	8002950 <LL_ADC_IsEnabled>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	431c      	orrs	r4, r3
 8002b5e:	481b      	ldr	r0, [pc, #108]	; (8002bcc <HAL_ADC_Init+0x208>)
 8002b60:	f7ff fef6 	bl	8002950 <LL_ADC_IsEnabled>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4323      	orrs	r3, r4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d035      	beq.n	8002be2 <HAL_ADC_Init+0x21e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7e:	d004      	beq.n	8002b8a <HAL_ADC_Init+0x1c6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <HAL_ADC_Init+0x1fc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d124      	bne.n	8002bd4 <HAL_ADC_Init+0x210>
 8002b8a:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <HAL_ADC_Init+0x20c>)
 8002b8c:	e023      	b.n	8002bd6 <HAL_ADC_Init+0x212>
 8002b8e:	bf00      	nop
 8002b90:	08002db9 	.word	0x08002db9
 8002b94:	08002dcd 	.word	0x08002dcd
 8002b98:	08002de1 	.word	0x08002de1
 8002b9c:	08002df5 	.word	0x08002df5
 8002ba0:	080036d5 	.word	0x080036d5
 8002ba4:	080036e9 	.word	0x080036e9
 8002ba8:	080036fd 	.word	0x080036fd
 8002bac:	08003711 	.word	0x08003711
 8002bb0:	08003725 	.word	0x08003725
 8002bb4:	08001765 	.word	0x08001765
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	053e2d63 	.word	0x053e2d63
 8002bc0:	50000100 	.word	0x50000100
 8002bc4:	50000400 	.word	0x50000400
 8002bc8:	50000500 	.word	0x50000500
 8002bcc:	50000600 	.word	0x50000600
 8002bd0:	50000300 	.word	0x50000300
 8002bd4:	4a76      	ldr	r2, [pc, #472]	; (8002db0 <HAL_ADC_Init+0x3ec>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4610      	mov	r0, r2
 8002bde:	f7ff fd1b 	bl	8002618 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7f5b      	ldrb	r3, [r3, #29]
 8002be6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bec:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002bf2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002bf8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c00:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HAL_ADC_Init+0x25a>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	045b      	lsls	r3, r3, #17
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_ADC_Init+0x276>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_ADC_Init+0x3f0>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	69b9      	ldr	r1, [r7, #24]
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fe97 	bl	800299c <LL_ADC_INJ_IsConversionOngoing>
 8002c6e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d16d      	bne.n	8002d52 <HAL_ADC_Init+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d16a      	bne.n	8002d52 <HAL_ADC_Init+0x38e>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c80:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c88:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c98:	f023 0302 	bic.w	r3, r3, #2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	69b9      	ldr	r1, [r7, #24]
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d017      	beq.n	8002cde <HAL_ADC_Init+0x31a>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cbc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cc6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6911      	ldr	r1, [r2, #16]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	430b      	orrs	r3, r1
 8002cd8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cdc:	e013      	b.n	8002d06 <HAL_ADC_Init+0x342>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cec:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d02:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d118      	bne.n	8002d42 <HAL_ADC_Init+0x37e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d1a:	f023 0304 	bic.w	r3, r3, #4
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d26:	4311      	orrs	r1, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d2c:	4311      	orrs	r1, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d32:	430a      	orrs	r2, r1
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	611a      	str	r2, [r3, #16]
 8002d40:	e007      	b.n	8002d52 <HAL_ADC_Init+0x38e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10c      	bne.n	8002d74 <HAL_ADC_Init+0x3b0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	f023 010f 	bic.w	r1, r3, #15
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	1e5a      	subs	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
 8002d72:	e007      	b.n	8002d84 <HAL_ADC_Init+0x3c0>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 020f 	bic.w	r2, r2, #15
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	f023 0303 	bic.w	r3, r3, #3
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d94:	e007      	b.n	8002da6 <HAL_ADC_Init+0x3e2>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	f043 0210 	orr.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3724      	adds	r7, #36	; 0x24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}
 8002db0:	50000700 	.word	0x50000700
 8002db4:	fff04007 	.word	0xfff04007

08002db8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b0b6      	sub	sp, #216	; 0xd8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d102      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x24>
 8002e26:	2302      	movs	r3, #2
 8002e28:	f000 bc13 	b.w	8003652 <HAL_ADC_ConfigChannel+0x84a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fd9c 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f040 83f3 	bne.w	800362c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f7ff fcb2 	bl	80027bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fd8a 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002e62:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fd96 	bl	800299c <LL_ADC_INJ_IsConversionOngoing>
 8002e70:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 81d9 	bne.w	8003230 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 81d4 	bne.w	8003230 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e90:	d10f      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7ff fcb9 	bl	8002814 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fc73 	bl	8002796 <LL_ADC_SetSamplingTimeCommonConfig>
 8002eb0:	e00e      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f7ff fca8 	bl	8002814 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fc63 	bl	8002796 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	08db      	lsrs	r3, r3, #3
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d022      	beq.n	8002f38 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6919      	ldr	r1, [r3, #16]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f02:	f7ff fbbd 	bl	8002680 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6919      	ldr	r1, [r3, #16]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f7ff fc09 	bl	800272a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d102      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x126>
 8002f28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f2c:	e000      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x128>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	461a      	mov	r2, r3
 8002f32:	f7ff fc15 	bl	8002760 <LL_ADC_SetOffsetSaturation>
 8002f36:	e17b      	b.n	8003230 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fbc2 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x15c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fbb7 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	f003 021f 	and.w	r2, r3, #31
 8002f62:	e01e      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x19a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fbac 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e004      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x1b2>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	0e9b      	lsrs	r3, r3, #26
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	e018      	b.n	8002fec <HAL_ADC_ConfigChannel+0x1e4>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002fde:	2320      	movs	r3, #32
 8002fe0:	e004      	b.n	8002fec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002fe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d106      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fb7b 	bl	80026f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fb5f 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 800300a:	4603      	mov	r3, r0
 800300c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <HAL_ADC_ConfigChannel+0x222>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fb54 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 8003020:	4603      	mov	r3, r0
 8003022:	0e9b      	lsrs	r3, r3, #26
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	e01e      	b.n	8003068 <HAL_ADC_ConfigChannel+0x260>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2101      	movs	r1, #1
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fb49 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 8003036:	4603      	mov	r3, r0
 8003038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003048:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800304c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003058:	2320      	movs	r3, #32
 800305a:	e004      	b.n	8003066 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800305c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003070:	2b00      	cmp	r3, #0
 8003072:	d105      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x278>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	0e9b      	lsrs	r3, r3, #26
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	e018      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x2aa>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003094:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800309c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80030a4:	2320      	movs	r3, #32
 80030a6:	e004      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80030a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d106      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	2101      	movs	r1, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fb18 	bl	80026f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2102      	movs	r1, #2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fafc 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x2e8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2102      	movs	r1, #2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff faf1 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	f003 021f 	and.w	r2, r3, #31
 80030ee:	e01e      	b.n	800312e <HAL_ADC_ConfigChannel+0x326>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2102      	movs	r1, #2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fae6 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800310e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800311e:	2320      	movs	r3, #32
 8003120:	e004      	b.n	800312c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x33e>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	0e9b      	lsrs	r3, r3, #26
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	e016      	b.n	8003174 <HAL_ADC_ConfigChannel+0x36c>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800315a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800315e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003166:	2320      	movs	r3, #32
 8003168:	e004      	b.n	8003174 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800316a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003174:	429a      	cmp	r2, r3
 8003176:	d106      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2200      	movs	r2, #0
 800317e:	2102      	movs	r1, #2
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fab7 	bl	80026f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2103      	movs	r1, #3
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fa9b 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x3aa>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2103      	movs	r1, #3
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fa90 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	0e9b      	lsrs	r3, r3, #26
 80031ac:	f003 021f 	and.w	r2, r3, #31
 80031b0:	e017      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x3da>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2103      	movs	r1, #3
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fa85 	bl	80026c8 <LL_ADC_GetOffsetChannel>
 80031be:	4603      	mov	r3, r0
 80031c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80031ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80031ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e003      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80031d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d105      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x3f2>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	0e9b      	lsrs	r3, r3, #26
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	e011      	b.n	800321e <HAL_ADC_ConfigChannel+0x416>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800320c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003212:	2320      	movs	r3, #32
 8003214:	e003      	b.n	800321e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800321e:	429a      	cmp	r2, r3
 8003220:	d106      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	2103      	movs	r1, #3
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fa62 	bl	80026f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fb8b 	bl	8002950 <LL_ADC_IsEnabled>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 813d 	bne.w	80034bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	461a      	mov	r2, r3
 8003250:	f7ff fb0c 	bl	800286c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4aa2      	ldr	r2, [pc, #648]	; (80034e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	f040 812e 	bne.w	80034bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x480>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	3301      	adds	r3, #1
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2b09      	cmp	r3, #9
 800327e:	bf94      	ite	ls
 8003280:	2301      	movls	r3, #1
 8003282:	2300      	movhi	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e019      	b.n	80032bc <HAL_ADC_ConfigChannel+0x4b4>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003298:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800329a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80032a0:	2320      	movs	r3, #32
 80032a2:	e003      	b.n	80032ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80032a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2b09      	cmp	r3, #9
 80032b4:	bf94      	ite	ls
 80032b6:	2301      	movls	r3, #1
 80032b8:	2300      	movhi	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d079      	beq.n	80033b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x4d4>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0e9b      	lsrs	r3, r3, #26
 80032d2:	3301      	adds	r3, #1
 80032d4:	069b      	lsls	r3, r3, #26
 80032d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032da:	e015      	b.n	8003308 <HAL_ADC_ConfigChannel+0x500>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80032ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e003      	b.n	8003300 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80032f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	069b      	lsls	r3, r3, #26
 8003304:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x520>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0e9b      	lsrs	r3, r3, #26
 800331a:	3301      	adds	r3, #1
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	e017      	b.n	8003358 <HAL_ADC_ConfigChannel+0x550>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003338:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800333a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003340:	2320      	movs	r3, #32
 8003342:	e003      	b.n	800334c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	ea42 0103 	orr.w	r1, r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <HAL_ADC_ConfigChannel+0x576>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	3301      	adds	r3, #1
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	051b      	lsls	r3, r3, #20
 800337c:	e018      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x5a8>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e003      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800339a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f003 021f 	and.w	r2, r3, #31
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b0:	430b      	orrs	r3, r1
 80033b2:	e07e      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d107      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x5c8>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0e9b      	lsrs	r3, r3, #26
 80033c6:	3301      	adds	r3, #1
 80033c8:	069b      	lsls	r3, r3, #26
 80033ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ce:	e015      	b.n	80033fc <HAL_ADC_ConfigChannel+0x5f4>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80033e8:	2320      	movs	r3, #32
 80033ea:	e003      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	3301      	adds	r3, #1
 80033f6:	069b      	lsls	r3, r3, #26
 80033f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_ADC_ConfigChannel+0x614>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	3301      	adds	r3, #1
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	e017      	b.n	800344c <HAL_ADC_ConfigChannel+0x644>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	61fb      	str	r3, [r7, #28]
  return result;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003434:	2320      	movs	r3, #32
 8003436:	e003      	b.n	8003440 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	3301      	adds	r3, #1
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	ea42 0103 	orr.w	r1, r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10d      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x670>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	3301      	adds	r3, #1
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	3b1e      	subs	r3, #30
 8003470:	051b      	lsls	r3, r3, #20
 8003472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003476:	e01b      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x6a8>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	613b      	str	r3, [r7, #16]
  return result;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	3b1e      	subs	r3, #30
 80034aa:	051b      	lsls	r3, r3, #20
 80034ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b0:	430b      	orrs	r3, r1
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7ff f9ac 	bl	8002814 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80be 	beq.w	8003646 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d2:	d004      	beq.n	80034de <HAL_ADC_ConfigChannel+0x6d6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <HAL_ADC_ConfigChannel+0x6e4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d10a      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x6ec>
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80034e0:	e009      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x6ee>
 80034e2:	bf00      	nop
 80034e4:	407f0000 	.word	0x407f0000
 80034e8:	80080000 	.word	0x80080000
 80034ec:	50000100 	.word	0x50000100
 80034f0:	50000300 	.word	0x50000300
 80034f4:	4b59      	ldr	r3, [pc, #356]	; (800365c <HAL_ADC_ConfigChannel+0x854>)
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff f8b4 	bl	8002664 <LL_ADC_GetCommonPathInternalCh>
 80034fc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a56      	ldr	r2, [pc, #344]	; (8003660 <HAL_ADC_ConfigChannel+0x858>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_ADC_ConfigChannel+0x70c>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a55      	ldr	r2, [pc, #340]	; (8003664 <HAL_ADC_ConfigChannel+0x85c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d13a      	bne.n	800358a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d134      	bne.n	800358a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003528:	d005      	beq.n	8003536 <HAL_ADC_ConfigChannel+0x72e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a4e      	ldr	r2, [pc, #312]	; (8003668 <HAL_ADC_ConfigChannel+0x860>)
 8003530:	4293      	cmp	r3, r2
 8003532:	f040 8085 	bne.w	8003640 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800353e:	d004      	beq.n	800354a <HAL_ADC_ConfigChannel+0x742>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a49      	ldr	r2, [pc, #292]	; (800366c <HAL_ADC_ConfigChannel+0x864>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_ADC_ConfigChannel+0x746>
 800354a:	4a49      	ldr	r2, [pc, #292]	; (8003670 <HAL_ADC_ConfigChannel+0x868>)
 800354c:	e000      	b.n	8003550 <HAL_ADC_ConfigChannel+0x748>
 800354e:	4a43      	ldr	r2, [pc, #268]	; (800365c <HAL_ADC_ConfigChannel+0x854>)
 8003550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003554:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f7ff f86f 	bl	800263e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003560:	4b44      	ldr	r3, [pc, #272]	; (8003674 <HAL_ADC_ConfigChannel+0x86c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	099b      	lsrs	r3, r3, #6
 8003566:	4a44      	ldr	r2, [pc, #272]	; (8003678 <HAL_ADC_ConfigChannel+0x870>)
 8003568:	fba2 2303 	umull	r2, r3, r2, r3
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800357a:	e002      	b.n	8003582 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3b01      	subs	r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f9      	bne.n	800357c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003588:	e05a      	b.n	8003640 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a3b      	ldr	r2, [pc, #236]	; (800367c <HAL_ADC_ConfigChannel+0x874>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d125      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003594:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11f      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a31      	ldr	r2, [pc, #196]	; (800366c <HAL_ADC_ConfigChannel+0x864>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d104      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x7ac>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a34      	ldr	r2, [pc, #208]	; (8003680 <HAL_ADC_ConfigChannel+0x878>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d047      	beq.n	8003644 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035bc:	d004      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x7c0>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2a      	ldr	r2, [pc, #168]	; (800366c <HAL_ADC_ConfigChannel+0x864>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x7c4>
 80035c8:	4a29      	ldr	r2, [pc, #164]	; (8003670 <HAL_ADC_ConfigChannel+0x868>)
 80035ca:	e000      	b.n	80035ce <HAL_ADC_ConfigChannel+0x7c6>
 80035cc:	4a23      	ldr	r2, [pc, #140]	; (800365c <HAL_ADC_ConfigChannel+0x854>)
 80035ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f7ff f830 	bl	800263e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035de:	e031      	b.n	8003644 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a27      	ldr	r2, [pc, #156]	; (8003684 <HAL_ADC_ConfigChannel+0x87c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d12d      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d127      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <HAL_ADC_ConfigChannel+0x864>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d022      	beq.n	8003646 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003608:	d004      	beq.n	8003614 <HAL_ADC_ConfigChannel+0x80c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a17      	ldr	r2, [pc, #92]	; (800366c <HAL_ADC_ConfigChannel+0x864>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d101      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x810>
 8003614:	4a16      	ldr	r2, [pc, #88]	; (8003670 <HAL_ADC_ConfigChannel+0x868>)
 8003616:	e000      	b.n	800361a <HAL_ADC_ConfigChannel+0x812>
 8003618:	4a10      	ldr	r2, [pc, #64]	; (800365c <HAL_ADC_ConfigChannel+0x854>)
 800361a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800361e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f7ff f80a 	bl	800263e <LL_ADC_SetCommonPathInternalCh>
 800362a:	e00c      	b.n	8003646 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800363e:	e002      	b.n	8003646 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003640:	bf00      	nop
 8003642:	e000      	b.n	8003646 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003644:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800364e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003652:	4618      	mov	r0, r3
 8003654:	37d8      	adds	r7, #216	; 0xd8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	50000700 	.word	0x50000700
 8003660:	c3210000 	.word	0xc3210000
 8003664:	90c00010 	.word	0x90c00010
 8003668:	50000600 	.word	0x50000600
 800366c:	50000100 	.word	0x50000100
 8003670:	50000300 	.word	0x50000300
 8003674:	20000000 	.word	0x20000000
 8003678:	053e2d63 	.word	0x053e2d63
 800367c:	c7520000 	.word	0xc7520000
 8003680:	50000500 	.word	0x50000500
 8003684:	cb840000 	.word	0xcb840000

08003688 <LL_ADC_IsEnabled>:
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <LL_ADC_IsEnabled+0x18>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <LL_ADC_IsEnabled+0x1a>
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <LL_ADC_REG_IsConversionOngoing>:
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d101      	bne.n	80036c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b0ad      	sub	sp, #180	; 0xb4
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003752:	2302      	movs	r3, #2
 8003754:	e0f8      	b.n	8003948 <HAL_ADCEx_MultiModeConfigChannel+0x210>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800375e:	2300      	movs	r3, #0
 8003760:	66bb      	str	r3, [r7, #104]	; 0x68
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800376e:	2300      	movs	r3, #0
 8003770:	66fb      	str	r3, [r7, #108]	; 0x6c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800377a:	d102      	bne.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800377c:	4b74      	ldr	r3, [pc, #464]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e009      	b.n	8003796 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a73      	ldr	r2, [pc, #460]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d102      	bne.n	8003792 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 800378c:	4b72      	ldr	r3, [pc, #456]	; (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e001      	b.n	8003796 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10b      	bne.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0c9      	b.n	8003948 <HAL_ADCEx_MultiModeConfigChannel+0x210>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff ff79 	bl	80036ae <LL_ADC_REG_IsConversionOngoing>
 80037bc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff72 	bl	80036ae <LL_ADC_REG_IsConversionOngoing>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f040 80aa 	bne.w	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80037d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 80a5 	bne.w	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e4:	d004      	beq.n	80037f0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a59      	ldr	r2, [pc, #356]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d101      	bne.n	80037f4 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 80037f0:	4b5a      	ldr	r3, [pc, #360]	; (800395c <HAL_ADCEx_MultiModeConfigChannel+0x224>)
 80037f2:	e000      	b.n	80037f6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 80037f4:	4b5a      	ldr	r3, [pc, #360]	; (8003960 <HAL_ADCEx_MultiModeConfigChannel+0x228>)
 80037f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d04f      	beq.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003816:	035b      	lsls	r3, r3, #13
 8003818:	430b      	orrs	r3, r1
 800381a:	431a      	orrs	r2, r3
 800381c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003820:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800382a:	d004      	beq.n	8003836 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a47      	ldr	r2, [pc, #284]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10f      	bne.n	8003856 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 8003836:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800383a:	f7ff ff25 	bl	8003688 <LL_ADC_IsEnabled>
 800383e:	4604      	mov	r4, r0
 8003840:	4843      	ldr	r0, [pc, #268]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003842:	f7ff ff21 	bl	8003688 <LL_ADC_IsEnabled>
 8003846:	4603      	mov	r3, r0
 8003848:	4323      	orrs	r3, r4
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf0c      	ite	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	2300      	movne	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e012      	b.n	800387c <HAL_ADCEx_MultiModeConfigChannel+0x144>
 8003856:	483f      	ldr	r0, [pc, #252]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 8003858:	f7ff ff16 	bl	8003688 <LL_ADC_IsEnabled>
 800385c:	4604      	mov	r4, r0
 800385e:	483e      	ldr	r0, [pc, #248]	; (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8003860:	f7ff ff12 	bl	8003688 <LL_ADC_IsEnabled>
 8003864:	4603      	mov	r3, r0
 8003866:	431c      	orrs	r4, r3
 8003868:	483e      	ldr	r0, [pc, #248]	; (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 800386a:	f7ff ff0d 	bl	8003688 <LL_ADC_IsEnabled>
 800386e:	4603      	mov	r3, r0
 8003870:	4323      	orrs	r3, r4
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf0c      	ite	eq
 8003876:	2301      	moveq	r3, #1
 8003878:	2300      	movne	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d05c      	beq.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800388a:	f023 030f 	bic.w	r3, r3, #15
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	6811      	ldr	r1, [r2, #0]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	6892      	ldr	r2, [r2, #8]
 8003896:	430a      	orrs	r2, r1
 8003898:	431a      	orrs	r2, r3
 800389a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800389e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038a0:	e04b      	b.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x202>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ba:	d004      	beq.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a23      	ldr	r2, [pc, #140]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10f      	bne.n	80038e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80038c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80038ca:	f7ff fedd 	bl	8003688 <LL_ADC_IsEnabled>
 80038ce:	4604      	mov	r4, r0
 80038d0:	481f      	ldr	r0, [pc, #124]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80038d2:	f7ff fed9 	bl	8003688 <LL_ADC_IsEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	4323      	orrs	r3, r4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf0c      	ite	eq
 80038de:	2301      	moveq	r3, #1
 80038e0:	2300      	movne	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e012      	b.n	800390c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>
 80038e6:	481b      	ldr	r0, [pc, #108]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 80038e8:	f7ff fece 	bl	8003688 <LL_ADC_IsEnabled>
 80038ec:	4604      	mov	r4, r0
 80038ee:	481a      	ldr	r0, [pc, #104]	; (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 80038f0:	f7ff feca 	bl	8003688 <LL_ADC_IsEnabled>
 80038f4:	4603      	mov	r3, r0
 80038f6:	431c      	orrs	r4, r3
 80038f8:	481a      	ldr	r0, [pc, #104]	; (8003964 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 80038fa:	f7ff fec5 	bl	8003688 <LL_ADC_IsEnabled>
 80038fe:	4603      	mov	r3, r0
 8003900:	4323      	orrs	r3, r4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d014      	beq.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003910:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800391a:	f023 030f 	bic.w	r3, r3, #15
 800391e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003922:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003924:	e009      	b.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x202>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8003938:	e000      	b.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x204>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800393a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003944:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 8003948:	4618      	mov	r0, r3
 800394a:	37b4      	adds	r7, #180	; 0xb4
 800394c:	46bd      	mov	sp, r7
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	50000100 	.word	0x50000100
 8003954:	50000400 	.word	0x50000400
 8003958:	50000500 	.word	0x50000500
 800395c:	50000300 	.word	0x50000300
 8003960:	50000700 	.word	0x50000700
 8003964:	50000600 	.word	0x50000600

08003968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <__NVIC_SetPriorityGrouping+0x44>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003984:	4013      	ands	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800399a:	4a04      	ldr	r2, [pc, #16]	; (80039ac <__NVIC_SetPriorityGrouping+0x44>)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	60d3      	str	r3, [r2, #12]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <__NVIC_GetPriorityGrouping+0x18>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	f003 0307 	and.w	r3, r3, #7
}
 80039be:	4618      	mov	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	db0b      	blt.n	80039f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	f003 021f 	and.w	r2, r3, #31
 80039e4:	4907      	ldr	r1, [pc, #28]	; (8003a04 <__NVIC_EnableIRQ+0x38>)
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	2001      	movs	r0, #1
 80039ee:	fa00 f202 	lsl.w	r2, r0, r2
 80039f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000e100 	.word	0xe000e100

08003a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	6039      	str	r1, [r7, #0]
 8003a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	db0a      	blt.n	8003a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	490c      	ldr	r1, [pc, #48]	; (8003a54 <__NVIC_SetPriority+0x4c>)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	0112      	lsls	r2, r2, #4
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a30:	e00a      	b.n	8003a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4908      	ldr	r1, [pc, #32]	; (8003a58 <__NVIC_SetPriority+0x50>)
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	3b04      	subs	r3, #4
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	440b      	add	r3, r1
 8003a46:	761a      	strb	r2, [r3, #24]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000e100 	.word	0xe000e100
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f1c3 0307 	rsb	r3, r3, #7
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	bf28      	it	cs
 8003a7a:	2304      	movcs	r3, #4
 8003a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d902      	bls.n	8003a8c <NVIC_EncodePriority+0x30>
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3b03      	subs	r3, #3
 8003a8a:	e000      	b.n	8003a8e <NVIC_EncodePriority+0x32>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	43d9      	mvns	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	4313      	orrs	r3, r2
         );
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3724      	adds	r7, #36	; 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ff4c 	bl	8003968 <__NVIC_SetPriorityGrouping>
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae6:	f7ff ff63 	bl	80039b0 <__NVIC_GetPriorityGrouping>
 8003aea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f7ff ffb3 	bl	8003a5c <NVIC_EncodePriority>
 8003af6:	4602      	mov	r2, r0
 8003af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff ff82 	bl	8003a08 <__NVIC_SetPriority>
}
 8003b04:	bf00      	nop
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ff56 	bl	80039cc <__NVIC_EnableIRQ>
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e034      	b.n	8003ba4 <HAL_DAC_Init+0x7c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	791b      	ldrb	r3, [r3, #4]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d125      	bne.n	8003b90 <HAL_DAC_Init+0x68>
  {
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the DAC Callback settings */
    hdac->ConvCpltCallbackCh1           = HAL_DAC_ConvCpltCallbackCh1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a19      	ldr	r2, [pc, #100]	; (8003bac <HAL_DAC_Init+0x84>)
 8003b48:	615a      	str	r2, [r3, #20]
    hdac->ConvHalfCpltCallbackCh1       = HAL_DAC_ConvHalfCpltCallbackCh1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_DAC_Init+0x88>)
 8003b4e:	619a      	str	r2, [r3, #24]
    hdac->ErrorCallbackCh1              = HAL_DAC_ErrorCallbackCh1;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <HAL_DAC_Init+0x8c>)
 8003b54:	61da      	str	r2, [r3, #28]
    hdac->DMAUnderrunCallbackCh1        = HAL_DAC_DMAUnderrunCallbackCh1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <HAL_DAC_Init+0x90>)
 8003b5a:	621a      	str	r2, [r3, #32]

    hdac->ConvCpltCallbackCh2           = HAL_DACEx_ConvCpltCallbackCh2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <HAL_DAC_Init+0x94>)
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24
    hdac->ConvHalfCpltCallbackCh2       = HAL_DACEx_ConvHalfCpltCallbackCh2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <HAL_DAC_Init+0x98>)
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
    hdac->ErrorCallbackCh2              = HAL_DACEx_ErrorCallbackCh2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <HAL_DAC_Init+0x9c>)
 8003b6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdac->DMAUnderrunCallbackCh2        = HAL_DACEx_DMAUnderrunCallbackCh2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <HAL_DAC_Init+0xa0>)
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30

    if (hdac->MspInitCallback == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <HAL_DAC_Init+0x5a>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <HAL_DAC_Init+0xa4>)
 8003b80:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	08003e29 	.word	0x08003e29
 8003bb0:	08003e3d 	.word	0x08003e3d
 8003bb4:	08003e51 	.word	0x08003e51
 8003bb8:	08003e65 	.word	0x08003e65
 8003bbc:	0800425b 	.word	0x0800425b
 8003bc0:	0800426f 	.word	0x0800426f
 8003bc4:	08004283 	.word	0x08004283
 8003bc8:	08004297 	.word	0x08004297
 8003bcc:	08001b01 	.word	0x08001b01

08003bd0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0b2      	b.n	8003d4e <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	795b      	ldrb	r3, [r3, #5]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_DAC_Start_DMA+0x24>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e0ac      	b.n	8003d4e <HAL_DAC_Start_DMA+0x17e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d129      	bne.n	8003c5a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	4a53      	ldr	r2, [pc, #332]	; (8003d58 <HAL_DAC_Start_DMA+0x188>)
 8003c0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	4a52      	ldr	r2, [pc, #328]	; (8003d5c <HAL_DAC_Start_DMA+0x18c>)
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	4a51      	ldr	r2, [pc, #324]	; (8003d60 <HAL_DAC_Start_DMA+0x190>)
 8003c1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_DAC_Start_DMA+0x6c>
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d005      	beq.n	8003c46 <HAL_DAC_Start_DMA+0x76>
 8003c3a:	e009      	b.n	8003c50 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3308      	adds	r3, #8
 8003c42:	61bb      	str	r3, [r7, #24]
        break;
 8003c44:	e033      	b.n	8003cae <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	61bb      	str	r3, [r7, #24]
        break;
 8003c4e:	e02e      	b.n	8003cae <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3310      	adds	r3, #16
 8003c56:	61bb      	str	r3, [r7, #24]
        break;
 8003c58:	e029      	b.n	8003cae <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4a41      	ldr	r2, [pc, #260]	; (8003d64 <HAL_DAC_Start_DMA+0x194>)
 8003c60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <HAL_DAC_Start_DMA+0x198>)
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	4a3f      	ldr	r2, [pc, #252]	; (8003d6c <HAL_DAC_Start_DMA+0x19c>)
 8003c70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c80:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_DAC_Start_DMA+0xc0>
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d005      	beq.n	8003c9a <HAL_DAC_Start_DMA+0xca>
 8003c8e:	e009      	b.n	8003ca4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3314      	adds	r3, #20
 8003c96:	61bb      	str	r3, [r7, #24]
        break;
 8003c98:	e009      	b.n	8003cae <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3318      	adds	r3, #24
 8003ca0:	61bb      	str	r3, [r7, #24]
        break;
 8003ca2:	e004      	b.n	8003cae <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	331c      	adds	r3, #28
 8003caa:	61bb      	str	r3, [r7, #24]
        break;
 8003cac:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d111      	bne.n	8003cd8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6898      	ldr	r0, [r3, #8]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	f000 fbcd 	bl	800446c <HAL_DMA_Start_IT>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e010      	b.n	8003cfa <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003ce6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68d8      	ldr	r0, [r3, #12]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	f000 fbbb 	bl	800446c <HAL_DMA_Start_IT>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003d00:	7ffb      	ldrb	r3, [r7, #31]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11c      	bne.n	8003d40 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6819      	ldr	r1, [r3, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2201      	movs	r2, #1
 8003d14:	409a      	lsls	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <HAL_DAC_Start_DMA+0x1a0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	099b      	lsrs	r3, r3, #6
 8003d24:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <HAL_DAC_Start_DMA+0x1a4>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	099b      	lsrs	r3, r3, #6
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003d30:	e002      	b.n	8003d38 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f9      	bne.n	8003d32 <HAL_DAC_Start_DMA+0x162>
 8003d3e:	e005      	b.n	8003d4c <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f043 0204 	orr.w	r2, r3, #4
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	080041e9 	.word	0x080041e9
 8003d5c:	0800420d 	.word	0x0800420d
 8003d60:	0800422b 	.word	0x0800422b
 8003d64:	080042ab 	.word	0x080042ab
 8003d68:	080042cf 	.word	0x080042cf
 8003d6c:	080042ed 	.word	0x080042ed
 8003d70:	20000000 	.word	0x20000000
 8003d74:	053e2d63 	.word	0x053e2d63

08003d78 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01e      	beq.n	8003dd8 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d019      	beq.n	8003dd8 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2204      	movs	r2, #4
 8003da8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f043 0201 	orr.w	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dce:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01e      	beq.n	8003e20 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d019      	beq.n	8003e20 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2204      	movs	r2, #4
 8003df0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f043 0202 	orr.w	r2, r3, #2
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4798      	blx	r3
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_DAC_ConfigChannel+0x1c>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e19e      	b.n	80041d6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	795b      	ldrb	r3, [r3, #5]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_DAC_ConfigChannel+0x2c>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e198      	b.n	80041d6 <HAL_DAC_ConfigChannel+0x35e>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2202      	movs	r2, #2
 8003eae:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d17a      	bne.n	8003fae <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003eb8:	f7fe fba2 	bl	8002600 <HAL_GetTick>
 8003ebc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d13d      	bne.n	8003f40 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ec4:	e018      	b.n	8003ef8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ec6:	f7fe fb9b 	bl	8002600 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d911      	bls.n	8003ef8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f043 0208 	orr.w	r2, r3, #8
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e16e      	b.n	80041d6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1df      	bne.n	8003ec6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
 8003f10:	e020      	b.n	8003f54 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003f12:	f7fe fb75 	bl	8002600 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d90f      	bls.n	8003f40 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da0a      	bge.n	8003f40 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f043 0208 	orr.w	r2, r3, #8
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e14a      	b.n	80041d6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	dbe3      	blt.n	8003f12 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	ea02 0103 	and.w	r1, r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	21ff      	movs	r1, #255	; 0xff
 8003f90:	fa01 f303 	lsl.w	r3, r1, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	ea02 0103 	and.w	r1, r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d11d      	bne.n	8003ff2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	221f      	movs	r2, #31
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	4013      	ands	r3, r2
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2207      	movs	r2, #7
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	4013      	ands	r3, r2
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d102      	bne.n	800401c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8004016:	2300      	movs	r3, #0
 8004018:	623b      	str	r3, [r7, #32]
 800401a:	e00f      	b.n	800403c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d102      	bne.n	800402a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004024:	2301      	movs	r3, #1
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	e008      	b.n	800403c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004032:	2301      	movs	r3, #1
 8004034:	623b      	str	r3, [r7, #32]
 8004036:	e001      	b.n	800403c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004038:	2300      	movs	r3, #0
 800403a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	6a3a      	ldr	r2, [r7, #32]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405e:	4013      	ands	r3, r2
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	791b      	ldrb	r3, [r3, #4]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d102      	bne.n	8004070 <HAL_DAC_ConfigChannel+0x1f8>
 800406a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800406e:	e000      	b.n	8004072 <HAL_DAC_ConfigChannel+0x1fa>
 8004070:	2300      	movs	r3, #0
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408a:	4013      	ands	r3, r2
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	795b      	ldrb	r3, [r3, #5]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d102      	bne.n	800409c <HAL_DAC_ConfigChannel+0x224>
 8004096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800409a:	e000      	b.n	800409e <HAL_DAC_ConfigChannel+0x226>
 800409c:	2300      	movs	r3, #0
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d114      	bne.n	80040de <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80040b4:	f001 fcd2 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 80040b8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4a48      	ldr	r2, [pc, #288]	; (80041e0 <HAL_DAC_ConfigChannel+0x368>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d904      	bls.n	80040cc <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ca:	e00f      	b.n	80040ec <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4a45      	ldr	r2, [pc, #276]	; (80041e4 <HAL_DAC_ConfigChannel+0x36c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d90a      	bls.n	80040ea <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
 80040dc:	e006      	b.n	80040ec <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e4:	4313      	orrs	r3, r2
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
 80040e8:	e000      	b.n	80040ec <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80040ea:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	4313      	orrs	r3, r2
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6819      	ldr	r1, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	400a      	ands	r2, r1
 8004122:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413e:	4013      	ands	r3, r2
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004156:	4313      	orrs	r3, r2
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004160:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6819      	ldr	r1, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	22c0      	movs	r2, #192	; 0xc0
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43da      	mvns	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	400a      	ands	r2, r1
 800417c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	089b      	lsrs	r3, r3, #2
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	ea02 0103 	and.w	r1, r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	409a      	lsls	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80041d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3728      	adds	r7, #40	; 0x28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	09896800 	.word	0x09896800
 80041e4:	04c4b400 	.word	0x04c4b400

080041e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	4798      	blx	r3
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	711a      	strb	r2, [r3, #4]
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	4798      	blx	r3
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	4798      	blx	r3
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	711a      	strb	r2, [r3, #4]
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	4798      	blx	r3
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	711a      	strb	r2, [r3, #4]
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	4798      	blx	r3
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f043 0204 	orr.w	r2, r3, #4
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	4798      	blx	r3
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	711a      	strb	r2, [r3, #4]
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e08d      	b.n	800444a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_DMA_Init+0x138>)
 8004336:	429a      	cmp	r2, r3
 8004338:	d80f      	bhi.n	800435a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	4b45      	ldr	r3, [pc, #276]	; (8004458 <HAL_DMA_Init+0x13c>)
 8004342:	4413      	add	r3, r2
 8004344:	4a45      	ldr	r2, [pc, #276]	; (800445c <HAL_DMA_Init+0x140>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	009a      	lsls	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a42      	ldr	r2, [pc, #264]	; (8004460 <HAL_DMA_Init+0x144>)
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
 8004358:	e00e      	b.n	8004378 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	4b40      	ldr	r3, [pc, #256]	; (8004464 <HAL_DMA_Init+0x148>)
 8004362:	4413      	add	r3, r2
 8004364:	4a3d      	ldr	r2, [pc, #244]	; (800445c <HAL_DMA_Init+0x140>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	009a      	lsls	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a3c      	ldr	r2, [pc, #240]	; (8004468 <HAL_DMA_Init+0x14c>)
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800439c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f9b6 	bl	800473c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d8:	d102      	bne.n	80043e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d010      	beq.n	8004420 <HAL_DMA_Init+0x104>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d80c      	bhi.n	8004420 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f9d6 	bl	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	e008      	b.n	8004432 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40020407 	.word	0x40020407
 8004458:	bffdfff8 	.word	0xbffdfff8
 800445c:	cccccccd 	.word	0xcccccccd
 8004460:	40020000 	.word	0x40020000
 8004464:	bffdfbf8 	.word	0xbffdfbf8
 8004468:	40020400 	.word	0x40020400

0800446c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_DMA_Start_IT+0x20>
 8004488:	2302      	movs	r3, #2
 800448a:	e066      	b.n	800455a <HAL_DMA_Start_IT+0xee>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d155      	bne.n	800454c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f8fb 	bl	80046c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 020e 	orr.w	r2, r2, #14
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e00f      	b.n	8004504 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 020a 	orr.w	r2, r2, #10
 8004502:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004520:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004538:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e005      	b.n	8004558 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004554:	2302      	movs	r3, #2
 8004556:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	2204      	movs	r2, #4
 8004584:	409a      	lsls	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4013      	ands	r3, r2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d026      	beq.n	80045dc <HAL_DMA_IRQHandler+0x7a>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d021      	beq.n	80045dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d107      	bne.n	80045b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0204 	bic.w	r2, r2, #4
 80045b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	f003 021f 	and.w	r2, r3, #31
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2104      	movs	r1, #4
 80045c4:	fa01 f202 	lsl.w	r2, r1, r2
 80045c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d071      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045da:	e06c      	b.n	80046b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2202      	movs	r2, #2
 80045e6:	409a      	lsls	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d02e      	beq.n	800464e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d029      	beq.n	800464e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 020a 	bic.w	r2, r2, #10
 8004616:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2102      	movs	r1, #2
 800462e:	fa01 f202 	lsl.w	r2, r1, r2
 8004632:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d038      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800464c:	e033      	b.n	80046b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2208      	movs	r2, #8
 8004658:	409a      	lsls	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d02a      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d025      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 020e 	bic.w	r2, r2, #14
 800467a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	f003 021f 	and.w	r2, r3, #31
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f202 	lsl.w	r2, r1, r2
 800468e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
}
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046d6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046e8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f003 021f 	and.w	r2, r3, #31
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b10      	cmp	r3, #16
 800470c:	d108      	bne.n	8004720 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800471e:	e007      	b.n	8004730 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800474c:	429a      	cmp	r2, r3
 800474e:	d802      	bhi.n	8004756 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004750:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e001      	b.n	800475a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004758:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3b08      	subs	r3, #8
 8004766:	4a12      	ldr	r2, [pc, #72]	; (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	089b      	lsrs	r3, r3, #2
 8004776:	009a      	lsls	r2, r3, #2
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4413      	add	r3, r2
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a0b      	ldr	r2, [pc, #44]	; (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004786:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2201      	movs	r2, #1
 8004790:	409a      	lsls	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40020407 	.word	0x40020407
 80047a8:	40020800 	.word	0x40020800
 80047ac:	40020820 	.word	0x40020820
 80047b0:	cccccccd 	.word	0xcccccccd
 80047b4:	40020880 	.word	0x40020880

080047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	461a      	mov	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a08      	ldr	r2, [pc, #32]	; (80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047da:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3b01      	subs	r3, #1
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	2201      	movs	r2, #1
 80047e6:	409a      	lsls	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	1000823f 	.word	0x1000823f
 80047fc:	40020940 	.word	0x40020940

08004800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800480e:	e15a      	b.n	8004ac6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	2101      	movs	r1, #1
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	4013      	ands	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 814c 	beq.w	8004ac0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d005      	beq.n	8004840 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800483c:	2b02      	cmp	r3, #2
 800483e:	d130      	bne.n	80048a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	2203      	movs	r2, #3
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004876:	2201      	movs	r2, #1
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4013      	ands	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	f003 0201 	and.w	r2, r3, #1
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d017      	beq.n	80048de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	2203      	movs	r2, #3
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4013      	ands	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d123      	bne.n	8004932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	08da      	lsrs	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3208      	adds	r2, #8
 80048f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	08da      	lsrs	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3208      	adds	r2, #8
 800492c:	6939      	ldr	r1, [r7, #16]
 800492e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	2203      	movs	r2, #3
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4013      	ands	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0203 	and.w	r2, r3, #3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80a6 	beq.w	8004ac0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004974:	4b5b      	ldr	r3, [pc, #364]	; (8004ae4 <HAL_GPIO_Init+0x2e4>)
 8004976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004978:	4a5a      	ldr	r2, [pc, #360]	; (8004ae4 <HAL_GPIO_Init+0x2e4>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6613      	str	r3, [r2, #96]	; 0x60
 8004980:	4b58      	ldr	r3, [pc, #352]	; (8004ae4 <HAL_GPIO_Init+0x2e4>)
 8004982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800498c:	4a56      	ldr	r2, [pc, #344]	; (8004ae8 <HAL_GPIO_Init+0x2e8>)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	3302      	adds	r3, #2
 8004994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	220f      	movs	r2, #15
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4013      	ands	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049b6:	d01f      	beq.n	80049f8 <HAL_GPIO_Init+0x1f8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a4c      	ldr	r2, [pc, #304]	; (8004aec <HAL_GPIO_Init+0x2ec>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d019      	beq.n	80049f4 <HAL_GPIO_Init+0x1f4>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a4b      	ldr	r2, [pc, #300]	; (8004af0 <HAL_GPIO_Init+0x2f0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_GPIO_Init+0x1f0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a4a      	ldr	r2, [pc, #296]	; (8004af4 <HAL_GPIO_Init+0x2f4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00d      	beq.n	80049ec <HAL_GPIO_Init+0x1ec>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a49      	ldr	r2, [pc, #292]	; (8004af8 <HAL_GPIO_Init+0x2f8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <HAL_GPIO_Init+0x1e8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a48      	ldr	r2, [pc, #288]	; (8004afc <HAL_GPIO_Init+0x2fc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <HAL_GPIO_Init+0x1e4>
 80049e0:	2305      	movs	r3, #5
 80049e2:	e00a      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049e4:	2306      	movs	r3, #6
 80049e6:	e008      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049e8:	2304      	movs	r3, #4
 80049ea:	e006      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049ec:	2303      	movs	r3, #3
 80049ee:	e004      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e002      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_GPIO_Init+0x1fa>
 80049f8:	2300      	movs	r3, #0
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	f002 0203 	and.w	r2, r2, #3
 8004a00:	0092      	lsls	r2, r2, #2
 8004a02:	4093      	lsls	r3, r2
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a0a:	4937      	ldr	r1, [pc, #220]	; (8004ae8 <HAL_GPIO_Init+0x2e8>)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	3302      	adds	r3, #2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a18:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4013      	ands	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a3c:	4a30      	ldr	r2, [pc, #192]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a42:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a66:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a6c:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a90:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a96:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aba:	4a11      	ldr	r2, [pc, #68]	; (8004b00 <HAL_GPIO_Init+0x300>)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f47f ae9d 	bne.w	8004810 <HAL_GPIO_Init+0x10>
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	48000400 	.word	0x48000400
 8004af0:	48000800 	.word	0x48000800
 8004af4:	48000c00 	.word	0x48000c00
 8004af8:	48001000 	.word	0x48001000
 8004afc:	48001400 	.word	0x48001400
 8004b00:	40010400 	.word	0x40010400

08004b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
 8004b10:	4613      	mov	r3, r2
 8004b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b14:	787b      	ldrb	r3, [r7, #1]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b20:	e002      	b.n	8004b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b22:	887a      	ldrh	r2, [r7, #2]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0c9      	b.n	8004cde <HAL_OPAMP_Init+0x1aa>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d101      	bne.n	8004b5a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e0c1      	b.n	8004cde <HAL_OPAMP_Init+0x1aa>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d101      	bne.n	8004b6a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e0b9      	b.n	8004cde <HAL_OPAMP_Init+0x1aa>
    assert_param(IS_OPAMP_POWERMODE(hopamp->Init.PowerMode));
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_OPAMP_Init+0x50>
    {
      if (hopamp->MspInitCallback == NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d102      	bne.n	8004b84 <HAL_OPAMP_Init+0x50>
      {
        hopamp->MspInitCallback               = HAL_OPAMP_MspInit;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a59      	ldr	r2, [pc, #356]	; (8004ce8 <HAL_OPAMP_Init+0x1b4>)
 8004b82:	63da      	str	r2, [r3, #60]	; 0x3c
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b84:	4b59      	ldr	r3, [pc, #356]	; (8004cec <HAL_OPAMP_Init+0x1b8>)
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	4a58      	ldr	r2, [pc, #352]	; (8004cec <HAL_OPAMP_Init+0x1b8>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6613      	str	r3, [r2, #96]	; 0x60
 8004b90:	4b56      	ldr	r3, [pc, #344]	; (8004cec <HAL_OPAMP_Init+0x1b8>)
 8004b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d103      	bne.n	8004bb0 <HAL_OPAMP_Init+0x7c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	d003      	beq.n	8004bc8 <HAL_OPAMP_Init+0x94>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b60      	cmp	r3, #96	; 0x60
 8004bc6:	d133      	bne.n	8004c30 <HAL_OPAMP_Init+0xfc>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 0110 	bic.w	r1, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b42      	ldr	r3, [pc, #264]	; (8004cf0 <HAL_OPAMP_Init+0x1bc>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6851      	ldr	r1, [r2, #4]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6892      	ldr	r2, [r2, #8]
 8004bf0:	4311      	orrs	r1, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6912      	ldr	r2, [r2, #16]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	7d09      	ldrb	r1, [r1, #20]
 8004bfc:	2901      	cmp	r1, #1
 8004bfe:	d102      	bne.n	8004c06 <HAL_OPAMP_Init+0xd2>
 8004c00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c04:	e000      	b.n	8004c08 <HAL_OPAMP_Init+0xd4>
 8004c06:	2100      	movs	r1, #0
 8004c08:	4311      	orrs	r1, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c0e:	4311      	orrs	r1, r2
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c14:	4311      	orrs	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c1a:	04d2      	lsls	r2, r2, #19
 8004c1c:	4311      	orrs	r1, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c22:	0612      	lsls	r2, r2, #24
 8004c24:	4311      	orrs	r1, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e035      	b.n	8004c9c <HAL_OPAMP_Init+0x168>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 0110 	bic.w	r1, r3, #16
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_OPAMP_Init+0x1bc>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6851      	ldr	r1, [r2, #4]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6892      	ldr	r2, [r2, #8]
 8004c58:	4311      	orrs	r1, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68d2      	ldr	r2, [r2, #12]
 8004c5e:	4311      	orrs	r1, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6912      	ldr	r2, [r2, #16]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	7d09      	ldrb	r1, [r1, #20]
 8004c6a:	2901      	cmp	r1, #1
 8004c6c:	d102      	bne.n	8004c74 <HAL_OPAMP_Init+0x140>
 8004c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c72:	e000      	b.n	8004c76 <HAL_OPAMP_Init+0x142>
 8004c74:	2100      	movs	r1, #0
 8004c76:	4311      	orrs	r1, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c82:	4311      	orrs	r1, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c88:	04d2      	lsls	r2, r2, #19
 8004c8a:	4311      	orrs	r1, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c90:	0612      	lsls	r2, r2, #24
 8004c92:	4311      	orrs	r1, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	db10      	blt.n	8004cc8 <HAL_OPAMP_Init+0x194>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d103      	bne.n	8004cdc <HAL_OPAMP_Init+0x1a8>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08001cc9 	.word	0x08001cc9
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	e0003e11 	.word	0xe0003e11

08004cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d141      	bne.n	8004d86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d02:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0e:	d131      	bne.n	8004d74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d10:	4b47      	ldr	r3, [pc, #284]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d16:	4a46      	ldr	r2, [pc, #280]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d20:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d28:	4a41      	ldr	r2, [pc, #260]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d30:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2232      	movs	r2, #50	; 0x32
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	4a3f      	ldr	r2, [pc, #252]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	0c9b      	lsrs	r3, r3, #18
 8004d42:	3301      	adds	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d46:	e002      	b.n	8004d4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d4e:	4b38      	ldr	r3, [pc, #224]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5a:	d102      	bne.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f2      	bne.n	8004d48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d62:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6e:	d158      	bne.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e057      	b.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d74:	4b2e      	ldr	r3, [pc, #184]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7a:	4a2d      	ldr	r2, [pc, #180]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d84:	e04d      	b.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d141      	bne.n	8004e12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d8e:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9a:	d131      	bne.n	8004e00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d9c:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004da2:	4a23      	ldr	r2, [pc, #140]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004db4:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2232      	movs	r2, #50	; 0x32
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	4a1c      	ldr	r2, [pc, #112]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dcc:	0c9b      	lsrs	r3, r3, #18
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dd2:	e002      	b.n	8004dda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de6:	d102      	bne.n	8004dee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f2      	bne.n	8004dd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dfa:	d112      	bne.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e011      	b.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e06:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e10:	e007      	b.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e12:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e1a:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40007000 	.word	0x40007000
 8004e34:	20000000 	.word	0x20000000
 8004e38:	431bde83 	.word	0x431bde83

08004e3c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004e44:	f7fd fbdc 	bl	8002600 <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e08f      	b.n	8004f74 <HAL_QSPI_Init+0x138>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d131      	bne.n	8004ec4 <HAL_QSPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    /* Reset Callback pointers in HAL_QSPI_STATE_RESET only */
    hqspi->ErrorCallback         = HAL_QSPI_ErrorCallback;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a44      	ldr	r2, [pc, #272]	; (8004f7c <HAL_QSPI_Init+0x140>)
 8004e6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hqspi->AbortCpltCallback     = HAL_QSPI_AbortCpltCallback;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a43      	ldr	r2, [pc, #268]	; (8004f80 <HAL_QSPI_Init+0x144>)
 8004e72:	651a      	str	r2, [r3, #80]	; 0x50
    hqspi->FifoThresholdCallback = HAL_QSPI_FifoThresholdCallback;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a43      	ldr	r2, [pc, #268]	; (8004f84 <HAL_QSPI_Init+0x148>)
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54
    hqspi->CmdCpltCallback       = HAL_QSPI_CmdCpltCallback;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a42      	ldr	r2, [pc, #264]	; (8004f88 <HAL_QSPI_Init+0x14c>)
 8004e7e:	659a      	str	r2, [r3, #88]	; 0x58
    hqspi->RxCpltCallback        = HAL_QSPI_RxCpltCallback;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a42      	ldr	r2, [pc, #264]	; (8004f8c <HAL_QSPI_Init+0x150>)
 8004e84:	65da      	str	r2, [r3, #92]	; 0x5c
    hqspi->TxCpltCallback        = HAL_QSPI_TxCpltCallback;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a41      	ldr	r2, [pc, #260]	; (8004f90 <HAL_QSPI_Init+0x154>)
 8004e8a:	661a      	str	r2, [r3, #96]	; 0x60
    hqspi->RxHalfCpltCallback    = HAL_QSPI_RxHalfCpltCallback;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a41      	ldr	r2, [pc, #260]	; (8004f94 <HAL_QSPI_Init+0x158>)
 8004e90:	665a      	str	r2, [r3, #100]	; 0x64
    hqspi->TxHalfCpltCallback    = HAL_QSPI_TxHalfCpltCallback;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a40      	ldr	r2, [pc, #256]	; (8004f98 <HAL_QSPI_Init+0x15c>)
 8004e96:	669a      	str	r2, [r3, #104]	; 0x68
    hqspi->StatusMatchCallback   = HAL_QSPI_StatusMatchCallback;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a40      	ldr	r2, [pc, #256]	; (8004f9c <HAL_QSPI_Init+0x160>)
 8004e9c:	66da      	str	r2, [r3, #108]	; 0x6c
    hqspi->TimeOutCallback       = HAL_QSPI_TimeOutCallback;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a3f      	ldr	r2, [pc, #252]	; (8004fa0 <HAL_QSPI_Init+0x164>)
 8004ea2:	671a      	str	r2, [r3, #112]	; 0x70

    if(hqspi->MspInitCallback == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <HAL_QSPI_Init+0x76>
    {
      hqspi->MspInitCallback = HAL_QSPI_MspInit;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a3d      	ldr	r2, [pc, #244]	; (8004fa4 <HAL_QSPI_Init+0x168>)
 8004eb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004eba:	f241 3188 	movw	r1, #5000	; 0x1388
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8d8 	bl	8005074 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	021a      	lsls	r2, r3, #8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2120      	movs	r1, #32
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8d0 	bl	8005090 <QSPI_WaitFlagStateUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004ef4:	7afb      	ldrb	r3, [r7, #11]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d137      	bne.n	8004f6a <HAL_QSPI_Init+0x12e>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f04:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6852      	ldr	r2, [r2, #4]
 8004f0c:	0611      	lsls	r1, r2, #24
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68d2      	ldr	r2, [r2, #12]
 8004f12:	4311      	orrs	r1, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	69d2      	ldr	r2, [r2, #28]
 8004f18:	4311      	orrs	r1, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6a12      	ldr	r2, [r2, #32]
 8004f1e:	4311      	orrs	r1, r2
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <HAL_QSPI_Init+0x16c>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6912      	ldr	r2, [r2, #16]
 8004f36:	0411      	lsls	r1, r2, #16
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6952      	ldr	r2, [r2, #20]
 8004f3c:	4311      	orrs	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6992      	ldr	r2, [r2, #24]
 8004f42:	4311      	orrs	r1, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004f72:	7afb      	ldrb	r3, [r7, #11]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	08004fad 	.word	0x08004fad
 8004f80:	08004fc1 	.word	0x08004fc1
 8004f84:	08005039 	.word	0x08005039
 8004f88:	08004fd5 	.word	0x08004fd5
 8004f8c:	08004fe9 	.word	0x08004fe9
 8004f90:	08004ffd 	.word	0x08004ffd
 8004f94:	08005011 	.word	0x08005011
 8004f98:	08005025 	.word	0x08005025
 8004f9c:	0800504d 	.word	0x0800504d
 8004fa0:	08005061 	.word	0x08005061
 8004fa4:	08001e39 	.word	0x08001e39
 8004fa8:	ffe0f8fe 	.word	0xffe0f8fe

08004fac <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_QSPI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_QSPI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050a0:	e01a      	b.n	80050d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050a8:	d016      	beq.n	80050d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050aa:	f7fd faa9 	bl	8002600 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d302      	bcc.n	80050c0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10b      	bne.n	80050d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2204      	movs	r2, #4
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050cc:	f043 0201 	orr.w	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e00e      	b.n	80050f6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bf14      	ite	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	2300      	moveq	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1d6      	bne.n	80050a2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e2fe      	b.n	8005710 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d075      	beq.n	800520a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511e:	4b97      	ldr	r3, [pc, #604]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005128:	4b94      	ldr	r3, [pc, #592]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d102      	bne.n	800513e <HAL_RCC_OscConfig+0x3e>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d002      	beq.n	8005144 <HAL_RCC_OscConfig+0x44>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d10b      	bne.n	800515c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005144:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d05b      	beq.n	8005208 <HAL_RCC_OscConfig+0x108>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d157      	bne.n	8005208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e2d9      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d106      	bne.n	8005174 <HAL_RCC_OscConfig+0x74>
 8005166:	4b85      	ldr	r3, [pc, #532]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a84      	ldr	r2, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800516c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e01d      	b.n	80051b0 <HAL_RCC_OscConfig+0xb0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x98>
 800517e:	4b7f      	ldr	r3, [pc, #508]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a7e      	ldr	r2, [pc, #504]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4b7c      	ldr	r3, [pc, #496]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a7b      	ldr	r2, [pc, #492]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e00b      	b.n	80051b0 <HAL_RCC_OscConfig+0xb0>
 8005198:	4b78      	ldr	r3, [pc, #480]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a77      	ldr	r2, [pc, #476]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800519e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4b75      	ldr	r3, [pc, #468]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a74      	ldr	r2, [pc, #464]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd fa22 	bl	8002600 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c0:	f7fd fa1e 	bl	8002600 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e29e      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d2:	4b6a      	ldr	r3, [pc, #424]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0xc0>
 80051de:	e014      	b.n	800520a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd fa0e 	bl	8002600 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e8:	f7fd fa0a 	bl	8002600 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	; 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e28a      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051fa:	4b60      	ldr	r3, [pc, #384]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0xe8>
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d075      	beq.n	8005302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005216:	4b59      	ldr	r3, [pc, #356]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005220:	4b56      	ldr	r3, [pc, #344]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b0c      	cmp	r3, #12
 800522e:	d102      	bne.n	8005236 <HAL_RCC_OscConfig+0x136>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d002      	beq.n	800523c <HAL_RCC_OscConfig+0x13c>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d11f      	bne.n	800527c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800523c:	4b4f      	ldr	r3, [pc, #316]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_OscConfig+0x154>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e25d      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b49      	ldr	r3, [pc, #292]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	4946      	ldr	r1, [pc, #280]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005268:	4b45      	ldr	r3, [pc, #276]	; (8005380 <HAL_RCC_OscConfig+0x280>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f7fd f875 	bl	800235c <HAL_InitTick>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d043      	beq.n	8005300 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e249      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d023      	beq.n	80052cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005284:	4b3d      	ldr	r3, [pc, #244]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3c      	ldr	r2, [pc, #240]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800528a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fd f9b6 	bl	8002600 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005298:	f7fd f9b2 	bl	8002600 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e232      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052aa:	4b34      	ldr	r3, [pc, #208]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b6:	4b31      	ldr	r3, [pc, #196]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	492d      	ldr	r1, [pc, #180]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	604b      	str	r3, [r1, #4]
 80052ca:	e01a      	b.n	8005302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052cc:	4b2b      	ldr	r3, [pc, #172]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a2a      	ldr	r2, [pc, #168]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fd f992 	bl	8002600 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e0:	f7fd f98e 	bl	8002600 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e20e      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x1e0>
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005300:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d041      	beq.n	8005392 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01c      	beq.n	8005350 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005316:	4b19      	ldr	r3, [pc, #100]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531c:	4a17      	ldr	r2, [pc, #92]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005326:	f7fd f96b 	bl	8002600 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800532e:	f7fd f967 	bl	8002600 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e1e7      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0ef      	beq.n	800532e <HAL_RCC_OscConfig+0x22e>
 800534e:	e020      	b.n	8005392 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <HAL_RCC_OscConfig+0x27c>)
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005360:	f7fd f94e 	bl	8002600 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005366:	e00d      	b.n	8005384 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005368:	f7fd f94a 	bl	8002600 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d906      	bls.n	8005384 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e1ca      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
 8005380:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005384:	4b8c      	ldr	r3, [pc, #560]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1ea      	bne.n	8005368 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80a6 	beq.w	80054ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053a0:	2300      	movs	r3, #0
 80053a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053a4:	4b84      	ldr	r3, [pc, #528]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_RCC_OscConfig+0x2b4>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <HAL_RCC_OscConfig+0x2b6>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ba:	4b7f      	ldr	r3, [pc, #508]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	4a7e      	ldr	r2, [pc, #504]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c4:	6593      	str	r3, [r2, #88]	; 0x58
 80053c6:	4b7c      	ldr	r3, [pc, #496]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053d2:	2301      	movs	r3, #1
 80053d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053d6:	4b79      	ldr	r3, [pc, #484]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d118      	bne.n	8005414 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053e2:	4b76      	ldr	r3, [pc, #472]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a75      	ldr	r2, [pc, #468]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 80053e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ee:	f7fd f907 	bl	8002600 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f6:	f7fd f903 	bl	8002600 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e183      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005408:	4b6c      	ldr	r3, [pc, #432]	; (80055bc <HAL_RCC_OscConfig+0x4bc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d108      	bne.n	800542e <HAL_RCC_OscConfig+0x32e>
 800541c:	4b66      	ldr	r3, [pc, #408]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	4a65      	ldr	r2, [pc, #404]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800542c:	e024      	b.n	8005478 <HAL_RCC_OscConfig+0x378>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b05      	cmp	r3, #5
 8005434:	d110      	bne.n	8005458 <HAL_RCC_OscConfig+0x358>
 8005436:	4b60      	ldr	r3, [pc, #384]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	4a5e      	ldr	r2, [pc, #376]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800543e:	f043 0304 	orr.w	r3, r3, #4
 8005442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005446:	4b5c      	ldr	r3, [pc, #368]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	4a5a      	ldr	r2, [pc, #360]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005456:	e00f      	b.n	8005478 <HAL_RCC_OscConfig+0x378>
 8005458:	4b57      	ldr	r3, [pc, #348]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	4a56      	ldr	r2, [pc, #344]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005468:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	4a52      	ldr	r2, [pc, #328]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d016      	beq.n	80054ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fd f8be 	bl	8002600 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005486:	e00a      	b.n	800549e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005488:	f7fd f8ba 	bl	8002600 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f241 3288 	movw	r2, #5000	; 0x1388
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e138      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800549e:	4b46      	ldr	r3, [pc, #280]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0ed      	beq.n	8005488 <HAL_RCC_OscConfig+0x388>
 80054ac:	e015      	b.n	80054da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ae:	f7fd f8a7 	bl	8002600 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054b4:	e00a      	b.n	80054cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b6:	f7fd f8a3 	bl	8002600 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e121      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054cc:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1ed      	bne.n	80054b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054da:	7ffb      	ldrb	r3, [r7, #31]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d105      	bne.n	80054ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e0:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e4:	4a34      	ldr	r2, [pc, #208]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 80054e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d03c      	beq.n	8005572 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01c      	beq.n	800553a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005500:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005506:	4a2c      	ldr	r2, [pc, #176]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005510:	f7fd f876 	bl	8002600 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005518:	f7fd f872 	bl	8002600 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e0f2      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800552c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ef      	beq.n	8005518 <HAL_RCC_OscConfig+0x418>
 8005538:	e01b      	b.n	8005572 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800553a:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800553c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005540:	4a1d      	ldr	r2, [pc, #116]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554a:	f7fd f859 	bl	8002600 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005552:	f7fd f855 	bl	8002600 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e0d5      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005564:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ef      	bne.n	8005552 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80c9 	beq.w	800570e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 030c 	and.w	r3, r3, #12
 8005584:	2b0c      	cmp	r3, #12
 8005586:	f000 8083 	beq.w	8005690 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d15e      	bne.n	8005650 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005592:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <HAL_RCC_OscConfig+0x4b8>)
 8005598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800559c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559e:	f7fd f82f 	bl	8002600 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055a4:	e00c      	b.n	80055c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a6:	f7fd f82b 	bl	8002600 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d905      	bls.n	80055c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e0ab      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055c0:	4b55      	ldr	r3, [pc, #340]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ec      	bne.n	80055a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055cc:	4b52      	ldr	r3, [pc, #328]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	4b52      	ldr	r3, [pc, #328]	; (800571c <HAL_RCC_OscConfig+0x61c>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6a11      	ldr	r1, [r2, #32]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055dc:	3a01      	subs	r2, #1
 80055de:	0112      	lsls	r2, r2, #4
 80055e0:	4311      	orrs	r1, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80055e6:	0212      	lsls	r2, r2, #8
 80055e8:	4311      	orrs	r1, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055ee:	0852      	lsrs	r2, r2, #1
 80055f0:	3a01      	subs	r2, #1
 80055f2:	0552      	lsls	r2, r2, #21
 80055f4:	4311      	orrs	r1, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055fa:	0852      	lsrs	r2, r2, #1
 80055fc:	3a01      	subs	r2, #1
 80055fe:	0652      	lsls	r2, r2, #25
 8005600:	4311      	orrs	r1, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005606:	06d2      	lsls	r2, r2, #27
 8005608:	430a      	orrs	r2, r1
 800560a:	4943      	ldr	r1, [pc, #268]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 800560c:	4313      	orrs	r3, r2
 800560e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005610:	4b41      	ldr	r3, [pc, #260]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a40      	ldr	r2, [pc, #256]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 8005616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800561a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800561c:	4b3e      	ldr	r3, [pc, #248]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a3d      	ldr	r2, [pc, #244]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 8005622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005626:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fc ffea 	bl	8002600 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fc ffe6 	bl	8002600 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e066      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005642:	4b35      	ldr	r3, [pc, #212]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_RCC_OscConfig+0x530>
 800564e:	e05e      	b.n	800570e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005650:	4b31      	ldr	r3, [pc, #196]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a30      	ldr	r2, [pc, #192]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 8005656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800565a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fc ffd0 	bl	8002600 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005664:	f7fc ffcc 	bl	8002600 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e04c      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005676:	4b28      	ldr	r3, [pc, #160]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005682:	4b25      	ldr	r3, [pc, #148]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	4924      	ldr	r1, [pc, #144]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 8005688:	4b25      	ldr	r3, [pc, #148]	; (8005720 <HAL_RCC_OscConfig+0x620>)
 800568a:	4013      	ands	r3, r2
 800568c:	60cb      	str	r3, [r1, #12]
 800568e:	e03e      	b.n	800570e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e039      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800569c:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <HAL_RCC_OscConfig+0x618>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f003 0203 	and.w	r2, r3, #3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d12c      	bne.n	800570a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	3b01      	subs	r3, #1
 80056bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056be:	429a      	cmp	r2, r3
 80056c0:	d123      	bne.n	800570a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d11b      	bne.n	800570a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d113      	bne.n	800570a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	3b01      	subs	r3, #1
 80056f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d109      	bne.n	800570a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	3b01      	subs	r3, #1
 8005704:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d001      	beq.n	800570e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40021000 	.word	0x40021000
 800571c:	019f800c 	.word	0x019f800c
 8005720:	feeefffc 	.word	0xfeeefffc

08005724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e11e      	b.n	800597a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800573c:	4b91      	ldr	r3, [pc, #580]	; (8005984 <HAL_RCC_ClockConfig+0x260>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d910      	bls.n	800576c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574a:	4b8e      	ldr	r3, [pc, #568]	; (8005984 <HAL_RCC_ClockConfig+0x260>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f023 020f 	bic.w	r2, r3, #15
 8005752:	498c      	ldr	r1, [pc, #560]	; (8005984 <HAL_RCC_ClockConfig+0x260>)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	4313      	orrs	r3, r2
 8005758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800575a:	4b8a      	ldr	r3, [pc, #552]	; (8005984 <HAL_RCC_ClockConfig+0x260>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e106      	b.n	800597a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d073      	beq.n	8005860 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d129      	bne.n	80057d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005780:	4b81      	ldr	r3, [pc, #516]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0f4      	b.n	800597a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005790:	f000 f9fa 	bl	8005b88 <RCC_GetSysClockFreqFromPLLSource>
 8005794:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	4a7c      	ldr	r2, [pc, #496]	; (800598c <HAL_RCC_ClockConfig+0x268>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d93f      	bls.n	800581e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800579e:	4b7a      	ldr	r3, [pc, #488]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d033      	beq.n	800581e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d12f      	bne.n	800581e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057be:	4b72      	ldr	r3, [pc, #456]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c6:	4a70      	ldr	r2, [pc, #448]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 80057c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e024      	b.n	800581e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d107      	bne.n	80057ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057dc:	4b6a      	ldr	r3, [pc, #424]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0c6      	b.n	800597a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057ec:	4b66      	ldr	r3, [pc, #408]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0be      	b.n	800597a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80057fc:	f000 f8ce 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8005800:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4a61      	ldr	r2, [pc, #388]	; (800598c <HAL_RCC_ClockConfig+0x268>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d909      	bls.n	800581e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800580a:	4b5f      	ldr	r3, [pc, #380]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005812:	4a5d      	ldr	r2, [pc, #372]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 8005814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005818:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800581a:	2380      	movs	r3, #128	; 0x80
 800581c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800581e:	4b5a      	ldr	r3, [pc, #360]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f023 0203 	bic.w	r2, r3, #3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4957      	ldr	r1, [pc, #348]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 800582c:	4313      	orrs	r3, r2
 800582e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005830:	f7fc fee6 	bl	8002600 <HAL_GetTick>
 8005834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005836:	e00a      	b.n	800584e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005838:	f7fc fee2 	bl	8002600 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f241 3288 	movw	r2, #5000	; 0x1388
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e095      	b.n	800597a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584e:	4b4e      	ldr	r3, [pc, #312]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 020c 	and.w	r2, r3, #12
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	429a      	cmp	r2, r3
 800585e:	d1eb      	bne.n	8005838 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d023      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005878:	4b43      	ldr	r3, [pc, #268]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4a42      	ldr	r2, [pc, #264]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 800587e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005882:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005890:	4b3d      	ldr	r3, [pc, #244]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005898:	4a3b      	ldr	r2, [pc, #236]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 800589a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800589e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a0:	4b39      	ldr	r3, [pc, #228]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4936      	ldr	r1, [pc, #216]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	608b      	str	r3, [r1, #8]
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b80      	cmp	r3, #128	; 0x80
 80058b8:	d105      	bne.n	80058c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058ba:	4b33      	ldr	r3, [pc, #204]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	4a32      	ldr	r2, [pc, #200]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 80058c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058c6:	4b2f      	ldr	r3, [pc, #188]	; (8005984 <HAL_RCC_ClockConfig+0x260>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d21d      	bcs.n	8005910 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d4:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <HAL_RCC_ClockConfig+0x260>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f023 020f 	bic.w	r2, r3, #15
 80058dc:	4929      	ldr	r1, [pc, #164]	; (8005984 <HAL_RCC_ClockConfig+0x260>)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058e4:	f7fc fe8c 	bl	8002600 <HAL_GetTick>
 80058e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	e00a      	b.n	8005902 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ec:	f7fc fe88 	bl	8002600 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e03b      	b.n	800597a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005902:	4b20      	ldr	r3, [pc, #128]	; (8005984 <HAL_RCC_ClockConfig+0x260>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d1ed      	bne.n	80058ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800591c:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4917      	ldr	r1, [pc, #92]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 800592a:	4313      	orrs	r3, r2
 800592c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800593a:	4b13      	ldr	r3, [pc, #76]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	490f      	ldr	r1, [pc, #60]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 800594a:	4313      	orrs	r3, r2
 800594c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800594e:	f000 f825 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8005952:	4602      	mov	r2, r0
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <HAL_RCC_ClockConfig+0x264>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	091b      	lsrs	r3, r3, #4
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	490c      	ldr	r1, [pc, #48]	; (8005990 <HAL_RCC_ClockConfig+0x26c>)
 8005960:	5ccb      	ldrb	r3, [r1, r3]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	fa22 f303 	lsr.w	r3, r2, r3
 800596a:	4a0a      	ldr	r2, [pc, #40]	; (8005994 <HAL_RCC_ClockConfig+0x270>)
 800596c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800596e:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <HAL_RCC_ClockConfig+0x274>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f7fc fcf2 	bl	800235c <HAL_InitTick>
 8005978:	4603      	mov	r3, r0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	40022000 	.word	0x40022000
 8005988:	40021000 	.word	0x40021000
 800598c:	04c4b400 	.word	0x04c4b400
 8005990:	0800c4d0 	.word	0x0800c4d0
 8005994:	20000000 	.word	0x20000000
 8005998:	20000004 	.word	0x20000004

0800599c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059a2:	4b2c      	ldr	r3, [pc, #176]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 030c 	and.w	r3, r3, #12
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d102      	bne.n	80059b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059ae:	4b2a      	ldr	r3, [pc, #168]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	e047      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059b4:	4b27      	ldr	r3, [pc, #156]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 030c 	and.w	r3, r3, #12
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d102      	bne.n	80059c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059c0:	4b25      	ldr	r3, [pc, #148]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	e03e      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059c6:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b0c      	cmp	r3, #12
 80059d0:	d136      	bne.n	8005a40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059d2:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059dc:	4b1d      	ldr	r3, [pc, #116]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	3301      	adds	r3, #1
 80059e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d10c      	bne.n	8005a0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059f0:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059fa:	68d2      	ldr	r2, [r2, #12]
 80059fc:	0a12      	lsrs	r2, r2, #8
 80059fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a02:	fb02 f303 	mul.w	r3, r2, r3
 8005a06:	617b      	str	r3, [r7, #20]
      break;
 8005a08:	e00c      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a0a:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a12:	4a10      	ldr	r2, [pc, #64]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a14:	68d2      	ldr	r2, [r2, #12]
 8005a16:	0a12      	lsrs	r2, r2, #8
 8005a18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
 8005a20:	617b      	str	r3, [r7, #20]
      break;
 8005a22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	0e5b      	lsrs	r3, r3, #25
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	3301      	adds	r3, #1
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	e001      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a44:	693b      	ldr	r3, [r7, #16]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40021000 	.word	0x40021000
 8005a58:	00f42400 	.word	0x00f42400

08005a5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a60:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a62:	681b      	ldr	r3, [r3, #0]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20000000 	.word	0x20000000

08005a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a78:	f7ff fff0 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	4904      	ldr	r1, [pc, #16]	; (8005a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a8a:	5ccb      	ldrb	r3, [r1, r3]
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	0800c4e0 	.word	0x0800c4e0

08005aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005aa4:	f7ff ffda 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	0adb      	lsrs	r3, r3, #11
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	4904      	ldr	r1, [pc, #16]	; (8005ac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ab6:	5ccb      	ldrb	r3, [r1, r3]
 8005ab8:	f003 031f 	and.w	r3, r3, #31
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	0800c4e0 	.word	0x0800c4e0

08005acc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	220f      	movs	r2, #15
 8005ada:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005adc:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0203 	and.w	r2, r3, #3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005af4:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	08db      	lsrs	r3, r3, #3
 8005b06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <HAL_RCC_GetClockConfig+0x60>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 020f 	and.w	r2, r3, #15
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	601a      	str	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	40022000 	.word	0x40022000

08005b30 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <HAL_RCC_EnableCSS+0x1c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a04      	ldr	r2, [pc, #16]	; (8005b4c <HAL_RCC_EnableCSS+0x1c>)
 8005b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	bf00      	nop
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40021000 	.word	0x40021000

08005b50 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b60:	d105      	bne.n	8005b6e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005b62:	f000 f809 	bl	8005b78 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005b66:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b6c:	621a      	str	r2, [r3, #32]
  }
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40021000 	.word	0x40021000

08005b78 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b8e:	4b1e      	ldr	r3, [pc, #120]	; (8005c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b98:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d10c      	bne.n	8005bc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bac:	4a17      	ldr	r2, [pc, #92]	; (8005c0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bb6:	68d2      	ldr	r2, [r2, #12]
 8005bb8:	0a12      	lsrs	r2, r2, #8
 8005bba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	617b      	str	r3, [r7, #20]
    break;
 8005bc4:	e00c      	b.n	8005be0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bc6:	4a11      	ldr	r2, [pc, #68]	; (8005c0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bce:	4a0e      	ldr	r2, [pc, #56]	; (8005c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bd0:	68d2      	ldr	r2, [r2, #12]
 8005bd2:	0a12      	lsrs	r2, r2, #8
 8005bd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bd8:	fb02 f303 	mul.w	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]
    break;
 8005bde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	0e5b      	lsrs	r3, r3, #25
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	3301      	adds	r3, #1
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005bfa:	687b      	ldr	r3, [r7, #4]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	00f42400 	.word	0x00f42400

08005c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c18:	2300      	movs	r3, #0
 8005c1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8098 	beq.w	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c32:	4b43      	ldr	r3, [pc, #268]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10d      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3e:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	4a3f      	ldr	r2, [pc, #252]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c48:	6593      	str	r3, [r2, #88]	; 0x58
 8005c4a:	4b3d      	ldr	r3, [pc, #244]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c52:	60bb      	str	r3, [r7, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c56:	2301      	movs	r3, #1
 8005c58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c5a:	4b3a      	ldr	r3, [pc, #232]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a39      	ldr	r2, [pc, #228]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c66:	f7fc fccb 	bl	8002600 <HAL_GetTick>
 8005c6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c6c:	e009      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c6e:	f7fc fcc7 	bl	8002600 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d902      	bls.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	74fb      	strb	r3, [r7, #19]
        break;
 8005c80:	e005      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c82:	4b30      	ldr	r3, [pc, #192]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0ef      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c8e:	7cfb      	ldrb	r3, [r7, #19]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d159      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c94:	4b2a      	ldr	r3, [pc, #168]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01e      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d019      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cb0:	4b23      	ldr	r3, [pc, #140]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cbc:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ccc:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	4a1b      	ldr	r2, [pc, #108]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cdc:	4a18      	ldr	r2, [pc, #96]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d016      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cee:	f7fc fc87 	bl	8002600 <HAL_GetTick>
 8005cf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cf4:	e00b      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf6:	f7fc fc83 	bl	8002600 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d902      	bls.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	74fb      	strb	r3, [r7, #19]
            break;
 8005d0c:	e006      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0ec      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d1c:	7cfb      	ldrb	r3, [r7, #19]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d30:	4903      	ldr	r1, [pc, #12]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d38:	e008      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d3a:	7cfb      	ldrb	r3, [r7, #19]
 8005d3c:	74bb      	strb	r3, [r7, #18]
 8005d3e:	e005      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d48:	7cfb      	ldrb	r3, [r7, #19]
 8005d4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d4c:	7c7b      	ldrb	r3, [r7, #17]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d105      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d52:	4ba7      	ldr	r3, [pc, #668]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d56:	4aa6      	ldr	r2, [pc, #664]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d6a:	4ba1      	ldr	r3, [pc, #644]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d70:	f023 0203 	bic.w	r2, r3, #3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	499d      	ldr	r1, [pc, #628]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d8c:	4b98      	ldr	r3, [pc, #608]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d92:	f023 020c 	bic.w	r2, r3, #12
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4995      	ldr	r1, [pc, #596]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dae:	4b90      	ldr	r3, [pc, #576]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	498c      	ldr	r1, [pc, #560]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dd0:	4b87      	ldr	r3, [pc, #540]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	4984      	ldr	r1, [pc, #528]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005df2:	4b7f      	ldr	r3, [pc, #508]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	497b      	ldr	r1, [pc, #492]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e14:	4b76      	ldr	r3, [pc, #472]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	4973      	ldr	r1, [pc, #460]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e36:	4b6e      	ldr	r3, [pc, #440]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	496a      	ldr	r1, [pc, #424]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e58:	4b65      	ldr	r3, [pc, #404]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	4962      	ldr	r1, [pc, #392]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e7a:	4b5d      	ldr	r3, [pc, #372]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	4959      	ldr	r1, [pc, #356]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e9c:	4b54      	ldr	r3, [pc, #336]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ea2:	f023 0203 	bic.w	r2, r3, #3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	4951      	ldr	r1, [pc, #324]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ebe:	4b4c      	ldr	r3, [pc, #304]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	4948      	ldr	r1, [pc, #288]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d015      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ee0:	4b43      	ldr	r3, [pc, #268]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	4940      	ldr	r1, [pc, #256]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005efe:	d105      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f00:	4b3b      	ldr	r3, [pc, #236]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	4a3a      	ldr	r2, [pc, #232]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d015      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f18:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	4932      	ldr	r1, [pc, #200]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f36:	d105      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f38:	4b2d      	ldr	r3, [pc, #180]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	4a2c      	ldr	r2, [pc, #176]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f42:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d015      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f50:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	4924      	ldr	r1, [pc, #144]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f6e:	d105      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f70:	4b1f      	ldr	r3, [pc, #124]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f88:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	4916      	ldr	r1, [pc, #88]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa6:	d105      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4a10      	ldr	r2, [pc, #64]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d019      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	4908      	ldr	r1, [pc, #32]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fde:	d109      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4a02      	ldr	r2, [pc, #8]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fea:	60d3      	str	r3, [r2, #12]
 8005fec:	e002      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005fee:	bf00      	nop
 8005ff0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d015      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006000:	4b29      	ldr	r3, [pc, #164]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006006:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	4926      	ldr	r1, [pc, #152]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800601e:	d105      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006020:	4b21      	ldr	r3, [pc, #132]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	4a20      	ldr	r2, [pc, #128]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d015      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006038:	4b1b      	ldr	r3, [pc, #108]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006046:	4918      	ldr	r1, [pc, #96]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d105      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006058:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	4a12      	ldr	r2, [pc, #72]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800605e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006062:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d015      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006070:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006072:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006076:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	490a      	ldr	r1, [pc, #40]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800608e:	d105      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	4a04      	ldr	r2, [pc, #16]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800609a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800609c:	7cbb      	ldrb	r3, [r7, #18]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	40021000 	.word	0x40021000

080060ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e0c1      	b.n	8006242 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d108      	bne.n	80060d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ce:	d009      	beq.n	80060e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	61da      	str	r2, [r3, #28]
 80060d6:	e005      	b.n	80060e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d12a      	bne.n	800614c <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a52      	ldr	r2, [pc, #328]	; (800624c <HAL_SPI_Init+0x1a0>)
 8006102:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a52      	ldr	r2, [pc, #328]	; (8006250 <HAL_SPI_Init+0x1a4>)
 8006108:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a51      	ldr	r2, [pc, #324]	; (8006254 <HAL_SPI_Init+0x1a8>)
 800610e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a51      	ldr	r2, [pc, #324]	; (8006258 <HAL_SPI_Init+0x1ac>)
 8006114:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a50      	ldr	r2, [pc, #320]	; (800625c <HAL_SPI_Init+0x1b0>)
 800611a:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a50      	ldr	r2, [pc, #320]	; (8006260 <HAL_SPI_Init+0x1b4>)
 8006120:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a4f      	ldr	r2, [pc, #316]	; (8006264 <HAL_SPI_Init+0x1b8>)
 8006126:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a4f      	ldr	r2, [pc, #316]	; (8006268 <HAL_SPI_Init+0x1bc>)
 800612c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006136:	2b00      	cmp	r3, #0
 8006138:	d103      	bne.n	8006142 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a4b      	ldr	r2, [pc, #300]	; (800626c <HAL_SPI_Init+0x1c0>)
 800613e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006162:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800616c:	d902      	bls.n	8006174 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	e002      	b.n	800617a <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006178:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006182:	d007      	beq.n	8006194 <HAL_SPI_Init+0xe8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800618c:	d002      	beq.n	8006194 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d6:	ea42 0103 	orr.w	r1, r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	0c1b      	lsrs	r3, r3, #16
 80061f0:	f003 0204 	and.w	r2, r3, #4
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006210:	ea42 0103 	orr.w	r1, r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006230:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	08006271 	.word	0x08006271
 8006250:	08006285 	.word	0x08006285
 8006254:	08006299 	.word	0x08006299
 8006258:	080062ad 	.word	0x080062ad
 800625c:	080062c1 	.word	0x080062c1
 8006260:	080062d5 	.word	0x080062d5
 8006264:	080062e9 	.word	0x080062e9
 8006268:	080062fd 	.word	0x080062fd
 800626c:	08001f69 	.word	0x08001f69

08006270 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e054      	b.n	80063cc <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d111      	bne.n	8006352 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fd1e 	bl	8006d78 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a23      	ldr	r2, [pc, #140]	; (80063d4 <HAL_TIM_Base_Init+0xc4>)
 8006348:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3304      	adds	r3, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f000 fc53 	bl	8006c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	08002131 	.word	0x08002131

080063d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d001      	beq.n	80063f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e04c      	b.n	800648a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a26      	ldr	r2, [pc, #152]	; (8006498 <HAL_TIM_Base_Start+0xc0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d022      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d01d      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a22      	ldr	r2, [pc, #136]	; (800649c <HAL_TIM_Base_Start+0xc4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d018      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a21      	ldr	r2, [pc, #132]	; (80064a0 <HAL_TIM_Base_Start+0xc8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <HAL_TIM_Base_Start+0xcc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00e      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1e      	ldr	r2, [pc, #120]	; (80064a8 <HAL_TIM_Base_Start+0xd0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d009      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <HAL_TIM_Base_Start+0xd4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d004      	beq.n	8006448 <HAL_TIM_Base_Start+0x70>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <HAL_TIM_Base_Start+0xd8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d115      	bne.n	8006474 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <HAL_TIM_Base_Start+0xdc>)
 8006450:	4013      	ands	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b06      	cmp	r3, #6
 8006458:	d015      	beq.n	8006486 <HAL_TIM_Base_Start+0xae>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006460:	d011      	beq.n	8006486 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	e008      	b.n	8006486 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e000      	b.n	8006488 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006486:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	40000c00 	.word	0x40000c00
 80064a8:	40013400 	.word	0x40013400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40015000 	.word	0x40015000
 80064b4:	00010007 	.word	0x00010007

080064b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d001      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e054      	b.n	800657a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a26      	ldr	r2, [pc, #152]	; (8006588 <HAL_TIM_Base_Start_IT+0xd0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d022      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fa:	d01d      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a22      	ldr	r2, [pc, #136]	; (800658c <HAL_TIM_Base_Start_IT+0xd4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d018      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a21      	ldr	r2, [pc, #132]	; (8006590 <HAL_TIM_Base_Start_IT+0xd8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1f      	ldr	r2, [pc, #124]	; (8006594 <HAL_TIM_Base_Start_IT+0xdc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00e      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1e      	ldr	r2, [pc, #120]	; (8006598 <HAL_TIM_Base_Start_IT+0xe0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d009      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1c      	ldr	r2, [pc, #112]	; (800659c <HAL_TIM_Base_Start_IT+0xe4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d004      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0x80>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1b      	ldr	r2, [pc, #108]	; (80065a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d115      	bne.n	8006564 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <HAL_TIM_Base_Start_IT+0xec>)
 8006540:	4013      	ands	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b06      	cmp	r3, #6
 8006548:	d015      	beq.n	8006576 <HAL_TIM_Base_Start_IT+0xbe>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006550:	d011      	beq.n	8006576 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006562:	e008      	b.n	8006576 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e000      	b.n	8006578 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40012c00 	.word	0x40012c00
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40015000 	.word	0x40015000
 80065a4:	00010007 	.word	0x00010007

080065a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d026      	beq.n	8006618 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d021      	beq.n	8006618 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0202 	mvn.w	r2, #2
 80065dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	4798      	blx	r3
 80065fc:	e009      	b.n	8006612 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d026      	beq.n	8006670 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d021      	beq.n	8006670 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0204 	mvn.w	r2, #4
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2202      	movs	r2, #2
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
 8006654:	e009      	b.n	800666a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d026      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d021      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0208 	mvn.w	r2, #8
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2204      	movs	r2, #4
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
 80066ac:	e009      	b.n	80066c2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d026      	beq.n	8006720 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d021      	beq.n	8006720 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0210 	mvn.w	r2, #16
 80066e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2208      	movs	r2, #8
 80066ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	4798      	blx	r3
 8006704:	e009      	b.n	800671a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0201 	mvn.w	r2, #1
 800673c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674e:	2b00      	cmp	r3, #0
 8006750:	d104      	bne.n	800675c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00e      	beq.n	800677a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800676e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00e      	beq.n	80067a2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00e      	beq.n	80067ca <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d009      	beq.n	80067ca <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00e      	beq.n	80067f2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f06f 0220 	mvn.w	r2, #32
 80067e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00e      	beq.n	800681a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d009      	beq.n	800681a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800680e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00e      	beq.n	8006842 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00e      	beq.n	800686a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d009      	beq.n	800686a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800685e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00e      	beq.n	8006892 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d009      	beq.n	8006892 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	460b      	mov	r3, r1
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e14a      	b.n	8006c02 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	f040 80dd 	bne.w	8006b34 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800697a:	7afb      	ldrb	r3, [r7, #11]
 800697c:	2b1f      	cmp	r3, #31
 800697e:	f200 80d6 	bhi.w	8006b2e <HAL_TIM_RegisterCallback+0x1de>
 8006982:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <HAL_TIM_RegisterCallback+0x38>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	08006a09 	.word	0x08006a09
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a19 	.word	0x08006a19
 8006994:	08006a21 	.word	0x08006a21
 8006998:	08006a29 	.word	0x08006a29
 800699c:	08006a31 	.word	0x08006a31
 80069a0:	08006a39 	.word	0x08006a39
 80069a4:	08006a41 	.word	0x08006a41
 80069a8:	08006a49 	.word	0x08006a49
 80069ac:	08006a51 	.word	0x08006a51
 80069b0:	08006a59 	.word	0x08006a59
 80069b4:	08006a61 	.word	0x08006a61
 80069b8:	08006a69 	.word	0x08006a69
 80069bc:	08006a71 	.word	0x08006a71
 80069c0:	08006a7b 	.word	0x08006a7b
 80069c4:	08006a85 	.word	0x08006a85
 80069c8:	08006a8f 	.word	0x08006a8f
 80069cc:	08006a99 	.word	0x08006a99
 80069d0:	08006aa3 	.word	0x08006aa3
 80069d4:	08006aad 	.word	0x08006aad
 80069d8:	08006ab7 	.word	0x08006ab7
 80069dc:	08006ac1 	.word	0x08006ac1
 80069e0:	08006acb 	.word	0x08006acb
 80069e4:	08006ad5 	.word	0x08006ad5
 80069e8:	08006adf 	.word	0x08006adf
 80069ec:	08006ae9 	.word	0x08006ae9
 80069f0:	08006af3 	.word	0x08006af3
 80069f4:	08006afd 	.word	0x08006afd
 80069f8:	08006b07 	.word	0x08006b07
 80069fc:	08006b11 	.word	0x08006b11
 8006a00:	08006b1b 	.word	0x08006b1b
 8006a04:	08006b25 	.word	0x08006b25
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006a0e:	e0f7      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006a16:	e0f3      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006a1e:	e0ef      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006a26:	e0eb      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006a2e:	e0e7      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006a36:	e0e3      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006a3e:	e0df      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006a46:	e0db      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006a4e:	e0d7      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006a56:	e0d3      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006a5e:	e0cf      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006a66:	e0cb      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006a6e:	e0c7      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006a78:	e0c2      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006a82:	e0bd      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8006a8c:	e0b8      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006a96:	e0b3      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006aa0:	e0ae      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8006aaa:	e0a9      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006ab4:	e0a4      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8006abe:	e09f      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006ac8:	e09a      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006ad2:	e095      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8006adc:	e090      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8006ae6:	e08b      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006af0:	e086      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8006afa:	e081      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8006b04:	e07c      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8006b0e:	e077      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8006b18:	e072      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8006b22:	e06d      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8006b2c:	e068      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
        break;
 8006b32:	e065      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d15d      	bne.n	8006bfc <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8006b40:	7afb      	ldrb	r3, [r7, #11]
 8006b42:	2b0d      	cmp	r3, #13
 8006b44:	d857      	bhi.n	8006bf6 <HAL_TIM_RegisterCallback+0x2a6>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <HAL_TIM_RegisterCallback+0x1fc>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b85 	.word	0x08006b85
 8006b50:	08006b8d 	.word	0x08006b8d
 8006b54:	08006b95 	.word	0x08006b95
 8006b58:	08006b9d 	.word	0x08006b9d
 8006b5c:	08006ba5 	.word	0x08006ba5
 8006b60:	08006bad 	.word	0x08006bad
 8006b64:	08006bb5 	.word	0x08006bb5
 8006b68:	08006bbd 	.word	0x08006bbd
 8006b6c:	08006bc5 	.word	0x08006bc5
 8006b70:	08006bcd 	.word	0x08006bcd
 8006b74:	08006bd5 	.word	0x08006bd5
 8006b78:	08006bdd 	.word	0x08006bdd
 8006b7c:	08006be5 	.word	0x08006be5
 8006b80:	08006bed 	.word	0x08006bed
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006b8a:	e039      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006b92:	e035      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006b9a:	e031      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006ba2:	e02d      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006baa:	e029      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006bb2:	e025      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006bba:	e021      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006bc2:	e01d      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006bca:	e019      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006bd2:	e015      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006bda:	e011      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006be2:	e00d      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006bea:	e009      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006bf4:	e004      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	75fb      	strb	r3, [r7, #23]
        break;
 8006bfa:	e001      	b.n	8006c00 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop

08006c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a4c      	ldr	r2, [pc, #304]	; (8006d54 <TIM_Base_SetConfig+0x144>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d017      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d013      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a49      	ldr	r2, [pc, #292]	; (8006d58 <TIM_Base_SetConfig+0x148>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00f      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a48      	ldr	r2, [pc, #288]	; (8006d5c <TIM_Base_SetConfig+0x14c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d00b      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a47      	ldr	r2, [pc, #284]	; (8006d60 <TIM_Base_SetConfig+0x150>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d007      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a46      	ldr	r2, [pc, #280]	; (8006d64 <TIM_Base_SetConfig+0x154>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_Base_SetConfig+0x48>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a45      	ldr	r2, [pc, #276]	; (8006d68 <TIM_Base_SetConfig+0x158>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d108      	bne.n	8006c6a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a39      	ldr	r2, [pc, #228]	; (8006d54 <TIM_Base_SetConfig+0x144>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d023      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c78:	d01f      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a36      	ldr	r2, [pc, #216]	; (8006d58 <TIM_Base_SetConfig+0x148>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d01b      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a35      	ldr	r2, [pc, #212]	; (8006d5c <TIM_Base_SetConfig+0x14c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d017      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a34      	ldr	r2, [pc, #208]	; (8006d60 <TIM_Base_SetConfig+0x150>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a33      	ldr	r2, [pc, #204]	; (8006d64 <TIM_Base_SetConfig+0x154>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00f      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a33      	ldr	r2, [pc, #204]	; (8006d6c <TIM_Base_SetConfig+0x15c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00b      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a32      	ldr	r2, [pc, #200]	; (8006d70 <TIM_Base_SetConfig+0x160>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d007      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a31      	ldr	r2, [pc, #196]	; (8006d74 <TIM_Base_SetConfig+0x164>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_Base_SetConfig+0xaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a2c      	ldr	r2, [pc, #176]	; (8006d68 <TIM_Base_SetConfig+0x158>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d108      	bne.n	8006ccc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a18      	ldr	r2, [pc, #96]	; (8006d54 <TIM_Base_SetConfig+0x144>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d013      	beq.n	8006d20 <TIM_Base_SetConfig+0x110>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a1a      	ldr	r2, [pc, #104]	; (8006d64 <TIM_Base_SetConfig+0x154>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00f      	beq.n	8006d20 <TIM_Base_SetConfig+0x110>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a1a      	ldr	r2, [pc, #104]	; (8006d6c <TIM_Base_SetConfig+0x15c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00b      	beq.n	8006d20 <TIM_Base_SetConfig+0x110>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <TIM_Base_SetConfig+0x160>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d007      	beq.n	8006d20 <TIM_Base_SetConfig+0x110>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <TIM_Base_SetConfig+0x164>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_Base_SetConfig+0x110>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <TIM_Base_SetConfig+0x158>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d103      	bne.n	8006d28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d105      	bne.n	8006d46 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f023 0201 	bic.w	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	611a      	str	r2, [r3, #16]
  }
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40000800 	.word	0x40000800
 8006d60:	40000c00 	.word	0x40000c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40015000 	.word	0x40015000
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800

08006d78 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a26      	ldr	r2, [pc, #152]	; (8006e1c <TIM_ResetCallback+0xa4>)
 8006d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a25      	ldr	r2, [pc, #148]	; (8006e20 <TIM_ResetCallback+0xa8>)
 8006d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a24      	ldr	r2, [pc, #144]	; (8006e24 <TIM_ResetCallback+0xac>)
 8006d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a23      	ldr	r2, [pc, #140]	; (8006e28 <TIM_ResetCallback+0xb0>)
 8006d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a22      	ldr	r2, [pc, #136]	; (8006e2c <TIM_ResetCallback+0xb4>)
 8006da4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a21      	ldr	r2, [pc, #132]	; (8006e30 <TIM_ResetCallback+0xb8>)
 8006dac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a20      	ldr	r2, [pc, #128]	; (8006e34 <TIM_ResetCallback+0xbc>)
 8006db4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a1f      	ldr	r2, [pc, #124]	; (8006e38 <TIM_ResetCallback+0xc0>)
 8006dbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <TIM_ResetCallback+0xc4>)
 8006dc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a1d      	ldr	r2, [pc, #116]	; (8006e40 <TIM_ResetCallback+0xc8>)
 8006dcc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a1c      	ldr	r2, [pc, #112]	; (8006e44 <TIM_ResetCallback+0xcc>)
 8006dd4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a1b      	ldr	r2, [pc, #108]	; (8006e48 <TIM_ResetCallback+0xd0>)
 8006ddc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a1a      	ldr	r2, [pc, #104]	; (8006e4c <TIM_ResetCallback+0xd4>)
 8006de4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a19      	ldr	r2, [pc, #100]	; (8006e50 <TIM_ResetCallback+0xd8>)
 8006dec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a18      	ldr	r2, [pc, #96]	; (8006e54 <TIM_ResetCallback+0xdc>)
 8006df4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <TIM_ResetCallback+0xe0>)
 8006dfc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <TIM_ResetCallback+0xe4>)
 8006e04:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <TIM_ResetCallback+0xe8>)
 8006e0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	080016e5 	.word	0x080016e5
 8006e20:	0800689b 	.word	0x0800689b
 8006e24:	08006913 	.word	0x08006913
 8006e28:	08006927 	.word	0x08006927
 8006e2c:	080068c3 	.word	0x080068c3
 8006e30:	080068d7 	.word	0x080068d7
 8006e34:	080068af 	.word	0x080068af
 8006e38:	080068eb 	.word	0x080068eb
 8006e3c:	080068ff 	.word	0x080068ff
 8006e40:	0800693b 	.word	0x0800693b
 8006e44:	08006f91 	.word	0x08006f91
 8006e48:	08006fa5 	.word	0x08006fa5
 8006e4c:	08006fb9 	.word	0x08006fb9
 8006e50:	08006fcd 	.word	0x08006fcd
 8006e54:	08006fe1 	.word	0x08006fe1
 8006e58:	08006ff5 	.word	0x08006ff5
 8006e5c:	08007009 	.word	0x08007009
 8006e60:	0800701d 	.word	0x0800701d

08006e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e074      	b.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a34      	ldr	r2, [pc, #208]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a33      	ldr	r2, [pc, #204]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a31      	ldr	r2, [pc, #196]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d108      	bne.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ec0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a21      	ldr	r2, [pc, #132]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d022      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efc:	d01d      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1f      	ldr	r2, [pc, #124]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d018      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	; (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d013      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1c      	ldr	r2, [pc, #112]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00e      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a15      	ldr	r2, [pc, #84]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d009      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d004      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a11      	ldr	r2, [pc, #68]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d10c      	bne.n	8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	40012c00 	.word	0x40012c00
 8006f78:	40013400 	.word	0x40013400
 8006f7c:	40015000 	.word	0x40015000
 8006f80:	40000400 	.word	0x40000400
 8006f84:	40000800 	.word	0x40000800
 8006f88:	40000c00 	.word	0x40000c00
 8006f8c:	40014000 	.word	0x40014000

08006f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e050      	b.n	80070e4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007048:	2b00      	cmp	r3, #0
 800704a:	d114      	bne.n	8007076 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f935 	bl	80072c4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a21      	ldr	r2, [pc, #132]	; (80070ec <HAL_UART_Init+0xbc>)
 8007068:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2224      	movs	r2, #36	; 0x24
 800707a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0201 	bic.w	r2, r2, #1
 800708c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fc62 	bl	8007960 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f963 	bl	8007368 <UART_SetConfig>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d101      	bne.n	80070ac <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e01b      	b.n	80070e4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0201 	orr.w	r2, r2, #1
 80070da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fce1 	bl	8007aa4 <UART_CheckIdleState>
 80070e2:	4603      	mov	r3, r0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	0800217d 	.word	0x0800217d

080070f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	; 0x28
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007106:	2b20      	cmp	r3, #32
 8007108:	d17b      	bne.n	8007202 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_UART_Transmit+0x26>
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e074      	b.n	8007204 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2221      	movs	r2, #33	; 0x21
 8007126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800712a:	f7fb fa69 	bl	8002600 <HAL_GetTick>
 800712e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	88fa      	ldrh	r2, [r7, #6]
 8007134:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007148:	d108      	bne.n	800715c <HAL_UART_Transmit+0x6c>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	e003      	b.n	8007164 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007164:	e030      	b.n	80071c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2200      	movs	r2, #0
 800716e:	2180      	movs	r1, #128	; 0x80
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 fd41 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2220      	movs	r2, #32
 8007180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e03d      	b.n	8007204 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10b      	bne.n	80071a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800719c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	3302      	adds	r3, #2
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	e007      	b.n	80071b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	781a      	ldrb	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	3301      	adds	r3, #1
 80071b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1c8      	bne.n	8007166 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2200      	movs	r2, #0
 80071dc:	2140      	movs	r1, #64	; 0x40
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 fd0a 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e006      	b.n	8007204 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	e000      	b.n	8007204 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007202:	2302      	movs	r3, #2
  }
}
 8007204:	4618      	mov	r0, r3
 8007206:	3720      	adds	r7, #32
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a1a      	ldr	r2, [pc, #104]	; (8007338 <UART_InitCallbacksToDefault+0x74>)
 80072d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a19      	ldr	r2, [pc, #100]	; (800733c <UART_InitCallbacksToDefault+0x78>)
 80072d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a18      	ldr	r2, [pc, #96]	; (8007340 <UART_InitCallbacksToDefault+0x7c>)
 80072e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a17      	ldr	r2, [pc, #92]	; (8007344 <UART_InitCallbacksToDefault+0x80>)
 80072e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a16      	ldr	r2, [pc, #88]	; (8007348 <UART_InitCallbacksToDefault+0x84>)
 80072f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a15      	ldr	r2, [pc, #84]	; (800734c <UART_InitCallbacksToDefault+0x88>)
 80072f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a14      	ldr	r2, [pc, #80]	; (8007350 <UART_InitCallbacksToDefault+0x8c>)
 8007300:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a13      	ldr	r2, [pc, #76]	; (8007354 <UART_InitCallbacksToDefault+0x90>)
 8007308:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a12      	ldr	r2, [pc, #72]	; (8007358 <UART_InitCallbacksToDefault+0x94>)
 8007310:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a11      	ldr	r2, [pc, #68]	; (800735c <UART_InitCallbacksToDefault+0x98>)
 8007318:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a10      	ldr	r2, [pc, #64]	; (8007360 <UART_InitCallbacksToDefault+0x9c>)
 8007320:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a0f      	ldr	r2, [pc, #60]	; (8007364 <UART_InitCallbacksToDefault+0xa0>)
 8007328:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	08007221 	.word	0x08007221
 800733c:	0800720d 	.word	0x0800720d
 8007340:	08007249 	.word	0x08007249
 8007344:	08007235 	.word	0x08007235
 8007348:	0800725d 	.word	0x0800725d
 800734c:	08007271 	.word	0x08007271
 8007350:	08007285 	.word	0x08007285
 8007354:	08007299 	.word	0x08007299
 8007358:	08007d9f 	.word	0x08007d9f
 800735c:	08007db3 	.word	0x08007db3
 8007360:	08007dc7 	.word	0x08007dc7
 8007364:	080072ad 	.word	0x080072ad

08007368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800736c:	b08c      	sub	sp, #48	; 0x30
 800736e:	af00      	add	r7, sp, #0
 8007370:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	431a      	orrs	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	431a      	orrs	r2, r3
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	4313      	orrs	r3, r2
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	4baa      	ldr	r3, [pc, #680]	; (8007640 <UART_SetConfig+0x2d8>)
 8007398:	4013      	ands	r3, r2
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073a0:	430b      	orrs	r3, r1
 80073a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a9f      	ldr	r2, [pc, #636]	; (8007644 <UART_SetConfig+0x2dc>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d0:	4313      	orrs	r3, r2
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80073de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	6812      	ldr	r2, [r2, #0]
 80073e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073e8:	430b      	orrs	r3, r1
 80073ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f2:	f023 010f 	bic.w	r1, r3, #15
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a90      	ldr	r2, [pc, #576]	; (8007648 <UART_SetConfig+0x2e0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d125      	bne.n	8007458 <UART_SetConfig+0xf0>
 800740c:	4b8f      	ldr	r3, [pc, #572]	; (800764c <UART_SetConfig+0x2e4>)
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b03      	cmp	r3, #3
 8007418:	d81a      	bhi.n	8007450 <UART_SetConfig+0xe8>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <UART_SetConfig+0xb8>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007431 	.word	0x08007431
 8007424:	08007441 	.word	0x08007441
 8007428:	08007439 	.word	0x08007439
 800742c:	08007449 	.word	0x08007449
 8007430:	2301      	movs	r3, #1
 8007432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007436:	e116      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007438:	2302      	movs	r3, #2
 800743a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800743e:	e112      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007440:	2304      	movs	r3, #4
 8007442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007446:	e10e      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007448:	2308      	movs	r3, #8
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744e:	e10a      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007450:	2310      	movs	r3, #16
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007456:	e106      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a7c      	ldr	r2, [pc, #496]	; (8007650 <UART_SetConfig+0x2e8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d138      	bne.n	80074d4 <UART_SetConfig+0x16c>
 8007462:	4b7a      	ldr	r3, [pc, #488]	; (800764c <UART_SetConfig+0x2e4>)
 8007464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b0c      	cmp	r3, #12
 800746e:	d82d      	bhi.n	80074cc <UART_SetConfig+0x164>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <UART_SetConfig+0x110>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074cd 	.word	0x080074cd
 8007480:	080074cd 	.word	0x080074cd
 8007484:	080074cd 	.word	0x080074cd
 8007488:	080074bd 	.word	0x080074bd
 800748c:	080074cd 	.word	0x080074cd
 8007490:	080074cd 	.word	0x080074cd
 8007494:	080074cd 	.word	0x080074cd
 8007498:	080074b5 	.word	0x080074b5
 800749c:	080074cd 	.word	0x080074cd
 80074a0:	080074cd 	.word	0x080074cd
 80074a4:	080074cd 	.word	0x080074cd
 80074a8:	080074c5 	.word	0x080074c5
 80074ac:	2300      	movs	r3, #0
 80074ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b2:	e0d8      	b.n	8007666 <UART_SetConfig+0x2fe>
 80074b4:	2302      	movs	r3, #2
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ba:	e0d4      	b.n	8007666 <UART_SetConfig+0x2fe>
 80074bc:	2304      	movs	r3, #4
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c2:	e0d0      	b.n	8007666 <UART_SetConfig+0x2fe>
 80074c4:	2308      	movs	r3, #8
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ca:	e0cc      	b.n	8007666 <UART_SetConfig+0x2fe>
 80074cc:	2310      	movs	r3, #16
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d2:	e0c8      	b.n	8007666 <UART_SetConfig+0x2fe>
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a5e      	ldr	r2, [pc, #376]	; (8007654 <UART_SetConfig+0x2ec>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d125      	bne.n	800752a <UART_SetConfig+0x1c2>
 80074de:	4b5b      	ldr	r3, [pc, #364]	; (800764c <UART_SetConfig+0x2e4>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074e8:	2b30      	cmp	r3, #48	; 0x30
 80074ea:	d016      	beq.n	800751a <UART_SetConfig+0x1b2>
 80074ec:	2b30      	cmp	r3, #48	; 0x30
 80074ee:	d818      	bhi.n	8007522 <UART_SetConfig+0x1ba>
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d00a      	beq.n	800750a <UART_SetConfig+0x1a2>
 80074f4:	2b20      	cmp	r3, #32
 80074f6:	d814      	bhi.n	8007522 <UART_SetConfig+0x1ba>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <UART_SetConfig+0x19a>
 80074fc:	2b10      	cmp	r3, #16
 80074fe:	d008      	beq.n	8007512 <UART_SetConfig+0x1aa>
 8007500:	e00f      	b.n	8007522 <UART_SetConfig+0x1ba>
 8007502:	2300      	movs	r3, #0
 8007504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007508:	e0ad      	b.n	8007666 <UART_SetConfig+0x2fe>
 800750a:	2302      	movs	r3, #2
 800750c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007510:	e0a9      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007512:	2304      	movs	r3, #4
 8007514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007518:	e0a5      	b.n	8007666 <UART_SetConfig+0x2fe>
 800751a:	2308      	movs	r3, #8
 800751c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007520:	e0a1      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007522:	2310      	movs	r3, #16
 8007524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007528:	e09d      	b.n	8007666 <UART_SetConfig+0x2fe>
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a4a      	ldr	r2, [pc, #296]	; (8007658 <UART_SetConfig+0x2f0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d125      	bne.n	8007580 <UART_SetConfig+0x218>
 8007534:	4b45      	ldr	r3, [pc, #276]	; (800764c <UART_SetConfig+0x2e4>)
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800753e:	2bc0      	cmp	r3, #192	; 0xc0
 8007540:	d016      	beq.n	8007570 <UART_SetConfig+0x208>
 8007542:	2bc0      	cmp	r3, #192	; 0xc0
 8007544:	d818      	bhi.n	8007578 <UART_SetConfig+0x210>
 8007546:	2b80      	cmp	r3, #128	; 0x80
 8007548:	d00a      	beq.n	8007560 <UART_SetConfig+0x1f8>
 800754a:	2b80      	cmp	r3, #128	; 0x80
 800754c:	d814      	bhi.n	8007578 <UART_SetConfig+0x210>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <UART_SetConfig+0x1f0>
 8007552:	2b40      	cmp	r3, #64	; 0x40
 8007554:	d008      	beq.n	8007568 <UART_SetConfig+0x200>
 8007556:	e00f      	b.n	8007578 <UART_SetConfig+0x210>
 8007558:	2300      	movs	r3, #0
 800755a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800755e:	e082      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007560:	2302      	movs	r3, #2
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007566:	e07e      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007568:	2304      	movs	r3, #4
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800756e:	e07a      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007570:	2308      	movs	r3, #8
 8007572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007576:	e076      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007578:	2310      	movs	r3, #16
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800757e:	e072      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a35      	ldr	r2, [pc, #212]	; (800765c <UART_SetConfig+0x2f4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d12a      	bne.n	80075e0 <UART_SetConfig+0x278>
 800758a:	4b30      	ldr	r3, [pc, #192]	; (800764c <UART_SetConfig+0x2e4>)
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007598:	d01a      	beq.n	80075d0 <UART_SetConfig+0x268>
 800759a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800759e:	d81b      	bhi.n	80075d8 <UART_SetConfig+0x270>
 80075a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a4:	d00c      	beq.n	80075c0 <UART_SetConfig+0x258>
 80075a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075aa:	d815      	bhi.n	80075d8 <UART_SetConfig+0x270>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <UART_SetConfig+0x250>
 80075b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b4:	d008      	beq.n	80075c8 <UART_SetConfig+0x260>
 80075b6:	e00f      	b.n	80075d8 <UART_SetConfig+0x270>
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075be:	e052      	b.n	8007666 <UART_SetConfig+0x2fe>
 80075c0:	2302      	movs	r3, #2
 80075c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075c6:	e04e      	b.n	8007666 <UART_SetConfig+0x2fe>
 80075c8:	2304      	movs	r3, #4
 80075ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ce:	e04a      	b.n	8007666 <UART_SetConfig+0x2fe>
 80075d0:	2308      	movs	r3, #8
 80075d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075d6:	e046      	b.n	8007666 <UART_SetConfig+0x2fe>
 80075d8:	2310      	movs	r3, #16
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075de:	e042      	b.n	8007666 <UART_SetConfig+0x2fe>
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a17      	ldr	r2, [pc, #92]	; (8007644 <UART_SetConfig+0x2dc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d13a      	bne.n	8007660 <UART_SetConfig+0x2f8>
 80075ea:	4b18      	ldr	r3, [pc, #96]	; (800764c <UART_SetConfig+0x2e4>)
 80075ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075f8:	d01a      	beq.n	8007630 <UART_SetConfig+0x2c8>
 80075fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075fe:	d81b      	bhi.n	8007638 <UART_SetConfig+0x2d0>
 8007600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007604:	d00c      	beq.n	8007620 <UART_SetConfig+0x2b8>
 8007606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760a:	d815      	bhi.n	8007638 <UART_SetConfig+0x2d0>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <UART_SetConfig+0x2b0>
 8007610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007614:	d008      	beq.n	8007628 <UART_SetConfig+0x2c0>
 8007616:	e00f      	b.n	8007638 <UART_SetConfig+0x2d0>
 8007618:	2300      	movs	r3, #0
 800761a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800761e:	e022      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007620:	2302      	movs	r3, #2
 8007622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007626:	e01e      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007628:	2304      	movs	r3, #4
 800762a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800762e:	e01a      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007630:	2308      	movs	r3, #8
 8007632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007636:	e016      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007638:	2310      	movs	r3, #16
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800763e:	e012      	b.n	8007666 <UART_SetConfig+0x2fe>
 8007640:	cfff69f3 	.word	0xcfff69f3
 8007644:	40008000 	.word	0x40008000
 8007648:	40013800 	.word	0x40013800
 800764c:	40021000 	.word	0x40021000
 8007650:	40004400 	.word	0x40004400
 8007654:	40004800 	.word	0x40004800
 8007658:	40004c00 	.word	0x40004c00
 800765c:	40005000 	.word	0x40005000
 8007660:	2310      	movs	r3, #16
 8007662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4aae      	ldr	r2, [pc, #696]	; (8007924 <UART_SetConfig+0x5bc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	f040 8097 	bne.w	80077a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007676:	2b08      	cmp	r3, #8
 8007678:	d823      	bhi.n	80076c2 <UART_SetConfig+0x35a>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <UART_SetConfig+0x318>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	080076a5 	.word	0x080076a5
 8007684:	080076c3 	.word	0x080076c3
 8007688:	080076ad 	.word	0x080076ad
 800768c:	080076c3 	.word	0x080076c3
 8007690:	080076b3 	.word	0x080076b3
 8007694:	080076c3 	.word	0x080076c3
 8007698:	080076c3 	.word	0x080076c3
 800769c:	080076c3 	.word	0x080076c3
 80076a0:	080076bb 	.word	0x080076bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a4:	f7fe f9e6 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 80076a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076aa:	e010      	b.n	80076ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076ac:	4b9e      	ldr	r3, [pc, #632]	; (8007928 <UART_SetConfig+0x5c0>)
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076b0:	e00d      	b.n	80076ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076b2:	f7fe f973 	bl	800599c <HAL_RCC_GetSysClockFreq>
 80076b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076b8:	e009      	b.n	80076ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076c0:	e005      	b.n	80076ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8130 	beq.w	8007936 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	4a94      	ldr	r2, [pc, #592]	; (800792c <UART_SetConfig+0x5c4>)
 80076dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	4613      	mov	r3, r2
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d305      	bcc.n	8007706 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	429a      	cmp	r2, r3
 8007704:	d903      	bls.n	800770e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800770c:	e113      	b.n	8007936 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	2200      	movs	r2, #0
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	60fa      	str	r2, [r7, #12]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	4a84      	ldr	r2, [pc, #528]	; (800792c <UART_SetConfig+0x5c4>)
 800771c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007720:	b29b      	uxth	r3, r3
 8007722:	2200      	movs	r2, #0
 8007724:	603b      	str	r3, [r7, #0]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800772c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007730:	f7f8 fdce 	bl	80002d0 <__aeabi_uldivmod>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4610      	mov	r0, r2
 800773a:	4619      	mov	r1, r3
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	020b      	lsls	r3, r1, #8
 8007746:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800774a:	0202      	lsls	r2, r0, #8
 800774c:	6979      	ldr	r1, [r7, #20]
 800774e:	6849      	ldr	r1, [r1, #4]
 8007750:	0849      	lsrs	r1, r1, #1
 8007752:	2000      	movs	r0, #0
 8007754:	460c      	mov	r4, r1
 8007756:	4605      	mov	r5, r0
 8007758:	eb12 0804 	adds.w	r8, r2, r4
 800775c:	eb43 0905 	adc.w	r9, r3, r5
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	469a      	mov	sl, r3
 8007768:	4693      	mov	fp, r2
 800776a:	4652      	mov	r2, sl
 800776c:	465b      	mov	r3, fp
 800776e:	4640      	mov	r0, r8
 8007770:	4649      	mov	r1, r9
 8007772:	f7f8 fdad 	bl	80002d0 <__aeabi_uldivmod>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4613      	mov	r3, r2
 800777c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007784:	d308      	bcc.n	8007798 <UART_SetConfig+0x430>
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800778c:	d204      	bcs.n	8007798 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6a3a      	ldr	r2, [r7, #32]
 8007794:	60da      	str	r2, [r3, #12]
 8007796:	e0ce      	b.n	8007936 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800779e:	e0ca      	b.n	8007936 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a8:	d166      	bne.n	8007878 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80077aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d827      	bhi.n	8007802 <UART_SetConfig+0x49a>
 80077b2:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <UART_SetConfig+0x450>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077e5 	.word	0x080077e5
 80077c0:	080077ed 	.word	0x080077ed
 80077c4:	08007803 	.word	0x08007803
 80077c8:	080077f3 	.word	0x080077f3
 80077cc:	08007803 	.word	0x08007803
 80077d0:	08007803 	.word	0x08007803
 80077d4:	08007803 	.word	0x08007803
 80077d8:	080077fb 	.word	0x080077fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077dc:	f7fe f94a 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 80077e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077e2:	e014      	b.n	800780e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077e4:	f7fe f95c 	bl	8005aa0 <HAL_RCC_GetPCLK2Freq>
 80077e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077ea:	e010      	b.n	800780e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ec:	4b4e      	ldr	r3, [pc, #312]	; (8007928 <UART_SetConfig+0x5c0>)
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077f0:	e00d      	b.n	800780e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f2:	f7fe f8d3 	bl	800599c <HAL_RCC_GetSysClockFreq>
 80077f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077f8:	e009      	b.n	800780e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007800:	e005      	b.n	800780e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800780c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8090 	beq.w	8007936 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	4a44      	ldr	r2, [pc, #272]	; (800792c <UART_SetConfig+0x5c4>)
 800781c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007820:	461a      	mov	r2, r3
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	fbb3 f3f2 	udiv	r3, r3, r2
 8007828:	005a      	lsls	r2, r3, #1
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	085b      	lsrs	r3, r3, #1
 8007830:	441a      	add	r2, r3
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	fbb2 f3f3 	udiv	r3, r2, r3
 800783a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	2b0f      	cmp	r3, #15
 8007840:	d916      	bls.n	8007870 <UART_SetConfig+0x508>
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007848:	d212      	bcs.n	8007870 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	b29b      	uxth	r3, r3
 800784e:	f023 030f 	bic.w	r3, r3, #15
 8007852:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	085b      	lsrs	r3, r3, #1
 8007858:	b29b      	uxth	r3, r3
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	b29a      	uxth	r2, r3
 8007860:	8bfb      	ldrh	r3, [r7, #30]
 8007862:	4313      	orrs	r3, r2
 8007864:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	8bfa      	ldrh	r2, [r7, #30]
 800786c:	60da      	str	r2, [r3, #12]
 800786e:	e062      	b.n	8007936 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007876:	e05e      	b.n	8007936 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007878:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800787c:	2b08      	cmp	r3, #8
 800787e:	d828      	bhi.n	80078d2 <UART_SetConfig+0x56a>
 8007880:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <UART_SetConfig+0x520>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078b5 	.word	0x080078b5
 8007890:	080078bd 	.word	0x080078bd
 8007894:	080078d3 	.word	0x080078d3
 8007898:	080078c3 	.word	0x080078c3
 800789c:	080078d3 	.word	0x080078d3
 80078a0:	080078d3 	.word	0x080078d3
 80078a4:	080078d3 	.word	0x080078d3
 80078a8:	080078cb 	.word	0x080078cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ac:	f7fe f8e2 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 80078b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078b2:	e014      	b.n	80078de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078b4:	f7fe f8f4 	bl	8005aa0 <HAL_RCC_GetPCLK2Freq>
 80078b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078ba:	e010      	b.n	80078de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078bc:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <UART_SetConfig+0x5c0>)
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078c0:	e00d      	b.n	80078de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078c2:	f7fe f86b 	bl	800599c <HAL_RCC_GetSysClockFreq>
 80078c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078c8:	e009      	b.n	80078de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078d0:	e005      	b.n	80078de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80078dc:	bf00      	nop
    }

    if (pclk != 0U)
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d028      	beq.n	8007936 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	4a10      	ldr	r2, [pc, #64]	; (800792c <UART_SetConfig+0x5c4>)
 80078ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ee:	461a      	mov	r2, r3
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	441a      	add	r2, r3
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	fbb2 f3f3 	udiv	r3, r2, r3
 8007906:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	2b0f      	cmp	r3, #15
 800790c:	d910      	bls.n	8007930 <UART_SetConfig+0x5c8>
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007914:	d20c      	bcs.n	8007930 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	b29a      	uxth	r2, r3
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60da      	str	r2, [r3, #12]
 8007920:	e009      	b.n	8007936 <UART_SetConfig+0x5ce>
 8007922:	bf00      	nop
 8007924:	40008000 	.word	0x40008000
 8007928:	00f42400 	.word	0x00f42400
 800792c:	0800c4e8 	.word	0x0800c4e8
      }
      else
      {
        ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2201      	movs	r2, #1
 800793a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2201      	movs	r2, #1
 8007942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2200      	movs	r2, #0
 800794a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2200      	movs	r2, #0
 8007950:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007952:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007956:	4618      	mov	r0, r3
 8007958:	3730      	adds	r7, #48	; 0x30
 800795a:	46bd      	mov	sp, r7
 800795c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	f003 0308 	and.w	r3, r3, #8
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00a      	beq.n	8007a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01a      	beq.n	8007a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a5e:	d10a      	bne.n	8007a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	605a      	str	r2, [r3, #4]
  }
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b098      	sub	sp, #96	; 0x60
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ab4:	f7fa fda4 	bl	8002600 <HAL_GetTick>
 8007ab8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d12f      	bne.n	8007b28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f88e 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d022      	beq.n	8007b28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007af6:	653b      	str	r3, [r7, #80]	; 0x50
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b00:	647b      	str	r3, [r7, #68]	; 0x44
 8007b02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e063      	b.n	8007bf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0304 	and.w	r3, r3, #4
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d149      	bne.n	8007bca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f857 	bl	8007bf8 <UART_WaitOnFlagUntilTimeout>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d03c      	beq.n	8007bca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e6      	bne.n	8007b50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3308      	adds	r3, #8
 8007b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba2:	61fa      	str	r2, [r7, #28]
 8007ba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	69b9      	ldr	r1, [r7, #24]
 8007ba8:	69fa      	ldr	r2, [r7, #28]
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	617b      	str	r3, [r7, #20]
   return(result);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e5      	bne.n	8007b82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e012      	b.n	8007bf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3758      	adds	r7, #88	; 0x58
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c08:	e04f      	b.n	8007caa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c10:	d04b      	beq.n	8007caa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c12:	f7fa fcf5 	bl	8002600 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d302      	bcc.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e04e      	b.n	8007cca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d037      	beq.n	8007caa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b80      	cmp	r3, #128	; 0x80
 8007c3e:	d034      	beq.n	8007caa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b40      	cmp	r3, #64	; 0x40
 8007c44:	d031      	beq.n	8007caa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d110      	bne.n	8007c76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2208      	movs	r2, #8
 8007c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 f838 	bl	8007cd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2208      	movs	r2, #8
 8007c66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e029      	b.n	8007cca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c84:	d111      	bne.n	8007caa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f81e 	bl	8007cd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e00f      	b.n	8007cca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	69da      	ldr	r2, [r3, #28]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	bf0c      	ite	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d0a0      	beq.n	8007c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b095      	sub	sp, #84	; 0x54
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8007cfa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e6      	bne.n	8007cda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3308      	adds	r3, #8
 8007d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e3      	bne.n	8007d0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d118      	bne.n	8007d7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f023 0310 	bic.w	r3, r3, #16
 8007d60:	647b      	str	r3, [r7, #68]	; 0x44
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6a:	61bb      	str	r3, [r7, #24]
 8007d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6979      	ldr	r1, [r7, #20]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	613b      	str	r3, [r7, #16]
   return(result);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e6      	bne.n	8007d4c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2220      	movs	r2, #32
 8007d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d92:	bf00      	nop
 8007d94:	3754      	adds	r7, #84	; 0x54
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_UARTEx_EnableFifoMode+0x16>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e02b      	b.n	8007e48 <HAL_UARTEx_EnableFifoMode+0x6e>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2224      	movs	r2, #36	; 0x24
 8007dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0201 	bic.w	r2, r2, #1
 8007e16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007e26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f889 	bl	8007f48 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e02d      	b.n	8007ec4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2224      	movs	r2, #36	; 0x24
 8007e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0201 	bic.w	r2, r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f84f 	bl	8007f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e02d      	b.n	8007f40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2224      	movs	r2, #36	; 0x24
 8007ef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0201 	bic.w	r2, r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f811 	bl	8007f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d108      	bne.n	8007f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f68:	e031      	b.n	8007fce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f6a:	2308      	movs	r3, #8
 8007f6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f6e:	2308      	movs	r3, #8
 8007f70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	0e5b      	lsrs	r3, r3, #25
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	0f5b      	lsrs	r3, r3, #29
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	7b3a      	ldrb	r2, [r7, #12]
 8007f96:	4911      	ldr	r1, [pc, #68]	; (8007fdc <UARTEx_SetNbDataToProcess+0x94>)
 8007f98:	5c8a      	ldrb	r2, [r1, r2]
 8007f9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f9e:	7b3a      	ldrb	r2, [r7, #12]
 8007fa0:	490f      	ldr	r1, [pc, #60]	; (8007fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8007fa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	7b7a      	ldrb	r2, [r7, #13]
 8007fb4:	4909      	ldr	r1, [pc, #36]	; (8007fdc <UARTEx_SetNbDataToProcess+0x94>)
 8007fb6:	5c8a      	ldrb	r2, [r1, r2]
 8007fb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fbc:	7b7a      	ldrb	r2, [r7, #13]
 8007fbe:	4908      	ldr	r1, [pc, #32]	; (8007fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8007fc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007fce:	bf00      	nop
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	0800c500 	.word	0x0800c500
 8007fe0:	0800c508 	.word	0x0800c508

08007fe4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e04a      	b.n	800808c <HAL_USART_Init+0xa8>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d114      	bne.n	800802c <HAL_USART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    USART_InitCallbacksToDefault(husart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f88a 	bl	8008124 <USART_InitCallbacksToDefault>

    if (husart->MspInitCallback == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008016:	2b00      	cmp	r3, #0
 8008018:	d103      	bne.n	8008022 <HAL_USART_Init+0x3e>
    {
      husart->MspInitCallback = HAL_USART_MspInit;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <HAL_USART_Init+0xb0>)
 800801e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 0201 	bic.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f8db 	bl	8008200 <USART_SetConfig>
 800804a:	4603      	mov	r3, r0
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_USART_Init+0x70>
  {
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e01b      	b.n	800808c <HAL_USART_Init+0xa8>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008062:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008072:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fba3 	bl	80087d0 <USART_CheckIdleState>
 800808a:	4603      	mov	r3, r0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	0800226d 	.word	0x0800226d

08008098 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_USART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback can be implemented in the user file.
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_USART_RxHalfCpltCallback>:
  * @brief Rx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_RxHalfCpltCallback can be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_USART_AbortCpltCallback>:
  * @brief  USART Abort Complete callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USART_AbortCpltCallback(USART_HandleTypeDef *husart)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USART_InitCallbacksToDefault>:
  * @param  husart USART handle.
  * @retval none
  */
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
void USART_InitCallbacksToDefault(USART_HandleTypeDef *husart)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Init the USART Callback settings */
  husart->TxHalfCpltCallback        = HAL_USART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a10      	ldr	r2, [pc, #64]	; (8008170 <USART_InitCallbacksToDefault+0x4c>)
 8008130:	661a      	str	r2, [r3, #96]	; 0x60
  husart->TxCpltCallback            = HAL_USART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a0f      	ldr	r2, [pc, #60]	; (8008174 <USART_InitCallbacksToDefault+0x50>)
 8008136:	665a      	str	r2, [r3, #100]	; 0x64
  husart->RxHalfCpltCallback        = HAL_USART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a0f      	ldr	r2, [pc, #60]	; (8008178 <USART_InitCallbacksToDefault+0x54>)
 800813c:	669a      	str	r2, [r3, #104]	; 0x68
  husart->RxCpltCallback            = HAL_USART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a0e      	ldr	r2, [pc, #56]	; (800817c <USART_InitCallbacksToDefault+0x58>)
 8008142:	66da      	str	r2, [r3, #108]	; 0x6c
  husart->TxRxCpltCallback          = HAL_USART_TxRxCpltCallback;          /* Legacy weak TxRxCpltCallback          */
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a0e      	ldr	r2, [pc, #56]	; (8008180 <USART_InitCallbacksToDefault+0x5c>)
 8008148:	671a      	str	r2, [r3, #112]	; 0x70
  husart->ErrorCallback             = HAL_USART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a0d      	ldr	r2, [pc, #52]	; (8008184 <USART_InitCallbacksToDefault+0x60>)
 800814e:	675a      	str	r2, [r3, #116]	; 0x74
  husart->AbortCpltCallback         = HAL_USART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a0d      	ldr	r2, [pc, #52]	; (8008188 <USART_InitCallbacksToDefault+0x64>)
 8008154:	679a      	str	r2, [r3, #120]	; 0x78
  husart->RxFifoFullCallback        = HAL_USARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a0c      	ldr	r2, [pc, #48]	; (800818c <USART_InitCallbacksToDefault+0x68>)
 800815a:	67da      	str	r2, [r3, #124]	; 0x7c
  husart->TxFifoEmptyCallback       = HAL_USARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a0c      	ldr	r2, [pc, #48]	; (8008190 <USART_InitCallbacksToDefault+0x6c>)
 8008160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	080080ad 	.word	0x080080ad
 8008174:	08008099 	.word	0x08008099
 8008178:	080080d5 	.word	0x080080d5
 800817c:	080080c1 	.word	0x080080c1
 8008180:	080080e9 	.word	0x080080e9
 8008184:	080080fd 	.word	0x080080fd
 8008188:	08008111 	.word	0x08008111
 800818c:	08008857 	.word	0x08008857
 8008190:	0800886b 	.word	0x0800886b

08008194 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	4613      	mov	r3, r2
 80081a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80081a4:	e018      	b.n	80081d8 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ac:	d014      	beq.n	80081d8 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ae:	f7fa fa27 	bl	8002600 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d302      	bcc.n	80081c4 <USART_WaitOnFlagUntilTimeout+0x30>
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d109      	bne.n	80081d8 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e00f      	b.n	80081f8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	69da      	ldr	r2, [r3, #28]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4013      	ands	r3, r2
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	bf0c      	ite	eq
 80081e8:	2301      	moveq	r3, #1
 80081ea:	2300      	movne	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	461a      	mov	r2, r3
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d0d7      	beq.n	80081a6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800820c:	2300      	movs	r3, #0
 800820e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	431a      	orrs	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008224:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	4b96      	ldr	r3, [pc, #600]	; (8008488 <USART_SetConfig+0x288>)
 800822e:	4013      	ands	r3, r2
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	6979      	ldr	r1, [r7, #20]
 8008236:	430b      	orrs	r3, r1
 8008238:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800823a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800823e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	4313      	orrs	r3, r2
 8008248:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	4313      	orrs	r3, r2
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	4313      	orrs	r3, r2
 8008262:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800826e:	f023 0309 	bic.w	r3, r3, #9
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6812      	ldr	r2, [r2, #0]
 8008276:	6979      	ldr	r1, [r7, #20]
 8008278:	430b      	orrs	r3, r1
 800827a:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	f023 010f 	bic.w	r1, r3, #15
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a7d      	ldr	r2, [pc, #500]	; (800848c <USART_SetConfig+0x28c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d120      	bne.n	80082de <USART_SetConfig+0xde>
 800829c:	4b7c      	ldr	r3, [pc, #496]	; (8008490 <USART_SetConfig+0x290>)
 800829e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d816      	bhi.n	80082d8 <USART_SetConfig+0xd8>
 80082aa:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <USART_SetConfig+0xb0>)
 80082ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b0:	080082c1 	.word	0x080082c1
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	080082c7 	.word	0x080082c7
 80082bc:	080082d3 	.word	0x080082d3
 80082c0:	2301      	movs	r3, #1
 80082c2:	77fb      	strb	r3, [r7, #31]
 80082c4:	e06b      	b.n	800839e <USART_SetConfig+0x19e>
 80082c6:	2302      	movs	r3, #2
 80082c8:	77fb      	strb	r3, [r7, #31]
 80082ca:	e068      	b.n	800839e <USART_SetConfig+0x19e>
 80082cc:	2304      	movs	r3, #4
 80082ce:	77fb      	strb	r3, [r7, #31]
 80082d0:	e065      	b.n	800839e <USART_SetConfig+0x19e>
 80082d2:	2308      	movs	r3, #8
 80082d4:	77fb      	strb	r3, [r7, #31]
 80082d6:	e062      	b.n	800839e <USART_SetConfig+0x19e>
 80082d8:	2310      	movs	r3, #16
 80082da:	77fb      	strb	r3, [r7, #31]
 80082dc:	e05f      	b.n	800839e <USART_SetConfig+0x19e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a6c      	ldr	r2, [pc, #432]	; (8008494 <USART_SetConfig+0x294>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d132      	bne.n	800834e <USART_SetConfig+0x14e>
 80082e8:	4b69      	ldr	r3, [pc, #420]	; (8008490 <USART_SetConfig+0x290>)
 80082ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ee:	f003 030c 	and.w	r3, r3, #12
 80082f2:	2b0c      	cmp	r3, #12
 80082f4:	d828      	bhi.n	8008348 <USART_SetConfig+0x148>
 80082f6:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <USART_SetConfig+0xfc>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	08008331 	.word	0x08008331
 8008300:	08008349 	.word	0x08008349
 8008304:	08008349 	.word	0x08008349
 8008308:	08008349 	.word	0x08008349
 800830c:	0800833d 	.word	0x0800833d
 8008310:	08008349 	.word	0x08008349
 8008314:	08008349 	.word	0x08008349
 8008318:	08008349 	.word	0x08008349
 800831c:	08008337 	.word	0x08008337
 8008320:	08008349 	.word	0x08008349
 8008324:	08008349 	.word	0x08008349
 8008328:	08008349 	.word	0x08008349
 800832c:	08008343 	.word	0x08008343
 8008330:	2300      	movs	r3, #0
 8008332:	77fb      	strb	r3, [r7, #31]
 8008334:	e033      	b.n	800839e <USART_SetConfig+0x19e>
 8008336:	2302      	movs	r3, #2
 8008338:	77fb      	strb	r3, [r7, #31]
 800833a:	e030      	b.n	800839e <USART_SetConfig+0x19e>
 800833c:	2304      	movs	r3, #4
 800833e:	77fb      	strb	r3, [r7, #31]
 8008340:	e02d      	b.n	800839e <USART_SetConfig+0x19e>
 8008342:	2308      	movs	r3, #8
 8008344:	77fb      	strb	r3, [r7, #31]
 8008346:	e02a      	b.n	800839e <USART_SetConfig+0x19e>
 8008348:	2310      	movs	r3, #16
 800834a:	77fb      	strb	r3, [r7, #31]
 800834c:	e027      	b.n	800839e <USART_SetConfig+0x19e>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a51      	ldr	r2, [pc, #324]	; (8008498 <USART_SetConfig+0x298>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d120      	bne.n	800839a <USART_SetConfig+0x19a>
 8008358:	4b4d      	ldr	r3, [pc, #308]	; (8008490 <USART_SetConfig+0x290>)
 800835a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008362:	2b30      	cmp	r3, #48	; 0x30
 8008364:	d013      	beq.n	800838e <USART_SetConfig+0x18e>
 8008366:	2b30      	cmp	r3, #48	; 0x30
 8008368:	d814      	bhi.n	8008394 <USART_SetConfig+0x194>
 800836a:	2b20      	cmp	r3, #32
 800836c:	d009      	beq.n	8008382 <USART_SetConfig+0x182>
 800836e:	2b20      	cmp	r3, #32
 8008370:	d810      	bhi.n	8008394 <USART_SetConfig+0x194>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <USART_SetConfig+0x17c>
 8008376:	2b10      	cmp	r3, #16
 8008378:	d006      	beq.n	8008388 <USART_SetConfig+0x188>
 800837a:	e00b      	b.n	8008394 <USART_SetConfig+0x194>
 800837c:	2300      	movs	r3, #0
 800837e:	77fb      	strb	r3, [r7, #31]
 8008380:	e00d      	b.n	800839e <USART_SetConfig+0x19e>
 8008382:	2302      	movs	r3, #2
 8008384:	77fb      	strb	r3, [r7, #31]
 8008386:	e00a      	b.n	800839e <USART_SetConfig+0x19e>
 8008388:	2304      	movs	r3, #4
 800838a:	77fb      	strb	r3, [r7, #31]
 800838c:	e007      	b.n	800839e <USART_SetConfig+0x19e>
 800838e:	2308      	movs	r3, #8
 8008390:	77fb      	strb	r3, [r7, #31]
 8008392:	e004      	b.n	800839e <USART_SetConfig+0x19e>
 8008394:	2310      	movs	r3, #16
 8008396:	77fb      	strb	r3, [r7, #31]
 8008398:	e001      	b.n	800839e <USART_SetConfig+0x19e>
 800839a:	2310      	movs	r3, #16
 800839c:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800839e:	7ffb      	ldrb	r3, [r7, #31]
 80083a0:	2b08      	cmp	r3, #8
 80083a2:	f200 81e2 	bhi.w	800876a <USART_SetConfig+0x56a>
 80083a6:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <USART_SetConfig+0x1ac>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	080083d1 	.word	0x080083d1
 80083b0:	0800849d 	.word	0x0800849d
 80083b4:	08008553 	.word	0x08008553
 80083b8:	0800876b 	.word	0x0800876b
 80083bc:	08008603 	.word	0x08008603
 80083c0:	0800876b 	.word	0x0800876b
 80083c4:	0800876b 	.word	0x0800876b
 80083c8:	0800876b 	.word	0x0800876b
 80083cc:	080086b9 	.word	0x080086b9
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80083d0:	f7fd fb50 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 80083d4:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d044      	beq.n	8008468 <USART_SetConfig+0x268>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d03e      	beq.n	8008464 <USART_SetConfig+0x264>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d038      	beq.n	8008460 <USART_SetConfig+0x260>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d032      	beq.n	800845c <USART_SetConfig+0x25c>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d02c      	beq.n	8008458 <USART_SetConfig+0x258>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	2b05      	cmp	r3, #5
 8008404:	d026      	beq.n	8008454 <USART_SetConfig+0x254>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	2b06      	cmp	r3, #6
 800840c:	d020      	beq.n	8008450 <USART_SetConfig+0x250>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	2b07      	cmp	r3, #7
 8008414:	d01a      	beq.n	800844c <USART_SetConfig+0x24c>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	2b08      	cmp	r3, #8
 800841c:	d014      	beq.n	8008448 <USART_SetConfig+0x248>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	2b09      	cmp	r3, #9
 8008424:	d00e      	beq.n	8008444 <USART_SetConfig+0x244>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	2b0a      	cmp	r3, #10
 800842c:	d008      	beq.n	8008440 <USART_SetConfig+0x240>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	2b0b      	cmp	r3, #11
 8008434:	d102      	bne.n	800843c <USART_SetConfig+0x23c>
 8008436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800843a:	e016      	b.n	800846a <USART_SetConfig+0x26a>
 800843c:	2301      	movs	r3, #1
 800843e:	e014      	b.n	800846a <USART_SetConfig+0x26a>
 8008440:	2380      	movs	r3, #128	; 0x80
 8008442:	e012      	b.n	800846a <USART_SetConfig+0x26a>
 8008444:	2340      	movs	r3, #64	; 0x40
 8008446:	e010      	b.n	800846a <USART_SetConfig+0x26a>
 8008448:	2320      	movs	r3, #32
 800844a:	e00e      	b.n	800846a <USART_SetConfig+0x26a>
 800844c:	2310      	movs	r3, #16
 800844e:	e00c      	b.n	800846a <USART_SetConfig+0x26a>
 8008450:	230c      	movs	r3, #12
 8008452:	e00a      	b.n	800846a <USART_SetConfig+0x26a>
 8008454:	230a      	movs	r3, #10
 8008456:	e008      	b.n	800846a <USART_SetConfig+0x26a>
 8008458:	2308      	movs	r3, #8
 800845a:	e006      	b.n	800846a <USART_SetConfig+0x26a>
 800845c:	2306      	movs	r3, #6
 800845e:	e004      	b.n	800846a <USART_SetConfig+0x26a>
 8008460:	2304      	movs	r3, #4
 8008462:	e002      	b.n	800846a <USART_SetConfig+0x26a>
 8008464:	2302      	movs	r3, #2
 8008466:	e000      	b.n	800846a <USART_SetConfig+0x26a>
 8008468:	2301      	movs	r3, #1
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008470:	005a      	lsls	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	085b      	lsrs	r3, r3, #1
 8008478:	441a      	add	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008482:	61bb      	str	r3, [r7, #24]
      break;
 8008484:	e174      	b.n	8008770 <USART_SetConfig+0x570>
 8008486:	bf00      	nop
 8008488:	cfff69f3 	.word	0xcfff69f3
 800848c:	40013800 	.word	0x40013800
 8008490:	40021000 	.word	0x40021000
 8008494:	40004400 	.word	0x40004400
 8008498:	40004800 	.word	0x40004800
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800849c:	f7fd fb00 	bl	8005aa0 <HAL_RCC_GetPCLK2Freq>
 80084a0:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d044      	beq.n	8008534 <USART_SetConfig+0x334>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d03e      	beq.n	8008530 <USART_SetConfig+0x330>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d038      	beq.n	800852c <USART_SetConfig+0x32c>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d032      	beq.n	8008528 <USART_SetConfig+0x328>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d02c      	beq.n	8008524 <USART_SetConfig+0x324>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	2b05      	cmp	r3, #5
 80084d0:	d026      	beq.n	8008520 <USART_SetConfig+0x320>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	2b06      	cmp	r3, #6
 80084d8:	d020      	beq.n	800851c <USART_SetConfig+0x31c>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	2b07      	cmp	r3, #7
 80084e0:	d01a      	beq.n	8008518 <USART_SetConfig+0x318>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d014      	beq.n	8008514 <USART_SetConfig+0x314>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	d00e      	beq.n	8008510 <USART_SetConfig+0x310>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	2b0a      	cmp	r3, #10
 80084f8:	d008      	beq.n	800850c <USART_SetConfig+0x30c>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	2b0b      	cmp	r3, #11
 8008500:	d102      	bne.n	8008508 <USART_SetConfig+0x308>
 8008502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008506:	e016      	b.n	8008536 <USART_SetConfig+0x336>
 8008508:	2301      	movs	r3, #1
 800850a:	e014      	b.n	8008536 <USART_SetConfig+0x336>
 800850c:	2380      	movs	r3, #128	; 0x80
 800850e:	e012      	b.n	8008536 <USART_SetConfig+0x336>
 8008510:	2340      	movs	r3, #64	; 0x40
 8008512:	e010      	b.n	8008536 <USART_SetConfig+0x336>
 8008514:	2320      	movs	r3, #32
 8008516:	e00e      	b.n	8008536 <USART_SetConfig+0x336>
 8008518:	2310      	movs	r3, #16
 800851a:	e00c      	b.n	8008536 <USART_SetConfig+0x336>
 800851c:	230c      	movs	r3, #12
 800851e:	e00a      	b.n	8008536 <USART_SetConfig+0x336>
 8008520:	230a      	movs	r3, #10
 8008522:	e008      	b.n	8008536 <USART_SetConfig+0x336>
 8008524:	2308      	movs	r3, #8
 8008526:	e006      	b.n	8008536 <USART_SetConfig+0x336>
 8008528:	2306      	movs	r3, #6
 800852a:	e004      	b.n	8008536 <USART_SetConfig+0x336>
 800852c:	2304      	movs	r3, #4
 800852e:	e002      	b.n	8008536 <USART_SetConfig+0x336>
 8008530:	2302      	movs	r3, #2
 8008532:	e000      	b.n	8008536 <USART_SetConfig+0x336>
 8008534:	2301      	movs	r3, #1
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	fbb2 f3f3 	udiv	r3, r2, r3
 800853c:	005a      	lsls	r2, r3, #1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	085b      	lsrs	r3, r3, #1
 8008544:	441a      	add	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	fbb2 f3f3 	udiv	r3, r2, r3
 800854e:	61bb      	str	r3, [r7, #24]
      break;
 8008550:	e10e      	b.n	8008770 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b00      	cmp	r3, #0
 8008558:	d044      	beq.n	80085e4 <USART_SetConfig+0x3e4>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b01      	cmp	r3, #1
 8008560:	d03e      	beq.n	80085e0 <USART_SetConfig+0x3e0>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b02      	cmp	r3, #2
 8008568:	d038      	beq.n	80085dc <USART_SetConfig+0x3dc>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	2b03      	cmp	r3, #3
 8008570:	d032      	beq.n	80085d8 <USART_SetConfig+0x3d8>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	2b04      	cmp	r3, #4
 8008578:	d02c      	beq.n	80085d4 <USART_SetConfig+0x3d4>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b05      	cmp	r3, #5
 8008580:	d026      	beq.n	80085d0 <USART_SetConfig+0x3d0>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	2b06      	cmp	r3, #6
 8008588:	d020      	beq.n	80085cc <USART_SetConfig+0x3cc>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	2b07      	cmp	r3, #7
 8008590:	d01a      	beq.n	80085c8 <USART_SetConfig+0x3c8>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	2b08      	cmp	r3, #8
 8008598:	d014      	beq.n	80085c4 <USART_SetConfig+0x3c4>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	2b09      	cmp	r3, #9
 80085a0:	d00e      	beq.n	80085c0 <USART_SetConfig+0x3c0>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	2b0a      	cmp	r3, #10
 80085a8:	d008      	beq.n	80085bc <USART_SetConfig+0x3bc>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	2b0b      	cmp	r3, #11
 80085b0:	d102      	bne.n	80085b8 <USART_SetConfig+0x3b8>
 80085b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085b6:	e016      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e014      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085bc:	2380      	movs	r3, #128	; 0x80
 80085be:	e012      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085c0:	2340      	movs	r3, #64	; 0x40
 80085c2:	e010      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085c4:	2320      	movs	r3, #32
 80085c6:	e00e      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085c8:	2310      	movs	r3, #16
 80085ca:	e00c      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085cc:	230c      	movs	r3, #12
 80085ce:	e00a      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085d0:	230a      	movs	r3, #10
 80085d2:	e008      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085d4:	2308      	movs	r3, #8
 80085d6:	e006      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085d8:	2306      	movs	r3, #6
 80085da:	e004      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085dc:	2304      	movs	r3, #4
 80085de:	e002      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085e0:	2302      	movs	r3, #2
 80085e2:	e000      	b.n	80085e6 <USART_SetConfig+0x3e6>
 80085e4:	2301      	movs	r3, #1
 80085e6:	4a79      	ldr	r2, [pc, #484]	; (80087cc <USART_SetConfig+0x5cc>)
 80085e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ec:	005a      	lsls	r2, r3, #1
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	085b      	lsrs	r3, r3, #1
 80085f4:	441a      	add	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fe:	61bb      	str	r3, [r7, #24]
      break;
 8008600:	e0b6      	b.n	8008770 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008602:	f7fd f9cb 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8008606:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2b00      	cmp	r3, #0
 800860e:	d044      	beq.n	800869a <USART_SetConfig+0x49a>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b01      	cmp	r3, #1
 8008616:	d03e      	beq.n	8008696 <USART_SetConfig+0x496>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2b02      	cmp	r3, #2
 800861e:	d038      	beq.n	8008692 <USART_SetConfig+0x492>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	2b03      	cmp	r3, #3
 8008626:	d032      	beq.n	800868e <USART_SetConfig+0x48e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	2b04      	cmp	r3, #4
 800862e:	d02c      	beq.n	800868a <USART_SetConfig+0x48a>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b05      	cmp	r3, #5
 8008636:	d026      	beq.n	8008686 <USART_SetConfig+0x486>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	2b06      	cmp	r3, #6
 800863e:	d020      	beq.n	8008682 <USART_SetConfig+0x482>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	2b07      	cmp	r3, #7
 8008646:	d01a      	beq.n	800867e <USART_SetConfig+0x47e>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	2b08      	cmp	r3, #8
 800864e:	d014      	beq.n	800867a <USART_SetConfig+0x47a>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	2b09      	cmp	r3, #9
 8008656:	d00e      	beq.n	8008676 <USART_SetConfig+0x476>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	2b0a      	cmp	r3, #10
 800865e:	d008      	beq.n	8008672 <USART_SetConfig+0x472>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b0b      	cmp	r3, #11
 8008666:	d102      	bne.n	800866e <USART_SetConfig+0x46e>
 8008668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800866c:	e016      	b.n	800869c <USART_SetConfig+0x49c>
 800866e:	2301      	movs	r3, #1
 8008670:	e014      	b.n	800869c <USART_SetConfig+0x49c>
 8008672:	2380      	movs	r3, #128	; 0x80
 8008674:	e012      	b.n	800869c <USART_SetConfig+0x49c>
 8008676:	2340      	movs	r3, #64	; 0x40
 8008678:	e010      	b.n	800869c <USART_SetConfig+0x49c>
 800867a:	2320      	movs	r3, #32
 800867c:	e00e      	b.n	800869c <USART_SetConfig+0x49c>
 800867e:	2310      	movs	r3, #16
 8008680:	e00c      	b.n	800869c <USART_SetConfig+0x49c>
 8008682:	230c      	movs	r3, #12
 8008684:	e00a      	b.n	800869c <USART_SetConfig+0x49c>
 8008686:	230a      	movs	r3, #10
 8008688:	e008      	b.n	800869c <USART_SetConfig+0x49c>
 800868a:	2308      	movs	r3, #8
 800868c:	e006      	b.n	800869c <USART_SetConfig+0x49c>
 800868e:	2306      	movs	r3, #6
 8008690:	e004      	b.n	800869c <USART_SetConfig+0x49c>
 8008692:	2304      	movs	r3, #4
 8008694:	e002      	b.n	800869c <USART_SetConfig+0x49c>
 8008696:	2302      	movs	r3, #2
 8008698:	e000      	b.n	800869c <USART_SetConfig+0x49c>
 800869a:	2301      	movs	r3, #1
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a2:	005a      	lsls	r2, r3, #1
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	085b      	lsrs	r3, r3, #1
 80086aa:	441a      	add	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b4:	61bb      	str	r3, [r7, #24]
      break;
 80086b6:	e05b      	b.n	8008770 <USART_SetConfig+0x570>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d044      	beq.n	800874a <USART_SetConfig+0x54a>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d03e      	beq.n	8008746 <USART_SetConfig+0x546>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d038      	beq.n	8008742 <USART_SetConfig+0x542>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d032      	beq.n	800873e <USART_SetConfig+0x53e>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d02c      	beq.n	800873a <USART_SetConfig+0x53a>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	2b05      	cmp	r3, #5
 80086e6:	d026      	beq.n	8008736 <USART_SetConfig+0x536>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	2b06      	cmp	r3, #6
 80086ee:	d020      	beq.n	8008732 <USART_SetConfig+0x532>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	2b07      	cmp	r3, #7
 80086f6:	d01a      	beq.n	800872e <USART_SetConfig+0x52e>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d014      	beq.n	800872a <USART_SetConfig+0x52a>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	2b09      	cmp	r3, #9
 8008706:	d00e      	beq.n	8008726 <USART_SetConfig+0x526>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	2b0a      	cmp	r3, #10
 800870e:	d008      	beq.n	8008722 <USART_SetConfig+0x522>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	2b0b      	cmp	r3, #11
 8008716:	d102      	bne.n	800871e <USART_SetConfig+0x51e>
 8008718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800871c:	e016      	b.n	800874c <USART_SetConfig+0x54c>
 800871e:	2301      	movs	r3, #1
 8008720:	e014      	b.n	800874c <USART_SetConfig+0x54c>
 8008722:	2380      	movs	r3, #128	; 0x80
 8008724:	e012      	b.n	800874c <USART_SetConfig+0x54c>
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	e010      	b.n	800874c <USART_SetConfig+0x54c>
 800872a:	2320      	movs	r3, #32
 800872c:	e00e      	b.n	800874c <USART_SetConfig+0x54c>
 800872e:	2310      	movs	r3, #16
 8008730:	e00c      	b.n	800874c <USART_SetConfig+0x54c>
 8008732:	230c      	movs	r3, #12
 8008734:	e00a      	b.n	800874c <USART_SetConfig+0x54c>
 8008736:	230a      	movs	r3, #10
 8008738:	e008      	b.n	800874c <USART_SetConfig+0x54c>
 800873a:	2308      	movs	r3, #8
 800873c:	e006      	b.n	800874c <USART_SetConfig+0x54c>
 800873e:	2306      	movs	r3, #6
 8008740:	e004      	b.n	800874c <USART_SetConfig+0x54c>
 8008742:	2304      	movs	r3, #4
 8008744:	e002      	b.n	800874c <USART_SetConfig+0x54c>
 8008746:	2302      	movs	r3, #2
 8008748:	e000      	b.n	800874c <USART_SetConfig+0x54c>
 800874a:	2301      	movs	r3, #1
 800874c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008750:	fbb2 f3f3 	udiv	r3, r2, r3
 8008754:	005a      	lsls	r2, r3, #1
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	085b      	lsrs	r3, r3, #1
 800875c:	441a      	add	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	fbb2 f3f3 	udiv	r3, r2, r3
 8008766:	61bb      	str	r3, [r7, #24]
      break;
 8008768:	e002      	b.n	8008770 <USART_SetConfig+0x570>
    default:
      ret = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	77bb      	strb	r3, [r7, #30]
      break;
 800876e:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	2b0f      	cmp	r3, #15
 8008774:	d916      	bls.n	80087a4 <USART_SetConfig+0x5a4>
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800877c:	d212      	bcs.n	80087a4 <USART_SetConfig+0x5a4>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	b29b      	uxth	r3, r3
 8008782:	f023 030f 	bic.w	r3, r3, #15
 8008786:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	085b      	lsrs	r3, r3, #1
 800878c:	b29b      	uxth	r3, r3
 800878e:	f003 0307 	and.w	r3, r3, #7
 8008792:	b29a      	uxth	r2, r3
 8008794:	89fb      	ldrh	r3, [r7, #14]
 8008796:	4313      	orrs	r3, r2
 8008798:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	89fa      	ldrh	r2, [r7, #14]
 80087a0:	60da      	str	r2, [r3, #12]
 80087a2:	e001      	b.n	80087a8 <USART_SetConfig+0x5a8>
  }
  else
  {
    ret = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	77bb      	strb	r3, [r7, #30]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 80087c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3720      	adds	r7, #32
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	00f42400 	.word	0x00f42400

080087d0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af02      	add	r7, sp, #8
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087de:	f7f9 ff0f 	bl	8002600 <HAL_GetTick>
 80087e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0308 	and.w	r3, r3, #8
 80087ee:	2b08      	cmp	r3, #8
 80087f0:	d10e      	bne.n	8008810 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80087f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff fcc7 	bl	8008194 <USART_WaitOnFlagUntilTimeout>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e01e      	b.n	800884e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b04      	cmp	r3, #4
 800881c:	d10e      	bne.n	800883c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800881e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fcb1 	bl	8008194 <USART_WaitOnFlagUntilTimeout>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e008      	b.n	800884e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 800887e:	b480      	push	{r7}
 8008880:	b085      	sub	sp, #20
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800888c:	2b01      	cmp	r3, #1
 800888e:	d101      	bne.n	8008894 <HAL_USARTEx_DisableFifoMode+0x16>
 8008890:	2302      	movs	r3, #2
 8008892:	e027      	b.n	80088e4 <HAL_USARTEx_DisableFifoMode+0x66>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2202      	movs	r2, #2
 80088a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0201 	bic.w	r2, r2, #1
 80088ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088c2:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8008904:	2302      	movs	r3, #2
 8008906:	e02d      	b.n	8008964 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0201 	bic.w	r2, r2, #1
 800892e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f84f 	bl	80089e8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800897c:	2b01      	cmp	r3, #1
 800897e:	d101      	bne.n	8008984 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8008980:	2302      	movs	r3, #2
 8008982:	e02d      	b.n	80089e0 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 0201 	bic.w	r2, r2, #1
 80089aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f811 	bl	80089e8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d106      	bne.n	8008a06 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a04:	e02f      	b.n	8008a66 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a06:	2308      	movs	r3, #8
 8008a08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a0a:	2308      	movs	r3, #8
 8008a0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8008a14:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	f003 0307 	and.w	r3, r3, #7
 8008a1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8008a24:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	7b3a      	ldrb	r2, [r7, #12]
 8008a32:	4910      	ldr	r1, [pc, #64]	; (8008a74 <USARTEx_SetNbDataToProcess+0x8c>)
 8008a34:	5c8a      	ldrb	r2, [r1, r2]
 8008a36:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8008a3a:	7b3a      	ldrb	r2, [r7, #12]
 8008a3c:	490e      	ldr	r1, [pc, #56]	; (8008a78 <USARTEx_SetNbDataToProcess+0x90>)
 8008a3e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a40:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	7b7a      	ldrb	r2, [r7, #13]
 8008a4e:	4909      	ldr	r1, [pc, #36]	; (8008a74 <USARTEx_SetNbDataToProcess+0x8c>)
 8008a50:	5c8a      	ldrb	r2, [r1, r2]
 8008a52:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8008a56:	7b7a      	ldrb	r2, [r7, #13]
 8008a58:	4907      	ldr	r1, [pc, #28]	; (8008a78 <USARTEx_SetNbDataToProcess+0x90>)
 8008a5a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8008a66:	bf00      	nop
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	0800c510 	.word	0x0800c510
 8008a78:	0800c518 	.word	0x0800c518

08008a7c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8008a80:	4907      	ldr	r1, [pc, #28]	; (8008aa0 <MX_FATFS_Init+0x24>)
 8008a82:	4808      	ldr	r0, [pc, #32]	; (8008aa4 <MX_FATFS_Init+0x28>)
 8008a84:	f000 f8b6 	bl	8008bf4 <FATFS_LinkDriver>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8008a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a92:	e003      	b.n	8008a9c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8008a94:	4b04      	ldr	r3, [pc, #16]	; (8008aa8 <MX_FATFS_Init+0x2c>)
 8008a96:	2201      	movs	r2, #1
 8008a98:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8008a9a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	20000e5c 	.word	0x20000e5c
 8008aa4:	20000010 	.word	0x20000010
 8008aa8:	20000e60 	.word	0x20000e60

08008aac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008ab6:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <USER_initialize+0x24>)
 8008ab8:	2201      	movs	r2, #1
 8008aba:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <USER_initialize+0x24>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	2000000c 	.word	0x2000000c

08008ad4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008ade:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <USER_status+0x24>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008ae4:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <USER_status+0x24>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	2000000c 	.word	0x2000000c

08008afc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	607a      	str	r2, [r7, #4]
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008b0c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008b2a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	603a      	str	r2, [r7, #0]
 8008b42:	71fb      	strb	r3, [r7, #7]
 8008b44:	460b      	mov	r3, r1
 8008b46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
    return res;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
	...

08008b5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008b72:	4b1f      	ldr	r3, [pc, #124]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b74:	7a5b      	ldrb	r3, [r3, #9]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d131      	bne.n	8008be0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b7c:	4b1c      	ldr	r3, [pc, #112]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b7e:	7a5b      	ldrb	r3, [r3, #9]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	461a      	mov	r2, r3
 8008b84:	4b1a      	ldr	r3, [pc, #104]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b86:	2100      	movs	r1, #0
 8008b88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008b8a:	4b19      	ldr	r3, [pc, #100]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b8c:	7a5b      	ldrb	r3, [r3, #9]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	4a17      	ldr	r2, [pc, #92]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b9a:	4b15      	ldr	r3, [pc, #84]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b9c:	7a5b      	ldrb	r3, [r3, #9]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4b13      	ldr	r3, [pc, #76]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008ba4:	4413      	add	r3, r2
 8008ba6:	79fa      	ldrb	r2, [r7, #7]
 8008ba8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008baa:	4b11      	ldr	r3, [pc, #68]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008bac:	7a5b      	ldrb	r3, [r3, #9]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	b2d1      	uxtb	r1, r2
 8008bb4:	4a0e      	ldr	r2, [pc, #56]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008bb6:	7251      	strb	r1, [r2, #9]
 8008bb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008bba:	7dbb      	ldrb	r3, [r7, #22]
 8008bbc:	3330      	adds	r3, #48	; 0x30
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	223a      	movs	r2, #58	; 0x3a
 8008bca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	3302      	adds	r3, #2
 8008bd0:	222f      	movs	r2, #47	; 0x2f
 8008bd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	3303      	adds	r3, #3
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	371c      	adds	r7, #28
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	20000e64 	.word	0x20000e64

08008bf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008bfe:	2200      	movs	r2, #0
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff ffaa 	bl	8008b5c <FATFS_LinkDriverEx>
 8008c08:	4603      	mov	r3, r0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <__NVIC_SetPriority>:
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	6039      	str	r1, [r7, #0]
 8008c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	db0a      	blt.n	8008c3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	490c      	ldr	r1, [pc, #48]	; (8008c60 <__NVIC_SetPriority+0x4c>)
 8008c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c32:	0112      	lsls	r2, r2, #4
 8008c34:	b2d2      	uxtb	r2, r2
 8008c36:	440b      	add	r3, r1
 8008c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c3c:	e00a      	b.n	8008c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	4908      	ldr	r1, [pc, #32]	; (8008c64 <__NVIC_SetPriority+0x50>)
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	f003 030f 	and.w	r3, r3, #15
 8008c4a:	3b04      	subs	r3, #4
 8008c4c:	0112      	lsls	r2, r2, #4
 8008c4e:	b2d2      	uxtb	r2, r2
 8008c50:	440b      	add	r3, r1
 8008c52:	761a      	strb	r2, [r3, #24]
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	e000e100 	.word	0xe000e100
 8008c64:	e000ed00 	.word	0xe000ed00

08008c68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <SysTick_Handler+0x1c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008c70:	f001 fe20 	bl	800a8b4 <xTaskGetSchedulerState>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d001      	beq.n	8008c7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c7a:	f002 fc05 	bl	800b488 <xPortSysTickHandler>
  }
}
 8008c7e:	bf00      	nop
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	e000e010 	.word	0xe000e010

08008c88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	f06f 0004 	mvn.w	r0, #4
 8008c92:	f7ff ffbf 	bl	8008c14 <__NVIC_SetPriority>
#endif
}
 8008c96:	bf00      	nop
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca2:	f3ef 8305 	mrs	r3, IPSR
 8008ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008cae:	f06f 0305 	mvn.w	r3, #5
 8008cb2:	607b      	str	r3, [r7, #4]
 8008cb4:	e00c      	b.n	8008cd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008cb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ce0 <osKernelInitialize+0x44>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d105      	bne.n	8008cca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008cbe:	4b08      	ldr	r3, [pc, #32]	; (8008ce0 <osKernelInitialize+0x44>)
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	607b      	str	r3, [r7, #4]
 8008cc8:	e002      	b.n	8008cd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cd0:	687b      	ldr	r3, [r7, #4]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	20000e70 	.word	0x20000e70

08008ce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cea:	f3ef 8305 	mrs	r3, IPSR
 8008cee:	603b      	str	r3, [r7, #0]
  return(result);
 8008cf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8008cf6:	f06f 0305 	mvn.w	r3, #5
 8008cfa:	607b      	str	r3, [r7, #4]
 8008cfc:	e010      	b.n	8008d20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cfe:	4b0b      	ldr	r3, [pc, #44]	; (8008d2c <osKernelStart+0x48>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d109      	bne.n	8008d1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d06:	f7ff ffbf 	bl	8008c88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d0a:	4b08      	ldr	r3, [pc, #32]	; (8008d2c <osKernelStart+0x48>)
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d10:	f001 f964 	bl	8009fdc <vTaskStartScheduler>
      stat = osOK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	607b      	str	r3, [r7, #4]
 8008d18:	e002      	b.n	8008d20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d20:	687b      	ldr	r3, [r7, #4]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000e70 	.word	0x20000e70

08008d30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08e      	sub	sp, #56	; 0x38
 8008d34:	af04      	add	r7, sp, #16
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d40:	f3ef 8305 	mrs	r3, IPSR
 8008d44:	617b      	str	r3, [r7, #20]
  return(result);
 8008d46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d17e      	bne.n	8008e4a <osThreadNew+0x11a>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d07b      	beq.n	8008e4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d52:	2380      	movs	r3, #128	; 0x80
 8008d54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d56:	2318      	movs	r3, #24
 8008d58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d045      	beq.n	8008df6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <osThreadNew+0x48>
        name = attr->name;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d008      	beq.n	8008d9e <osThreadNew+0x6e>
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	2b38      	cmp	r3, #56	; 0x38
 8008d90:	d805      	bhi.n	8008d9e <osThreadNew+0x6e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <osThreadNew+0x72>
        return (NULL);
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e054      	b.n	8008e4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	089b      	lsrs	r3, r3, #2
 8008db0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00e      	beq.n	8008dd8 <osThreadNew+0xa8>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	2bbb      	cmp	r3, #187	; 0xbb
 8008dc0:	d90a      	bls.n	8008dd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d006      	beq.n	8008dd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <osThreadNew+0xa8>
        mem = 1;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e010      	b.n	8008dfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10c      	bne.n	8008dfa <osThreadNew+0xca>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d108      	bne.n	8008dfa <osThreadNew+0xca>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d104      	bne.n	8008dfa <osThreadNew+0xca>
          mem = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61bb      	str	r3, [r7, #24]
 8008df4:	e001      	b.n	8008dfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d110      	bne.n	8008e22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e08:	9202      	str	r2, [sp, #8]
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	6a3a      	ldr	r2, [r7, #32]
 8008e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 fe0c 	bl	8009a34 <xTaskCreateStatic>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	e013      	b.n	8008e4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d110      	bne.n	8008e4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	f107 0310 	add.w	r3, r7, #16
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fe57 	bl	8009aee <xTaskCreate>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d001      	beq.n	8008e4a <osThreadNew+0x11a>
            hTask = NULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e4a:	693b      	ldr	r3, [r7, #16]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3728      	adds	r7, #40	; 0x28
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e5c:	f3ef 8305 	mrs	r3, IPSR
 8008e60:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <osDelay+0x1c>
    stat = osErrorISR;
 8008e68:	f06f 0305 	mvn.w	r3, #5
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	e007      	b.n	8008e80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f001 f804 	bl	8009e88 <vTaskDelay>
    }
  }

  return (stat);
 8008e80:	68fb      	ldr	r3, [r7, #12]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4a07      	ldr	r2, [pc, #28]	; (8008eb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4a06      	ldr	r2, [pc, #24]	; (8008ebc <vApplicationGetIdleTaskMemory+0x30>)
 8008ea2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2280      	movs	r2, #128	; 0x80
 8008ea8:	601a      	str	r2, [r3, #0]
}
 8008eaa:	bf00      	nop
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20000e74 	.word	0x20000e74
 8008ebc:	20000f30 	.word	0x20000f30

08008ec0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4a07      	ldr	r2, [pc, #28]	; (8008eec <vApplicationGetTimerTaskMemory+0x2c>)
 8008ed0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	4a06      	ldr	r2, [pc, #24]	; (8008ef0 <vApplicationGetTimerTaskMemory+0x30>)
 8008ed6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ede:	601a      	str	r2, [r3, #0]
}
 8008ee0:	bf00      	nop
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	20001130 	.word	0x20001130
 8008ef0:	200011ec 	.word	0x200011ec

08008ef4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f103 0208 	add.w	r2, r3, #8
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f103 0208 	add.w	r2, r3, #8
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f103 0208 	add.w	r2, r3, #8
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f42:	bf00      	nop
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b085      	sub	sp, #20
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	1c5a      	adds	r2, r3, #1
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	601a      	str	r2, [r3, #0]
}
 8008f8a:	bf00      	nop
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f96:	b480      	push	{r7}
 8008f98:	b085      	sub	sp, #20
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fac:	d103      	bne.n	8008fb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	e00c      	b.n	8008fd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3308      	adds	r3, #8
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	e002      	b.n	8008fc4 <vListInsert+0x2e>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d2f6      	bcs.n	8008fbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	601a      	str	r2, [r3, #0]
}
 8008ffc:	bf00      	nop
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	6892      	ldr	r2, [r2, #8]
 800901e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	6852      	ldr	r2, [r2, #4]
 8009028:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	429a      	cmp	r2, r3
 8009032:	d103      	bne.n	800903c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	1e5a      	subs	r2, r3, #1
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009086:	f002 f96d 	bl	800b364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009092:	68f9      	ldr	r1, [r7, #12]
 8009094:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009096:	fb01 f303 	mul.w	r3, r1, r3
 800909a:	441a      	add	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b6:	3b01      	subs	r3, #1
 80090b8:	68f9      	ldr	r1, [r7, #12]
 80090ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090bc:	fb01 f303 	mul.w	r3, r1, r3
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	22ff      	movs	r2, #255	; 0xff
 80090ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	22ff      	movs	r2, #255	; 0xff
 80090d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d114      	bne.n	8009106 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d01a      	beq.n	800911a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3310      	adds	r3, #16
 80090e8:	4618      	mov	r0, r3
 80090ea:	f001 fa11 	bl	800a510 <xTaskRemoveFromEventList>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d012      	beq.n	800911a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090f4:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <xQueueGenericReset+0xcc>)
 80090f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	e009      	b.n	800911a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3310      	adds	r3, #16
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff fef2 	bl	8008ef4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	3324      	adds	r3, #36	; 0x24
 8009114:	4618      	mov	r0, r3
 8009116:	f7ff feed 	bl	8008ef4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800911a:	f002 f953 	bl	800b3c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800911e:	2301      	movs	r3, #1
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	e000ed04 	.word	0xe000ed04

0800912c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08e      	sub	sp, #56	; 0x38
 8009130:	af02      	add	r7, sp, #8
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <xQueueGenericCreateStatic+0x52>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <xQueueGenericCreateStatic+0x56>
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <xQueueGenericCreateStatic+0x58>
 8009182:	2300      	movs	r3, #0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	623b      	str	r3, [r7, #32]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d102      	bne.n	80091aa <xQueueGenericCreateStatic+0x7e>
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <xQueueGenericCreateStatic+0x82>
 80091aa:	2301      	movs	r3, #1
 80091ac:	e000      	b.n	80091b0 <xQueueGenericCreateStatic+0x84>
 80091ae:	2300      	movs	r3, #0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	61fb      	str	r3, [r7, #28]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091ca:	2350      	movs	r3, #80	; 0x50
 80091cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2b50      	cmp	r3, #80	; 0x50
 80091d2:	d00a      	beq.n	80091ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	61bb      	str	r3, [r7, #24]
}
 80091e6:	bf00      	nop
 80091e8:	e7fe      	b.n	80091e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00d      	beq.n	8009212 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	4613      	mov	r3, r2
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	68b9      	ldr	r1, [r7, #8]
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 f805 	bl	800921c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009214:	4618      	mov	r0, r3
 8009216:	3730      	adds	r7, #48	; 0x30
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d103      	bne.n	8009238 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	e002      	b.n	800923e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800924a:	2101      	movs	r1, #1
 800924c:	69b8      	ldr	r0, [r7, #24]
 800924e:	f7ff ff05 	bl	800905c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	78fa      	ldrb	r2, [r7, #3]
 8009256:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800925a:	bf00      	nop
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08e      	sub	sp, #56	; 0x38
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009272:	2300      	movs	r3, #0
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <xQueueGenericSend+0x32>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d103      	bne.n	80092a4 <xQueueGenericSend+0x40>
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <xQueueGenericSend+0x44>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e000      	b.n	80092aa <xQueueGenericSend+0x46>
 80092a8:	2300      	movs	r3, #0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10a      	bne.n	80092c4 <xQueueGenericSend+0x60>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d103      	bne.n	80092d2 <xQueueGenericSend+0x6e>
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d101      	bne.n	80092d6 <xQueueGenericSend+0x72>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e000      	b.n	80092d8 <xQueueGenericSend+0x74>
 80092d6:	2300      	movs	r3, #0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	623b      	str	r3, [r7, #32]
}
 80092ee:	bf00      	nop
 80092f0:	e7fe      	b.n	80092f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092f2:	f001 fadf 	bl	800a8b4 <xTaskGetSchedulerState>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d102      	bne.n	8009302 <xQueueGenericSend+0x9e>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <xQueueGenericSend+0xa2>
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <xQueueGenericSend+0xa4>
 8009306:	2300      	movs	r3, #0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10a      	bne.n	8009322 <xQueueGenericSend+0xbe>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	61fb      	str	r3, [r7, #28]
}
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009322:	f002 f81f 	bl	800b364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932e:	429a      	cmp	r2, r3
 8009330:	d302      	bcc.n	8009338 <xQueueGenericSend+0xd4>
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d129      	bne.n	800938c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800933e:	f000 fa0b 	bl	8009758 <prvCopyDataToQueue>
 8009342:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2b00      	cmp	r3, #0
 800934a:	d010      	beq.n	800936e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	3324      	adds	r3, #36	; 0x24
 8009350:	4618      	mov	r0, r3
 8009352:	f001 f8dd 	bl	800a510 <xTaskRemoveFromEventList>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d013      	beq.n	8009384 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800935c:	4b3f      	ldr	r3, [pc, #252]	; (800945c <xQueueGenericSend+0x1f8>)
 800935e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	e00a      	b.n	8009384 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d007      	beq.n	8009384 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009374:	4b39      	ldr	r3, [pc, #228]	; (800945c <xQueueGenericSend+0x1f8>)
 8009376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009384:	f002 f81e 	bl	800b3c4 <vPortExitCritical>
				return pdPASS;
 8009388:	2301      	movs	r3, #1
 800938a:	e063      	b.n	8009454 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d103      	bne.n	800939a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009392:	f002 f817 	bl	800b3c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009396:	2300      	movs	r3, #0
 8009398:	e05c      	b.n	8009454 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800939a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939c:	2b00      	cmp	r3, #0
 800939e:	d106      	bne.n	80093ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093a0:	f107 0314 	add.w	r3, r7, #20
 80093a4:	4618      	mov	r0, r3
 80093a6:	f001 f917 	bl	800a5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093aa:	2301      	movs	r3, #1
 80093ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093ae:	f002 f809 	bl	800b3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093b2:	f000 fe83 	bl	800a0bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093b6:	f001 ffd5 	bl	800b364 <vPortEnterCritical>
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093c0:	b25b      	sxtb	r3, r3
 80093c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093c6:	d103      	bne.n	80093d0 <xQueueGenericSend+0x16c>
 80093c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093d6:	b25b      	sxtb	r3, r3
 80093d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093dc:	d103      	bne.n	80093e6 <xQueueGenericSend+0x182>
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093e6:	f001 ffed 	bl	800b3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093ea:	1d3a      	adds	r2, r7, #4
 80093ec:	f107 0314 	add.w	r3, r7, #20
 80093f0:	4611      	mov	r1, r2
 80093f2:	4618      	mov	r0, r3
 80093f4:	f001 f906 	bl	800a604 <xTaskCheckForTimeOut>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d124      	bne.n	8009448 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009400:	f000 faa2 	bl	8009948 <prvIsQueueFull>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d018      	beq.n	800943c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	3310      	adds	r3, #16
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f001 f82c 	bl	800a470 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800941a:	f000 fa2d 	bl	8009878 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800941e:	f000 fe5b 	bl	800a0d8 <xTaskResumeAll>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	f47f af7c 	bne.w	8009322 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800942a:	4b0c      	ldr	r3, [pc, #48]	; (800945c <xQueueGenericSend+0x1f8>)
 800942c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	e772      	b.n	8009322 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800943c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800943e:	f000 fa1b 	bl	8009878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009442:	f000 fe49 	bl	800a0d8 <xTaskResumeAll>
 8009446:	e76c      	b.n	8009322 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800944a:	f000 fa15 	bl	8009878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800944e:	f000 fe43 	bl	800a0d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009454:	4618      	mov	r0, r3
 8009456:	3738      	adds	r7, #56	; 0x38
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	e000ed04 	.word	0xe000ed04

08009460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b090      	sub	sp, #64	; 0x40
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10a      	bne.n	800948e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800948a:	bf00      	nop
 800948c:	e7fe      	b.n	800948c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d103      	bne.n	800949c <xQueueGenericSendFromISR+0x3c>
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <xQueueGenericSendFromISR+0x40>
 800949c:	2301      	movs	r3, #1
 800949e:	e000      	b.n	80094a2 <xQueueGenericSendFromISR+0x42>
 80094a0:	2300      	movs	r3, #0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d103      	bne.n	80094ca <xQueueGenericSendFromISR+0x6a>
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <xQueueGenericSendFromISR+0x6e>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e000      	b.n	80094d0 <xQueueGenericSendFromISR+0x70>
 80094ce:	2300      	movs	r3, #0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10a      	bne.n	80094ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	623b      	str	r3, [r7, #32]
}
 80094e6:	bf00      	nop
 80094e8:	e7fe      	b.n	80094e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094ea:	f002 f81d 	bl	800b528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094ee:	f3ef 8211 	mrs	r2, BASEPRI
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	61fa      	str	r2, [r7, #28]
 8009504:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009506:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009508:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009512:	429a      	cmp	r2, r3
 8009514:	d302      	bcc.n	800951c <xQueueGenericSendFromISR+0xbc>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b02      	cmp	r3, #2
 800951a:	d12f      	bne.n	800957c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	68b9      	ldr	r1, [r7, #8]
 8009530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009532:	f000 f911 	bl	8009758 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009536:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800953a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800953e:	d112      	bne.n	8009566 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009544:	2b00      	cmp	r3, #0
 8009546:	d016      	beq.n	8009576 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	3324      	adds	r3, #36	; 0x24
 800954c:	4618      	mov	r0, r3
 800954e:	f000 ffdf 	bl	800a510 <xTaskRemoveFromEventList>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00e      	beq.n	8009576 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00b      	beq.n	8009576 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	e007      	b.n	8009576 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009566:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800956a:	3301      	adds	r3, #1
 800956c:	b2db      	uxtb	r3, r3
 800956e:	b25a      	sxtb	r2, r3
 8009570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009576:	2301      	movs	r3, #1
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800957a:	e001      	b.n	8009580 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800957c:	2300      	movs	r3, #0
 800957e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009582:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800958a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800958c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800958e:	4618      	mov	r0, r3
 8009590:	3740      	adds	r7, #64	; 0x40
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08c      	sub	sp, #48	; 0x30
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095a4:	2300      	movs	r3, #0
 80095a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10a      	bne.n	80095c8 <xQueueReceive+0x30>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	623b      	str	r3, [r7, #32]
}
 80095c4:	bf00      	nop
 80095c6:	e7fe      	b.n	80095c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d103      	bne.n	80095d6 <xQueueReceive+0x3e>
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <xQueueReceive+0x42>
 80095d6:	2301      	movs	r3, #1
 80095d8:	e000      	b.n	80095dc <xQueueReceive+0x44>
 80095da:	2300      	movs	r3, #0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10a      	bne.n	80095f6 <xQueueReceive+0x5e>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	61fb      	str	r3, [r7, #28]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095f6:	f001 f95d 	bl	800a8b4 <xTaskGetSchedulerState>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d102      	bne.n	8009606 <xQueueReceive+0x6e>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <xQueueReceive+0x72>
 8009606:	2301      	movs	r3, #1
 8009608:	e000      	b.n	800960c <xQueueReceive+0x74>
 800960a:	2300      	movs	r3, #0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10a      	bne.n	8009626 <xQueueReceive+0x8e>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	61bb      	str	r3, [r7, #24]
}
 8009622:	bf00      	nop
 8009624:	e7fe      	b.n	8009624 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009626:	f001 fe9d 	bl	800b364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	2b00      	cmp	r3, #0
 8009634:	d01f      	beq.n	8009676 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009636:	68b9      	ldr	r1, [r7, #8]
 8009638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800963a:	f000 f8f7 	bl	800982c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	1e5a      	subs	r2, r3, #1
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00f      	beq.n	800966e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	3310      	adds	r3, #16
 8009652:	4618      	mov	r0, r3
 8009654:	f000 ff5c 	bl	800a510 <xTaskRemoveFromEventList>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d007      	beq.n	800966e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800965e:	4b3d      	ldr	r3, [pc, #244]	; (8009754 <xQueueReceive+0x1bc>)
 8009660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800966e:	f001 fea9 	bl	800b3c4 <vPortExitCritical>
				return pdPASS;
 8009672:	2301      	movs	r3, #1
 8009674:	e069      	b.n	800974a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d103      	bne.n	8009684 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800967c:	f001 fea2 	bl	800b3c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009680:	2300      	movs	r3, #0
 8009682:	e062      	b.n	800974a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	2b00      	cmp	r3, #0
 8009688:	d106      	bne.n	8009698 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800968a:	f107 0310 	add.w	r3, r7, #16
 800968e:	4618      	mov	r0, r3
 8009690:	f000 ffa2 	bl	800a5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009694:	2301      	movs	r3, #1
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009698:	f001 fe94 	bl	800b3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800969c:	f000 fd0e 	bl	800a0bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096a0:	f001 fe60 	bl	800b364 <vPortEnterCritical>
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096aa:	b25b      	sxtb	r3, r3
 80096ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096b0:	d103      	bne.n	80096ba <xQueueReceive+0x122>
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096c0:	b25b      	sxtb	r3, r3
 80096c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096c6:	d103      	bne.n	80096d0 <xQueueReceive+0x138>
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096d0:	f001 fe78 	bl	800b3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096d4:	1d3a      	adds	r2, r7, #4
 80096d6:	f107 0310 	add.w	r3, r7, #16
 80096da:	4611      	mov	r1, r2
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 ff91 	bl	800a604 <xTaskCheckForTimeOut>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d123      	bne.n	8009730 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ea:	f000 f917 	bl	800991c <prvIsQueueEmpty>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d017      	beq.n	8009724 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f6:	3324      	adds	r3, #36	; 0x24
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 feb7 	bl	800a470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009704:	f000 f8b8 	bl	8009878 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009708:	f000 fce6 	bl	800a0d8 <xTaskResumeAll>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d189      	bne.n	8009626 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009712:	4b10      	ldr	r3, [pc, #64]	; (8009754 <xQueueReceive+0x1bc>)
 8009714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	e780      	b.n	8009626 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009726:	f000 f8a7 	bl	8009878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800972a:	f000 fcd5 	bl	800a0d8 <xTaskResumeAll>
 800972e:	e77a      	b.n	8009626 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009732:	f000 f8a1 	bl	8009878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009736:	f000 fccf 	bl	800a0d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800973a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800973c:	f000 f8ee 	bl	800991c <prvIsQueueEmpty>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	f43f af6f 	beq.w	8009626 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800974a:	4618      	mov	r0, r3
 800974c:	3730      	adds	r7, #48	; 0x30
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	e000ed04 	.word	0xe000ed04

08009758 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009764:	2300      	movs	r3, #0
 8009766:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10d      	bne.n	8009792 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d14d      	bne.n	800981a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	4618      	mov	r0, r3
 8009784:	f001 f8b4 	bl	800a8f0 <xTaskPriorityDisinherit>
 8009788:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	609a      	str	r2, [r3, #8]
 8009790:	e043      	b.n	800981a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d119      	bne.n	80097cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6858      	ldr	r0, [r3, #4]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	461a      	mov	r2, r3
 80097a2:	68b9      	ldr	r1, [r7, #8]
 80097a4:	f002 f916 	bl	800b9d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b0:	441a      	add	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d32b      	bcc.n	800981a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	605a      	str	r2, [r3, #4]
 80097ca:	e026      	b.n	800981a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	68d8      	ldr	r0, [r3, #12]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	461a      	mov	r2, r3
 80097d6:	68b9      	ldr	r1, [r7, #8]
 80097d8:	f002 f8fc 	bl	800b9d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	68da      	ldr	r2, [r3, #12]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e4:	425b      	negs	r3, r3
 80097e6:	441a      	add	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	68da      	ldr	r2, [r3, #12]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d207      	bcs.n	8009808 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	689a      	ldr	r2, [r3, #8]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009800:	425b      	negs	r3, r3
 8009802:	441a      	add	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b02      	cmp	r3, #2
 800980c:	d105      	bne.n	800981a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	3b01      	subs	r3, #1
 8009818:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009822:	697b      	ldr	r3, [r7, #20]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983a:	2b00      	cmp	r3, #0
 800983c:	d018      	beq.n	8009870 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68da      	ldr	r2, [r3, #12]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009846:	441a      	add	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68da      	ldr	r2, [r3, #12]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	429a      	cmp	r2, r3
 8009856:	d303      	bcc.n	8009860 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68d9      	ldr	r1, [r3, #12]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009868:	461a      	mov	r2, r3
 800986a:	6838      	ldr	r0, [r7, #0]
 800986c:	f002 f8b2 	bl	800b9d4 <memcpy>
	}
}
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009880:	f001 fd70 	bl	800b364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800988a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800988c:	e011      	b.n	80098b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	2b00      	cmp	r3, #0
 8009894:	d012      	beq.n	80098bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3324      	adds	r3, #36	; 0x24
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fe38 	bl	800a510 <xTaskRemoveFromEventList>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098a6:	f000 ff0f 	bl	800a6c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	dce9      	bgt.n	800988e <prvUnlockQueue+0x16>
 80098ba:	e000      	b.n	80098be <prvUnlockQueue+0x46>
					break;
 80098bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	22ff      	movs	r2, #255	; 0xff
 80098c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098c6:	f001 fd7d 	bl	800b3c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098ca:	f001 fd4b 	bl	800b364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098d6:	e011      	b.n	80098fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d012      	beq.n	8009906 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3310      	adds	r3, #16
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fe13 	bl	800a510 <xTaskRemoveFromEventList>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098f0:	f000 feea 	bl	800a6c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009900:	2b00      	cmp	r3, #0
 8009902:	dce9      	bgt.n	80098d8 <prvUnlockQueue+0x60>
 8009904:	e000      	b.n	8009908 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009906:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	22ff      	movs	r2, #255	; 0xff
 800990c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009910:	f001 fd58 	bl	800b3c4 <vPortExitCritical>
}
 8009914:	bf00      	nop
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009924:	f001 fd1e 	bl	800b364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	2b00      	cmp	r3, #0
 800992e:	d102      	bne.n	8009936 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009930:	2301      	movs	r3, #1
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	e001      	b.n	800993a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009936:	2300      	movs	r3, #0
 8009938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800993a:	f001 fd43 	bl	800b3c4 <vPortExitCritical>

	return xReturn;
 800993e:	68fb      	ldr	r3, [r7, #12]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009950:	f001 fd08 	bl	800b364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800995c:	429a      	cmp	r2, r3
 800995e:	d102      	bne.n	8009966 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009960:	2301      	movs	r3, #1
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	e001      	b.n	800996a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009966:	2300      	movs	r3, #0
 8009968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800996a:	f001 fd2b 	bl	800b3c4 <vPortExitCritical>

	return xReturn;
 800996e:	68fb      	ldr	r3, [r7, #12]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009982:	2300      	movs	r3, #0
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	e014      	b.n	80099b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009988:	4a0f      	ldr	r2, [pc, #60]	; (80099c8 <vQueueAddToRegistry+0x50>)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10b      	bne.n	80099ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009994:	490c      	ldr	r1, [pc, #48]	; (80099c8 <vQueueAddToRegistry+0x50>)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800999e:	4a0a      	ldr	r2, [pc, #40]	; (80099c8 <vQueueAddToRegistry+0x50>)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	00db      	lsls	r3, r3, #3
 80099a4:	4413      	add	r3, r2
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80099aa:	e006      	b.n	80099ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3301      	adds	r3, #1
 80099b0:	60fb      	str	r3, [r7, #12]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2b07      	cmp	r3, #7
 80099b6:	d9e7      	bls.n	8009988 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	200015ec 	.word	0x200015ec

080099cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099dc:	f001 fcc2 	bl	800b364 <vPortEnterCritical>
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099e6:	b25b      	sxtb	r3, r3
 80099e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ec:	d103      	bne.n	80099f6 <vQueueWaitForMessageRestricted+0x2a>
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099fc:	b25b      	sxtb	r3, r3
 80099fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a02:	d103      	bne.n	8009a0c <vQueueWaitForMessageRestricted+0x40>
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a0c:	f001 fcda 	bl	800b3c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d106      	bne.n	8009a26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	3324      	adds	r3, #36	; 0x24
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	68b9      	ldr	r1, [r7, #8]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fd49 	bl	800a4b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a26:	6978      	ldr	r0, [r7, #20]
 8009a28:	f7ff ff26 	bl	8009878 <prvUnlockQueue>
	}
 8009a2c:	bf00      	nop
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08e      	sub	sp, #56	; 0x38
 8009a38:	af04      	add	r7, sp, #16
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	623b      	str	r3, [r7, #32]
}
 8009a5a:	bf00      	nop
 8009a5c:	e7fe      	b.n	8009a5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <xTaskCreateStatic+0x46>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	61fb      	str	r3, [r7, #28]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a7a:	23bc      	movs	r3, #188	; 0xbc
 8009a7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2bbc      	cmp	r3, #188	; 0xbc
 8009a82:	d00a      	beq.n	8009a9a <xTaskCreateStatic+0x66>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	61bb      	str	r3, [r7, #24]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d01e      	beq.n	8009ae0 <xTaskCreateStatic+0xac>
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d01b      	beq.n	8009ae0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aaa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ab0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009aba:	2300      	movs	r3, #0
 8009abc:	9303      	str	r3, [sp, #12]
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	9302      	str	r3, [sp, #8]
 8009ac2:	f107 0314 	add.w	r3, r7, #20
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	68b9      	ldr	r1, [r7, #8]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 f850 	bl	8009b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ada:	f000 f8f3 	bl	8009cc4 <prvAddNewTaskToReadyList>
 8009ade:	e001      	b.n	8009ae4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ae4:	697b      	ldr	r3, [r7, #20]
	}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3728      	adds	r7, #40	; 0x28
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b08c      	sub	sp, #48	; 0x30
 8009af2:	af04      	add	r7, sp, #16
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	60b9      	str	r1, [r7, #8]
 8009af8:	603b      	str	r3, [r7, #0]
 8009afa:	4613      	mov	r3, r2
 8009afc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009afe:	88fb      	ldrh	r3, [r7, #6]
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 fd50 	bl	800b5a8 <pvPortMalloc>
 8009b08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00e      	beq.n	8009b2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b10:	20bc      	movs	r0, #188	; 0xbc
 8009b12:	f001 fd49 	bl	800b5a8 <pvPortMalloc>
 8009b16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	631a      	str	r2, [r3, #48]	; 0x30
 8009b24:	e005      	b.n	8009b32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b26:	6978      	ldr	r0, [r7, #20]
 8009b28:	f001 fe0a 	bl	800b740 <vPortFree>
 8009b2c:	e001      	b.n	8009b32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d017      	beq.n	8009b68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b40:	88fa      	ldrh	r2, [r7, #6]
 8009b42:	2300      	movs	r3, #0
 8009b44:	9303      	str	r3, [sp, #12]
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	9302      	str	r3, [sp, #8]
 8009b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4c:	9301      	str	r3, [sp, #4]
 8009b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 f80e 	bl	8009b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b5c:	69f8      	ldr	r0, [r7, #28]
 8009b5e:	f000 f8b1 	bl	8009cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b62:	2301      	movs	r3, #1
 8009b64:	61bb      	str	r3, [r7, #24]
 8009b66:	e002      	b.n	8009b6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b6e:	69bb      	ldr	r3, [r7, #24]
	}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3720      	adds	r7, #32
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b088      	sub	sp, #32
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
 8009b84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	461a      	mov	r2, r3
 8009b90:	21a5      	movs	r1, #165	; 0xa5
 8009b92:	f001 ff2d 	bl	800b9f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	f023 0307 	bic.w	r3, r3, #7
 8009bae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00a      	beq.n	8009bd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	617b      	str	r3, [r7, #20]
}
 8009bcc:	bf00      	nop
 8009bce:	e7fe      	b.n	8009bce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d01f      	beq.n	8009c16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	61fb      	str	r3, [r7, #28]
 8009bda:	e012      	b.n	8009c02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	4413      	add	r3, r2
 8009be2:	7819      	ldrb	r1, [r3, #0]
 8009be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	4413      	add	r3, r2
 8009bea:	3334      	adds	r3, #52	; 0x34
 8009bec:	460a      	mov	r2, r1
 8009bee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d006      	beq.n	8009c0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	61fb      	str	r3, [r7, #28]
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	2b0f      	cmp	r3, #15
 8009c06:	d9e9      	bls.n	8009bdc <prvInitialiseNewTask+0x64>
 8009c08:	e000      	b.n	8009c0c <prvInitialiseNewTask+0x94>
			{
				break;
 8009c0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c14:	e003      	b.n	8009c1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	2b37      	cmp	r3, #55	; 0x37
 8009c22:	d901      	bls.n	8009c28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c24:	2337      	movs	r3, #55	; 0x37
 8009c26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c36:	2200      	movs	r2, #0
 8009c38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7ff f978 	bl	8008f34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c46:	3318      	adds	r3, #24
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff f973 	bl	8008f34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c66:	2200      	movs	r2, #0
 8009c68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	3354      	adds	r3, #84	; 0x54
 8009c78:	2260      	movs	r2, #96	; 0x60
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f001 feb7 	bl	800b9f0 <memset>
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	4a0c      	ldr	r2, [pc, #48]	; (8009cb8 <prvInitialiseNewTask+0x140>)
 8009c86:	659a      	str	r2, [r3, #88]	; 0x58
 8009c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8a:	4a0c      	ldr	r2, [pc, #48]	; (8009cbc <prvInitialiseNewTask+0x144>)
 8009c8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	4a0b      	ldr	r2, [pc, #44]	; (8009cc0 <prvInitialiseNewTask+0x148>)
 8009c92:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	69b8      	ldr	r0, [r7, #24]
 8009c9a:	f001 fa39 	bl	800b110 <pxPortInitialiseStack>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d002      	beq.n	8009cb0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cb0:	bf00      	nop
 8009cb2:	3720      	adds	r7, #32
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	0800c540 	.word	0x0800c540
 8009cbc:	0800c560 	.word	0x0800c560
 8009cc0:	0800c520 	.word	0x0800c520

08009cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ccc:	f001 fb4a 	bl	800b364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009cd0:	4b2d      	ldr	r3, [pc, #180]	; (8009d88 <prvAddNewTaskToReadyList+0xc4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	4a2c      	ldr	r2, [pc, #176]	; (8009d88 <prvAddNewTaskToReadyList+0xc4>)
 8009cd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009cda:	4b2c      	ldr	r3, [pc, #176]	; (8009d8c <prvAddNewTaskToReadyList+0xc8>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ce2:	4a2a      	ldr	r2, [pc, #168]	; (8009d8c <prvAddNewTaskToReadyList+0xc8>)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ce8:	4b27      	ldr	r3, [pc, #156]	; (8009d88 <prvAddNewTaskToReadyList+0xc4>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d110      	bne.n	8009d12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009cf0:	f000 fd0e 	bl	800a710 <prvInitialiseTaskLists>
 8009cf4:	e00d      	b.n	8009d12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009cf6:	4b26      	ldr	r3, [pc, #152]	; (8009d90 <prvAddNewTaskToReadyList+0xcc>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d109      	bne.n	8009d12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cfe:	4b23      	ldr	r3, [pc, #140]	; (8009d8c <prvAddNewTaskToReadyList+0xc8>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d802      	bhi.n	8009d12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d0c:	4a1f      	ldr	r2, [pc, #124]	; (8009d8c <prvAddNewTaskToReadyList+0xc8>)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d12:	4b20      	ldr	r3, [pc, #128]	; (8009d94 <prvAddNewTaskToReadyList+0xd0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3301      	adds	r3, #1
 8009d18:	4a1e      	ldr	r2, [pc, #120]	; (8009d94 <prvAddNewTaskToReadyList+0xd0>)
 8009d1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d1c:	4b1d      	ldr	r3, [pc, #116]	; (8009d94 <prvAddNewTaskToReadyList+0xd0>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d28:	4b1b      	ldr	r3, [pc, #108]	; (8009d98 <prvAddNewTaskToReadyList+0xd4>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d903      	bls.n	8009d38 <prvAddNewTaskToReadyList+0x74>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d34:	4a18      	ldr	r2, [pc, #96]	; (8009d98 <prvAddNewTaskToReadyList+0xd4>)
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4a15      	ldr	r2, [pc, #84]	; (8009d9c <prvAddNewTaskToReadyList+0xd8>)
 8009d46:	441a      	add	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4610      	mov	r0, r2
 8009d50:	f7ff f8fd 	bl	8008f4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d54:	f001 fb36 	bl	800b3c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d58:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <prvAddNewTaskToReadyList+0xcc>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00e      	beq.n	8009d7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d60:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <prvAddNewTaskToReadyList+0xc8>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d207      	bcs.n	8009d7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d6e:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <prvAddNewTaskToReadyList+0xdc>)
 8009d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d7e:	bf00      	nop
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20001b00 	.word	0x20001b00
 8009d8c:	2000162c 	.word	0x2000162c
 8009d90:	20001b0c 	.word	0x20001b0c
 8009d94:	20001b1c 	.word	0x20001b1c
 8009d98:	20001b08 	.word	0x20001b08
 8009d9c:	20001630 	.word	0x20001630
 8009da0:	e000ed04 	.word	0xe000ed04

08009da4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009dac:	f001 fada 	bl	800b364 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d102      	bne.n	8009dbc <vTaskDelete+0x18>
 8009db6:	4b2c      	ldr	r3, [pc, #176]	; (8009e68 <vTaskDelete+0xc4>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	e000      	b.n	8009dbe <vTaskDelete+0x1a>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7ff f91f 	bl	8009008 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3318      	adds	r3, #24
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff f916 	bl	8009008 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009ddc:	4b23      	ldr	r3, [pc, #140]	; (8009e6c <vTaskDelete+0xc8>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	4a22      	ldr	r2, [pc, #136]	; (8009e6c <vTaskDelete+0xc8>)
 8009de4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009de6:	4b20      	ldr	r3, [pc, #128]	; (8009e68 <vTaskDelete+0xc4>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d10b      	bne.n	8009e08 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4619      	mov	r1, r3
 8009df6:	481e      	ldr	r0, [pc, #120]	; (8009e70 <vTaskDelete+0xcc>)
 8009df8:	f7ff f8a9 	bl	8008f4e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009dfc:	4b1d      	ldr	r3, [pc, #116]	; (8009e74 <vTaskDelete+0xd0>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	4a1c      	ldr	r2, [pc, #112]	; (8009e74 <vTaskDelete+0xd0>)
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	e009      	b.n	8009e1c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009e08:	4b1b      	ldr	r3, [pc, #108]	; (8009e78 <vTaskDelete+0xd4>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	4a1a      	ldr	r2, [pc, #104]	; (8009e78 <vTaskDelete+0xd4>)
 8009e10:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fcea 	bl	800a7ec <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009e18:	f000 fd1c 	bl	800a854 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009e1c:	f001 fad2 	bl	800b3c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009e20:	4b16      	ldr	r3, [pc, #88]	; (8009e7c <vTaskDelete+0xd8>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01b      	beq.n	8009e60 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009e28:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <vTaskDelete+0xc4>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d116      	bne.n	8009e60 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009e32:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <vTaskDelete+0xdc>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00a      	beq.n	8009e50 <vTaskDelete+0xac>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	60bb      	str	r3, [r7, #8]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009e50:	4b0c      	ldr	r3, [pc, #48]	; (8009e84 <vTaskDelete+0xe0>)
 8009e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e60:	bf00      	nop
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	2000162c 	.word	0x2000162c
 8009e6c:	20001b1c 	.word	0x20001b1c
 8009e70:	20001ad4 	.word	0x20001ad4
 8009e74:	20001ae8 	.word	0x20001ae8
 8009e78:	20001b00 	.word	0x20001b00
 8009e7c:	20001b0c 	.word	0x20001b0c
 8009e80:	20001b28 	.word	0x20001b28
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d017      	beq.n	8009eca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e9a:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <vTaskDelay+0x60>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00a      	beq.n	8009eb8 <vTaskDelay+0x30>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	60bb      	str	r3, [r7, #8]
}
 8009eb4:	bf00      	nop
 8009eb6:	e7fe      	b.n	8009eb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009eb8:	f000 f900 	bl	800a0bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fd84 	bl	800a9cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ec4:	f000 f908 	bl	800a0d8 <xTaskResumeAll>
 8009ec8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d107      	bne.n	8009ee0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009ed0:	4b06      	ldr	r3, [pc, #24]	; (8009eec <vTaskDelay+0x64>)
 8009ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20001b28 	.word	0x20001b28
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009ef8:	f001 fa34 	bl	800b364 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d102      	bne.n	8009f08 <vTaskSuspend+0x18>
 8009f02:	4b30      	ldr	r3, [pc, #192]	; (8009fc4 <vTaskSuspend+0xd4>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	e000      	b.n	8009f0a <vTaskSuspend+0x1a>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3304      	adds	r3, #4
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff f879 	bl	8009008 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3318      	adds	r3, #24
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff f870 	bl	8009008 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4826      	ldr	r0, [pc, #152]	; (8009fc8 <vTaskSuspend+0xd8>)
 8009f30:	f7ff f80d 	bl	8008f4e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d103      	bne.n	8009f48 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009f48:	f001 fa3c 	bl	800b3c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009f4c:	4b1f      	ldr	r3, [pc, #124]	; (8009fcc <vTaskSuspend+0xdc>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d005      	beq.n	8009f60 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009f54:	f001 fa06 	bl	800b364 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009f58:	f000 fc7c 	bl	800a854 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009f5c:	f001 fa32 	bl	800b3c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009f60:	4b18      	ldr	r3, [pc, #96]	; (8009fc4 <vTaskSuspend+0xd4>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d127      	bne.n	8009fba <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009f6a:	4b18      	ldr	r3, [pc, #96]	; (8009fcc <vTaskSuspend+0xdc>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d017      	beq.n	8009fa2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009f72:	4b17      	ldr	r3, [pc, #92]	; (8009fd0 <vTaskSuspend+0xe0>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00a      	beq.n	8009f90 <vTaskSuspend+0xa0>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	60bb      	str	r3, [r7, #8]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8009f90:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <vTaskSuspend+0xe4>)
 8009f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fa0:	e00b      	b.n	8009fba <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009fa2:	4b09      	ldr	r3, [pc, #36]	; (8009fc8 <vTaskSuspend+0xd8>)
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	4b0c      	ldr	r3, [pc, #48]	; (8009fd8 <vTaskSuspend+0xe8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d103      	bne.n	8009fb6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8009fae:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <vTaskSuspend+0xd4>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]
	}
 8009fb4:	e001      	b.n	8009fba <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009fb6:	f000 f9f7 	bl	800a3a8 <vTaskSwitchContext>
	}
 8009fba:	bf00      	nop
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	2000162c 	.word	0x2000162c
 8009fc8:	20001aec 	.word	0x20001aec
 8009fcc:	20001b0c 	.word	0x20001b0c
 8009fd0:	20001b28 	.word	0x20001b28
 8009fd4:	e000ed04 	.word	0xe000ed04
 8009fd8:	20001b00 	.word	0x20001b00

08009fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	; 0x28
 8009fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009fea:	463a      	mov	r2, r7
 8009fec:	1d39      	adds	r1, r7, #4
 8009fee:	f107 0308 	add.w	r3, r7, #8
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe ff4a 	bl	8008e8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	9202      	str	r2, [sp, #8]
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	2300      	movs	r3, #0
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	2300      	movs	r3, #0
 800a008:	460a      	mov	r2, r1
 800a00a:	4924      	ldr	r1, [pc, #144]	; (800a09c <vTaskStartScheduler+0xc0>)
 800a00c:	4824      	ldr	r0, [pc, #144]	; (800a0a0 <vTaskStartScheduler+0xc4>)
 800a00e:	f7ff fd11 	bl	8009a34 <xTaskCreateStatic>
 800a012:	4603      	mov	r3, r0
 800a014:	4a23      	ldr	r2, [pc, #140]	; (800a0a4 <vTaskStartScheduler+0xc8>)
 800a016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a018:	4b22      	ldr	r3, [pc, #136]	; (800a0a4 <vTaskStartScheduler+0xc8>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a020:	2301      	movs	r3, #1
 800a022:	617b      	str	r3, [r7, #20]
 800a024:	e001      	b.n	800a02a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a026:	2300      	movs	r3, #0
 800a028:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d102      	bne.n	800a036 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a030:	f000 fd20 	bl	800aa74 <xTimerCreateTimerTask>
 800a034:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d11b      	bne.n	800a074 <vTaskStartScheduler+0x98>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	613b      	str	r3, [r7, #16]
}
 800a04e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a050:	4b15      	ldr	r3, [pc, #84]	; (800a0a8 <vTaskStartScheduler+0xcc>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3354      	adds	r3, #84	; 0x54
 800a056:	4a15      	ldr	r2, [pc, #84]	; (800a0ac <vTaskStartScheduler+0xd0>)
 800a058:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a05a:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <vTaskStartScheduler+0xd4>)
 800a05c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a060:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a062:	4b14      	ldr	r3, [pc, #80]	; (800a0b4 <vTaskStartScheduler+0xd8>)
 800a064:	2201      	movs	r2, #1
 800a066:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a068:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <vTaskStartScheduler+0xdc>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a06e:	f001 f8d7 	bl	800b220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a072:	e00e      	b.n	800a092 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a07a:	d10a      	bne.n	800a092 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	60fb      	str	r3, [r7, #12]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <vTaskStartScheduler+0xb4>
}
 800a092:	bf00      	nop
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	0800c494 	.word	0x0800c494
 800a0a0:	0800a6e1 	.word	0x0800a6e1
 800a0a4:	20001b24 	.word	0x20001b24
 800a0a8:	2000162c 	.word	0x2000162c
 800a0ac:	20000028 	.word	0x20000028
 800a0b0:	20001b20 	.word	0x20001b20
 800a0b4:	20001b0c 	.word	0x20001b0c
 800a0b8:	20001b04 	.word	0x20001b04

0800a0bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a0c0:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <vTaskSuspendAll+0x18>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	4a03      	ldr	r2, [pc, #12]	; (800a0d4 <vTaskSuspendAll+0x18>)
 800a0c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0ca:	bf00      	nop
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr
 800a0d4:	20001b28 	.word	0x20001b28

0800a0d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0e6:	4b42      	ldr	r3, [pc, #264]	; (800a1f0 <xTaskResumeAll+0x118>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10a      	bne.n	800a104 <xTaskResumeAll+0x2c>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	603b      	str	r3, [r7, #0]
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a104:	f001 f92e 	bl	800b364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a108:	4b39      	ldr	r3, [pc, #228]	; (800a1f0 <xTaskResumeAll+0x118>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	4a38      	ldr	r2, [pc, #224]	; (800a1f0 <xTaskResumeAll+0x118>)
 800a110:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a112:	4b37      	ldr	r3, [pc, #220]	; (800a1f0 <xTaskResumeAll+0x118>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d162      	bne.n	800a1e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a11a:	4b36      	ldr	r3, [pc, #216]	; (800a1f4 <xTaskResumeAll+0x11c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d05e      	beq.n	800a1e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a122:	e02f      	b.n	800a184 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a124:	4b34      	ldr	r3, [pc, #208]	; (800a1f8 <xTaskResumeAll+0x120>)
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3318      	adds	r3, #24
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe ff69 	bl	8009008 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3304      	adds	r3, #4
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe ff64 	bl	8009008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a144:	4b2d      	ldr	r3, [pc, #180]	; (800a1fc <xTaskResumeAll+0x124>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d903      	bls.n	800a154 <xTaskResumeAll+0x7c>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a150:	4a2a      	ldr	r2, [pc, #168]	; (800a1fc <xTaskResumeAll+0x124>)
 800a152:	6013      	str	r3, [r2, #0]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a158:	4613      	mov	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4a27      	ldr	r2, [pc, #156]	; (800a200 <xTaskResumeAll+0x128>)
 800a162:	441a      	add	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3304      	adds	r3, #4
 800a168:	4619      	mov	r1, r3
 800a16a:	4610      	mov	r0, r2
 800a16c:	f7fe feef 	bl	8008f4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a174:	4b23      	ldr	r3, [pc, #140]	; (800a204 <xTaskResumeAll+0x12c>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d302      	bcc.n	800a184 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a17e:	4b22      	ldr	r3, [pc, #136]	; (800a208 <xTaskResumeAll+0x130>)
 800a180:	2201      	movs	r2, #1
 800a182:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a184:	4b1c      	ldr	r3, [pc, #112]	; (800a1f8 <xTaskResumeAll+0x120>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1cb      	bne.n	800a124 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a192:	f000 fb5f 	bl	800a854 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a196:	4b1d      	ldr	r3, [pc, #116]	; (800a20c <xTaskResumeAll+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d010      	beq.n	800a1c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1a2:	f000 f847 	bl	800a234 <xTaskIncrementTick>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a1ac:	4b16      	ldr	r3, [pc, #88]	; (800a208 <xTaskResumeAll+0x130>)
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1f1      	bne.n	800a1a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a1be:	4b13      	ldr	r3, [pc, #76]	; (800a20c <xTaskResumeAll+0x134>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1c4:	4b10      	ldr	r3, [pc, #64]	; (800a208 <xTaskResumeAll+0x130>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d009      	beq.n	800a1e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1d0:	4b0f      	ldr	r3, [pc, #60]	; (800a210 <xTaskResumeAll+0x138>)
 800a1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1e0:	f001 f8f0 	bl	800b3c4 <vPortExitCritical>

	return xAlreadyYielded;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20001b28 	.word	0x20001b28
 800a1f4:	20001b00 	.word	0x20001b00
 800a1f8:	20001ac0 	.word	0x20001ac0
 800a1fc:	20001b08 	.word	0x20001b08
 800a200:	20001630 	.word	0x20001630
 800a204:	2000162c 	.word	0x2000162c
 800a208:	20001b14 	.word	0x20001b14
 800a20c:	20001b10 	.word	0x20001b10
 800a210:	e000ed04 	.word	0xe000ed04

0800a214 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a21a:	4b05      	ldr	r3, [pc, #20]	; (800a230 <xTaskGetTickCount+0x1c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a220:	687b      	ldr	r3, [r7, #4]
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	20001b04 	.word	0x20001b04

0800a234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a23e:	4b4f      	ldr	r3, [pc, #316]	; (800a37c <xTaskIncrementTick+0x148>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	f040 808f 	bne.w	800a366 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a248:	4b4d      	ldr	r3, [pc, #308]	; (800a380 <xTaskIncrementTick+0x14c>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3301      	adds	r3, #1
 800a24e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a250:	4a4b      	ldr	r2, [pc, #300]	; (800a380 <xTaskIncrementTick+0x14c>)
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d120      	bne.n	800a29e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a25c:	4b49      	ldr	r3, [pc, #292]	; (800a384 <xTaskIncrementTick+0x150>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <xTaskIncrementTick+0x48>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	603b      	str	r3, [r7, #0]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <xTaskIncrementTick+0x46>
 800a27c:	4b41      	ldr	r3, [pc, #260]	; (800a384 <xTaskIncrementTick+0x150>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	4b41      	ldr	r3, [pc, #260]	; (800a388 <xTaskIncrementTick+0x154>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a3f      	ldr	r2, [pc, #252]	; (800a384 <xTaskIncrementTick+0x150>)
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	4a3f      	ldr	r2, [pc, #252]	; (800a388 <xTaskIncrementTick+0x154>)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	4b3e      	ldr	r3, [pc, #248]	; (800a38c <xTaskIncrementTick+0x158>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3301      	adds	r3, #1
 800a296:	4a3d      	ldr	r2, [pc, #244]	; (800a38c <xTaskIncrementTick+0x158>)
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	f000 fadb 	bl	800a854 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a29e:	4b3c      	ldr	r3, [pc, #240]	; (800a390 <xTaskIncrementTick+0x15c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d349      	bcc.n	800a33c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2a8:	4b36      	ldr	r3, [pc, #216]	; (800a384 <xTaskIncrementTick+0x150>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d104      	bne.n	800a2bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2b2:	4b37      	ldr	r3, [pc, #220]	; (800a390 <xTaskIncrementTick+0x15c>)
 800a2b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2b8:	601a      	str	r2, [r3, #0]
					break;
 800a2ba:	e03f      	b.n	800a33c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2bc:	4b31      	ldr	r3, [pc, #196]	; (800a384 <xTaskIncrementTick+0x150>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d203      	bcs.n	800a2dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2d4:	4a2e      	ldr	r2, [pc, #184]	; (800a390 <xTaskIncrementTick+0x15c>)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2da:	e02f      	b.n	800a33c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	3304      	adds	r3, #4
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fe fe91 	bl	8009008 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d004      	beq.n	800a2f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	3318      	adds	r3, #24
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe fe88 	bl	8009008 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2fc:	4b25      	ldr	r3, [pc, #148]	; (800a394 <xTaskIncrementTick+0x160>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	429a      	cmp	r2, r3
 800a302:	d903      	bls.n	800a30c <xTaskIncrementTick+0xd8>
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a308:	4a22      	ldr	r2, [pc, #136]	; (800a394 <xTaskIncrementTick+0x160>)
 800a30a:	6013      	str	r3, [r2, #0]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a310:	4613      	mov	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4413      	add	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4a1f      	ldr	r2, [pc, #124]	; (800a398 <xTaskIncrementTick+0x164>)
 800a31a:	441a      	add	r2, r3
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	3304      	adds	r3, #4
 800a320:	4619      	mov	r1, r3
 800a322:	4610      	mov	r0, r2
 800a324:	f7fe fe13 	bl	8008f4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32c:	4b1b      	ldr	r3, [pc, #108]	; (800a39c <xTaskIncrementTick+0x168>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a332:	429a      	cmp	r2, r3
 800a334:	d3b8      	bcc.n	800a2a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a336:	2301      	movs	r3, #1
 800a338:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a33a:	e7b5      	b.n	800a2a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a33c:	4b17      	ldr	r3, [pc, #92]	; (800a39c <xTaskIncrementTick+0x168>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a342:	4915      	ldr	r1, [pc, #84]	; (800a398 <xTaskIncrementTick+0x164>)
 800a344:	4613      	mov	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	440b      	add	r3, r1
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d901      	bls.n	800a358 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a354:	2301      	movs	r3, #1
 800a356:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a358:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <xTaskIncrementTick+0x16c>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d007      	beq.n	800a370 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a360:	2301      	movs	r3, #1
 800a362:	617b      	str	r3, [r7, #20]
 800a364:	e004      	b.n	800a370 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a366:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <xTaskIncrementTick+0x170>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3301      	adds	r3, #1
 800a36c:	4a0d      	ldr	r2, [pc, #52]	; (800a3a4 <xTaskIncrementTick+0x170>)
 800a36e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a370:	697b      	ldr	r3, [r7, #20]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20001b28 	.word	0x20001b28
 800a380:	20001b04 	.word	0x20001b04
 800a384:	20001ab8 	.word	0x20001ab8
 800a388:	20001abc 	.word	0x20001abc
 800a38c:	20001b18 	.word	0x20001b18
 800a390:	20001b20 	.word	0x20001b20
 800a394:	20001b08 	.word	0x20001b08
 800a398:	20001630 	.word	0x20001630
 800a39c:	2000162c 	.word	0x2000162c
 800a3a0:	20001b14 	.word	0x20001b14
 800a3a4:	20001b10 	.word	0x20001b10

0800a3a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3ae:	4b2a      	ldr	r3, [pc, #168]	; (800a458 <vTaskSwitchContext+0xb0>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3b6:	4b29      	ldr	r3, [pc, #164]	; (800a45c <vTaskSwitchContext+0xb4>)
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3bc:	e046      	b.n	800a44c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a3be:	4b27      	ldr	r3, [pc, #156]	; (800a45c <vTaskSwitchContext+0xb4>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c4:	4b26      	ldr	r3, [pc, #152]	; (800a460 <vTaskSwitchContext+0xb8>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	e010      	b.n	800a3ee <vTaskSwitchContext+0x46>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10a      	bne.n	800a3e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	607b      	str	r3, [r7, #4]
}
 800a3e4:	bf00      	nop
 800a3e6:	e7fe      	b.n	800a3e6 <vTaskSwitchContext+0x3e>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	491d      	ldr	r1, [pc, #116]	; (800a464 <vTaskSwitchContext+0xbc>)
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	440b      	add	r3, r1
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d0e4      	beq.n	800a3cc <vTaskSwitchContext+0x24>
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	4613      	mov	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4a15      	ldr	r2, [pc, #84]	; (800a464 <vTaskSwitchContext+0xbc>)
 800a40e:	4413      	add	r3, r2
 800a410:	60bb      	str	r3, [r7, #8]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	605a      	str	r2, [r3, #4]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	3308      	adds	r3, #8
 800a424:	429a      	cmp	r2, r3
 800a426:	d104      	bne.n	800a432 <vTaskSwitchContext+0x8a>
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	605a      	str	r2, [r3, #4]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	4a0b      	ldr	r2, [pc, #44]	; (800a468 <vTaskSwitchContext+0xc0>)
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	4a08      	ldr	r2, [pc, #32]	; (800a460 <vTaskSwitchContext+0xb8>)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a442:	4b09      	ldr	r3, [pc, #36]	; (800a468 <vTaskSwitchContext+0xc0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3354      	adds	r3, #84	; 0x54
 800a448:	4a08      	ldr	r2, [pc, #32]	; (800a46c <vTaskSwitchContext+0xc4>)
 800a44a:	6013      	str	r3, [r2, #0]
}
 800a44c:	bf00      	nop
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	20001b28 	.word	0x20001b28
 800a45c:	20001b14 	.word	0x20001b14
 800a460:	20001b08 	.word	0x20001b08
 800a464:	20001630 	.word	0x20001630
 800a468:	2000162c 	.word	0x2000162c
 800a46c:	20000028 	.word	0x20000028

0800a470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60fb      	str	r3, [r7, #12]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a496:	4b07      	ldr	r3, [pc, #28]	; (800a4b4 <vTaskPlaceOnEventList+0x44>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3318      	adds	r3, #24
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7fe fd79 	bl	8008f96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	6838      	ldr	r0, [r7, #0]
 800a4a8:	f000 fa90 	bl	800a9cc <prvAddCurrentTaskToDelayedList>
}
 800a4ac:	bf00      	nop
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	2000162c 	.word	0x2000162c

0800a4b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10a      	bne.n	800a4e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	617b      	str	r3, [r7, #20]
}
 800a4dc:	bf00      	nop
 800a4de:	e7fe      	b.n	800a4de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	; (800a50c <vTaskPlaceOnEventListRestricted+0x54>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3318      	adds	r3, #24
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7fe fd30 	bl	8008f4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a4f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	68b8      	ldr	r0, [r7, #8]
 800a4fe:	f000 fa65 	bl	800a9cc <prvAddCurrentTaskToDelayedList>
	}
 800a502:	bf00      	nop
 800a504:	3718      	adds	r7, #24
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	2000162c 	.word	0x2000162c

0800a510 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10a      	bne.n	800a53c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	60fb      	str	r3, [r7, #12]
}
 800a538:	bf00      	nop
 800a53a:	e7fe      	b.n	800a53a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	3318      	adds	r3, #24
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe fd61 	bl	8009008 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a546:	4b1e      	ldr	r3, [pc, #120]	; (800a5c0 <xTaskRemoveFromEventList+0xb0>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d11d      	bne.n	800a58a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	3304      	adds	r3, #4
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe fd58 	bl	8009008 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55c:	4b19      	ldr	r3, [pc, #100]	; (800a5c4 <xTaskRemoveFromEventList+0xb4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	429a      	cmp	r2, r3
 800a562:	d903      	bls.n	800a56c <xTaskRemoveFromEventList+0x5c>
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a568:	4a16      	ldr	r2, [pc, #88]	; (800a5c4 <xTaskRemoveFromEventList+0xb4>)
 800a56a:	6013      	str	r3, [r2, #0]
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a570:	4613      	mov	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4a13      	ldr	r2, [pc, #76]	; (800a5c8 <xTaskRemoveFromEventList+0xb8>)
 800a57a:	441a      	add	r2, r3
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	3304      	adds	r3, #4
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f7fe fce3 	bl	8008f4e <vListInsertEnd>
 800a588:	e005      	b.n	800a596 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	3318      	adds	r3, #24
 800a58e:	4619      	mov	r1, r3
 800a590:	480e      	ldr	r0, [pc, #56]	; (800a5cc <xTaskRemoveFromEventList+0xbc>)
 800a592:	f7fe fcdc 	bl	8008f4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a59a:	4b0d      	ldr	r3, [pc, #52]	; (800a5d0 <xTaskRemoveFromEventList+0xc0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d905      	bls.n	800a5b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5a8:	4b0a      	ldr	r3, [pc, #40]	; (800a5d4 <xTaskRemoveFromEventList+0xc4>)
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	e001      	b.n	800a5b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5b4:	697b      	ldr	r3, [r7, #20]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3718      	adds	r7, #24
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20001b28 	.word	0x20001b28
 800a5c4:	20001b08 	.word	0x20001b08
 800a5c8:	20001630 	.word	0x20001630
 800a5cc:	20001ac0 	.word	0x20001ac0
 800a5d0:	2000162c 	.word	0x2000162c
 800a5d4:	20001b14 	.word	0x20001b14

0800a5d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5e0:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <vTaskInternalSetTimeOutState+0x24>)
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5e8:	4b05      	ldr	r3, [pc, #20]	; (800a600 <vTaskInternalSetTimeOutState+0x28>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	605a      	str	r2, [r3, #4]
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	20001b18 	.word	0x20001b18
 800a600:	20001b04 	.word	0x20001b04

0800a604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b088      	sub	sp, #32
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	613b      	str	r3, [r7, #16]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10a      	bne.n	800a646 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	60fb      	str	r3, [r7, #12]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a646:	f000 fe8d 	bl	800b364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a64a:	4b1d      	ldr	r3, [pc, #116]	; (800a6c0 <xTaskCheckForTimeOut+0xbc>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a662:	d102      	bne.n	800a66a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a664:	2300      	movs	r3, #0
 800a666:	61fb      	str	r3, [r7, #28]
 800a668:	e023      	b.n	800a6b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	4b15      	ldr	r3, [pc, #84]	; (800a6c4 <xTaskCheckForTimeOut+0xc0>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d007      	beq.n	800a686 <xTaskCheckForTimeOut+0x82>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d302      	bcc.n	800a686 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a680:	2301      	movs	r3, #1
 800a682:	61fb      	str	r3, [r7, #28]
 800a684:	e015      	b.n	800a6b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d20b      	bcs.n	800a6a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	1ad2      	subs	r2, r2, r3
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff ff9b 	bl	800a5d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	61fb      	str	r3, [r7, #28]
 800a6a6:	e004      	b.n	800a6b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a6b2:	f000 fe87 	bl	800b3c4 <vPortExitCritical>

	return xReturn;
 800a6b6:	69fb      	ldr	r3, [r7, #28]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20001b04 	.word	0x20001b04
 800a6c4:	20001b18 	.word	0x20001b18

0800a6c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6cc:	4b03      	ldr	r3, [pc, #12]	; (800a6dc <vTaskMissedYield+0x14>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	601a      	str	r2, [r3, #0]
}
 800a6d2:	bf00      	nop
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	20001b14 	.word	0x20001b14

0800a6e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6e8:	f000 f852 	bl	800a790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6ec:	4b06      	ldr	r3, [pc, #24]	; (800a708 <prvIdleTask+0x28>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d9f9      	bls.n	800a6e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6f4:	4b05      	ldr	r3, [pc, #20]	; (800a70c <prvIdleTask+0x2c>)
 800a6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a704:	e7f0      	b.n	800a6e8 <prvIdleTask+0x8>
 800a706:	bf00      	nop
 800a708:	20001630 	.word	0x20001630
 800a70c:	e000ed04 	.word	0xe000ed04

0800a710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a716:	2300      	movs	r3, #0
 800a718:	607b      	str	r3, [r7, #4]
 800a71a:	e00c      	b.n	800a736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4a12      	ldr	r2, [pc, #72]	; (800a770 <prvInitialiseTaskLists+0x60>)
 800a728:	4413      	add	r3, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe fbe2 	bl	8008ef4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3301      	adds	r3, #1
 800a734:	607b      	str	r3, [r7, #4]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b37      	cmp	r3, #55	; 0x37
 800a73a:	d9ef      	bls.n	800a71c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a73c:	480d      	ldr	r0, [pc, #52]	; (800a774 <prvInitialiseTaskLists+0x64>)
 800a73e:	f7fe fbd9 	bl	8008ef4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a742:	480d      	ldr	r0, [pc, #52]	; (800a778 <prvInitialiseTaskLists+0x68>)
 800a744:	f7fe fbd6 	bl	8008ef4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a748:	480c      	ldr	r0, [pc, #48]	; (800a77c <prvInitialiseTaskLists+0x6c>)
 800a74a:	f7fe fbd3 	bl	8008ef4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a74e:	480c      	ldr	r0, [pc, #48]	; (800a780 <prvInitialiseTaskLists+0x70>)
 800a750:	f7fe fbd0 	bl	8008ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a754:	480b      	ldr	r0, [pc, #44]	; (800a784 <prvInitialiseTaskLists+0x74>)
 800a756:	f7fe fbcd 	bl	8008ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a75a:	4b0b      	ldr	r3, [pc, #44]	; (800a788 <prvInitialiseTaskLists+0x78>)
 800a75c:	4a05      	ldr	r2, [pc, #20]	; (800a774 <prvInitialiseTaskLists+0x64>)
 800a75e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <prvInitialiseTaskLists+0x7c>)
 800a762:	4a05      	ldr	r2, [pc, #20]	; (800a778 <prvInitialiseTaskLists+0x68>)
 800a764:	601a      	str	r2, [r3, #0]
}
 800a766:	bf00      	nop
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	20001630 	.word	0x20001630
 800a774:	20001a90 	.word	0x20001a90
 800a778:	20001aa4 	.word	0x20001aa4
 800a77c:	20001ac0 	.word	0x20001ac0
 800a780:	20001ad4 	.word	0x20001ad4
 800a784:	20001aec 	.word	0x20001aec
 800a788:	20001ab8 	.word	0x20001ab8
 800a78c:	20001abc 	.word	0x20001abc

0800a790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a796:	e019      	b.n	800a7cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a798:	f000 fde4 	bl	800b364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79c:	4b10      	ldr	r3, [pc, #64]	; (800a7e0 <prvCheckTasksWaitingTermination+0x50>)
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fe fc2d 	bl	8009008 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7ae:	4b0d      	ldr	r3, [pc, #52]	; (800a7e4 <prvCheckTasksWaitingTermination+0x54>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	4a0b      	ldr	r2, [pc, #44]	; (800a7e4 <prvCheckTasksWaitingTermination+0x54>)
 800a7b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7b8:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <prvCheckTasksWaitingTermination+0x58>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	4a0a      	ldr	r2, [pc, #40]	; (800a7e8 <prvCheckTasksWaitingTermination+0x58>)
 800a7c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7c2:	f000 fdff 	bl	800b3c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f810 	bl	800a7ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <prvCheckTasksWaitingTermination+0x58>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e1      	bne.n	800a798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	20001ad4 	.word	0x20001ad4
 800a7e4:	20001b00 	.word	0x20001b00
 800a7e8:	20001ae8 	.word	0x20001ae8

0800a7ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3354      	adds	r3, #84	; 0x54
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f001 f9a3 	bl	800bb44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a804:	2b00      	cmp	r3, #0
 800a806:	d108      	bne.n	800a81a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80c:	4618      	mov	r0, r3
 800a80e:	f000 ff97 	bl	800b740 <vPortFree>
				vPortFree( pxTCB );
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 ff94 	bl	800b740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a818:	e018      	b.n	800a84c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a820:	2b01      	cmp	r3, #1
 800a822:	d103      	bne.n	800a82c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 ff8b 	bl	800b740 <vPortFree>
	}
 800a82a:	e00f      	b.n	800a84c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a832:	2b02      	cmp	r3, #2
 800a834:	d00a      	beq.n	800a84c <prvDeleteTCB+0x60>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	60fb      	str	r3, [r7, #12]
}
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <prvDeleteTCB+0x5e>
	}
 800a84c:	bf00      	nop
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a85a:	4b0c      	ldr	r3, [pc, #48]	; (800a88c <prvResetNextTaskUnblockTime+0x38>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d104      	bne.n	800a86e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <prvResetNextTaskUnblockTime+0x3c>)
 800a866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a86a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a86c:	e008      	b.n	800a880 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a86e:	4b07      	ldr	r3, [pc, #28]	; (800a88c <prvResetNextTaskUnblockTime+0x38>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	4a04      	ldr	r2, [pc, #16]	; (800a890 <prvResetNextTaskUnblockTime+0x3c>)
 800a87e:	6013      	str	r3, [r2, #0]
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	20001ab8 	.word	0x20001ab8
 800a890:	20001b20 	.word	0x20001b20

0800a894 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a89a:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a8a0:	687b      	ldr	r3, [r7, #4]
	}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	370c      	adds	r7, #12
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	2000162c 	.word	0x2000162c

0800a8b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8ba:	4b0b      	ldr	r3, [pc, #44]	; (800a8e8 <xTaskGetSchedulerState+0x34>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d102      	bne.n	800a8c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	607b      	str	r3, [r7, #4]
 800a8c6:	e008      	b.n	800a8da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8c8:	4b08      	ldr	r3, [pc, #32]	; (800a8ec <xTaskGetSchedulerState+0x38>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	607b      	str	r3, [r7, #4]
 800a8d4:	e001      	b.n	800a8da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8da:	687b      	ldr	r3, [r7, #4]
	}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	20001b0c 	.word	0x20001b0c
 800a8ec:	20001b28 	.word	0x20001b28

0800a8f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d056      	beq.n	800a9b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a906:	4b2e      	ldr	r3, [pc, #184]	; (800a9c0 <xTaskPriorityDisinherit+0xd0>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d00a      	beq.n	800a926 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	60fb      	str	r3, [r7, #12]
}
 800a922:	bf00      	nop
 800a924:	e7fe      	b.n	800a924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10a      	bne.n	800a944 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	60bb      	str	r3, [r7, #8]
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a948:	1e5a      	subs	r2, r3, #1
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a956:	429a      	cmp	r2, r3
 800a958:	d02c      	beq.n	800a9b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d128      	bne.n	800a9b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	3304      	adds	r3, #4
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe fb4e 	bl	8009008 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a984:	4b0f      	ldr	r3, [pc, #60]	; (800a9c4 <xTaskPriorityDisinherit+0xd4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d903      	bls.n	800a994 <xTaskPriorityDisinherit+0xa4>
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a990:	4a0c      	ldr	r2, [pc, #48]	; (800a9c4 <xTaskPriorityDisinherit+0xd4>)
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a998:	4613      	mov	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4a09      	ldr	r2, [pc, #36]	; (800a9c8 <xTaskPriorityDisinherit+0xd8>)
 800a9a2:	441a      	add	r2, r3
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	f7fe facf 	bl	8008f4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9b4:	697b      	ldr	r3, [r7, #20]
	}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	2000162c 	.word	0x2000162c
 800a9c4:	20001b08 	.word	0x20001b08
 800a9c8:	20001630 	.word	0x20001630

0800a9cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9d6:	4b21      	ldr	r3, [pc, #132]	; (800aa5c <prvAddCurrentTaskToDelayedList+0x90>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9dc:	4b20      	ldr	r3, [pc, #128]	; (800aa60 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fe fb10 	bl	8009008 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ee:	d10a      	bne.n	800aa06 <prvAddCurrentTaskToDelayedList+0x3a>
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d007      	beq.n	800aa06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9f6:	4b1a      	ldr	r3, [pc, #104]	; (800aa60 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3304      	adds	r3, #4
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4819      	ldr	r0, [pc, #100]	; (800aa64 <prvAddCurrentTaskToDelayedList+0x98>)
 800aa00:	f7fe faa5 	bl	8008f4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa04:	e026      	b.n	800aa54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa0e:	4b14      	ldr	r3, [pc, #80]	; (800aa60 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d209      	bcs.n	800aa32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa1e:	4b12      	ldr	r3, [pc, #72]	; (800aa68 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	4b0f      	ldr	r3, [pc, #60]	; (800aa60 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3304      	adds	r3, #4
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	f7fe fab3 	bl	8008f96 <vListInsert>
}
 800aa30:	e010      	b.n	800aa54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa32:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f7fe faa9 	bl	8008f96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa44:	4b0a      	ldr	r3, [pc, #40]	; (800aa70 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d202      	bcs.n	800aa54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa4e:	4a08      	ldr	r2, [pc, #32]	; (800aa70 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	6013      	str	r3, [r2, #0]
}
 800aa54:	bf00      	nop
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	20001b04 	.word	0x20001b04
 800aa60:	2000162c 	.word	0x2000162c
 800aa64:	20001aec 	.word	0x20001aec
 800aa68:	20001abc 	.word	0x20001abc
 800aa6c:	20001ab8 	.word	0x20001ab8
 800aa70:	20001b20 	.word	0x20001b20

0800aa74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b08a      	sub	sp, #40	; 0x28
 800aa78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa7e:	f000 fb07 	bl	800b090 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa82:	4b1c      	ldr	r3, [pc, #112]	; (800aaf4 <xTimerCreateTimerTask+0x80>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d021      	beq.n	800aace <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa92:	1d3a      	adds	r2, r7, #4
 800aa94:	f107 0108 	add.w	r1, r7, #8
 800aa98:	f107 030c 	add.w	r3, r7, #12
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fe fa0f 	bl	8008ec0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	9202      	str	r2, [sp, #8]
 800aaaa:	9301      	str	r3, [sp, #4]
 800aaac:	2302      	movs	r3, #2
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	2300      	movs	r3, #0
 800aab2:	460a      	mov	r2, r1
 800aab4:	4910      	ldr	r1, [pc, #64]	; (800aaf8 <xTimerCreateTimerTask+0x84>)
 800aab6:	4811      	ldr	r0, [pc, #68]	; (800aafc <xTimerCreateTimerTask+0x88>)
 800aab8:	f7fe ffbc 	bl	8009a34 <xTaskCreateStatic>
 800aabc:	4603      	mov	r3, r0
 800aabe:	4a10      	ldr	r2, [pc, #64]	; (800ab00 <xTimerCreateTimerTask+0x8c>)
 800aac0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aac2:	4b0f      	ldr	r3, [pc, #60]	; (800ab00 <xTimerCreateTimerTask+0x8c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aaca:	2301      	movs	r3, #1
 800aacc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	613b      	str	r3, [r7, #16]
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aaea:	697b      	ldr	r3, [r7, #20]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3718      	adds	r7, #24
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	20001b5c 	.word	0x20001b5c
 800aaf8:	0800c49c 	.word	0x0800c49c
 800aafc:	0800ac39 	.word	0x0800ac39
 800ab00:	20001b60 	.word	0x20001b60

0800ab04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08a      	sub	sp, #40	; 0x28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10a      	bne.n	800ab32 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	623b      	str	r3, [r7, #32]
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab32:	4b1a      	ldr	r3, [pc, #104]	; (800ab9c <xTimerGenericCommand+0x98>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d02a      	beq.n	800ab90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b05      	cmp	r3, #5
 800ab4a:	dc18      	bgt.n	800ab7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab4c:	f7ff feb2 	bl	800a8b4 <xTaskGetSchedulerState>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d109      	bne.n	800ab6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab56:	4b11      	ldr	r3, [pc, #68]	; (800ab9c <xTimerGenericCommand+0x98>)
 800ab58:	6818      	ldr	r0, [r3, #0]
 800ab5a:	f107 0110 	add.w	r1, r7, #16
 800ab5e:	2300      	movs	r3, #0
 800ab60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab62:	f7fe fb7f 	bl	8009264 <xQueueGenericSend>
 800ab66:	6278      	str	r0, [r7, #36]	; 0x24
 800ab68:	e012      	b.n	800ab90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab6a:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <xTimerGenericCommand+0x98>)
 800ab6c:	6818      	ldr	r0, [r3, #0]
 800ab6e:	f107 0110 	add.w	r1, r7, #16
 800ab72:	2300      	movs	r3, #0
 800ab74:	2200      	movs	r2, #0
 800ab76:	f7fe fb75 	bl	8009264 <xQueueGenericSend>
 800ab7a:	6278      	str	r0, [r7, #36]	; 0x24
 800ab7c:	e008      	b.n	800ab90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab7e:	4b07      	ldr	r3, [pc, #28]	; (800ab9c <xTimerGenericCommand+0x98>)
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	f107 0110 	add.w	r1, r7, #16
 800ab86:	2300      	movs	r3, #0
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	f7fe fc69 	bl	8009460 <xQueueGenericSendFromISR>
 800ab8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3728      	adds	r7, #40	; 0x28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20001b5c 	.word	0x20001b5c

0800aba0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abaa:	4b22      	ldr	r3, [pc, #136]	; (800ac34 <prvProcessExpiredTimer+0x94>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	3304      	adds	r3, #4
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fe fa25 	bl	8009008 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abc4:	f003 0304 	and.w	r3, r3, #4
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d022      	beq.n	800ac12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	699a      	ldr	r2, [r3, #24]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	18d1      	adds	r1, r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	6978      	ldr	r0, [r7, #20]
 800abda:	f000 f8d1 	bl	800ad80 <prvInsertTimerInActiveList>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d01f      	beq.n	800ac24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abe4:	2300      	movs	r3, #0
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	2300      	movs	r3, #0
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	2100      	movs	r1, #0
 800abee:	6978      	ldr	r0, [r7, #20]
 800abf0:	f7ff ff88 	bl	800ab04 <xTimerGenericCommand>
 800abf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d113      	bne.n	800ac24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	60fb      	str	r3, [r7, #12]
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac18:	f023 0301 	bic.w	r3, r3, #1
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	6978      	ldr	r0, [r7, #20]
 800ac2a:	4798      	blx	r3
}
 800ac2c:	bf00      	nop
 800ac2e:	3718      	adds	r7, #24
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	20001b54 	.word	0x20001b54

0800ac38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac40:	f107 0308 	add.w	r3, r7, #8
 800ac44:	4618      	mov	r0, r3
 800ac46:	f000 f857 	bl	800acf8 <prvGetNextExpireTime>
 800ac4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f803 	bl	800ac5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac56:	f000 f8d5 	bl	800ae04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac5a:	e7f1      	b.n	800ac40 <prvTimerTask+0x8>

0800ac5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac66:	f7ff fa29 	bl	800a0bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac6a:	f107 0308 	add.w	r3, r7, #8
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 f866 	bl	800ad40 <prvSampleTimeNow>
 800ac74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d130      	bne.n	800acde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10a      	bne.n	800ac98 <prvProcessTimerOrBlockTask+0x3c>
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d806      	bhi.n	800ac98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac8a:	f7ff fa25 	bl	800a0d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac8e:	68f9      	ldr	r1, [r7, #12]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff ff85 	bl	800aba0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac96:	e024      	b.n	800ace2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d008      	beq.n	800acb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac9e:	4b13      	ldr	r3, [pc, #76]	; (800acec <prvProcessTimerOrBlockTask+0x90>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <prvProcessTimerOrBlockTask+0x50>
 800aca8:	2301      	movs	r3, #1
 800acaa:	e000      	b.n	800acae <prvProcessTimerOrBlockTask+0x52>
 800acac:	2300      	movs	r3, #0
 800acae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800acb0:	4b0f      	ldr	r3, [pc, #60]	; (800acf0 <prvProcessTimerOrBlockTask+0x94>)
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	4619      	mov	r1, r3
 800acbe:	f7fe fe85 	bl	80099cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800acc2:	f7ff fa09 	bl	800a0d8 <xTaskResumeAll>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800accc:	4b09      	ldr	r3, [pc, #36]	; (800acf4 <prvProcessTimerOrBlockTask+0x98>)
 800acce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	f3bf 8f6f 	isb	sy
}
 800acdc:	e001      	b.n	800ace2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800acde:	f7ff f9fb 	bl	800a0d8 <xTaskResumeAll>
}
 800ace2:	bf00      	nop
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	20001b58 	.word	0x20001b58
 800acf0:	20001b5c 	.word	0x20001b5c
 800acf4:	e000ed04 	.word	0xe000ed04

0800acf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad00:	4b0e      	ldr	r3, [pc, #56]	; (800ad3c <prvGetNextExpireTime+0x44>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <prvGetNextExpireTime+0x16>
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	e000      	b.n	800ad10 <prvGetNextExpireTime+0x18>
 800ad0e:	2200      	movs	r2, #0
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d105      	bne.n	800ad28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad1c:	4b07      	ldr	r3, [pc, #28]	; (800ad3c <prvGetNextExpireTime+0x44>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	e001      	b.n	800ad2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	20001b54 	.word	0x20001b54

0800ad40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad48:	f7ff fa64 	bl	800a214 <xTaskGetTickCount>
 800ad4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad4e:	4b0b      	ldr	r3, [pc, #44]	; (800ad7c <prvSampleTimeNow+0x3c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d205      	bcs.n	800ad64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad58:	f000 f936 	bl	800afc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	e002      	b.n	800ad6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad6a:	4a04      	ldr	r2, [pc, #16]	; (800ad7c <prvSampleTimeNow+0x3c>)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad70:	68fb      	ldr	r3, [r7, #12]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20001b64 	.word	0x20001b64

0800ad80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d812      	bhi.n	800adcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	1ad2      	subs	r2, r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d302      	bcc.n	800adba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800adb4:	2301      	movs	r3, #1
 800adb6:	617b      	str	r3, [r7, #20]
 800adb8:	e01b      	b.n	800adf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800adba:	4b10      	ldr	r3, [pc, #64]	; (800adfc <prvInsertTimerInActiveList+0x7c>)
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f7fe f8e6 	bl	8008f96 <vListInsert>
 800adca:	e012      	b.n	800adf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	429a      	cmp	r2, r3
 800add2:	d206      	bcs.n	800ade2 <prvInsertTimerInActiveList+0x62>
 800add4:	68ba      	ldr	r2, [r7, #8]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	429a      	cmp	r2, r3
 800adda:	d302      	bcc.n	800ade2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800addc:	2301      	movs	r3, #1
 800adde:	617b      	str	r3, [r7, #20]
 800ade0:	e007      	b.n	800adf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ade2:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <prvInsertTimerInActiveList+0x80>)
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3304      	adds	r3, #4
 800adea:	4619      	mov	r1, r3
 800adec:	4610      	mov	r0, r2
 800adee:	f7fe f8d2 	bl	8008f96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800adf2:	697b      	ldr	r3, [r7, #20]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3718      	adds	r7, #24
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	20001b58 	.word	0x20001b58
 800ae00:	20001b54 	.word	0x20001b54

0800ae04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08e      	sub	sp, #56	; 0x38
 800ae08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae0a:	e0ca      	b.n	800afa2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	da18      	bge.n	800ae44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae12:	1d3b      	adds	r3, r7, #4
 800ae14:	3304      	adds	r3, #4
 800ae16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10a      	bne.n	800ae34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	61fb      	str	r3, [r7, #28]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae3a:	6850      	ldr	r0, [r2, #4]
 800ae3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae3e:	6892      	ldr	r2, [r2, #8]
 800ae40:	4611      	mov	r1, r2
 800ae42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f2c0 80aa 	blt.w	800afa0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d004      	beq.n	800ae62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe f8d3 	bl	8009008 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae62:	463b      	mov	r3, r7
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7ff ff6b 	bl	800ad40 <prvSampleTimeNow>
 800ae6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b09      	cmp	r3, #9
 800ae70:	f200 8097 	bhi.w	800afa2 <prvProcessReceivedCommands+0x19e>
 800ae74:	a201      	add	r2, pc, #4	; (adr r2, 800ae7c <prvProcessReceivedCommands+0x78>)
 800ae76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7a:	bf00      	nop
 800ae7c:	0800aea5 	.word	0x0800aea5
 800ae80:	0800aea5 	.word	0x0800aea5
 800ae84:	0800aea5 	.word	0x0800aea5
 800ae88:	0800af19 	.word	0x0800af19
 800ae8c:	0800af2d 	.word	0x0800af2d
 800ae90:	0800af77 	.word	0x0800af77
 800ae94:	0800aea5 	.word	0x0800aea5
 800ae98:	0800aea5 	.word	0x0800aea5
 800ae9c:	0800af19 	.word	0x0800af19
 800aea0:	0800af2d 	.word	0x0800af2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeaa:	f043 0301 	orr.w	r3, r3, #1
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	18d1      	adds	r1, r2, r3
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aec4:	f7ff ff5c 	bl	800ad80 <prvInsertTimerInActiveList>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d069      	beq.n	800afa2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aed4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d05e      	beq.n	800afa2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	441a      	add	r2, r3
 800aeec:	2300      	movs	r3, #0
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	2300      	movs	r3, #0
 800aef2:	2100      	movs	r1, #0
 800aef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aef6:	f7ff fe05 	bl	800ab04 <xTimerGenericCommand>
 800aefa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d14f      	bne.n	800afa2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	61bb      	str	r3, [r7, #24]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af1e:	f023 0301 	bic.w	r3, r3, #1
 800af22:	b2da      	uxtb	r2, r3
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800af2a:	e03a      	b.n	800afa2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af32:	f043 0301 	orr.w	r3, r3, #1
 800af36:	b2da      	uxtb	r2, r3
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10a      	bne.n	800af62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	617b      	str	r3, [r7, #20]
}
 800af5e:	bf00      	nop
 800af60:	e7fe      	b.n	800af60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	699a      	ldr	r2, [r3, #24]
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	18d1      	adds	r1, r2, r3
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af70:	f7ff ff06 	bl	800ad80 <prvInsertTimerInActiveList>
					break;
 800af74:	e015      	b.n	800afa2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af7c:	f003 0302 	and.w	r3, r3, #2
 800af80:	2b00      	cmp	r3, #0
 800af82:	d103      	bne.n	800af8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800af84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af86:	f000 fbdb 	bl	800b740 <vPortFree>
 800af8a:	e00a      	b.n	800afa2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af92:	f023 0301 	bic.w	r3, r3, #1
 800af96:	b2da      	uxtb	r2, r3
 800af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af9e:	e000      	b.n	800afa2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800afa0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afa2:	4b08      	ldr	r3, [pc, #32]	; (800afc4 <prvProcessReceivedCommands+0x1c0>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	1d39      	adds	r1, r7, #4
 800afa8:	2200      	movs	r2, #0
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fe faf4 	bl	8009598 <xQueueReceive>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f47f af2a 	bne.w	800ae0c <prvProcessReceivedCommands+0x8>
	}
}
 800afb8:	bf00      	nop
 800afba:	bf00      	nop
 800afbc:	3730      	adds	r7, #48	; 0x30
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	20001b5c 	.word	0x20001b5c

0800afc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afce:	e048      	b.n	800b062 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afd0:	4b2d      	ldr	r3, [pc, #180]	; (800b088 <prvSwitchTimerLists+0xc0>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afda:	4b2b      	ldr	r3, [pc, #172]	; (800b088 <prvSwitchTimerLists+0xc0>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3304      	adds	r3, #4
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fe f80d 	bl	8009008 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800affc:	f003 0304 	and.w	r3, r3, #4
 800b000:	2b00      	cmp	r3, #0
 800b002:	d02e      	beq.n	800b062 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	4413      	add	r3, r2
 800b00c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	429a      	cmp	r2, r3
 800b014:	d90e      	bls.n	800b034 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b022:	4b19      	ldr	r3, [pc, #100]	; (800b088 <prvSwitchTimerLists+0xc0>)
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3304      	adds	r3, #4
 800b02a:	4619      	mov	r1, r3
 800b02c:	4610      	mov	r0, r2
 800b02e:	f7fd ffb2 	bl	8008f96 <vListInsert>
 800b032:	e016      	b.n	800b062 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b034:	2300      	movs	r3, #0
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	2300      	movs	r3, #0
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	2100      	movs	r1, #0
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff fd60 	bl	800ab04 <xTimerGenericCommand>
 800b044:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	603b      	str	r3, [r7, #0]
}
 800b05e:	bf00      	nop
 800b060:	e7fe      	b.n	800b060 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b062:	4b09      	ldr	r3, [pc, #36]	; (800b088 <prvSwitchTimerLists+0xc0>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1b1      	bne.n	800afd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b06c:	4b06      	ldr	r3, [pc, #24]	; (800b088 <prvSwitchTimerLists+0xc0>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b072:	4b06      	ldr	r3, [pc, #24]	; (800b08c <prvSwitchTimerLists+0xc4>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a04      	ldr	r2, [pc, #16]	; (800b088 <prvSwitchTimerLists+0xc0>)
 800b078:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b07a:	4a04      	ldr	r2, [pc, #16]	; (800b08c <prvSwitchTimerLists+0xc4>)
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	6013      	str	r3, [r2, #0]
}
 800b080:	bf00      	nop
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20001b54 	.word	0x20001b54
 800b08c:	20001b58 	.word	0x20001b58

0800b090 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b096:	f000 f965 	bl	800b364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b09a:	4b15      	ldr	r3, [pc, #84]	; (800b0f0 <prvCheckForValidListAndQueue+0x60>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d120      	bne.n	800b0e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b0a2:	4814      	ldr	r0, [pc, #80]	; (800b0f4 <prvCheckForValidListAndQueue+0x64>)
 800b0a4:	f7fd ff26 	bl	8008ef4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b0a8:	4813      	ldr	r0, [pc, #76]	; (800b0f8 <prvCheckForValidListAndQueue+0x68>)
 800b0aa:	f7fd ff23 	bl	8008ef4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0ae:	4b13      	ldr	r3, [pc, #76]	; (800b0fc <prvCheckForValidListAndQueue+0x6c>)
 800b0b0:	4a10      	ldr	r2, [pc, #64]	; (800b0f4 <prvCheckForValidListAndQueue+0x64>)
 800b0b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b0b4:	4b12      	ldr	r3, [pc, #72]	; (800b100 <prvCheckForValidListAndQueue+0x70>)
 800b0b6:	4a10      	ldr	r2, [pc, #64]	; (800b0f8 <prvCheckForValidListAndQueue+0x68>)
 800b0b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	4b11      	ldr	r3, [pc, #68]	; (800b104 <prvCheckForValidListAndQueue+0x74>)
 800b0c0:	4a11      	ldr	r2, [pc, #68]	; (800b108 <prvCheckForValidListAndQueue+0x78>)
 800b0c2:	2110      	movs	r1, #16
 800b0c4:	200a      	movs	r0, #10
 800b0c6:	f7fe f831 	bl	800912c <xQueueGenericCreateStatic>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	4a08      	ldr	r2, [pc, #32]	; (800b0f0 <prvCheckForValidListAndQueue+0x60>)
 800b0ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b0d0:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <prvCheckForValidListAndQueue+0x60>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b0d8:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <prvCheckForValidListAndQueue+0x60>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	490b      	ldr	r1, [pc, #44]	; (800b10c <prvCheckForValidListAndQueue+0x7c>)
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe fc4a 	bl	8009978 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0e4:	f000 f96e 	bl	800b3c4 <vPortExitCritical>
}
 800b0e8:	bf00      	nop
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20001b5c 	.word	0x20001b5c
 800b0f4:	20001b2c 	.word	0x20001b2c
 800b0f8:	20001b40 	.word	0x20001b40
 800b0fc:	20001b54 	.word	0x20001b54
 800b100:	20001b58 	.word	0x20001b58
 800b104:	20001c08 	.word	0x20001c08
 800b108:	20001b68 	.word	0x20001b68
 800b10c:	0800c4a4 	.word	0x0800c4a4

0800b110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3b04      	subs	r3, #4
 800b120:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3b04      	subs	r3, #4
 800b12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	f023 0201 	bic.w	r2, r3, #1
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3b04      	subs	r3, #4
 800b13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b140:	4a0c      	ldr	r2, [pc, #48]	; (800b174 <pxPortInitialiseStack+0x64>)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	3b14      	subs	r3, #20
 800b14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3b04      	subs	r3, #4
 800b156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f06f 0202 	mvn.w	r2, #2
 800b15e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3b20      	subs	r3, #32
 800b164:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b166:	68fb      	ldr	r3, [r7, #12]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	0800b179 	.word	0x0800b179

0800b178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b182:	4b12      	ldr	r3, [pc, #72]	; (800b1cc <prvTaskExitError+0x54>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b18a:	d00a      	beq.n	800b1a2 <prvTaskExitError+0x2a>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	60fb      	str	r3, [r7, #12]
}
 800b19e:	bf00      	nop
 800b1a0:	e7fe      	b.n	800b1a0 <prvTaskExitError+0x28>
	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	60bb      	str	r3, [r7, #8]
}
 800b1b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1b6:	bf00      	nop
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0fc      	beq.n	800b1b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1be:	bf00      	nop
 800b1c0:	bf00      	nop
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	20000024 	.word	0x20000024

0800b1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b1d0:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <pxCurrentTCBConst2>)
 800b1d2:	6819      	ldr	r1, [r3, #0]
 800b1d4:	6808      	ldr	r0, [r1, #0]
 800b1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1da:	f380 8809 	msr	PSP, r0
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f04f 0000 	mov.w	r0, #0
 800b1e6:	f380 8811 	msr	BASEPRI, r0
 800b1ea:	4770      	bx	lr
 800b1ec:	f3af 8000 	nop.w

0800b1f0 <pxCurrentTCBConst2>:
 800b1f0:	2000162c 	.word	0x2000162c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop

0800b1f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1f8:	4808      	ldr	r0, [pc, #32]	; (800b21c <prvPortStartFirstTask+0x24>)
 800b1fa:	6800      	ldr	r0, [r0, #0]
 800b1fc:	6800      	ldr	r0, [r0, #0]
 800b1fe:	f380 8808 	msr	MSP, r0
 800b202:	f04f 0000 	mov.w	r0, #0
 800b206:	f380 8814 	msr	CONTROL, r0
 800b20a:	b662      	cpsie	i
 800b20c:	b661      	cpsie	f
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	df00      	svc	0
 800b218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b21a:	bf00      	nop
 800b21c:	e000ed08 	.word	0xe000ed08

0800b220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b226:	4b46      	ldr	r3, [pc, #280]	; (800b340 <xPortStartScheduler+0x120>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a46      	ldr	r2, [pc, #280]	; (800b344 <xPortStartScheduler+0x124>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d10a      	bne.n	800b246 <xPortStartScheduler+0x26>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	613b      	str	r3, [r7, #16]
}
 800b242:	bf00      	nop
 800b244:	e7fe      	b.n	800b244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b246:	4b3e      	ldr	r3, [pc, #248]	; (800b340 <xPortStartScheduler+0x120>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a3f      	ldr	r2, [pc, #252]	; (800b348 <xPortStartScheduler+0x128>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d10a      	bne.n	800b266 <xPortStartScheduler+0x46>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	60fb      	str	r3, [r7, #12]
}
 800b262:	bf00      	nop
 800b264:	e7fe      	b.n	800b264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b266:	4b39      	ldr	r3, [pc, #228]	; (800b34c <xPortStartScheduler+0x12c>)
 800b268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	22ff      	movs	r2, #255	; 0xff
 800b276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b280:	78fb      	ldrb	r3, [r7, #3]
 800b282:	b2db      	uxtb	r3, r3
 800b284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	4b31      	ldr	r3, [pc, #196]	; (800b350 <xPortStartScheduler+0x130>)
 800b28c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b28e:	4b31      	ldr	r3, [pc, #196]	; (800b354 <xPortStartScheduler+0x134>)
 800b290:	2207      	movs	r2, #7
 800b292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b294:	e009      	b.n	800b2aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b296:	4b2f      	ldr	r3, [pc, #188]	; (800b354 <xPortStartScheduler+0x134>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3b01      	subs	r3, #1
 800b29c:	4a2d      	ldr	r2, [pc, #180]	; (800b354 <xPortStartScheduler+0x134>)
 800b29e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2a0:	78fb      	ldrb	r3, [r7, #3]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2aa:	78fb      	ldrb	r3, [r7, #3]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b2:	2b80      	cmp	r3, #128	; 0x80
 800b2b4:	d0ef      	beq.n	800b296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2b6:	4b27      	ldr	r3, [pc, #156]	; (800b354 <xPortStartScheduler+0x134>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f1c3 0307 	rsb	r3, r3, #7
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	d00a      	beq.n	800b2d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	60bb      	str	r3, [r7, #8]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2d8:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <xPortStartScheduler+0x134>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	4a1d      	ldr	r2, [pc, #116]	; (800b354 <xPortStartScheduler+0x134>)
 800b2e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2e2:	4b1c      	ldr	r3, [pc, #112]	; (800b354 <xPortStartScheduler+0x134>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2ea:	4a1a      	ldr	r2, [pc, #104]	; (800b354 <xPortStartScheduler+0x134>)
 800b2ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2f6:	4b18      	ldr	r3, [pc, #96]	; (800b358 <xPortStartScheduler+0x138>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a17      	ldr	r2, [pc, #92]	; (800b358 <xPortStartScheduler+0x138>)
 800b2fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <xPortStartScheduler+0x138>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a14      	ldr	r2, [pc, #80]	; (800b358 <xPortStartScheduler+0x138>)
 800b308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b30c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b30e:	f000 f8dd 	bl	800b4cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b312:	4b12      	ldr	r3, [pc, #72]	; (800b35c <xPortStartScheduler+0x13c>)
 800b314:	2200      	movs	r2, #0
 800b316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b318:	f000 f8fc 	bl	800b514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b31c:	4b10      	ldr	r3, [pc, #64]	; (800b360 <xPortStartScheduler+0x140>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a0f      	ldr	r2, [pc, #60]	; (800b360 <xPortStartScheduler+0x140>)
 800b322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b328:	f7ff ff66 	bl	800b1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b32c:	f7ff f83c 	bl	800a3a8 <vTaskSwitchContext>
	prvTaskExitError();
 800b330:	f7ff ff22 	bl	800b178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	e000ed00 	.word	0xe000ed00
 800b344:	410fc271 	.word	0x410fc271
 800b348:	410fc270 	.word	0x410fc270
 800b34c:	e000e400 	.word	0xe000e400
 800b350:	20001c58 	.word	0x20001c58
 800b354:	20001c5c 	.word	0x20001c5c
 800b358:	e000ed20 	.word	0xe000ed20
 800b35c:	20000024 	.word	0x20000024
 800b360:	e000ef34 	.word	0xe000ef34

0800b364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	607b      	str	r3, [r7, #4]
}
 800b37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b37e:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <vPortEnterCritical+0x58>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3301      	adds	r3, #1
 800b384:	4a0d      	ldr	r2, [pc, #52]	; (800b3bc <vPortEnterCritical+0x58>)
 800b386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b388:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <vPortEnterCritical+0x58>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d10f      	bne.n	800b3b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b390:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <vPortEnterCritical+0x5c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	603b      	str	r3, [r7, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <vPortEnterCritical+0x4a>
	}
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	20000024 	.word	0x20000024
 800b3c0:	e000ed04 	.word	0xe000ed04

0800b3c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3ca:	4b12      	ldr	r3, [pc, #72]	; (800b414 <vPortExitCritical+0x50>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10a      	bne.n	800b3e8 <vPortExitCritical+0x24>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	607b      	str	r3, [r7, #4]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <vPortExitCritical+0x50>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	4a09      	ldr	r2, [pc, #36]	; (800b414 <vPortExitCritical+0x50>)
 800b3f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3f2:	4b08      	ldr	r3, [pc, #32]	; (800b414 <vPortExitCritical+0x50>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d105      	bne.n	800b406 <vPortExitCritical+0x42>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	f383 8811 	msr	BASEPRI, r3
}
 800b404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b406:	bf00      	nop
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	20000024 	.word	0x20000024
	...

0800b420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b420:	f3ef 8009 	mrs	r0, PSP
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	4b15      	ldr	r3, [pc, #84]	; (800b480 <pxCurrentTCBConst>)
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	f01e 0f10 	tst.w	lr, #16
 800b430:	bf08      	it	eq
 800b432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43a:	6010      	str	r0, [r2, #0]
 800b43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b440:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b444:	f380 8811 	msr	BASEPRI, r0
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f7fe ffaa 	bl	800a3a8 <vTaskSwitchContext>
 800b454:	f04f 0000 	mov.w	r0, #0
 800b458:	f380 8811 	msr	BASEPRI, r0
 800b45c:	bc09      	pop	{r0, r3}
 800b45e:	6819      	ldr	r1, [r3, #0]
 800b460:	6808      	ldr	r0, [r1, #0]
 800b462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b466:	f01e 0f10 	tst.w	lr, #16
 800b46a:	bf08      	it	eq
 800b46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b470:	f380 8809 	msr	PSP, r0
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	f3af 8000 	nop.w

0800b480 <pxCurrentTCBConst>:
 800b480:	2000162c 	.word	0x2000162c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop

0800b488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	607b      	str	r3, [r7, #4]
}
 800b4a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4a2:	f7fe fec7 	bl	800a234 <xTaskIncrementTick>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4ac:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <xPortSysTickHandler+0x40>)
 800b4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	f383 8811 	msr	BASEPRI, r3
}
 800b4be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4c0:	bf00      	nop
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	e000ed04 	.word	0xe000ed04

0800b4cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4d0:	4b0b      	ldr	r3, [pc, #44]	; (800b500 <vPortSetupTimerInterrupt+0x34>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4d6:	4b0b      	ldr	r3, [pc, #44]	; (800b504 <vPortSetupTimerInterrupt+0x38>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <vPortSetupTimerInterrupt+0x3c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a0a      	ldr	r2, [pc, #40]	; (800b50c <vPortSetupTimerInterrupt+0x40>)
 800b4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e6:	099b      	lsrs	r3, r3, #6
 800b4e8:	4a09      	ldr	r2, [pc, #36]	; (800b510 <vPortSetupTimerInterrupt+0x44>)
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4ee:	4b04      	ldr	r3, [pc, #16]	; (800b500 <vPortSetupTimerInterrupt+0x34>)
 800b4f0:	2207      	movs	r2, #7
 800b4f2:	601a      	str	r2, [r3, #0]
}
 800b4f4:	bf00      	nop
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	e000e010 	.word	0xe000e010
 800b504:	e000e018 	.word	0xe000e018
 800b508:	20000000 	.word	0x20000000
 800b50c:	10624dd3 	.word	0x10624dd3
 800b510:	e000e014 	.word	0xe000e014

0800b514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b524 <vPortEnableVFP+0x10>
 800b518:	6801      	ldr	r1, [r0, #0]
 800b51a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b51e:	6001      	str	r1, [r0, #0]
 800b520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b522:	bf00      	nop
 800b524:	e000ed88 	.word	0xe000ed88

0800b528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b52e:	f3ef 8305 	mrs	r3, IPSR
 800b532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b0f      	cmp	r3, #15
 800b538:	d914      	bls.n	800b564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b53a:	4a17      	ldr	r2, [pc, #92]	; (800b598 <vPortValidateInterruptPriority+0x70>)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4413      	add	r3, r2
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b544:	4b15      	ldr	r3, [pc, #84]	; (800b59c <vPortValidateInterruptPriority+0x74>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	7afa      	ldrb	r2, [r7, #11]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d20a      	bcs.n	800b564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	607b      	str	r3, [r7, #4]
}
 800b560:	bf00      	nop
 800b562:	e7fe      	b.n	800b562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b564:	4b0e      	ldr	r3, [pc, #56]	; (800b5a0 <vPortValidateInterruptPriority+0x78>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b56c:	4b0d      	ldr	r3, [pc, #52]	; (800b5a4 <vPortValidateInterruptPriority+0x7c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	429a      	cmp	r2, r3
 800b572:	d90a      	bls.n	800b58a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	603b      	str	r3, [r7, #0]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <vPortValidateInterruptPriority+0x60>
	}
 800b58a:	bf00      	nop
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	e000e3f0 	.word	0xe000e3f0
 800b59c:	20001c58 	.word	0x20001c58
 800b5a0:	e000ed0c 	.word	0xe000ed0c
 800b5a4:	20001c5c 	.word	0x20001c5c

0800b5a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	; 0x28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5b4:	f7fe fd82 	bl	800a0bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5b8:	4b5b      	ldr	r3, [pc, #364]	; (800b728 <pvPortMalloc+0x180>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5c0:	f000 f920 	bl	800b804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5c4:	4b59      	ldr	r3, [pc, #356]	; (800b72c <pvPortMalloc+0x184>)
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f040 8093 	bne.w	800b6f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d01d      	beq.n	800b614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b5d8:	2208      	movs	r2, #8
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4413      	add	r3, r2
 800b5de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f003 0307 	and.w	r3, r3, #7
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d014      	beq.n	800b614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f023 0307 	bic.w	r3, r3, #7
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00a      	beq.n	800b614 <pvPortMalloc+0x6c>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	617b      	str	r3, [r7, #20]
}
 800b610:	bf00      	nop
 800b612:	e7fe      	b.n	800b612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d06e      	beq.n	800b6f8 <pvPortMalloc+0x150>
 800b61a:	4b45      	ldr	r3, [pc, #276]	; (800b730 <pvPortMalloc+0x188>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	429a      	cmp	r2, r3
 800b622:	d869      	bhi.n	800b6f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b624:	4b43      	ldr	r3, [pc, #268]	; (800b734 <pvPortMalloc+0x18c>)
 800b626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b628:	4b42      	ldr	r3, [pc, #264]	; (800b734 <pvPortMalloc+0x18c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b62e:	e004      	b.n	800b63a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	d903      	bls.n	800b64c <pvPortMalloc+0xa4>
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1f1      	bne.n	800b630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b64c:	4b36      	ldr	r3, [pc, #216]	; (800b728 <pvPortMalloc+0x180>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b652:	429a      	cmp	r2, r3
 800b654:	d050      	beq.n	800b6f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2208      	movs	r2, #8
 800b65c:	4413      	add	r3, r2
 800b65e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	685a      	ldr	r2, [r3, #4]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	1ad2      	subs	r2, r2, r3
 800b670:	2308      	movs	r3, #8
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	429a      	cmp	r2, r3
 800b676:	d91f      	bls.n	800b6b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4413      	add	r3, r2
 800b67e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	f003 0307 	and.w	r3, r3, #7
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <pvPortMalloc+0xf8>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	613b      	str	r3, [r7, #16]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	685a      	ldr	r2, [r3, #4]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	1ad2      	subs	r2, r2, r3
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6b2:	69b8      	ldr	r0, [r7, #24]
 800b6b4:	f000 f908 	bl	800b8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6b8:	4b1d      	ldr	r3, [pc, #116]	; (800b730 <pvPortMalloc+0x188>)
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	4a1b      	ldr	r2, [pc, #108]	; (800b730 <pvPortMalloc+0x188>)
 800b6c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6c6:	4b1a      	ldr	r3, [pc, #104]	; (800b730 <pvPortMalloc+0x188>)
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	4b1b      	ldr	r3, [pc, #108]	; (800b738 <pvPortMalloc+0x190>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d203      	bcs.n	800b6da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6d2:	4b17      	ldr	r3, [pc, #92]	; (800b730 <pvPortMalloc+0x188>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a18      	ldr	r2, [pc, #96]	; (800b738 <pvPortMalloc+0x190>)
 800b6d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	4b13      	ldr	r3, [pc, #76]	; (800b72c <pvPortMalloc+0x184>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	431a      	orrs	r2, r3
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6ee:	4b13      	ldr	r3, [pc, #76]	; (800b73c <pvPortMalloc+0x194>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	4a11      	ldr	r2, [pc, #68]	; (800b73c <pvPortMalloc+0x194>)
 800b6f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6f8:	f7fe fcee 	bl	800a0d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	f003 0307 	and.w	r3, r3, #7
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00a      	beq.n	800b71c <pvPortMalloc+0x174>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	60fb      	str	r3, [r7, #12]
}
 800b718:	bf00      	nop
 800b71a:	e7fe      	b.n	800b71a <pvPortMalloc+0x172>
	return pvReturn;
 800b71c:	69fb      	ldr	r3, [r7, #28]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3728      	adds	r7, #40	; 0x28
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20002868 	.word	0x20002868
 800b72c:	2000287c 	.word	0x2000287c
 800b730:	2000286c 	.word	0x2000286c
 800b734:	20002860 	.word	0x20002860
 800b738:	20002870 	.word	0x20002870
 800b73c:	20002874 	.word	0x20002874

0800b740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d04d      	beq.n	800b7ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b752:	2308      	movs	r3, #8
 800b754:	425b      	negs	r3, r3
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	4413      	add	r3, r2
 800b75a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	4b24      	ldr	r3, [pc, #144]	; (800b7f8 <vPortFree+0xb8>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4013      	ands	r3, r2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10a      	bne.n	800b784 <vPortFree+0x44>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	60fb      	str	r3, [r7, #12]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00a      	beq.n	800b7a2 <vPortFree+0x62>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	60bb      	str	r3, [r7, #8]
}
 800b79e:	bf00      	nop
 800b7a0:	e7fe      	b.n	800b7a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	4b14      	ldr	r3, [pc, #80]	; (800b7f8 <vPortFree+0xb8>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d01e      	beq.n	800b7ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d11a      	bne.n	800b7ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	4b0e      	ldr	r3, [pc, #56]	; (800b7f8 <vPortFree+0xb8>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	43db      	mvns	r3, r3
 800b7c2:	401a      	ands	r2, r3
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7c8:	f7fe fc78 	bl	800a0bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	4b0a      	ldr	r3, [pc, #40]	; (800b7fc <vPortFree+0xbc>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	4a09      	ldr	r2, [pc, #36]	; (800b7fc <vPortFree+0xbc>)
 800b7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7da:	6938      	ldr	r0, [r7, #16]
 800b7dc:	f000 f874 	bl	800b8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7e0:	4b07      	ldr	r3, [pc, #28]	; (800b800 <vPortFree+0xc0>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4a06      	ldr	r2, [pc, #24]	; (800b800 <vPortFree+0xc0>)
 800b7e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7ea:	f7fe fc75 	bl	800a0d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7ee:	bf00      	nop
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	2000287c 	.word	0x2000287c
 800b7fc:	2000286c 	.word	0x2000286c
 800b800:	20002878 	.word	0x20002878

0800b804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b80a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b810:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <prvHeapInit+0xac>)
 800b812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00c      	beq.n	800b838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3307      	adds	r3, #7
 800b822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f023 0307 	bic.w	r3, r3, #7
 800b82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	4a1f      	ldr	r2, [pc, #124]	; (800b8b0 <prvHeapInit+0xac>)
 800b834:	4413      	add	r3, r2
 800b836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b83c:	4a1d      	ldr	r2, [pc, #116]	; (800b8b4 <prvHeapInit+0xb0>)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b842:	4b1c      	ldr	r3, [pc, #112]	; (800b8b4 <prvHeapInit+0xb0>)
 800b844:	2200      	movs	r2, #0
 800b846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	4413      	add	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b850:	2208      	movs	r2, #8
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	1a9b      	subs	r3, r3, r2
 800b856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f023 0307 	bic.w	r3, r3, #7
 800b85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4a15      	ldr	r2, [pc, #84]	; (800b8b8 <prvHeapInit+0xb4>)
 800b864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b866:	4b14      	ldr	r3, [pc, #80]	; (800b8b8 <prvHeapInit+0xb4>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2200      	movs	r2, #0
 800b86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b86e:	4b12      	ldr	r3, [pc, #72]	; (800b8b8 <prvHeapInit+0xb4>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	1ad2      	subs	r2, r2, r3
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b884:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <prvHeapInit+0xb4>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	4a0a      	ldr	r2, [pc, #40]	; (800b8bc <prvHeapInit+0xb8>)
 800b892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	4a09      	ldr	r2, [pc, #36]	; (800b8c0 <prvHeapInit+0xbc>)
 800b89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b89c:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <prvHeapInit+0xc0>)
 800b89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8a2:	601a      	str	r2, [r3, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	20001c60 	.word	0x20001c60
 800b8b4:	20002860 	.word	0x20002860
 800b8b8:	20002868 	.word	0x20002868
 800b8bc:	20002870 	.word	0x20002870
 800b8c0:	2000286c 	.word	0x2000286c
 800b8c4:	2000287c 	.word	0x2000287c

0800b8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8d0:	4b28      	ldr	r3, [pc, #160]	; (800b974 <prvInsertBlockIntoFreeList+0xac>)
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	e002      	b.n	800b8dc <prvInsertBlockIntoFreeList+0x14>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d8f7      	bhi.n	800b8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d108      	bne.n	800b90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	441a      	add	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	441a      	add	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d118      	bne.n	800b950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	4b15      	ldr	r3, [pc, #84]	; (800b978 <prvInsertBlockIntoFreeList+0xb0>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d00d      	beq.n	800b946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	441a      	add	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	e008      	b.n	800b958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b946:	4b0c      	ldr	r3, [pc, #48]	; (800b978 <prvInsertBlockIntoFreeList+0xb0>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	e003      	b.n	800b958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d002      	beq.n	800b966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b966:	bf00      	nop
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	20002860 	.word	0x20002860
 800b978:	20002868 	.word	0x20002868

0800b97c <__errno>:
 800b97c:	4b01      	ldr	r3, [pc, #4]	; (800b984 <__errno+0x8>)
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	20000028 	.word	0x20000028

0800b988 <__libc_init_array>:
 800b988:	b570      	push	{r4, r5, r6, lr}
 800b98a:	4d0d      	ldr	r5, [pc, #52]	; (800b9c0 <__libc_init_array+0x38>)
 800b98c:	4c0d      	ldr	r4, [pc, #52]	; (800b9c4 <__libc_init_array+0x3c>)
 800b98e:	1b64      	subs	r4, r4, r5
 800b990:	10a4      	asrs	r4, r4, #2
 800b992:	2600      	movs	r6, #0
 800b994:	42a6      	cmp	r6, r4
 800b996:	d109      	bne.n	800b9ac <__libc_init_array+0x24>
 800b998:	4d0b      	ldr	r5, [pc, #44]	; (800b9c8 <__libc_init_array+0x40>)
 800b99a:	4c0c      	ldr	r4, [pc, #48]	; (800b9cc <__libc_init_array+0x44>)
 800b99c:	f000 fcf8 	bl	800c390 <_init>
 800b9a0:	1b64      	subs	r4, r4, r5
 800b9a2:	10a4      	asrs	r4, r4, #2
 800b9a4:	2600      	movs	r6, #0
 800b9a6:	42a6      	cmp	r6, r4
 800b9a8:	d105      	bne.n	800b9b6 <__libc_init_array+0x2e>
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}
 800b9ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b0:	4798      	blx	r3
 800b9b2:	3601      	adds	r6, #1
 800b9b4:	e7ee      	b.n	800b994 <__libc_init_array+0xc>
 800b9b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ba:	4798      	blx	r3
 800b9bc:	3601      	adds	r6, #1
 800b9be:	e7f2      	b.n	800b9a6 <__libc_init_array+0x1e>
 800b9c0:	0800c5bc 	.word	0x0800c5bc
 800b9c4:	0800c5bc 	.word	0x0800c5bc
 800b9c8:	0800c5bc 	.word	0x0800c5bc
 800b9cc:	0800c5c0 	.word	0x0800c5c0

0800b9d0 <__retarget_lock_acquire_recursive>:
 800b9d0:	4770      	bx	lr

0800b9d2 <__retarget_lock_release_recursive>:
 800b9d2:	4770      	bx	lr

0800b9d4 <memcpy>:
 800b9d4:	440a      	add	r2, r1
 800b9d6:	4291      	cmp	r1, r2
 800b9d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b9dc:	d100      	bne.n	800b9e0 <memcpy+0xc>
 800b9de:	4770      	bx	lr
 800b9e0:	b510      	push	{r4, lr}
 800b9e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9ea:	4291      	cmp	r1, r2
 800b9ec:	d1f9      	bne.n	800b9e2 <memcpy+0xe>
 800b9ee:	bd10      	pop	{r4, pc}

0800b9f0 <memset>:
 800b9f0:	4402      	add	r2, r0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d100      	bne.n	800b9fa <memset+0xa>
 800b9f8:	4770      	bx	lr
 800b9fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b9fe:	e7f9      	b.n	800b9f4 <memset+0x4>

0800ba00 <sbrk_aligned>:
 800ba00:	b570      	push	{r4, r5, r6, lr}
 800ba02:	4e0e      	ldr	r6, [pc, #56]	; (800ba3c <sbrk_aligned+0x3c>)
 800ba04:	460c      	mov	r4, r1
 800ba06:	6831      	ldr	r1, [r6, #0]
 800ba08:	4605      	mov	r5, r0
 800ba0a:	b911      	cbnz	r1, 800ba12 <sbrk_aligned+0x12>
 800ba0c:	f000 f8f6 	bl	800bbfc <_sbrk_r>
 800ba10:	6030      	str	r0, [r6, #0]
 800ba12:	4621      	mov	r1, r4
 800ba14:	4628      	mov	r0, r5
 800ba16:	f000 f8f1 	bl	800bbfc <_sbrk_r>
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	d00a      	beq.n	800ba34 <sbrk_aligned+0x34>
 800ba1e:	1cc4      	adds	r4, r0, #3
 800ba20:	f024 0403 	bic.w	r4, r4, #3
 800ba24:	42a0      	cmp	r0, r4
 800ba26:	d007      	beq.n	800ba38 <sbrk_aligned+0x38>
 800ba28:	1a21      	subs	r1, r4, r0
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f000 f8e6 	bl	800bbfc <_sbrk_r>
 800ba30:	3001      	adds	r0, #1
 800ba32:	d101      	bne.n	800ba38 <sbrk_aligned+0x38>
 800ba34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ba38:	4620      	mov	r0, r4
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	20002888 	.word	0x20002888

0800ba40 <_malloc_r>:
 800ba40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba44:	1ccd      	adds	r5, r1, #3
 800ba46:	f025 0503 	bic.w	r5, r5, #3
 800ba4a:	3508      	adds	r5, #8
 800ba4c:	2d0c      	cmp	r5, #12
 800ba4e:	bf38      	it	cc
 800ba50:	250c      	movcc	r5, #12
 800ba52:	2d00      	cmp	r5, #0
 800ba54:	4607      	mov	r7, r0
 800ba56:	db01      	blt.n	800ba5c <_malloc_r+0x1c>
 800ba58:	42a9      	cmp	r1, r5
 800ba5a:	d905      	bls.n	800ba68 <_malloc_r+0x28>
 800ba5c:	230c      	movs	r3, #12
 800ba5e:	603b      	str	r3, [r7, #0]
 800ba60:	2600      	movs	r6, #0
 800ba62:	4630      	mov	r0, r6
 800ba64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba68:	4e2e      	ldr	r6, [pc, #184]	; (800bb24 <_malloc_r+0xe4>)
 800ba6a:	f000 f8f7 	bl	800bc5c <__malloc_lock>
 800ba6e:	6833      	ldr	r3, [r6, #0]
 800ba70:	461c      	mov	r4, r3
 800ba72:	bb34      	cbnz	r4, 800bac2 <_malloc_r+0x82>
 800ba74:	4629      	mov	r1, r5
 800ba76:	4638      	mov	r0, r7
 800ba78:	f7ff ffc2 	bl	800ba00 <sbrk_aligned>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	4604      	mov	r4, r0
 800ba80:	d14d      	bne.n	800bb1e <_malloc_r+0xde>
 800ba82:	6834      	ldr	r4, [r6, #0]
 800ba84:	4626      	mov	r6, r4
 800ba86:	2e00      	cmp	r6, #0
 800ba88:	d140      	bne.n	800bb0c <_malloc_r+0xcc>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	4638      	mov	r0, r7
 800ba90:	eb04 0803 	add.w	r8, r4, r3
 800ba94:	f000 f8b2 	bl	800bbfc <_sbrk_r>
 800ba98:	4580      	cmp	r8, r0
 800ba9a:	d13a      	bne.n	800bb12 <_malloc_r+0xd2>
 800ba9c:	6821      	ldr	r1, [r4, #0]
 800ba9e:	3503      	adds	r5, #3
 800baa0:	1a6d      	subs	r5, r5, r1
 800baa2:	f025 0503 	bic.w	r5, r5, #3
 800baa6:	3508      	adds	r5, #8
 800baa8:	2d0c      	cmp	r5, #12
 800baaa:	bf38      	it	cc
 800baac:	250c      	movcc	r5, #12
 800baae:	4629      	mov	r1, r5
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7ff ffa5 	bl	800ba00 <sbrk_aligned>
 800bab6:	3001      	adds	r0, #1
 800bab8:	d02b      	beq.n	800bb12 <_malloc_r+0xd2>
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	442b      	add	r3, r5
 800babe:	6023      	str	r3, [r4, #0]
 800bac0:	e00e      	b.n	800bae0 <_malloc_r+0xa0>
 800bac2:	6822      	ldr	r2, [r4, #0]
 800bac4:	1b52      	subs	r2, r2, r5
 800bac6:	d41e      	bmi.n	800bb06 <_malloc_r+0xc6>
 800bac8:	2a0b      	cmp	r2, #11
 800baca:	d916      	bls.n	800bafa <_malloc_r+0xba>
 800bacc:	1961      	adds	r1, r4, r5
 800bace:	42a3      	cmp	r3, r4
 800bad0:	6025      	str	r5, [r4, #0]
 800bad2:	bf18      	it	ne
 800bad4:	6059      	strne	r1, [r3, #4]
 800bad6:	6863      	ldr	r3, [r4, #4]
 800bad8:	bf08      	it	eq
 800bada:	6031      	streq	r1, [r6, #0]
 800badc:	5162      	str	r2, [r4, r5]
 800bade:	604b      	str	r3, [r1, #4]
 800bae0:	4638      	mov	r0, r7
 800bae2:	f104 060b 	add.w	r6, r4, #11
 800bae6:	f000 f8bf 	bl	800bc68 <__malloc_unlock>
 800baea:	f026 0607 	bic.w	r6, r6, #7
 800baee:	1d23      	adds	r3, r4, #4
 800baf0:	1af2      	subs	r2, r6, r3
 800baf2:	d0b6      	beq.n	800ba62 <_malloc_r+0x22>
 800baf4:	1b9b      	subs	r3, r3, r6
 800baf6:	50a3      	str	r3, [r4, r2]
 800baf8:	e7b3      	b.n	800ba62 <_malloc_r+0x22>
 800bafa:	6862      	ldr	r2, [r4, #4]
 800bafc:	42a3      	cmp	r3, r4
 800bafe:	bf0c      	ite	eq
 800bb00:	6032      	streq	r2, [r6, #0]
 800bb02:	605a      	strne	r2, [r3, #4]
 800bb04:	e7ec      	b.n	800bae0 <_malloc_r+0xa0>
 800bb06:	4623      	mov	r3, r4
 800bb08:	6864      	ldr	r4, [r4, #4]
 800bb0a:	e7b2      	b.n	800ba72 <_malloc_r+0x32>
 800bb0c:	4634      	mov	r4, r6
 800bb0e:	6876      	ldr	r6, [r6, #4]
 800bb10:	e7b9      	b.n	800ba86 <_malloc_r+0x46>
 800bb12:	230c      	movs	r3, #12
 800bb14:	603b      	str	r3, [r7, #0]
 800bb16:	4638      	mov	r0, r7
 800bb18:	f000 f8a6 	bl	800bc68 <__malloc_unlock>
 800bb1c:	e7a1      	b.n	800ba62 <_malloc_r+0x22>
 800bb1e:	6025      	str	r5, [r4, #0]
 800bb20:	e7de      	b.n	800bae0 <_malloc_r+0xa0>
 800bb22:	bf00      	nop
 800bb24:	20002884 	.word	0x20002884

0800bb28 <cleanup_glue>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	6809      	ldr	r1, [r1, #0]
 800bb2e:	4605      	mov	r5, r0
 800bb30:	b109      	cbz	r1, 800bb36 <cleanup_glue+0xe>
 800bb32:	f7ff fff9 	bl	800bb28 <cleanup_glue>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4628      	mov	r0, r5
 800bb3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb3e:	f000 b899 	b.w	800bc74 <_free_r>
	...

0800bb44 <_reclaim_reent>:
 800bb44:	4b2c      	ldr	r3, [pc, #176]	; (800bbf8 <_reclaim_reent+0xb4>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4283      	cmp	r3, r0
 800bb4a:	b570      	push	{r4, r5, r6, lr}
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	d051      	beq.n	800bbf4 <_reclaim_reent+0xb0>
 800bb50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb52:	b143      	cbz	r3, 800bb66 <_reclaim_reent+0x22>
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d14a      	bne.n	800bbf0 <_reclaim_reent+0xac>
 800bb5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb5c:	6819      	ldr	r1, [r3, #0]
 800bb5e:	b111      	cbz	r1, 800bb66 <_reclaim_reent+0x22>
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 f887 	bl	800bc74 <_free_r>
 800bb66:	6961      	ldr	r1, [r4, #20]
 800bb68:	b111      	cbz	r1, 800bb70 <_reclaim_reent+0x2c>
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f000 f882 	bl	800bc74 <_free_r>
 800bb70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb72:	b111      	cbz	r1, 800bb7a <_reclaim_reent+0x36>
 800bb74:	4620      	mov	r0, r4
 800bb76:	f000 f87d 	bl	800bc74 <_free_r>
 800bb7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb7c:	b111      	cbz	r1, 800bb84 <_reclaim_reent+0x40>
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f000 f878 	bl	800bc74 <_free_r>
 800bb84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bb86:	b111      	cbz	r1, 800bb8e <_reclaim_reent+0x4a>
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f000 f873 	bl	800bc74 <_free_r>
 800bb8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb90:	b111      	cbz	r1, 800bb98 <_reclaim_reent+0x54>
 800bb92:	4620      	mov	r0, r4
 800bb94:	f000 f86e 	bl	800bc74 <_free_r>
 800bb98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb9a:	b111      	cbz	r1, 800bba2 <_reclaim_reent+0x5e>
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f000 f869 	bl	800bc74 <_free_r>
 800bba2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bba4:	b111      	cbz	r1, 800bbac <_reclaim_reent+0x68>
 800bba6:	4620      	mov	r0, r4
 800bba8:	f000 f864 	bl	800bc74 <_free_r>
 800bbac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbae:	b111      	cbz	r1, 800bbb6 <_reclaim_reent+0x72>
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 f85f 	bl	800bc74 <_free_r>
 800bbb6:	69a3      	ldr	r3, [r4, #24]
 800bbb8:	b1e3      	cbz	r3, 800bbf4 <_reclaim_reent+0xb0>
 800bbba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	4798      	blx	r3
 800bbc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bbc2:	b1b9      	cbz	r1, 800bbf4 <_reclaim_reent+0xb0>
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbca:	f7ff bfad 	b.w	800bb28 <cleanup_glue>
 800bbce:	5949      	ldr	r1, [r1, r5]
 800bbd0:	b941      	cbnz	r1, 800bbe4 <_reclaim_reent+0xa0>
 800bbd2:	3504      	adds	r5, #4
 800bbd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbd6:	2d80      	cmp	r5, #128	; 0x80
 800bbd8:	68d9      	ldr	r1, [r3, #12]
 800bbda:	d1f8      	bne.n	800bbce <_reclaim_reent+0x8a>
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f000 f849 	bl	800bc74 <_free_r>
 800bbe2:	e7ba      	b.n	800bb5a <_reclaim_reent+0x16>
 800bbe4:	680e      	ldr	r6, [r1, #0]
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f000 f844 	bl	800bc74 <_free_r>
 800bbec:	4631      	mov	r1, r6
 800bbee:	e7ef      	b.n	800bbd0 <_reclaim_reent+0x8c>
 800bbf0:	2500      	movs	r5, #0
 800bbf2:	e7ef      	b.n	800bbd4 <_reclaim_reent+0x90>
 800bbf4:	bd70      	pop	{r4, r5, r6, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20000028 	.word	0x20000028

0800bbfc <_sbrk_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4d06      	ldr	r5, [pc, #24]	; (800bc18 <_sbrk_r+0x1c>)
 800bc00:	2300      	movs	r3, #0
 800bc02:	4604      	mov	r4, r0
 800bc04:	4608      	mov	r0, r1
 800bc06:	602b      	str	r3, [r5, #0]
 800bc08:	f7f6 fc5e 	bl	80024c8 <_sbrk>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_sbrk_r+0x1a>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_sbrk_r+0x1a>
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	2000288c 	.word	0x2000288c

0800bc1c <siprintf>:
 800bc1c:	b40e      	push	{r1, r2, r3}
 800bc1e:	b500      	push	{lr}
 800bc20:	b09c      	sub	sp, #112	; 0x70
 800bc22:	ab1d      	add	r3, sp, #116	; 0x74
 800bc24:	9002      	str	r0, [sp, #8]
 800bc26:	9006      	str	r0, [sp, #24]
 800bc28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc2c:	4809      	ldr	r0, [pc, #36]	; (800bc54 <siprintf+0x38>)
 800bc2e:	9107      	str	r1, [sp, #28]
 800bc30:	9104      	str	r1, [sp, #16]
 800bc32:	4909      	ldr	r1, [pc, #36]	; (800bc58 <siprintf+0x3c>)
 800bc34:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc38:	9105      	str	r1, [sp, #20]
 800bc3a:	6800      	ldr	r0, [r0, #0]
 800bc3c:	9301      	str	r3, [sp, #4]
 800bc3e:	a902      	add	r1, sp, #8
 800bc40:	f000 f8c0 	bl	800bdc4 <_svfiprintf_r>
 800bc44:	9b02      	ldr	r3, [sp, #8]
 800bc46:	2200      	movs	r2, #0
 800bc48:	701a      	strb	r2, [r3, #0]
 800bc4a:	b01c      	add	sp, #112	; 0x70
 800bc4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc50:	b003      	add	sp, #12
 800bc52:	4770      	bx	lr
 800bc54:	20000028 	.word	0x20000028
 800bc58:	ffff0208 	.word	0xffff0208

0800bc5c <__malloc_lock>:
 800bc5c:	4801      	ldr	r0, [pc, #4]	; (800bc64 <__malloc_lock+0x8>)
 800bc5e:	f7ff beb7 	b.w	800b9d0 <__retarget_lock_acquire_recursive>
 800bc62:	bf00      	nop
 800bc64:	20002880 	.word	0x20002880

0800bc68 <__malloc_unlock>:
 800bc68:	4801      	ldr	r0, [pc, #4]	; (800bc70 <__malloc_unlock+0x8>)
 800bc6a:	f7ff beb2 	b.w	800b9d2 <__retarget_lock_release_recursive>
 800bc6e:	bf00      	nop
 800bc70:	20002880 	.word	0x20002880

0800bc74 <_free_r>:
 800bc74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc76:	2900      	cmp	r1, #0
 800bc78:	d044      	beq.n	800bd04 <_free_r+0x90>
 800bc7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc7e:	9001      	str	r0, [sp, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f1a1 0404 	sub.w	r4, r1, #4
 800bc86:	bfb8      	it	lt
 800bc88:	18e4      	addlt	r4, r4, r3
 800bc8a:	f7ff ffe7 	bl	800bc5c <__malloc_lock>
 800bc8e:	4a1e      	ldr	r2, [pc, #120]	; (800bd08 <_free_r+0x94>)
 800bc90:	9801      	ldr	r0, [sp, #4]
 800bc92:	6813      	ldr	r3, [r2, #0]
 800bc94:	b933      	cbnz	r3, 800bca4 <_free_r+0x30>
 800bc96:	6063      	str	r3, [r4, #4]
 800bc98:	6014      	str	r4, [r2, #0]
 800bc9a:	b003      	add	sp, #12
 800bc9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bca0:	f7ff bfe2 	b.w	800bc68 <__malloc_unlock>
 800bca4:	42a3      	cmp	r3, r4
 800bca6:	d908      	bls.n	800bcba <_free_r+0x46>
 800bca8:	6825      	ldr	r5, [r4, #0]
 800bcaa:	1961      	adds	r1, r4, r5
 800bcac:	428b      	cmp	r3, r1
 800bcae:	bf01      	itttt	eq
 800bcb0:	6819      	ldreq	r1, [r3, #0]
 800bcb2:	685b      	ldreq	r3, [r3, #4]
 800bcb4:	1949      	addeq	r1, r1, r5
 800bcb6:	6021      	streq	r1, [r4, #0]
 800bcb8:	e7ed      	b.n	800bc96 <_free_r+0x22>
 800bcba:	461a      	mov	r2, r3
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	b10b      	cbz	r3, 800bcc4 <_free_r+0x50>
 800bcc0:	42a3      	cmp	r3, r4
 800bcc2:	d9fa      	bls.n	800bcba <_free_r+0x46>
 800bcc4:	6811      	ldr	r1, [r2, #0]
 800bcc6:	1855      	adds	r5, r2, r1
 800bcc8:	42a5      	cmp	r5, r4
 800bcca:	d10b      	bne.n	800bce4 <_free_r+0x70>
 800bccc:	6824      	ldr	r4, [r4, #0]
 800bcce:	4421      	add	r1, r4
 800bcd0:	1854      	adds	r4, r2, r1
 800bcd2:	42a3      	cmp	r3, r4
 800bcd4:	6011      	str	r1, [r2, #0]
 800bcd6:	d1e0      	bne.n	800bc9a <_free_r+0x26>
 800bcd8:	681c      	ldr	r4, [r3, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	6053      	str	r3, [r2, #4]
 800bcde:	4421      	add	r1, r4
 800bce0:	6011      	str	r1, [r2, #0]
 800bce2:	e7da      	b.n	800bc9a <_free_r+0x26>
 800bce4:	d902      	bls.n	800bcec <_free_r+0x78>
 800bce6:	230c      	movs	r3, #12
 800bce8:	6003      	str	r3, [r0, #0]
 800bcea:	e7d6      	b.n	800bc9a <_free_r+0x26>
 800bcec:	6825      	ldr	r5, [r4, #0]
 800bcee:	1961      	adds	r1, r4, r5
 800bcf0:	428b      	cmp	r3, r1
 800bcf2:	bf04      	itt	eq
 800bcf4:	6819      	ldreq	r1, [r3, #0]
 800bcf6:	685b      	ldreq	r3, [r3, #4]
 800bcf8:	6063      	str	r3, [r4, #4]
 800bcfa:	bf04      	itt	eq
 800bcfc:	1949      	addeq	r1, r1, r5
 800bcfe:	6021      	streq	r1, [r4, #0]
 800bd00:	6054      	str	r4, [r2, #4]
 800bd02:	e7ca      	b.n	800bc9a <_free_r+0x26>
 800bd04:	b003      	add	sp, #12
 800bd06:	bd30      	pop	{r4, r5, pc}
 800bd08:	20002884 	.word	0x20002884

0800bd0c <__ssputs_r>:
 800bd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd10:	688e      	ldr	r6, [r1, #8]
 800bd12:	429e      	cmp	r6, r3
 800bd14:	4682      	mov	sl, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	4690      	mov	r8, r2
 800bd1a:	461f      	mov	r7, r3
 800bd1c:	d838      	bhi.n	800bd90 <__ssputs_r+0x84>
 800bd1e:	898a      	ldrh	r2, [r1, #12]
 800bd20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd24:	d032      	beq.n	800bd8c <__ssputs_r+0x80>
 800bd26:	6825      	ldr	r5, [r4, #0]
 800bd28:	6909      	ldr	r1, [r1, #16]
 800bd2a:	eba5 0901 	sub.w	r9, r5, r1
 800bd2e:	6965      	ldr	r5, [r4, #20]
 800bd30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd38:	3301      	adds	r3, #1
 800bd3a:	444b      	add	r3, r9
 800bd3c:	106d      	asrs	r5, r5, #1
 800bd3e:	429d      	cmp	r5, r3
 800bd40:	bf38      	it	cc
 800bd42:	461d      	movcc	r5, r3
 800bd44:	0553      	lsls	r3, r2, #21
 800bd46:	d531      	bpl.n	800bdac <__ssputs_r+0xa0>
 800bd48:	4629      	mov	r1, r5
 800bd4a:	f7ff fe79 	bl	800ba40 <_malloc_r>
 800bd4e:	4606      	mov	r6, r0
 800bd50:	b950      	cbnz	r0, 800bd68 <__ssputs_r+0x5c>
 800bd52:	230c      	movs	r3, #12
 800bd54:	f8ca 3000 	str.w	r3, [sl]
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd5e:	81a3      	strh	r3, [r4, #12]
 800bd60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd68:	6921      	ldr	r1, [r4, #16]
 800bd6a:	464a      	mov	r2, r9
 800bd6c:	f7ff fe32 	bl	800b9d4 <memcpy>
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd7a:	81a3      	strh	r3, [r4, #12]
 800bd7c:	6126      	str	r6, [r4, #16]
 800bd7e:	6165      	str	r5, [r4, #20]
 800bd80:	444e      	add	r6, r9
 800bd82:	eba5 0509 	sub.w	r5, r5, r9
 800bd86:	6026      	str	r6, [r4, #0]
 800bd88:	60a5      	str	r5, [r4, #8]
 800bd8a:	463e      	mov	r6, r7
 800bd8c:	42be      	cmp	r6, r7
 800bd8e:	d900      	bls.n	800bd92 <__ssputs_r+0x86>
 800bd90:	463e      	mov	r6, r7
 800bd92:	6820      	ldr	r0, [r4, #0]
 800bd94:	4632      	mov	r2, r6
 800bd96:	4641      	mov	r1, r8
 800bd98:	f000 faa8 	bl	800c2ec <memmove>
 800bd9c:	68a3      	ldr	r3, [r4, #8]
 800bd9e:	1b9b      	subs	r3, r3, r6
 800bda0:	60a3      	str	r3, [r4, #8]
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	4433      	add	r3, r6
 800bda6:	6023      	str	r3, [r4, #0]
 800bda8:	2000      	movs	r0, #0
 800bdaa:	e7db      	b.n	800bd64 <__ssputs_r+0x58>
 800bdac:	462a      	mov	r2, r5
 800bdae:	f000 fab7 	bl	800c320 <_realloc_r>
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d1e1      	bne.n	800bd7c <__ssputs_r+0x70>
 800bdb8:	6921      	ldr	r1, [r4, #16]
 800bdba:	4650      	mov	r0, sl
 800bdbc:	f7ff ff5a 	bl	800bc74 <_free_r>
 800bdc0:	e7c7      	b.n	800bd52 <__ssputs_r+0x46>
	...

0800bdc4 <_svfiprintf_r>:
 800bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	4698      	mov	r8, r3
 800bdca:	898b      	ldrh	r3, [r1, #12]
 800bdcc:	061b      	lsls	r3, r3, #24
 800bdce:	b09d      	sub	sp, #116	; 0x74
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	4614      	mov	r4, r2
 800bdd6:	d50e      	bpl.n	800bdf6 <_svfiprintf_r+0x32>
 800bdd8:	690b      	ldr	r3, [r1, #16]
 800bdda:	b963      	cbnz	r3, 800bdf6 <_svfiprintf_r+0x32>
 800bddc:	2140      	movs	r1, #64	; 0x40
 800bdde:	f7ff fe2f 	bl	800ba40 <_malloc_r>
 800bde2:	6028      	str	r0, [r5, #0]
 800bde4:	6128      	str	r0, [r5, #16]
 800bde6:	b920      	cbnz	r0, 800bdf2 <_svfiprintf_r+0x2e>
 800bde8:	230c      	movs	r3, #12
 800bdea:	603b      	str	r3, [r7, #0]
 800bdec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdf0:	e0d1      	b.n	800bf96 <_svfiprintf_r+0x1d2>
 800bdf2:	2340      	movs	r3, #64	; 0x40
 800bdf4:	616b      	str	r3, [r5, #20]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdfa:	2320      	movs	r3, #32
 800bdfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be00:	f8cd 800c 	str.w	r8, [sp, #12]
 800be04:	2330      	movs	r3, #48	; 0x30
 800be06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bfb0 <_svfiprintf_r+0x1ec>
 800be0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be0e:	f04f 0901 	mov.w	r9, #1
 800be12:	4623      	mov	r3, r4
 800be14:	469a      	mov	sl, r3
 800be16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be1a:	b10a      	cbz	r2, 800be20 <_svfiprintf_r+0x5c>
 800be1c:	2a25      	cmp	r2, #37	; 0x25
 800be1e:	d1f9      	bne.n	800be14 <_svfiprintf_r+0x50>
 800be20:	ebba 0b04 	subs.w	fp, sl, r4
 800be24:	d00b      	beq.n	800be3e <_svfiprintf_r+0x7a>
 800be26:	465b      	mov	r3, fp
 800be28:	4622      	mov	r2, r4
 800be2a:	4629      	mov	r1, r5
 800be2c:	4638      	mov	r0, r7
 800be2e:	f7ff ff6d 	bl	800bd0c <__ssputs_r>
 800be32:	3001      	adds	r0, #1
 800be34:	f000 80aa 	beq.w	800bf8c <_svfiprintf_r+0x1c8>
 800be38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be3a:	445a      	add	r2, fp
 800be3c:	9209      	str	r2, [sp, #36]	; 0x24
 800be3e:	f89a 3000 	ldrb.w	r3, [sl]
 800be42:	2b00      	cmp	r3, #0
 800be44:	f000 80a2 	beq.w	800bf8c <_svfiprintf_r+0x1c8>
 800be48:	2300      	movs	r3, #0
 800be4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be52:	f10a 0a01 	add.w	sl, sl, #1
 800be56:	9304      	str	r3, [sp, #16]
 800be58:	9307      	str	r3, [sp, #28]
 800be5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be5e:	931a      	str	r3, [sp, #104]	; 0x68
 800be60:	4654      	mov	r4, sl
 800be62:	2205      	movs	r2, #5
 800be64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be68:	4851      	ldr	r0, [pc, #324]	; (800bfb0 <_svfiprintf_r+0x1ec>)
 800be6a:	f7f4 f9e1 	bl	8000230 <memchr>
 800be6e:	9a04      	ldr	r2, [sp, #16]
 800be70:	b9d8      	cbnz	r0, 800beaa <_svfiprintf_r+0xe6>
 800be72:	06d0      	lsls	r0, r2, #27
 800be74:	bf44      	itt	mi
 800be76:	2320      	movmi	r3, #32
 800be78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be7c:	0711      	lsls	r1, r2, #28
 800be7e:	bf44      	itt	mi
 800be80:	232b      	movmi	r3, #43	; 0x2b
 800be82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be86:	f89a 3000 	ldrb.w	r3, [sl]
 800be8a:	2b2a      	cmp	r3, #42	; 0x2a
 800be8c:	d015      	beq.n	800beba <_svfiprintf_r+0xf6>
 800be8e:	9a07      	ldr	r2, [sp, #28]
 800be90:	4654      	mov	r4, sl
 800be92:	2000      	movs	r0, #0
 800be94:	f04f 0c0a 	mov.w	ip, #10
 800be98:	4621      	mov	r1, r4
 800be9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be9e:	3b30      	subs	r3, #48	; 0x30
 800bea0:	2b09      	cmp	r3, #9
 800bea2:	d94e      	bls.n	800bf42 <_svfiprintf_r+0x17e>
 800bea4:	b1b0      	cbz	r0, 800bed4 <_svfiprintf_r+0x110>
 800bea6:	9207      	str	r2, [sp, #28]
 800bea8:	e014      	b.n	800bed4 <_svfiprintf_r+0x110>
 800beaa:	eba0 0308 	sub.w	r3, r0, r8
 800beae:	fa09 f303 	lsl.w	r3, r9, r3
 800beb2:	4313      	orrs	r3, r2
 800beb4:	9304      	str	r3, [sp, #16]
 800beb6:	46a2      	mov	sl, r4
 800beb8:	e7d2      	b.n	800be60 <_svfiprintf_r+0x9c>
 800beba:	9b03      	ldr	r3, [sp, #12]
 800bebc:	1d19      	adds	r1, r3, #4
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	9103      	str	r1, [sp, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	bfbb      	ittet	lt
 800bec6:	425b      	neglt	r3, r3
 800bec8:	f042 0202 	orrlt.w	r2, r2, #2
 800becc:	9307      	strge	r3, [sp, #28]
 800bece:	9307      	strlt	r3, [sp, #28]
 800bed0:	bfb8      	it	lt
 800bed2:	9204      	strlt	r2, [sp, #16]
 800bed4:	7823      	ldrb	r3, [r4, #0]
 800bed6:	2b2e      	cmp	r3, #46	; 0x2e
 800bed8:	d10c      	bne.n	800bef4 <_svfiprintf_r+0x130>
 800beda:	7863      	ldrb	r3, [r4, #1]
 800bedc:	2b2a      	cmp	r3, #42	; 0x2a
 800bede:	d135      	bne.n	800bf4c <_svfiprintf_r+0x188>
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	1d1a      	adds	r2, r3, #4
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	9203      	str	r2, [sp, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bfb8      	it	lt
 800beec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bef0:	3402      	adds	r4, #2
 800bef2:	9305      	str	r3, [sp, #20]
 800bef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bfc0 <_svfiprintf_r+0x1fc>
 800bef8:	7821      	ldrb	r1, [r4, #0]
 800befa:	2203      	movs	r2, #3
 800befc:	4650      	mov	r0, sl
 800befe:	f7f4 f997 	bl	8000230 <memchr>
 800bf02:	b140      	cbz	r0, 800bf16 <_svfiprintf_r+0x152>
 800bf04:	2340      	movs	r3, #64	; 0x40
 800bf06:	eba0 000a 	sub.w	r0, r0, sl
 800bf0a:	fa03 f000 	lsl.w	r0, r3, r0
 800bf0e:	9b04      	ldr	r3, [sp, #16]
 800bf10:	4303      	orrs	r3, r0
 800bf12:	3401      	adds	r4, #1
 800bf14:	9304      	str	r3, [sp, #16]
 800bf16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf1a:	4826      	ldr	r0, [pc, #152]	; (800bfb4 <_svfiprintf_r+0x1f0>)
 800bf1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf20:	2206      	movs	r2, #6
 800bf22:	f7f4 f985 	bl	8000230 <memchr>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d038      	beq.n	800bf9c <_svfiprintf_r+0x1d8>
 800bf2a:	4b23      	ldr	r3, [pc, #140]	; (800bfb8 <_svfiprintf_r+0x1f4>)
 800bf2c:	bb1b      	cbnz	r3, 800bf76 <_svfiprintf_r+0x1b2>
 800bf2e:	9b03      	ldr	r3, [sp, #12]
 800bf30:	3307      	adds	r3, #7
 800bf32:	f023 0307 	bic.w	r3, r3, #7
 800bf36:	3308      	adds	r3, #8
 800bf38:	9303      	str	r3, [sp, #12]
 800bf3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf3c:	4433      	add	r3, r6
 800bf3e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf40:	e767      	b.n	800be12 <_svfiprintf_r+0x4e>
 800bf42:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf46:	460c      	mov	r4, r1
 800bf48:	2001      	movs	r0, #1
 800bf4a:	e7a5      	b.n	800be98 <_svfiprintf_r+0xd4>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	3401      	adds	r4, #1
 800bf50:	9305      	str	r3, [sp, #20]
 800bf52:	4619      	mov	r1, r3
 800bf54:	f04f 0c0a 	mov.w	ip, #10
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf5e:	3a30      	subs	r2, #48	; 0x30
 800bf60:	2a09      	cmp	r2, #9
 800bf62:	d903      	bls.n	800bf6c <_svfiprintf_r+0x1a8>
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d0c5      	beq.n	800bef4 <_svfiprintf_r+0x130>
 800bf68:	9105      	str	r1, [sp, #20]
 800bf6a:	e7c3      	b.n	800bef4 <_svfiprintf_r+0x130>
 800bf6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf70:	4604      	mov	r4, r0
 800bf72:	2301      	movs	r3, #1
 800bf74:	e7f0      	b.n	800bf58 <_svfiprintf_r+0x194>
 800bf76:	ab03      	add	r3, sp, #12
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	462a      	mov	r2, r5
 800bf7c:	4b0f      	ldr	r3, [pc, #60]	; (800bfbc <_svfiprintf_r+0x1f8>)
 800bf7e:	a904      	add	r1, sp, #16
 800bf80:	4638      	mov	r0, r7
 800bf82:	f3af 8000 	nop.w
 800bf86:	1c42      	adds	r2, r0, #1
 800bf88:	4606      	mov	r6, r0
 800bf8a:	d1d6      	bne.n	800bf3a <_svfiprintf_r+0x176>
 800bf8c:	89ab      	ldrh	r3, [r5, #12]
 800bf8e:	065b      	lsls	r3, r3, #25
 800bf90:	f53f af2c 	bmi.w	800bdec <_svfiprintf_r+0x28>
 800bf94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf96:	b01d      	add	sp, #116	; 0x74
 800bf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9c:	ab03      	add	r3, sp, #12
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	462a      	mov	r2, r5
 800bfa2:	4b06      	ldr	r3, [pc, #24]	; (800bfbc <_svfiprintf_r+0x1f8>)
 800bfa4:	a904      	add	r1, sp, #16
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	f000 f87a 	bl	800c0a0 <_printf_i>
 800bfac:	e7eb      	b.n	800bf86 <_svfiprintf_r+0x1c2>
 800bfae:	bf00      	nop
 800bfb0:	0800c580 	.word	0x0800c580
 800bfb4:	0800c58a 	.word	0x0800c58a
 800bfb8:	00000000 	.word	0x00000000
 800bfbc:	0800bd0d 	.word	0x0800bd0d
 800bfc0:	0800c586 	.word	0x0800c586

0800bfc4 <_printf_common>:
 800bfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc8:	4616      	mov	r6, r2
 800bfca:	4699      	mov	r9, r3
 800bfcc:	688a      	ldr	r2, [r1, #8]
 800bfce:	690b      	ldr	r3, [r1, #16]
 800bfd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	bfb8      	it	lt
 800bfd8:	4613      	movlt	r3, r2
 800bfda:	6033      	str	r3, [r6, #0]
 800bfdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfe0:	4607      	mov	r7, r0
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	b10a      	cbz	r2, 800bfea <_printf_common+0x26>
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	6033      	str	r3, [r6, #0]
 800bfea:	6823      	ldr	r3, [r4, #0]
 800bfec:	0699      	lsls	r1, r3, #26
 800bfee:	bf42      	ittt	mi
 800bff0:	6833      	ldrmi	r3, [r6, #0]
 800bff2:	3302      	addmi	r3, #2
 800bff4:	6033      	strmi	r3, [r6, #0]
 800bff6:	6825      	ldr	r5, [r4, #0]
 800bff8:	f015 0506 	ands.w	r5, r5, #6
 800bffc:	d106      	bne.n	800c00c <_printf_common+0x48>
 800bffe:	f104 0a19 	add.w	sl, r4, #25
 800c002:	68e3      	ldr	r3, [r4, #12]
 800c004:	6832      	ldr	r2, [r6, #0]
 800c006:	1a9b      	subs	r3, r3, r2
 800c008:	42ab      	cmp	r3, r5
 800c00a:	dc26      	bgt.n	800c05a <_printf_common+0x96>
 800c00c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c010:	1e13      	subs	r3, r2, #0
 800c012:	6822      	ldr	r2, [r4, #0]
 800c014:	bf18      	it	ne
 800c016:	2301      	movne	r3, #1
 800c018:	0692      	lsls	r2, r2, #26
 800c01a:	d42b      	bmi.n	800c074 <_printf_common+0xb0>
 800c01c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c020:	4649      	mov	r1, r9
 800c022:	4638      	mov	r0, r7
 800c024:	47c0      	blx	r8
 800c026:	3001      	adds	r0, #1
 800c028:	d01e      	beq.n	800c068 <_printf_common+0xa4>
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	68e5      	ldr	r5, [r4, #12]
 800c02e:	6832      	ldr	r2, [r6, #0]
 800c030:	f003 0306 	and.w	r3, r3, #6
 800c034:	2b04      	cmp	r3, #4
 800c036:	bf08      	it	eq
 800c038:	1aad      	subeq	r5, r5, r2
 800c03a:	68a3      	ldr	r3, [r4, #8]
 800c03c:	6922      	ldr	r2, [r4, #16]
 800c03e:	bf0c      	ite	eq
 800c040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c044:	2500      	movne	r5, #0
 800c046:	4293      	cmp	r3, r2
 800c048:	bfc4      	itt	gt
 800c04a:	1a9b      	subgt	r3, r3, r2
 800c04c:	18ed      	addgt	r5, r5, r3
 800c04e:	2600      	movs	r6, #0
 800c050:	341a      	adds	r4, #26
 800c052:	42b5      	cmp	r5, r6
 800c054:	d11a      	bne.n	800c08c <_printf_common+0xc8>
 800c056:	2000      	movs	r0, #0
 800c058:	e008      	b.n	800c06c <_printf_common+0xa8>
 800c05a:	2301      	movs	r3, #1
 800c05c:	4652      	mov	r2, sl
 800c05e:	4649      	mov	r1, r9
 800c060:	4638      	mov	r0, r7
 800c062:	47c0      	blx	r8
 800c064:	3001      	adds	r0, #1
 800c066:	d103      	bne.n	800c070 <_printf_common+0xac>
 800c068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c070:	3501      	adds	r5, #1
 800c072:	e7c6      	b.n	800c002 <_printf_common+0x3e>
 800c074:	18e1      	adds	r1, r4, r3
 800c076:	1c5a      	adds	r2, r3, #1
 800c078:	2030      	movs	r0, #48	; 0x30
 800c07a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c07e:	4422      	add	r2, r4
 800c080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c088:	3302      	adds	r3, #2
 800c08a:	e7c7      	b.n	800c01c <_printf_common+0x58>
 800c08c:	2301      	movs	r3, #1
 800c08e:	4622      	mov	r2, r4
 800c090:	4649      	mov	r1, r9
 800c092:	4638      	mov	r0, r7
 800c094:	47c0      	blx	r8
 800c096:	3001      	adds	r0, #1
 800c098:	d0e6      	beq.n	800c068 <_printf_common+0xa4>
 800c09a:	3601      	adds	r6, #1
 800c09c:	e7d9      	b.n	800c052 <_printf_common+0x8e>
	...

0800c0a0 <_printf_i>:
 800c0a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a4:	7e0f      	ldrb	r7, [r1, #24]
 800c0a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0a8:	2f78      	cmp	r7, #120	; 0x78
 800c0aa:	4691      	mov	r9, r2
 800c0ac:	4680      	mov	r8, r0
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	469a      	mov	sl, r3
 800c0b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0b6:	d807      	bhi.n	800c0c8 <_printf_i+0x28>
 800c0b8:	2f62      	cmp	r7, #98	; 0x62
 800c0ba:	d80a      	bhi.n	800c0d2 <_printf_i+0x32>
 800c0bc:	2f00      	cmp	r7, #0
 800c0be:	f000 80d8 	beq.w	800c272 <_printf_i+0x1d2>
 800c0c2:	2f58      	cmp	r7, #88	; 0x58
 800c0c4:	f000 80a3 	beq.w	800c20e <_printf_i+0x16e>
 800c0c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0d0:	e03a      	b.n	800c148 <_printf_i+0xa8>
 800c0d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0d6:	2b15      	cmp	r3, #21
 800c0d8:	d8f6      	bhi.n	800c0c8 <_printf_i+0x28>
 800c0da:	a101      	add	r1, pc, #4	; (adr r1, 800c0e0 <_printf_i+0x40>)
 800c0dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0e0:	0800c139 	.word	0x0800c139
 800c0e4:	0800c14d 	.word	0x0800c14d
 800c0e8:	0800c0c9 	.word	0x0800c0c9
 800c0ec:	0800c0c9 	.word	0x0800c0c9
 800c0f0:	0800c0c9 	.word	0x0800c0c9
 800c0f4:	0800c0c9 	.word	0x0800c0c9
 800c0f8:	0800c14d 	.word	0x0800c14d
 800c0fc:	0800c0c9 	.word	0x0800c0c9
 800c100:	0800c0c9 	.word	0x0800c0c9
 800c104:	0800c0c9 	.word	0x0800c0c9
 800c108:	0800c0c9 	.word	0x0800c0c9
 800c10c:	0800c259 	.word	0x0800c259
 800c110:	0800c17d 	.word	0x0800c17d
 800c114:	0800c23b 	.word	0x0800c23b
 800c118:	0800c0c9 	.word	0x0800c0c9
 800c11c:	0800c0c9 	.word	0x0800c0c9
 800c120:	0800c27b 	.word	0x0800c27b
 800c124:	0800c0c9 	.word	0x0800c0c9
 800c128:	0800c17d 	.word	0x0800c17d
 800c12c:	0800c0c9 	.word	0x0800c0c9
 800c130:	0800c0c9 	.word	0x0800c0c9
 800c134:	0800c243 	.word	0x0800c243
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	1d1a      	adds	r2, r3, #4
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	602a      	str	r2, [r5, #0]
 800c140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c148:	2301      	movs	r3, #1
 800c14a:	e0a3      	b.n	800c294 <_printf_i+0x1f4>
 800c14c:	6820      	ldr	r0, [r4, #0]
 800c14e:	6829      	ldr	r1, [r5, #0]
 800c150:	0606      	lsls	r6, r0, #24
 800c152:	f101 0304 	add.w	r3, r1, #4
 800c156:	d50a      	bpl.n	800c16e <_printf_i+0xce>
 800c158:	680e      	ldr	r6, [r1, #0]
 800c15a:	602b      	str	r3, [r5, #0]
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	da03      	bge.n	800c168 <_printf_i+0xc8>
 800c160:	232d      	movs	r3, #45	; 0x2d
 800c162:	4276      	negs	r6, r6
 800c164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c168:	485e      	ldr	r0, [pc, #376]	; (800c2e4 <_printf_i+0x244>)
 800c16a:	230a      	movs	r3, #10
 800c16c:	e019      	b.n	800c1a2 <_printf_i+0x102>
 800c16e:	680e      	ldr	r6, [r1, #0]
 800c170:	602b      	str	r3, [r5, #0]
 800c172:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c176:	bf18      	it	ne
 800c178:	b236      	sxthne	r6, r6
 800c17a:	e7ef      	b.n	800c15c <_printf_i+0xbc>
 800c17c:	682b      	ldr	r3, [r5, #0]
 800c17e:	6820      	ldr	r0, [r4, #0]
 800c180:	1d19      	adds	r1, r3, #4
 800c182:	6029      	str	r1, [r5, #0]
 800c184:	0601      	lsls	r1, r0, #24
 800c186:	d501      	bpl.n	800c18c <_printf_i+0xec>
 800c188:	681e      	ldr	r6, [r3, #0]
 800c18a:	e002      	b.n	800c192 <_printf_i+0xf2>
 800c18c:	0646      	lsls	r6, r0, #25
 800c18e:	d5fb      	bpl.n	800c188 <_printf_i+0xe8>
 800c190:	881e      	ldrh	r6, [r3, #0]
 800c192:	4854      	ldr	r0, [pc, #336]	; (800c2e4 <_printf_i+0x244>)
 800c194:	2f6f      	cmp	r7, #111	; 0x6f
 800c196:	bf0c      	ite	eq
 800c198:	2308      	moveq	r3, #8
 800c19a:	230a      	movne	r3, #10
 800c19c:	2100      	movs	r1, #0
 800c19e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1a2:	6865      	ldr	r5, [r4, #4]
 800c1a4:	60a5      	str	r5, [r4, #8]
 800c1a6:	2d00      	cmp	r5, #0
 800c1a8:	bfa2      	ittt	ge
 800c1aa:	6821      	ldrge	r1, [r4, #0]
 800c1ac:	f021 0104 	bicge.w	r1, r1, #4
 800c1b0:	6021      	strge	r1, [r4, #0]
 800c1b2:	b90e      	cbnz	r6, 800c1b8 <_printf_i+0x118>
 800c1b4:	2d00      	cmp	r5, #0
 800c1b6:	d04d      	beq.n	800c254 <_printf_i+0x1b4>
 800c1b8:	4615      	mov	r5, r2
 800c1ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1be:	fb03 6711 	mls	r7, r3, r1, r6
 800c1c2:	5dc7      	ldrb	r7, [r0, r7]
 800c1c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1c8:	4637      	mov	r7, r6
 800c1ca:	42bb      	cmp	r3, r7
 800c1cc:	460e      	mov	r6, r1
 800c1ce:	d9f4      	bls.n	800c1ba <_printf_i+0x11a>
 800c1d0:	2b08      	cmp	r3, #8
 800c1d2:	d10b      	bne.n	800c1ec <_printf_i+0x14c>
 800c1d4:	6823      	ldr	r3, [r4, #0]
 800c1d6:	07de      	lsls	r6, r3, #31
 800c1d8:	d508      	bpl.n	800c1ec <_printf_i+0x14c>
 800c1da:	6923      	ldr	r3, [r4, #16]
 800c1dc:	6861      	ldr	r1, [r4, #4]
 800c1de:	4299      	cmp	r1, r3
 800c1e0:	bfde      	ittt	le
 800c1e2:	2330      	movle	r3, #48	; 0x30
 800c1e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c1ec:	1b52      	subs	r2, r2, r5
 800c1ee:	6122      	str	r2, [r4, #16]
 800c1f0:	f8cd a000 	str.w	sl, [sp]
 800c1f4:	464b      	mov	r3, r9
 800c1f6:	aa03      	add	r2, sp, #12
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	4640      	mov	r0, r8
 800c1fc:	f7ff fee2 	bl	800bfc4 <_printf_common>
 800c200:	3001      	adds	r0, #1
 800c202:	d14c      	bne.n	800c29e <_printf_i+0x1fe>
 800c204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c208:	b004      	add	sp, #16
 800c20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c20e:	4835      	ldr	r0, [pc, #212]	; (800c2e4 <_printf_i+0x244>)
 800c210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c214:	6829      	ldr	r1, [r5, #0]
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	f851 6b04 	ldr.w	r6, [r1], #4
 800c21c:	6029      	str	r1, [r5, #0]
 800c21e:	061d      	lsls	r5, r3, #24
 800c220:	d514      	bpl.n	800c24c <_printf_i+0x1ac>
 800c222:	07df      	lsls	r7, r3, #31
 800c224:	bf44      	itt	mi
 800c226:	f043 0320 	orrmi.w	r3, r3, #32
 800c22a:	6023      	strmi	r3, [r4, #0]
 800c22c:	b91e      	cbnz	r6, 800c236 <_printf_i+0x196>
 800c22e:	6823      	ldr	r3, [r4, #0]
 800c230:	f023 0320 	bic.w	r3, r3, #32
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	2310      	movs	r3, #16
 800c238:	e7b0      	b.n	800c19c <_printf_i+0xfc>
 800c23a:	6823      	ldr	r3, [r4, #0]
 800c23c:	f043 0320 	orr.w	r3, r3, #32
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	2378      	movs	r3, #120	; 0x78
 800c244:	4828      	ldr	r0, [pc, #160]	; (800c2e8 <_printf_i+0x248>)
 800c246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c24a:	e7e3      	b.n	800c214 <_printf_i+0x174>
 800c24c:	0659      	lsls	r1, r3, #25
 800c24e:	bf48      	it	mi
 800c250:	b2b6      	uxthmi	r6, r6
 800c252:	e7e6      	b.n	800c222 <_printf_i+0x182>
 800c254:	4615      	mov	r5, r2
 800c256:	e7bb      	b.n	800c1d0 <_printf_i+0x130>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	6826      	ldr	r6, [r4, #0]
 800c25c:	6961      	ldr	r1, [r4, #20]
 800c25e:	1d18      	adds	r0, r3, #4
 800c260:	6028      	str	r0, [r5, #0]
 800c262:	0635      	lsls	r5, r6, #24
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	d501      	bpl.n	800c26c <_printf_i+0x1cc>
 800c268:	6019      	str	r1, [r3, #0]
 800c26a:	e002      	b.n	800c272 <_printf_i+0x1d2>
 800c26c:	0670      	lsls	r0, r6, #25
 800c26e:	d5fb      	bpl.n	800c268 <_printf_i+0x1c8>
 800c270:	8019      	strh	r1, [r3, #0]
 800c272:	2300      	movs	r3, #0
 800c274:	6123      	str	r3, [r4, #16]
 800c276:	4615      	mov	r5, r2
 800c278:	e7ba      	b.n	800c1f0 <_printf_i+0x150>
 800c27a:	682b      	ldr	r3, [r5, #0]
 800c27c:	1d1a      	adds	r2, r3, #4
 800c27e:	602a      	str	r2, [r5, #0]
 800c280:	681d      	ldr	r5, [r3, #0]
 800c282:	6862      	ldr	r2, [r4, #4]
 800c284:	2100      	movs	r1, #0
 800c286:	4628      	mov	r0, r5
 800c288:	f7f3 ffd2 	bl	8000230 <memchr>
 800c28c:	b108      	cbz	r0, 800c292 <_printf_i+0x1f2>
 800c28e:	1b40      	subs	r0, r0, r5
 800c290:	6060      	str	r0, [r4, #4]
 800c292:	6863      	ldr	r3, [r4, #4]
 800c294:	6123      	str	r3, [r4, #16]
 800c296:	2300      	movs	r3, #0
 800c298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c29c:	e7a8      	b.n	800c1f0 <_printf_i+0x150>
 800c29e:	6923      	ldr	r3, [r4, #16]
 800c2a0:	462a      	mov	r2, r5
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	4640      	mov	r0, r8
 800c2a6:	47d0      	blx	sl
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	d0ab      	beq.n	800c204 <_printf_i+0x164>
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	079b      	lsls	r3, r3, #30
 800c2b0:	d413      	bmi.n	800c2da <_printf_i+0x23a>
 800c2b2:	68e0      	ldr	r0, [r4, #12]
 800c2b4:	9b03      	ldr	r3, [sp, #12]
 800c2b6:	4298      	cmp	r0, r3
 800c2b8:	bfb8      	it	lt
 800c2ba:	4618      	movlt	r0, r3
 800c2bc:	e7a4      	b.n	800c208 <_printf_i+0x168>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	4640      	mov	r0, r8
 800c2c6:	47d0      	blx	sl
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d09b      	beq.n	800c204 <_printf_i+0x164>
 800c2cc:	3501      	adds	r5, #1
 800c2ce:	68e3      	ldr	r3, [r4, #12]
 800c2d0:	9903      	ldr	r1, [sp, #12]
 800c2d2:	1a5b      	subs	r3, r3, r1
 800c2d4:	42ab      	cmp	r3, r5
 800c2d6:	dcf2      	bgt.n	800c2be <_printf_i+0x21e>
 800c2d8:	e7eb      	b.n	800c2b2 <_printf_i+0x212>
 800c2da:	2500      	movs	r5, #0
 800c2dc:	f104 0619 	add.w	r6, r4, #25
 800c2e0:	e7f5      	b.n	800c2ce <_printf_i+0x22e>
 800c2e2:	bf00      	nop
 800c2e4:	0800c591 	.word	0x0800c591
 800c2e8:	0800c5a2 	.word	0x0800c5a2

0800c2ec <memmove>:
 800c2ec:	4288      	cmp	r0, r1
 800c2ee:	b510      	push	{r4, lr}
 800c2f0:	eb01 0402 	add.w	r4, r1, r2
 800c2f4:	d902      	bls.n	800c2fc <memmove+0x10>
 800c2f6:	4284      	cmp	r4, r0
 800c2f8:	4623      	mov	r3, r4
 800c2fa:	d807      	bhi.n	800c30c <memmove+0x20>
 800c2fc:	1e43      	subs	r3, r0, #1
 800c2fe:	42a1      	cmp	r1, r4
 800c300:	d008      	beq.n	800c314 <memmove+0x28>
 800c302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c30a:	e7f8      	b.n	800c2fe <memmove+0x12>
 800c30c:	4402      	add	r2, r0
 800c30e:	4601      	mov	r1, r0
 800c310:	428a      	cmp	r2, r1
 800c312:	d100      	bne.n	800c316 <memmove+0x2a>
 800c314:	bd10      	pop	{r4, pc}
 800c316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c31a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c31e:	e7f7      	b.n	800c310 <memmove+0x24>

0800c320 <_realloc_r>:
 800c320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c324:	4680      	mov	r8, r0
 800c326:	4614      	mov	r4, r2
 800c328:	460e      	mov	r6, r1
 800c32a:	b921      	cbnz	r1, 800c336 <_realloc_r+0x16>
 800c32c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c330:	4611      	mov	r1, r2
 800c332:	f7ff bb85 	b.w	800ba40 <_malloc_r>
 800c336:	b92a      	cbnz	r2, 800c344 <_realloc_r+0x24>
 800c338:	f7ff fc9c 	bl	800bc74 <_free_r>
 800c33c:	4625      	mov	r5, r4
 800c33e:	4628      	mov	r0, r5
 800c340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c344:	f000 f81b 	bl	800c37e <_malloc_usable_size_r>
 800c348:	4284      	cmp	r4, r0
 800c34a:	4607      	mov	r7, r0
 800c34c:	d802      	bhi.n	800c354 <_realloc_r+0x34>
 800c34e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c352:	d812      	bhi.n	800c37a <_realloc_r+0x5a>
 800c354:	4621      	mov	r1, r4
 800c356:	4640      	mov	r0, r8
 800c358:	f7ff fb72 	bl	800ba40 <_malloc_r>
 800c35c:	4605      	mov	r5, r0
 800c35e:	2800      	cmp	r0, #0
 800c360:	d0ed      	beq.n	800c33e <_realloc_r+0x1e>
 800c362:	42bc      	cmp	r4, r7
 800c364:	4622      	mov	r2, r4
 800c366:	4631      	mov	r1, r6
 800c368:	bf28      	it	cs
 800c36a:	463a      	movcs	r2, r7
 800c36c:	f7ff fb32 	bl	800b9d4 <memcpy>
 800c370:	4631      	mov	r1, r6
 800c372:	4640      	mov	r0, r8
 800c374:	f7ff fc7e 	bl	800bc74 <_free_r>
 800c378:	e7e1      	b.n	800c33e <_realloc_r+0x1e>
 800c37a:	4635      	mov	r5, r6
 800c37c:	e7df      	b.n	800c33e <_realloc_r+0x1e>

0800c37e <_malloc_usable_size_r>:
 800c37e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c382:	1f18      	subs	r0, r3, #4
 800c384:	2b00      	cmp	r3, #0
 800c386:	bfbc      	itt	lt
 800c388:	580b      	ldrlt	r3, [r1, r0]
 800c38a:	18c0      	addlt	r0, r0, r3
 800c38c:	4770      	bx	lr
	...

0800c390 <_init>:
 800c390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c392:	bf00      	nop
 800c394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c396:	bc08      	pop	{r3}
 800c398:	469e      	mov	lr, r3
 800c39a:	4770      	bx	lr

0800c39c <_fini>:
 800c39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39e:	bf00      	nop
 800c3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3a2:	bc08      	pop	{r3}
 800c3a4:	469e      	mov	lr, r3
 800c3a6:	4770      	bx	lr
