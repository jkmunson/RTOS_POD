
462FinalProjectBattery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002f14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002f14  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c21d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2b  00000000  00000000  0002c251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0002eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001518a  00000000  00000000  0002f738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfb3  00000000  00000000  000448c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a52e  00000000  00000000  00051875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbda3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e54  00000000  00000000  000dbdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002e54 	.word	0x08002e54

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002e54 	.word	0x08002e54

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fad6 	bl	80007cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f809 	bl	8000236 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f97c 	bl	8000520 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000228:	f000 f85a 	bl	80002e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800022c:	f000 f8ce 	bl	80003cc <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000230:	f000 f849 	bl	80002c6 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	e7fe      	b.n	8000234 <main+0x1c>

08000236 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b093      	sub	sp, #76	; 0x4c
 800023a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023c:	2414      	movs	r4, #20
 800023e:	193b      	adds	r3, r7, r4
 8000240:	0018      	movs	r0, r3
 8000242:	2334      	movs	r3, #52	; 0x34
 8000244:	001a      	movs	r2, r3
 8000246:	2100      	movs	r1, #0
 8000248:	f002 fdfc 	bl	8002e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	0018      	movs	r0, r3
 8000250:	2310      	movs	r3, #16
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f002 fdf5 	bl	8002e44 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025a:	2380      	movs	r3, #128	; 0x80
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	0018      	movs	r0, r3
 8000260:	f001 fb86 	bl	8001970 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000264:	193b      	adds	r3, r7, r4
 8000266:	2202      	movs	r2, #2
 8000268:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	193b      	adds	r3, r7, r4
 800026c:	2280      	movs	r2, #128	; 0x80
 800026e:	0052      	lsls	r2, r2, #1
 8000270:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000272:	193b      	adds	r3, r7, r4
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000278:	193b      	adds	r3, r7, r4
 800027a:	2240      	movs	r2, #64	; 0x40
 800027c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027e:	193b      	adds	r3, r7, r4
 8000280:	2200      	movs	r2, #0
 8000282:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	f001 fbb2 	bl	80019f0 <HAL_RCC_OscConfig>
 800028c:	1e03      	subs	r3, r0, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000290:	f000 f97c 	bl	800058c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2207      	movs	r2, #7
 8000298:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2200      	movs	r2, #0
 800029e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2100      	movs	r1, #0
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 fead 	bl	8002010 <HAL_RCC_ClockConfig>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002ba:	f000 f967 	bl	800058c <Error_Handler>
  }
}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	46bd      	mov	sp, r7
 80002c2:	b013      	add	sp, #76	; 0x4c
 80002c4:	bd90      	pop	{r4, r7, pc}

080002c6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	af00      	add	r7, sp, #0
  /* ADC1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2100      	movs	r1, #0
 80002ce:	200c      	movs	r0, #12
 80002d0:	f001 f99a 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80002d4:	200c      	movs	r0, #12
 80002d6:	f001 f9ac 	bl	8001632 <HAL_NVIC_EnableIRQ>
}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	0018      	movs	r0, r3
 80002ea:	230c      	movs	r3, #12
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f002 fda8 	bl	8002e44 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80002f4:	4b32      	ldr	r3, [pc, #200]	; (80003c0 <MX_ADC1_Init+0xe0>)
 80002f6:	4a33      	ldr	r2, [pc, #204]	; (80003c4 <MX_ADC1_Init+0xe4>)
 80002f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80002fa:	4b31      	ldr	r3, [pc, #196]	; (80003c0 <MX_ADC1_Init+0xe0>)
 80002fc:	2280      	movs	r2, #128	; 0x80
 80002fe:	05d2      	lsls	r2, r2, #23
 8000300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000302:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000308:	4b2d      	ldr	r3, [pc, #180]	; (80003c0 <MX_ADC1_Init+0xe0>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030e:	4b2c      	ldr	r3, [pc, #176]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000314:	4b2a      	ldr	r3, [pc, #168]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000316:	2204      	movs	r2, #4
 8000318:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800031a:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <MX_ADC1_Init+0xe0>)
 800031c:	2200      	movs	r2, #0
 800031e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000320:	4b27      	ldr	r3, [pc, #156]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000322:	2200      	movs	r2, #0
 8000324:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000326:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000328:	2200      	movs	r2, #0
 800032a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800032c:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <MX_ADC1_Init+0xe0>)
 800032e:	2201      	movs	r2, #1
 8000330:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000332:	4b23      	ldr	r3, [pc, #140]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000334:	2220      	movs	r2, #32
 8000336:	2100      	movs	r1, #0
 8000338:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033a:	4b21      	ldr	r3, [pc, #132]	; (80003c0 <MX_ADC1_Init+0xe0>)
 800033c:	2200      	movs	r2, #0
 800033e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000340:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000342:	2200      	movs	r2, #0
 8000344:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000346:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000348:	222c      	movs	r2, #44	; 0x2c
 800034a:	2100      	movs	r1, #0
 800034c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800034e:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000350:	2280      	movs	r2, #128	; 0x80
 8000352:	0152      	lsls	r2, r2, #5
 8000354:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000358:	2200      	movs	r2, #0
 800035a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_ADC1_Init+0xe0>)
 800035e:	2200      	movs	r2, #0
 8000360:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8000362:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000364:	223c      	movs	r2, #60	; 0x3c
 8000366:	2101      	movs	r1, #1
 8000368:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_2;
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_ADC1_Init+0xe0>)
 800036c:	2200      	movs	r2, #0
 800036e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000372:	2200      	movs	r2, #0
 8000374:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000376:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000378:	2200      	movs	r2, #0
 800037a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MX_ADC1_Init+0xe0>)
 800037e:	2200      	movs	r2, #0
 8000380:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_ADC1_Init+0xe0>)
 8000384:	0018      	movs	r0, r3
 8000386:	f000 fbc3 	bl	8000b10 <HAL_ADC_Init>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800038e:	f000 f8fd 	bl	800058c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <MX_ADC1_Init+0xe8>)
 8000396:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a4:	1d3a      	adds	r2, r7, #4
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_ADC1_Init+0xe0>)
 80003a8:	0011      	movs	r1, r2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fe88 	bl	80010c0 <HAL_ADC_ConfigChannel>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80003b4:	f000 f8ea 	bl	800058c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b004      	add	sp, #16
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000028 	.word	0x20000028
 80003c4:	40012400 	.word	0x40012400
 80003c8:	10000010 	.word	0x10000010

080003cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b098      	sub	sp, #96	; 0x60
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d2:	2354      	movs	r3, #84	; 0x54
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	230c      	movs	r3, #12
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 fd31 	bl	8002e44 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e2:	2338      	movs	r3, #56	; 0x38
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	0018      	movs	r0, r3
 80003e8:	231c      	movs	r3, #28
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f002 fd29 	bl	8002e44 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	2334      	movs	r3, #52	; 0x34
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f002 fd22 	bl	8002e44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000400:	4b45      	ldr	r3, [pc, #276]	; (8000518 <MX_TIM1_Init+0x14c>)
 8000402:	4a46      	ldr	r2, [pc, #280]	; (800051c <MX_TIM1_Init+0x150>)
 8000404:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000406:	4b44      	ldr	r3, [pc, #272]	; (8000518 <MX_TIM1_Init+0x14c>)
 8000408:	2200      	movs	r2, #0
 800040a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040c:	4b42      	ldr	r3, [pc, #264]	; (8000518 <MX_TIM1_Init+0x14c>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 53;
 8000412:	4b41      	ldr	r3, [pc, #260]	; (8000518 <MX_TIM1_Init+0x14c>)
 8000414:	2235      	movs	r2, #53	; 0x35
 8000416:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000418:	4b3f      	ldr	r3, [pc, #252]	; (8000518 <MX_TIM1_Init+0x14c>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800041e:	4b3e      	ldr	r3, [pc, #248]	; (8000518 <MX_TIM1_Init+0x14c>)
 8000420:	2200      	movs	r2, #0
 8000422:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000424:	4b3c      	ldr	r3, [pc, #240]	; (8000518 <MX_TIM1_Init+0x14c>)
 8000426:	2200      	movs	r2, #0
 8000428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800042a:	4b3b      	ldr	r3, [pc, #236]	; (8000518 <MX_TIM1_Init+0x14c>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 ff79 	bl	8002324 <HAL_TIM_PWM_Init>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000436:	f000 f8a9 	bl	800058c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043a:	2154      	movs	r1, #84	; 0x54
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044e:	187a      	adds	r2, r7, r1
 8000450:	4b31      	ldr	r3, [pc, #196]	; (8000518 <MX_TIM1_Init+0x14c>)
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f002 fbd3 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800045e:	f000 f895 	bl	800058c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000462:	2138      	movs	r1, #56	; 0x38
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2260      	movs	r2, #96	; 0x60
 8000468:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800048e:	1879      	adds	r1, r7, r1
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <MX_TIM1_Init+0x14c>)
 8000492:	2200      	movs	r2, #0
 8000494:	0018      	movs	r0, r3
 8000496:	f001 ff9d 	bl	80023d4 <HAL_TIM_PWM_ConfigChannel>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800049e:	f000 f875 	bl	800058c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	0192      	lsls	r2, r2, #6
 80004c6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	0492      	lsls	r2, r2, #18
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MX_TIM1_Init+0x14c>)
 80004f8:	0011      	movs	r1, r2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 fbe2 	bl	8002cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000504:	f000 f842 	bl	800058c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <MX_TIM1_Init+0x14c>)
 800050a:	0018      	movs	r0, r3
 800050c:	f000 f8cc 	bl	80006a8 <HAL_TIM_MspPostInit>

}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b018      	add	sp, #96	; 0x60
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000008c 	.word	0x2000008c
 800051c:	40012c00 	.word	0x40012c00

08000520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	0018      	movs	r0, r3
 800052a:	2314      	movs	r3, #20
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f002 fc88 	bl	8002e44 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_GPIO_Init+0x68>)
 8000536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_GPIO_Init+0x68>)
 800053a:	2101      	movs	r1, #1
 800053c:	430a      	orrs	r2, r1
 800053e:	635a      	str	r2, [r3, #52]	; 0x34
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_GPIO_Init+0x68>)
 8000542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000544:	2201      	movs	r2, #1
 8000546:	4013      	ands	r3, r2
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LiPO1_Control_Pin|LiPO2_Control_Pin, GPIO_PIN_RESET);
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	2200      	movs	r2, #0
 8000552:	21c0      	movs	r1, #192	; 0xc0
 8000554:	0018      	movs	r0, r3
 8000556:	f001 f9ed 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LiPO1_Control_Pin LiPO2_Control_Pin */
  GPIO_InitStruct.Pin = LiPO1_Control_Pin|LiPO2_Control_Pin;
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	22c0      	movs	r2, #192	; 0xc0
 800055e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2201      	movs	r2, #1
 8000564:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2202      	movs	r2, #2
 800056a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	1d3a      	adds	r2, r7, #4
 8000574:	23a0      	movs	r3, #160	; 0xa0
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f001 f876 	bl	800166c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b006      	add	sp, #24
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000

0800058c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000590:	b672      	cpsid	i
}
 8000592:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000594:	e7fe      	b.n	8000594 <Error_Handler+0x8>
	...

08000598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_MspInit+0x44>)
 80005a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_MspInit+0x44>)
 80005a4:	2101      	movs	r1, #1
 80005a6:	430a      	orrs	r2, r1
 80005a8:	641a      	str	r2, [r3, #64]	; 0x40
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_MspInit+0x44>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ae:	2201      	movs	r2, #1
 80005b0:	4013      	ands	r3, r2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <HAL_MspInit+0x44>)
 80005b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_MspInit+0x44>)
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	0549      	lsls	r1, r1, #21
 80005c0:	430a      	orrs	r2, r1
 80005c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_MspInit+0x44>)
 80005c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	055b      	lsls	r3, r3, #21
 80005cc:	4013      	ands	r3, r2
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b08b      	sub	sp, #44	; 0x2c
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	2414      	movs	r4, #20
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	0018      	movs	r0, r3
 80005ee:	2314      	movs	r3, #20
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f002 fc26 	bl	8002e44 <memset>
  if(hadc->Instance==ADC1)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a18      	ldr	r2, [pc, #96]	; (8000660 <HAL_ADC_MspInit+0x80>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d129      	bne.n	8000656 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <HAL_ADC_MspInit+0x84>)
 8000604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <HAL_ADC_MspInit+0x84>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0349      	lsls	r1, r1, #13
 800060c:	430a      	orrs	r2, r1
 800060e:	641a      	str	r2, [r3, #64]	; 0x40
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_ADC_MspInit+0x84>)
 8000612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	035b      	lsls	r3, r3, #13
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <HAL_ADC_MspInit+0x84>)
 8000620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <HAL_ADC_MspInit+0x84>)
 8000624:	2101      	movs	r1, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_ADC_MspInit+0x84>)
 800062c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062e:	2201      	movs	r2, #1
 8000630:	4013      	ands	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2230      	movs	r2, #48	; 0x30
 800063a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2203      	movs	r2, #3
 8000640:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	193b      	adds	r3, r7, r4
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	193a      	adds	r2, r7, r4
 800064a:	23a0      	movs	r3, #160	; 0xa0
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f001 f80b 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b00b      	add	sp, #44	; 0x2c
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40012400 	.word	0x40012400
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <HAL_TIM_PWM_MspInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10d      	bne.n	8000696 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800067c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0109      	lsls	r1, r1, #4
 8000684:	430a      	orrs	r2, r1
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800068a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b004      	add	sp, #16
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40012c00 	.word	0x40012c00
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	240c      	movs	r4, #12
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	0018      	movs	r0, r3
 80006b6:	2314      	movs	r3, #20
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f002 fbc2 	bl	8002e44 <memset>
  if(htim->Instance==TIM1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a15      	ldr	r2, [pc, #84]	; (800071c <HAL_TIM_MspPostInit+0x74>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d123      	bne.n	8000712 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_TIM_MspPostInit+0x78>)
 80006cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <HAL_TIM_MspPostInit+0x78>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	430a      	orrs	r2, r1
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_TIM_MspPostInit+0x78>)
 80006d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006da:	2201      	movs	r2, #1
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	0021      	movs	r1, r4
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2202      	movs	r2, #2
 80006f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2202      	movs	r2, #2
 8000702:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	187a      	adds	r2, r7, r1
 8000706:	23a0      	movs	r3, #160	; 0xa0
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f000 ffad 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b009      	add	sp, #36	; 0x24
 8000718:	bd90      	pop	{r4, r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40012c00 	.word	0x40012c00
 8000720:	40021000 	.word	0x40021000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x4>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f8aa 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <ADC1_IRQHandler+0x14>)
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fb80 	bl	8000e60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	20000028 	.word	0x20000028

0800076c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800077c:	f7ff fff6 	bl	800076c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	; (80007c4 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a6:	f002 fb29 	bl	8002dfc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007aa:	f7ff fd35 	bl	8000218 <main>

080007ae <LoopForever>:

LoopForever:
  b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>
  ldr   r0, =_estack
 80007b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007bc:	08002f08 	.word	0x08002f08
  ldr r2, =_sbss
 80007c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c4:	200000dc 	.word	0x200000dc

080007c8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

080007cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <HAL_Init+0x3c>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_Init+0x3c>)
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	0049      	lsls	r1, r1, #1
 80007e2:	430a      	orrs	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e6:	2003      	movs	r0, #3
 80007e8:	f000 f810 	bl	800080c <HAL_InitTick>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d003      	beq.n	80007f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e001      	b.n	80007fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007f8:	f7ff fece 	bl	8000598 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40022000 	.word	0x40022000

0800080c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000814:	230f      	movs	r3, #15
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <HAL_InitTick+0x88>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d02b      	beq.n	800087c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_InitTick+0x8c>)
 8000826:	681c      	ldr	r4, [r3, #0]
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_InitTick+0x88>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	0019      	movs	r1, r3
 800082e:	23fa      	movs	r3, #250	; 0xfa
 8000830:	0098      	lsls	r0, r3, #2
 8000832:	f7ff fc65 	bl	8000100 <__udivsi3>
 8000836:	0003      	movs	r3, r0
 8000838:	0019      	movs	r1, r3
 800083a:	0020      	movs	r0, r4
 800083c:	f7ff fc60 	bl	8000100 <__udivsi3>
 8000840:	0003      	movs	r3, r0
 8000842:	0018      	movs	r0, r3
 8000844:	f000 ff05 	bl	8001652 <HAL_SYSTICK_Config>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d112      	bne.n	8000872 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b03      	cmp	r3, #3
 8000850:	d80a      	bhi.n	8000868 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	2301      	movs	r3, #1
 8000856:	425b      	negs	r3, r3
 8000858:	2200      	movs	r2, #0
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fed4 	bl	8001608 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_InitTick+0x90>)
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	e00d      	b.n	8000884 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000868:	230f      	movs	r3, #15
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e008      	b.n	8000884 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000872:	230f      	movs	r3, #15
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	e003      	b.n	8000884 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800087c:	230f      	movs	r3, #15
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000884:	230f      	movs	r3, #15
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	781b      	ldrb	r3, [r3, #0]
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	b005      	add	sp, #20
 8000890:	bd90      	pop	{r4, r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	20000008 	.word	0x20000008
 8000898:	20000000 	.word	0x20000000
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	001a      	movs	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	18d2      	adds	r2, r2, r3
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <HAL_IncTick+0x20>)
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000008 	.word	0x20000008
 80008c0:	200000d8 	.word	0x200000d8

080008c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	200000d8 	.word	0x200000d8

080008d8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80008e8:	401a      	ands	r2, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	431a      	orrs	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	fe3fffff 	.word	0xfe3fffff

08000900 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	23e0      	movs	r3, #224	; 0xe0
 800090e:	045b      	lsls	r3, r3, #17
 8000910:	4013      	ands	r3, r2
}
 8000912:	0018      	movs	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	b002      	add	sp, #8
 8000918:	bd80      	pop	{r7, pc}

0800091a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	2104      	movs	r1, #4
 800092e:	400a      	ands	r2, r1
 8000930:	2107      	movs	r1, #7
 8000932:	4091      	lsls	r1, r2
 8000934:	000a      	movs	r2, r1
 8000936:	43d2      	mvns	r2, r2
 8000938:	401a      	ands	r2, r3
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	2104      	movs	r1, #4
 800093e:	400b      	ands	r3, r1
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	4099      	lsls	r1, r3
 8000944:	000b      	movs	r3, r1
 8000946:	431a      	orrs	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b004      	add	sp, #16
 8000952:	bd80      	pop	{r7, pc}

08000954 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	2104      	movs	r1, #4
 8000966:	400a      	ands	r2, r1
 8000968:	2107      	movs	r1, #7
 800096a:	4091      	lsls	r1, r2
 800096c:	000a      	movs	r2, r1
 800096e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	2104      	movs	r1, #4
 8000974:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000976:	40da      	lsrs	r2, r3
 8000978:	0013      	movs	r3, r2
}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}

08000982 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68da      	ldr	r2, [r3, #12]
 800098e:	23c0      	movs	r3, #192	; 0xc0
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	4013      	ands	r3, r2
 8000994:	d101      	bne.n	800099a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800099a:	2300      	movs	r3, #0
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	211f      	movs	r1, #31
 80009b8:	400a      	ands	r2, r1
 80009ba:	210f      	movs	r1, #15
 80009bc:	4091      	lsls	r1, r2
 80009be:	000a      	movs	r2, r1
 80009c0:	43d2      	mvns	r2, r2
 80009c2:	401a      	ands	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	0e9b      	lsrs	r3, r3, #26
 80009c8:	210f      	movs	r1, #15
 80009ca:	4019      	ands	r1, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	201f      	movs	r0, #31
 80009d0:	4003      	ands	r3, r0
 80009d2:	4099      	lsls	r1, r3
 80009d4:	000b      	movs	r3, r1
 80009d6:	431a      	orrs	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b004      	add	sp, #16
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	035b      	lsls	r3, r3, #13
 80009f6:	0b5b      	lsrs	r3, r3, #13
 80009f8:	431a      	orrs	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	0352      	lsls	r2, r2, #13
 8000a18:	0b52      	lsrs	r2, r2, #13
 8000a1a:	43d2      	mvns	r2, r2
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	2203      	movs	r2, #3
 8000a38:	4013      	ands	r3, r2
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	0212      	lsls	r2, r2, #8
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	021b      	lsls	r3, r3, #8
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	400b      	ands	r3, r1
 8000a64:	4904      	ldr	r1, [pc, #16]	; (8000a78 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a66:	400b      	ands	r3, r1
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	07ffff00 	.word	0x07ffff00

08000a7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	0552      	lsls	r2, r2, #21
 8000a90:	431a      	orrs	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	6fffffe8 	.word	0x6fffffe8

08000aa4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	055b      	lsls	r3, r3, #21
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	055b      	lsls	r3, r3, #21
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d101      	bne.n	8000ac2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}

08000acc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d101      	bne.n	8000ae4 <LL_ADC_IsEnabled+0x18>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <LL_ADC_IsEnabled+0x1a>
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}

08000aee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	2204      	movs	r2, #4
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d101      	bne.n	8000b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b18:	231f      	movs	r3, #31
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e17f      	b.n	8000e36 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10a      	bne.n	8000b54 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fd4d 	bl	80005e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2254      	movs	r2, #84	; 0x54
 8000b50:	2100      	movs	r1, #0
 8000b52:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ffa3 	bl	8000aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d115      	bne.n	8000b8e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff ff88 	bl	8000a7c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b6c:	4bb4      	ldr	r3, [pc, #720]	; (8000e40 <HAL_ADC_Init+0x330>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	49b4      	ldr	r1, [pc, #720]	; (8000e44 <HAL_ADC_Init+0x334>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff fac4 	bl	8000100 <__udivsi3>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b80:	e002      	b.n	8000b88 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f9      	bne.n	8000b82 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff ff86 	bl	8000aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d10f      	bne.n	8000bbc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bac:	2201      	movs	r2, #1
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000bb4:	231f      	movs	r3, #31
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff94 	bl	8000aee <LL_ADC_REG_IsConversionOngoing>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	2210      	movs	r2, #16
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	d000      	beq.n	8000bd6 <HAL_ADC_Init+0xc6>
 8000bd4:	e122      	b.n	8000e1c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d000      	beq.n	8000bde <HAL_ADC_Init+0xce>
 8000bdc:	e11e      	b.n	8000e1c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	4a99      	ldr	r2, [pc, #612]	; (8000e48 <HAL_ADC_Init+0x338>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	2202      	movs	r2, #2
 8000be8:	431a      	orrs	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff ff6a 	bl	8000acc <LL_ADC_IsEnabled>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d000      	beq.n	8000bfe <HAL_ADC_Init+0xee>
 8000bfc:	e0ad      	b.n	8000d5a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7e1b      	ldrb	r3, [r3, #24]
 8000c06:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000c08:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7e5b      	ldrb	r3, [r3, #25]
 8000c0e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c10:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7e9b      	ldrb	r3, [r3, #26]
 8000c16:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c18:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <HAL_ADC_Init+0x118>
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	015b      	lsls	r3, r3, #5
 8000c26:	e000      	b.n	8000c2a <HAL_ADC_Init+0x11a>
 8000c28:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c2a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c30:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da04      	bge.n	8000c44 <HAL_ADC_Init+0x134>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	085b      	lsrs	r3, r3, #1
 8000c42:	e001      	b.n	8000c48 <HAL_ADC_Init+0x138>
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8000c48:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	212c      	movs	r1, #44	; 0x2c
 8000c4e:	5c5b      	ldrb	r3, [r3, r1]
 8000c50:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c52:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	5c9b      	ldrb	r3, [r3, r2]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d115      	bne.n	8000c90 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7e9b      	ldrb	r3, [r3, #26]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d105      	bne.n	8000c78 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0252      	lsls	r2, r2, #9
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	e00b      	b.n	8000c90 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c88:	2201      	movs	r2, #1
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00a      	beq.n	8000cae <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c9c:	23e0      	movs	r3, #224	; 0xe0
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	4a65      	ldr	r2, [pc, #404]	; (8000e4c <HAL_ADC_Init+0x33c>)
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	0019      	movs	r1, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	0f9b      	lsrs	r3, r3, #30
 8000cca:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	223c      	movs	r2, #60	; 0x3c
 8000cdc:	5c9b      	ldrb	r3, [r3, r2]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d111      	bne.n	8000d06 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	0f9b      	lsrs	r3, r3, #30
 8000ce8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cee:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8000cf4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8000cfa:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	2201      	movs	r2, #1
 8000d02:	4313      	orrs	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <HAL_ADC_Init+0x340>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	0019      	movs	r1, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	23c0      	movs	r3, #192	; 0xc0
 8000d22:	061b      	lsls	r3, r3, #24
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d018      	beq.n	8000d5a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d012      	beq.n	8000d5a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	061b      	lsls	r3, r3, #24
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d00c      	beq.n	8000d5a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d40:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <HAL_ADC_Init+0x344>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HAL_ADC_Init+0x348>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	0019      	movs	r1, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	23f0      	movs	r3, #240	; 0xf0
 8000d50:	039b      	lsls	r3, r3, #14
 8000d52:	401a      	ands	r2, r3
 8000d54:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <HAL_ADC_Init+0x344>)
 8000d56:	430a      	orrs	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d62:	001a      	movs	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f7ff fdd8 	bl	800091a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d72:	493a      	ldr	r1, [pc, #232]	; (8000e5c <HAL_ADC_Init+0x34c>)
 8000d74:	001a      	movs	r2, r3
 8000d76:	f7ff fdd0 	bl	800091a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d109      	bne.n	8000d96 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	4249      	negs	r1, r1
 8000d90:	430a      	orrs	r2, r1
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
 8000d94:	e018      	b.n	8000dc8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	039b      	lsls	r3, r3, #14
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d112      	bne.n	8000dc8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	221c      	movs	r2, #28
 8000db2:	4013      	ands	r3, r2
 8000db4:	2210      	movs	r2, #16
 8000db6:	4252      	negs	r2, r2
 8000db8:	409a      	lsls	r2, r3
 8000dba:	0011      	movs	r1, r2
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fdc0 	bl	8000954 <LL_ADC_GetSamplingTimeCommonChannels>
 8000dd4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d10b      	bne.n	8000df6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	2203      	movs	r2, #3
 8000dea:	4393      	bics	r3, r2
 8000dec:	2201      	movs	r2, #1
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000df4:	e01c      	b.n	8000e30 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	2212      	movs	r2, #18
 8000dfc:	4393      	bics	r3, r2
 8000dfe:	2210      	movs	r2, #16
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000e12:	231f      	movs	r3, #31
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e1a:	e009      	b.n	8000e30 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e20:	2210      	movs	r2, #16
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e28:	231f      	movs	r3, #31
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000e30:	231f      	movs	r3, #31
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	781b      	ldrb	r3, [r3, #0]
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b008      	add	sp, #32
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	20000000 	.word	0x20000000
 8000e44:	00030d40 	.word	0x00030d40
 8000e48:	fffffefd 	.word	0xfffffefd
 8000e4c:	ffde0201 	.word	0xffde0201
 8000e50:	1ffffc02 	.word	0x1ffffc02
 8000e54:	40012708 	.word	0x40012708
 8000e58:	ffc3ffff 	.word	0xffc3ffff
 8000e5c:	07ffff04 	.word	0x07ffff04

08000e60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	4013      	ands	r3, r2
 8000e82:	d017      	beq.n	8000eb4 <HAL_ADC_IRQHandler+0x54>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d013      	beq.n	8000eb4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e90:	2210      	movs	r2, #16
 8000e92:	4013      	ands	r3, r2
 8000e94:	d106      	bne.n	8000ea4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 faf2 	bl	8001490 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d003      	beq.n	8000ec4 <HAL_ADC_IRQHandler+0x64>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d107      	bne.n	8000ed4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000eca:	d04d      	beq.n	8000f68 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2208      	movs	r2, #8
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d049      	beq.n	8000f68 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	2210      	movs	r2, #16
 8000eda:	4013      	ands	r3, r2
 8000edc:	d106      	bne.n	8000eec <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff fd46 	bl	8000982 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d02e      	beq.n	8000f58 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7e9b      	ldrb	r3, [r3, #26]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d12a      	bne.n	8000f58 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2208      	movs	r2, #8
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d123      	bne.n	8000f58 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff fdea 	bl	8000aee <LL_ADC_REG_IsConversionOngoing>
 8000f1a:	1e03      	subs	r3, r0, #0
 8000f1c:	d110      	bne.n	8000f40 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	210c      	movs	r1, #12
 8000f2a:	438a      	bics	r2, r1
 8000f2c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	4a56      	ldr	r2, [pc, #344]	; (800108c <HAL_ADC_IRQHandler+0x22c>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	2201      	movs	r2, #1
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	659a      	str	r2, [r3, #88]	; 0x58
 8000f3e:	e00b      	b.n	8000f58 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f44:	2220      	movs	r2, #32
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f50:	2201      	movs	r2, #1
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 f898 	bl	8001090 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	220c      	movs	r2, #12
 8000f66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d012      	beq.n	8000f96 <HAL_ADC_IRQHandler+0x136>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	4013      	ands	r3, r2
 8000f76:	d00e      	beq.n	8000f96 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	0252      	lsls	r2, r2, #9
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 f889 	bl	80010a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d014      	beq.n	8000fca <HAL_ADC_IRQHandler+0x16a>
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d00f      	beq.n	8000fca <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	0292      	lsls	r2, r2, #10
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 fa58 	bl	8001470 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	0052      	lsls	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d014      	beq.n	8000ffe <HAL_ADC_IRQHandler+0x19e>
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d00f      	beq.n	8000ffe <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	02d2      	lsls	r2, r2, #11
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 fa46 	bl	8001480 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2210      	movs	r2, #16
 8001002:	4013      	ands	r3, r2
 8001004:	d02b      	beq.n	800105e <HAL_ADC_IRQHandler+0x1fe>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2210      	movs	r2, #16
 800100a:	4013      	ands	r3, r2
 800100c:	d027      	beq.n	800105e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e008      	b.n	800102e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fd02 	bl	8000a2a <LL_ADC_REG_GetDMATransfer>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d110      	bne.n	8001056 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	00d2      	lsls	r2, r2, #3
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001046:	2202      	movs	r2, #2
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	0018      	movs	r0, r3
 8001052:	f000 f82d 	bl	80010b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2210      	movs	r2, #16
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	019b      	lsls	r3, r3, #6
 8001064:	4013      	ands	r3, r2
 8001066:	d00d      	beq.n	8001084 <HAL_ADC_IRQHandler+0x224>
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	019b      	lsls	r3, r3, #6
 800106e:	4013      	ands	r3, r2
 8001070:	d008      	beq.n	8001084 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	0018      	movs	r0, r3
 8001076:	f000 fa13 	bl	80014a0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	0192      	lsls	r2, r2, #6
 8001082:	601a      	str	r2, [r3, #0]
  }
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b006      	add	sp, #24
 800108a:	bd80      	pop	{r7, pc}
 800108c:	fffffefe 	.word	0xfffffefe

08001090 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ca:	2317      	movs	r3, #23
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2254      	movs	r2, #84	; 0x54
 80010da:	5c9b      	ldrb	r3, [r3, r2]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x24>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e1c0      	b.n	8001466 <HAL_ADC_ConfigChannel+0x3a6>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2254      	movs	r2, #84	; 0x54
 80010e8:	2101      	movs	r1, #1
 80010ea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff fcfc 	bl	8000aee <LL_ADC_REG_IsConversionOngoing>
 80010f6:	1e03      	subs	r3, r0, #0
 80010f8:	d000      	beq.n	80010fc <HAL_ADC_ConfigChannel+0x3c>
 80010fa:	e1a3      	b.n	8001444 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d100      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x46>
 8001104:	e143      	b.n	800138e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	061b      	lsls	r3, r3, #24
 800110e:	429a      	cmp	r2, r3
 8001110:	d004      	beq.n	800111c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001116:	4ac1      	ldr	r2, [pc, #772]	; (800141c <HAL_ADC_ConfigChannel+0x35c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d108      	bne.n	800112e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0019      	movs	r1, r3
 8001126:	0010      	movs	r0, r2
 8001128:	f7ff fc5c 	bl	80009e4 <LL_ADC_REG_SetSequencerChAdd>
 800112c:	e0c9      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	211f      	movs	r1, #31
 8001138:	400b      	ands	r3, r1
 800113a:	210f      	movs	r1, #15
 800113c:	4099      	lsls	r1, r3
 800113e:	000b      	movs	r3, r1
 8001140:	43db      	mvns	r3, r3
 8001142:	4013      	ands	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	035b      	lsls	r3, r3, #13
 800114c:	0b5b      	lsrs	r3, r3, #13
 800114e:	d105      	bne.n	800115c <HAL_ADC_ConfigChannel+0x9c>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0e9b      	lsrs	r3, r3, #26
 8001156:	221f      	movs	r2, #31
 8001158:	4013      	ands	r3, r2
 800115a:	e098      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2201      	movs	r2, #1
 8001162:	4013      	ands	r3, r2
 8001164:	d000      	beq.n	8001168 <HAL_ADC_ConfigChannel+0xa8>
 8001166:	e091      	b.n	800128c <HAL_ADC_ConfigChannel+0x1cc>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2202      	movs	r2, #2
 800116e:	4013      	ands	r3, r2
 8001170:	d000      	beq.n	8001174 <HAL_ADC_ConfigChannel+0xb4>
 8001172:	e089      	b.n	8001288 <HAL_ADC_ConfigChannel+0x1c8>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2204      	movs	r2, #4
 800117a:	4013      	ands	r3, r2
 800117c:	d000      	beq.n	8001180 <HAL_ADC_ConfigChannel+0xc0>
 800117e:	e081      	b.n	8001284 <HAL_ADC_ConfigChannel+0x1c4>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2208      	movs	r2, #8
 8001186:	4013      	ands	r3, r2
 8001188:	d000      	beq.n	800118c <HAL_ADC_ConfigChannel+0xcc>
 800118a:	e079      	b.n	8001280 <HAL_ADC_ConfigChannel+0x1c0>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2210      	movs	r2, #16
 8001192:	4013      	ands	r3, r2
 8001194:	d000      	beq.n	8001198 <HAL_ADC_ConfigChannel+0xd8>
 8001196:	e071      	b.n	800127c <HAL_ADC_ConfigChannel+0x1bc>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2220      	movs	r2, #32
 800119e:	4013      	ands	r3, r2
 80011a0:	d000      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0xe4>
 80011a2:	e069      	b.n	8001278 <HAL_ADC_ConfigChannel+0x1b8>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	4013      	ands	r3, r2
 80011ac:	d000      	beq.n	80011b0 <HAL_ADC_ConfigChannel+0xf0>
 80011ae:	e061      	b.n	8001274 <HAL_ADC_ConfigChannel+0x1b4>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	4013      	ands	r3, r2
 80011b8:	d000      	beq.n	80011bc <HAL_ADC_ConfigChannel+0xfc>
 80011ba:	e059      	b.n	8001270 <HAL_ADC_ConfigChannel+0x1b0>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4013      	ands	r3, r2
 80011c6:	d151      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1ac>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4013      	ands	r3, r2
 80011d2:	d149      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1a8>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4013      	ands	r3, r2
 80011de:	d141      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1a4>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4013      	ands	r3, r2
 80011ea:	d139      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1a0>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	4013      	ands	r3, r2
 80011f6:	d131      	bne.n	800125c <HAL_ADC_ConfigChannel+0x19c>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	019b      	lsls	r3, r3, #6
 8001200:	4013      	ands	r3, r2
 8001202:	d129      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x198>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	01db      	lsls	r3, r3, #7
 800120c:	4013      	ands	r3, r2
 800120e:	d121      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x194>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	4013      	ands	r3, r2
 800121a:	d119      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x190>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	025b      	lsls	r3, r3, #9
 8001224:	4013      	ands	r3, r2
 8001226:	d111      	bne.n	800124c <HAL_ADC_ConfigChannel+0x18c>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	029b      	lsls	r3, r3, #10
 8001230:	4013      	ands	r3, r2
 8001232:	d109      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x188>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	02db      	lsls	r3, r3, #11
 800123c:	4013      	ands	r3, r2
 800123e:	d001      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x184>
 8001240:	2312      	movs	r3, #18
 8001242:	e024      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001244:	2300      	movs	r3, #0
 8001246:	e022      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001248:	2311      	movs	r3, #17
 800124a:	e020      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800124c:	2310      	movs	r3, #16
 800124e:	e01e      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001250:	230f      	movs	r3, #15
 8001252:	e01c      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001254:	230e      	movs	r3, #14
 8001256:	e01a      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001258:	230d      	movs	r3, #13
 800125a:	e018      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800125c:	230c      	movs	r3, #12
 800125e:	e016      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001260:	230b      	movs	r3, #11
 8001262:	e014      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001264:	230a      	movs	r3, #10
 8001266:	e012      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001268:	2309      	movs	r3, #9
 800126a:	e010      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800126c:	2308      	movs	r3, #8
 800126e:	e00e      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001270:	2307      	movs	r3, #7
 8001272:	e00c      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001274:	2306      	movs	r3, #6
 8001276:	e00a      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001278:	2305      	movs	r3, #5
 800127a:	e008      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800127c:	2304      	movs	r3, #4
 800127e:	e006      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001280:	2303      	movs	r3, #3
 8001282:	e004      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800128c:	2300      	movs	r3, #0
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	6852      	ldr	r2, [r2, #4]
 8001292:	201f      	movs	r0, #31
 8001294:	4002      	ands	r2, r0
 8001296:	4093      	lsls	r3, r2
 8001298:	000a      	movs	r2, r1
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d808      	bhi.n	80012c2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	001a      	movs	r2, r3
 80012be:	f7ff fb71 	bl	80009a4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6819      	ldr	r1, [r3, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	001a      	movs	r2, r3
 80012d0:	f7ff fbb8 	bl	8000a44 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db00      	blt.n	80012de <HAL_ADC_ConfigChannel+0x21e>
 80012dc:	e0bc      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012de:	4b50      	ldr	r3, [pc, #320]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff fb0d 	bl	8000900 <LL_ADC_GetCommonPathInternalCh>
 80012e6:	0003      	movs	r3, r0
 80012e8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a4d      	ldr	r2, [pc, #308]	; (8001424 <HAL_ADC_ConfigChannel+0x364>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d122      	bne.n	800133a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	041b      	lsls	r3, r3, #16
 80012fa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012fc:	d11d      	bne.n	800133a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	0412      	lsls	r2, r2, #16
 8001304:	4313      	orrs	r3, r2
 8001306:	4a46      	ldr	r2, [pc, #280]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 8001308:	0019      	movs	r1, r3
 800130a:	0010      	movs	r0, r2
 800130c:	f7ff fae4 	bl	80008d8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001310:	4b45      	ldr	r3, [pc, #276]	; (8001428 <HAL_ADC_ConfigChannel+0x368>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4945      	ldr	r1, [pc, #276]	; (800142c <HAL_ADC_ConfigChannel+0x36c>)
 8001316:	0018      	movs	r0, r3
 8001318:	f7fe fef2 	bl	8000100 <__udivsi3>
 800131c:	0003      	movs	r3, r0
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	0013      	movs	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	189b      	adds	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800132a:	e002      	b.n	8001332 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3b01      	subs	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001338:	e08e      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a3c      	ldr	r2, [pc, #240]	; (8001430 <HAL_ADC_ConfigChannel+0x370>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d10e      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	045b      	lsls	r3, r3, #17
 800134a:	4013      	ands	r3, r2
 800134c:	d109      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	0452      	lsls	r2, r2, #17
 8001354:	4313      	orrs	r3, r2
 8001356:	4a32      	ldr	r2, [pc, #200]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 8001358:	0019      	movs	r1, r3
 800135a:	0010      	movs	r0, r2
 800135c:	f7ff fabc 	bl	80008d8 <LL_ADC_SetCommonPathInternalCh>
 8001360:	e07a      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a33      	ldr	r2, [pc, #204]	; (8001434 <HAL_ADC_ConfigChannel+0x374>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d000      	beq.n	800136e <HAL_ADC_ConfigChannel+0x2ae>
 800136c:	e074      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	03db      	lsls	r3, r3, #15
 8001374:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001376:	d000      	beq.n	800137a <HAL_ADC_ConfigChannel+0x2ba>
 8001378:	e06e      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	03d2      	lsls	r2, r2, #15
 8001380:	4313      	orrs	r3, r2
 8001382:	4a27      	ldr	r2, [pc, #156]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 8001384:	0019      	movs	r1, r3
 8001386:	0010      	movs	r0, r2
 8001388:	f7ff faa6 	bl	80008d8 <LL_ADC_SetCommonPathInternalCh>
 800138c:	e064      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	061b      	lsls	r3, r3, #24
 8001396:	429a      	cmp	r2, r3
 8001398:	d004      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800139e:	4a1f      	ldr	r2, [pc, #124]	; (800141c <HAL_ADC_ConfigChannel+0x35c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d107      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	0019      	movs	r1, r3
 80013ae:	0010      	movs	r0, r2
 80013b0:	f7ff fb29 	bl	8000a06 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da4d      	bge.n	8001458 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff fa9e 	bl	8000900 <LL_ADC_GetCommonPathInternalCh>
 80013c4:	0003      	movs	r3, r0
 80013c6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_ADC_ConfigChannel+0x364>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d108      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_ADC_ConfigChannel+0x378>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 80013da:	0019      	movs	r1, r3
 80013dc:	0010      	movs	r0, r2
 80013de:	f7ff fa7b 	bl	80008d8 <LL_ADC_SetCommonPathInternalCh>
 80013e2:	e039      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_ADC_ConfigChannel+0x370>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d108      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_ADC_ConfigChannel+0x37c>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 80013f6:	0019      	movs	r1, r3
 80013f8:	0010      	movs	r0, r2
 80013fa:	f7ff fa6d 	bl	80008d8 <LL_ADC_SetCommonPathInternalCh>
 80013fe:	e02b      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_ADC_ConfigChannel+0x374>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d126      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_ADC_ConfigChannel+0x380>)
 800140e:	4013      	ands	r3, r2
 8001410:	4a03      	ldr	r2, [pc, #12]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 8001412:	0019      	movs	r1, r3
 8001414:	0010      	movs	r0, r2
 8001416:	f7ff fa5f 	bl	80008d8 <LL_ADC_SetCommonPathInternalCh>
 800141a:	e01d      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
 800141c:	80000004 	.word	0x80000004
 8001420:	40012708 	.word	0x40012708
 8001424:	b0001000 	.word	0xb0001000
 8001428:	20000000 	.word	0x20000000
 800142c:	00030d40 	.word	0x00030d40
 8001430:	b8004000 	.word	0xb8004000
 8001434:	b4002000 	.word	0xb4002000
 8001438:	ff7fffff 	.word	0xff7fffff
 800143c:	feffffff 	.word	0xfeffffff
 8001440:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	2220      	movs	r2, #32
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001450:	2317      	movs	r3, #23
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2254      	movs	r2, #84	; 0x54
 800145c:	2100      	movs	r1, #0
 800145e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001460:	2317      	movs	r3, #23
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	781b      	ldrb	r3, [r3, #0]
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b006      	add	sp, #24
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)

08001470 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	0002      	movs	r2, r0
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b7f      	cmp	r3, #127	; 0x7f
 80014c2:	d809      	bhi.n	80014d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	001a      	movs	r2, r3
 80014ca:	231f      	movs	r3, #31
 80014cc:	401a      	ands	r2, r3
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_EnableIRQ+0x30>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	4091      	lsls	r1, r2
 80014d4:	000a      	movs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b002      	add	sp, #8
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	0002      	movs	r2, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b7f      	cmp	r3, #127	; 0x7f
 80014f8:	d828      	bhi.n	800154c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014fa:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <__NVIC_SetPriority+0xd4>)
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b25b      	sxtb	r3, r3
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	33c0      	adds	r3, #192	; 0xc0
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	589b      	ldr	r3, [r3, r2]
 800150a:	1dfa      	adds	r2, r7, #7
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	0011      	movs	r1, r2
 8001510:	2203      	movs	r2, #3
 8001512:	400a      	ands	r2, r1
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	21ff      	movs	r1, #255	; 0xff
 8001518:	4091      	lsls	r1, r2
 800151a:	000a      	movs	r2, r1
 800151c:	43d2      	mvns	r2, r2
 800151e:	401a      	ands	r2, r3
 8001520:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	019b      	lsls	r3, r3, #6
 8001526:	22ff      	movs	r2, #255	; 0xff
 8001528:	401a      	ands	r2, r3
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	0018      	movs	r0, r3
 8001530:	2303      	movs	r3, #3
 8001532:	4003      	ands	r3, r0
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001538:	481f      	ldr	r0, [pc, #124]	; (80015b8 <__NVIC_SetPriority+0xd4>)
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b25b      	sxtb	r3, r3
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	430a      	orrs	r2, r1
 8001544:	33c0      	adds	r3, #192	; 0xc0
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800154a:	e031      	b.n	80015b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800154c:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <__NVIC_SetPriority+0xd8>)
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	0019      	movs	r1, r3
 8001554:	230f      	movs	r3, #15
 8001556:	400b      	ands	r3, r1
 8001558:	3b08      	subs	r3, #8
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3306      	adds	r3, #6
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	18d3      	adds	r3, r2, r3
 8001562:	3304      	adds	r3, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	1dfa      	adds	r2, r7, #7
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	0011      	movs	r1, r2
 800156c:	2203      	movs	r2, #3
 800156e:	400a      	ands	r2, r1
 8001570:	00d2      	lsls	r2, r2, #3
 8001572:	21ff      	movs	r1, #255	; 0xff
 8001574:	4091      	lsls	r1, r2
 8001576:	000a      	movs	r2, r1
 8001578:	43d2      	mvns	r2, r2
 800157a:	401a      	ands	r2, r3
 800157c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	22ff      	movs	r2, #255	; 0xff
 8001584:	401a      	ands	r2, r3
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	0018      	movs	r0, r3
 800158c:	2303      	movs	r3, #3
 800158e:	4003      	ands	r3, r0
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <__NVIC_SetPriority+0xd8>)
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	001c      	movs	r4, r3
 800159c:	230f      	movs	r3, #15
 800159e:	4023      	ands	r3, r4
 80015a0:	3b08      	subs	r3, #8
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	430a      	orrs	r2, r1
 80015a6:	3306      	adds	r3, #6
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	18c3      	adds	r3, r0, r3
 80015ac:	3304      	adds	r3, #4
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b003      	add	sp, #12
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	1e5a      	subs	r2, r3, #1
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	045b      	lsls	r3, r3, #17
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d301      	bcc.n	80015d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d4:	2301      	movs	r3, #1
 80015d6:	e010      	b.n	80015fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <SysTick_Config+0x44>)
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	3a01      	subs	r2, #1
 80015de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e0:	2301      	movs	r3, #1
 80015e2:	425b      	negs	r3, r3
 80015e4:	2103      	movs	r1, #3
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7ff ff7c 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SysTick_Config+0x44>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SysTick_Config+0x44>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b002      	add	sp, #8
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	210f      	movs	r1, #15
 8001614:	187b      	adds	r3, r7, r1
 8001616:	1c02      	adds	r2, r0, #0
 8001618:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	187b      	adds	r3, r7, r1
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b25b      	sxtb	r3, r3
 8001622:	0011      	movs	r1, r2
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff ff5d 	bl	80014e4 <__NVIC_SetPriority>
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b004      	add	sp, #16
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	0002      	movs	r2, r0
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b25b      	sxtb	r3, r3
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff ff33 	bl	80014b0 <__NVIC_EnableIRQ>
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff ffaf 	bl	80015c0 <SysTick_Config>
 8001662:	0003      	movs	r3, r0
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e147      	b.n	800190c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4091      	lsls	r1, r2
 8001686:	000a      	movs	r2, r1
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d100      	bne.n	8001694 <HAL_GPIO_Init+0x28>
 8001692:	e138      	b.n	8001906 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2203      	movs	r2, #3
 800169a:	4013      	ands	r3, r2
 800169c:	2b01      	cmp	r3, #1
 800169e:	d005      	beq.n	80016ac <HAL_GPIO_Init+0x40>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2203      	movs	r2, #3
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d130      	bne.n	800170e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	409a      	lsls	r2, r3
 80016ba:	0013      	movs	r3, r2
 80016bc:	43da      	mvns	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	409a      	lsls	r2, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016e2:	2201      	movs	r2, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	2201      	movs	r2, #1
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2203      	movs	r2, #3
 8001714:	4013      	ands	r3, r2
 8001716:	2b03      	cmp	r3, #3
 8001718:	d017      	beq.n	800174a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	409a      	lsls	r2, r3
 8001728:	0013      	movs	r3, r2
 800172a:	43da      	mvns	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2203      	movs	r2, #3
 8001750:	4013      	ands	r3, r2
 8001752:	2b02      	cmp	r3, #2
 8001754:	d123      	bne.n	800179e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	58d3      	ldr	r3, [r2, r3]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2207      	movs	r2, #7
 8001768:	4013      	ands	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	43da      	mvns	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2107      	movs	r1, #7
 8001782:	400b      	ands	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	6939      	ldr	r1, [r7, #16]
 800179c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2203      	movs	r2, #3
 80017bc:	401a      	ands	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	23c0      	movs	r3, #192	; 0xc0
 80017d8:	029b      	lsls	r3, r3, #10
 80017da:	4013      	ands	r3, r2
 80017dc:	d100      	bne.n	80017e0 <HAL_GPIO_Init+0x174>
 80017de:	e092      	b.n	8001906 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80017e0:	4a50      	ldr	r2, [pc, #320]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3318      	adds	r3, #24
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	589b      	ldr	r3, [r3, r2]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2203      	movs	r2, #3
 80017f2:	4013      	ands	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	220f      	movs	r2, #15
 80017f8:	409a      	lsls	r2, r3
 80017fa:	0013      	movs	r3, r2
 80017fc:	43da      	mvns	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	23a0      	movs	r3, #160	; 0xa0
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	429a      	cmp	r2, r3
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0x1ca>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a45      	ldr	r2, [pc, #276]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00d      	beq.n	8001832 <HAL_GPIO_Init+0x1c6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a44      	ldr	r2, [pc, #272]	; (800192c <HAL_GPIO_Init+0x2c0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x1c2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a43      	ldr	r2, [pc, #268]	; (8001930 <HAL_GPIO_Init+0x2c4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_GPIO_Init+0x1be>
 8001826:	2303      	movs	r3, #3
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x1cc>
 800182a:	2305      	movs	r3, #5
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x1cc>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x1cc>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x1cc>
 8001836:	2300      	movs	r3, #0
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	2103      	movs	r1, #3
 800183c:	400a      	ands	r2, r1
 800183e:	00d2      	lsls	r2, r2, #3
 8001840:	4093      	lsls	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001848:	4936      	ldr	r1, [pc, #216]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3318      	adds	r3, #24
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001856:	4b33      	ldr	r3, [pc, #204]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43da      	mvns	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	035b      	lsls	r3, r3, #13
 800186e:	4013      	ands	r3, r2
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43da      	mvns	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	039b      	lsls	r3, r3, #14
 8001898:	4013      	ands	r3, r2
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80018ac:	2384      	movs	r3, #132	; 0x84
 80018ae:	58d3      	ldr	r3, [r2, r3]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43da      	mvns	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	029b      	lsls	r3, r3, #10
 80018c4:	4013      	ands	r3, r2
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d0:	4914      	ldr	r1, [pc, #80]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80018d2:	2284      	movs	r2, #132	; 0x84
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80018d8:	4a12      	ldr	r2, [pc, #72]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	58d3      	ldr	r3, [r2, r3]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43da      	mvns	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	025b      	lsls	r3, r3, #9
 80018f2:	4013      	ands	r3, r2
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018fe:	4909      	ldr	r1, [pc, #36]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	40da      	lsrs	r2, r3
 8001914:	1e13      	subs	r3, r2, #0
 8001916:	d000      	beq.n	800191a <HAL_GPIO_Init+0x2ae>
 8001918:	e6b0      	b.n	800167c <HAL_GPIO_Init+0x10>
  }
}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b006      	add	sp, #24
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021800 	.word	0x40021800
 8001928:	50000400 	.word	0x50000400
 800192c:	50000800 	.word	0x50000800
 8001930:	50000c00 	.word	0x50000c00

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	0008      	movs	r0, r1
 800193e:	0011      	movs	r1, r2
 8001940:	1cbb      	adds	r3, r7, #2
 8001942:	1c02      	adds	r2, r0, #0
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	1c7b      	adds	r3, r7, #1
 8001948:	1c0a      	adds	r2, r1, #0
 800194a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800194c:	1c7b      	adds	r3, r7, #1
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001954:	1cbb      	adds	r3, r7, #2
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800195c:	e003      	b.n	8001966 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800195e:	1cbb      	adds	r3, r7, #2
 8001960:	881a      	ldrh	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800197e:	4013      	ands	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	429a      	cmp	r2, r3
 8001992:	d11f      	bne.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	0013      	movs	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	189b      	adds	r3, r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4912      	ldr	r1, [pc, #72]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7fe fbac 	bl	8000100 <__udivsi3>
 80019a8:	0003      	movs	r3, r0
 80019aa:	3301      	adds	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ae:	e008      	b.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e001      	b.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e009      	b.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	401a      	ands	r2, r3
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d0ed      	beq.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40007000 	.word	0x40007000
 80019e4:	fffff9ff 	.word	0xfffff9ff
 80019e8:	20000000 	.word	0x20000000
 80019ec:	000f4240 	.word	0x000f4240

080019f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e2f3      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_OscConfig+0x1e>
 8001a0c:	e07c      	b.n	8001b08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0e:	4bc3      	ldr	r3, [pc, #780]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2238      	movs	r2, #56	; 0x38
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a18:	4bc0      	ldr	r3, [pc, #768]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	4013      	ands	r3, r2
 8001a20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	d102      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3e>
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d002      	beq.n	8001a34 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d10b      	bne.n	8001a4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	4bb9      	ldr	r3, [pc, #740]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	029b      	lsls	r3, r3, #10
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d062      	beq.n	8001b06 <HAL_RCC_OscConfig+0x116>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d15e      	bne.n	8001b06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e2ce      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	025b      	lsls	r3, r3, #9
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x78>
 8001a58:	4bb0      	ldr	r3, [pc, #704]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4baf      	ldr	r3, [pc, #700]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	0249      	lsls	r1, r1, #9
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	e020      	b.n	8001aaa <HAL_RCC_OscConfig+0xba>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	23a0      	movs	r3, #160	; 0xa0
 8001a6e:	02db      	lsls	r3, r3, #11
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d10e      	bne.n	8001a92 <HAL_RCC_OscConfig+0xa2>
 8001a74:	4ba9      	ldr	r3, [pc, #676]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4ba8      	ldr	r3, [pc, #672]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	02c9      	lsls	r1, r1, #11
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	4ba6      	ldr	r3, [pc, #664]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4ba5      	ldr	r3, [pc, #660]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	0249      	lsls	r1, r1, #9
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e00b      	b.n	8001aaa <HAL_RCC_OscConfig+0xba>
 8001a92:	4ba2      	ldr	r3, [pc, #648]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4ba1      	ldr	r3, [pc, #644]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a98:	49a1      	ldr	r1, [pc, #644]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	4b9f      	ldr	r3, [pc, #636]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b9e      	ldr	r3, [pc, #632]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	499f      	ldr	r1, [pc, #636]	; (8001d24 <HAL_RCC_OscConfig+0x334>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d014      	beq.n	8001adc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab2:	f7fe ff07 	bl	80008c4 <HAL_GetTick>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7fe ff02 	bl	80008c4 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e28d      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ace:	4b93      	ldr	r3, [pc, #588]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	029b      	lsls	r3, r3, #10
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0xcc>
 8001ada:	e015      	b.n	8001b08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7fe fef2 	bl	80008c4 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae6:	f7fe feed 	bl	80008c4 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b64      	cmp	r3, #100	; 0x64
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e278      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af8:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	029b      	lsls	r3, r3, #10
 8001b00:	4013      	ands	r3, r2
 8001b02:	d1f0      	bne.n	8001ae6 <HAL_RCC_OscConfig+0xf6>
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d100      	bne.n	8001b14 <HAL_RCC_OscConfig+0x124>
 8001b12:	e099      	b.n	8001c48 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b14:	4b81      	ldr	r3, [pc, #516]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2238      	movs	r2, #56	; 0x38
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b1e:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2203      	movs	r2, #3
 8001b24:	4013      	ands	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d102      	bne.n	8001b34 <HAL_RCC_OscConfig+0x144>
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d002      	beq.n	8001b3a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d135      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3a:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4013      	ands	r3, r2
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x162>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e24b      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b72      	ldr	r3, [pc, #456]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a74      	ldr	r2, [pc, #464]	; (8001d28 <HAL_RCC_OscConfig+0x338>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	021a      	lsls	r2, r3, #8
 8001b62:	4b6e      	ldr	r3, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d112      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b6e:	4b6b      	ldr	r3, [pc, #428]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0x33c>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b82:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0adb      	lsrs	r3, r3, #11
 8001b88:	2207      	movs	r2, #7
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	4a68      	ldr	r2, [pc, #416]	; (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b8e:	40da      	lsrs	r2, r3
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x344>)
 8001b92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b94:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_OscConfig+0x348>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7fe fe37 	bl	800080c <HAL_InitTick>
 8001b9e:	1e03      	subs	r3, r0, #0
 8001ba0:	d051      	beq.n	8001c46 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e221      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d030      	beq.n	8001c10 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bae:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a5e      	ldr	r2, [pc, #376]	; (8001d2c <HAL_RCC_OscConfig+0x33c>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001bc2:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b55      	ldr	r3, [pc, #340]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	0049      	lsls	r1, r1, #1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7fe fe78 	bl	80008c4 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bda:	f7fe fe73 	bl	80008c4 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1fe      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a4a      	ldr	r2, [pc, #296]	; (8001d28 <HAL_RCC_OscConfig+0x338>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	021a      	lsls	r2, r3, #8
 8001c08:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	e01b      	b.n	8001c48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b41      	ldr	r3, [pc, #260]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c16:	4949      	ldr	r1, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x34c>)
 8001c18:	400a      	ands	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7fe fe52 	bl	80008c4 <HAL_GetTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7fe fe4d 	bl	80008c4 <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1d8      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4013      	ands	r3, r2
 8001c42:	d1f0      	bne.n	8001c26 <HAL_RCC_OscConfig+0x236>
 8001c44:	e000      	b.n	8001c48 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d047      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2238      	movs	r2, #56	; 0x38
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b18      	cmp	r3, #24
 8001c5c:	d10a      	bne.n	8001c74 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d03c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2f2>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d138      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e1ba      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d019      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c80:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	430a      	orrs	r2, r1
 8001c86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7fe fe1c 	bl	80008c4 <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c92:	f7fe fe17 	bl	80008c4 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1a2      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca8:	2202      	movs	r2, #2
 8001caa:	4013      	ands	r3, r2
 8001cac:	d0f1      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2a2>
 8001cae:	e018      	b.n	8001ce2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001cb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	438a      	bics	r2, r1
 8001cba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fe02 	bl	80008c4 <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7fe fdfd 	bl	80008c4 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e188      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d1f1      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d100      	bne.n	8001cee <HAL_RCC_OscConfig+0x2fe>
 8001cec:	e0c6      	b.n	8001e7c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cee:	231f      	movs	r3, #31
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2238      	movs	r2, #56	; 0x38
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d11e      	bne.n	8001d40 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCC_OscConfig+0x31e>
 8001d0c:	e0b6      	b.n	8001e7c <HAL_RCC_OscConfig+0x48c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d000      	beq.n	8001d18 <HAL_RCC_OscConfig+0x328>
 8001d16:	e0b1      	b.n	8001e7c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e166      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	fffeffff 	.word	0xfffeffff
 8001d24:	fffbffff 	.word	0xfffbffff
 8001d28:	ffff80ff 	.word	0xffff80ff
 8001d2c:	ffffc7ff 	.word	0xffffc7ff
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004
 8001d3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d40:	4bac      	ldr	r3, [pc, #688]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	055b      	lsls	r3, r3, #21
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_OscConfig+0x360>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x362>
 8001d50:	2300      	movs	r3, #0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d011      	beq.n	8001d7a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4ba7      	ldr	r3, [pc, #668]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d5a:	4ba6      	ldr	r3, [pc, #664]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	0549      	lsls	r1, r1, #21
 8001d60:	430a      	orrs	r2, r1
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d64:	4ba3      	ldr	r3, [pc, #652]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	055b      	lsls	r3, r3, #21
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d72:	231f      	movs	r3, #31
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7a:	4b9f      	ldr	r3, [pc, #636]	; (8001ff8 <HAL_RCC_OscConfig+0x608>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4013      	ands	r3, r2
 8001d84:	d11a      	bne.n	8001dbc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d86:	4b9c      	ldr	r3, [pc, #624]	; (8001ff8 <HAL_RCC_OscConfig+0x608>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b9b      	ldr	r3, [pc, #620]	; (8001ff8 <HAL_RCC_OscConfig+0x608>)
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	0049      	lsls	r1, r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d94:	f7fe fd96 	bl	80008c4 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7fe fd91 	bl	80008c4 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e11c      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db0:	4b91      	ldr	r3, [pc, #580]	; (8001ff8 <HAL_RCC_OscConfig+0x608>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4013      	ands	r3, r2
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3e2>
 8001dc4:	4b8b      	ldr	r3, [pc, #556]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001dc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc8:	4b8a      	ldr	r3, [pc, #552]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dd0:	e01c      	b.n	8001e0c <HAL_RCC_OscConfig+0x41c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x404>
 8001dda:	4b86      	ldr	r3, [pc, #536]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001ddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dde:	4b85      	ldr	r3, [pc, #532]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001de0:	2104      	movs	r1, #4
 8001de2:	430a      	orrs	r2, r1
 8001de4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001de6:	4b83      	ldr	r3, [pc, #524]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001de8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dea:	4b82      	ldr	r3, [pc, #520]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	430a      	orrs	r2, r1
 8001df0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0x41c>
 8001df4:	4b7f      	ldr	r3, [pc, #508]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001df8:	4b7e      	ldr	r3, [pc, #504]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e00:	4b7c      	ldr	r3, [pc, #496]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001e02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e04:	4b7b      	ldr	r3, [pc, #492]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001e06:	2104      	movs	r1, #4
 8001e08:	438a      	bics	r2, r1
 8001e0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d014      	beq.n	8001e3e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe fd56 	bl	80008c4 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1c:	e009      	b.n	8001e32 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7fe fd51 	bl	80008c4 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	4a74      	ldr	r2, [pc, #464]	; (8001ffc <HAL_RCC_OscConfig+0x60c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e0db      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e32:	4b70      	ldr	r3, [pc, #448]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x42e>
 8001e3c:	e013      	b.n	8001e66 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7fe fd41 	bl	80008c4 <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e46:	e009      	b.n	8001e5c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7fe fd3c 	bl	80008c4 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	4a6a      	ldr	r2, [pc, #424]	; (8001ffc <HAL_RCC_OscConfig+0x60c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0c6      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e5c:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e66:	231f      	movs	r3, #31
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e70:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e74:	4b5f      	ldr	r3, [pc, #380]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001e76:	4962      	ldr	r1, [pc, #392]	; (8002000 <HAL_RCC_OscConfig+0x610>)
 8001e78:	400a      	ands	r2, r1
 8001e7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d100      	bne.n	8001e86 <HAL_RCC_OscConfig+0x496>
 8001e84:	e0b0      	b.n	8001fe8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e86:	4b5b      	ldr	r3, [pc, #364]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2238      	movs	r2, #56	; 0x38
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b10      	cmp	r3, #16
 8001e90:	d100      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4a4>
 8001e92:	e078      	b.n	8001f86 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d153      	bne.n	8001f44 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b55      	ldr	r3, [pc, #340]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b54      	ldr	r3, [pc, #336]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001ea2:	4958      	ldr	r1, [pc, #352]	; (8002004 <HAL_RCC_OscConfig+0x614>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7fe fd0c 	bl	80008c4 <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7fe fd07 	bl	80008c4 <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e092      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec4:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	049b      	lsls	r3, r3, #18
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed0:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a4c      	ldr	r2, [pc, #304]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b3c      	ldr	r3, [pc, #240]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	0449      	lsls	r1, r1, #17
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f0c:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0549      	lsls	r1, r1, #21
 8001f16:	430a      	orrs	r2, r1
 8001f18:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7fe fcd3 	bl	80008c4 <HAL_GetTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7fe fcce 	bl	80008c4 <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e059      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f36:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	049b      	lsls	r3, r3, #18
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x534>
 8001f42:	e051      	b.n	8001fe8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f4a:	492e      	ldr	r1, [pc, #184]	; (8002004 <HAL_RCC_OscConfig+0x614>)
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f50:	f7fe fcb8 	bl	80008c4 <HAL_GetTick>
 8001f54:	0003      	movs	r3, r0
 8001f56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe fcb3 	bl	80008c4 <HAL_GetTick>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e03e      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	049b      	lsls	r3, r3, #18
 8001f74:	4013      	ands	r3, r2
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f7e:	4923      	ldr	r1, [pc, #140]	; (800200c <HAL_RCC_OscConfig+0x61c>)
 8001f80:	400a      	ands	r2, r1
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	e030      	b.n	8001fe8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e02b      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <HAL_RCC_OscConfig+0x604>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11e      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2270      	movs	r2, #112	; 0x70
 8001faa:	401a      	ands	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d117      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	23fe      	movs	r3, #254	; 0xfe
 8001fb8:	01db      	lsls	r3, r3, #7
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	23f8      	movs	r3, #248	; 0xf8
 8001fca:	039b      	lsls	r3, r3, #14
 8001fcc:	401a      	ands	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	0f5b      	lsrs	r3, r3, #29
 8001fda:	075a      	lsls	r2, r3, #29
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b008      	add	sp, #32
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	00001388 	.word	0x00001388
 8002000:	efffffff 	.word	0xefffffff
 8002004:	feffffff 	.word	0xfeffffff
 8002008:	1fc1808c 	.word	0x1fc1808c
 800200c:	effefffc 	.word	0xeffefffc

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0e9      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b76      	ldr	r3, [pc, #472]	; (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2207      	movs	r2, #7
 800202a:	4013      	ands	r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d91e      	bls.n	8002070 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b73      	ldr	r3, [pc, #460]	; (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2207      	movs	r2, #7
 8002038:	4393      	bics	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	4b70      	ldr	r3, [pc, #448]	; (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002044:	f7fe fc3e 	bl	80008c4 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800204c:	e009      	b.n	8002062 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204e:	f7fe fc39 	bl	80008c4 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	4a6a      	ldr	r2, [pc, #424]	; (8002204 <HAL_RCC_ClockConfig+0x1f4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0ca      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002062:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2207      	movs	r2, #7
 8002068:	4013      	ands	r3, r2
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d1ee      	bne.n	800204e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d015      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2204      	movs	r2, #4
 8002080:	4013      	ands	r3, r2
 8002082:	d006      	beq.n	8002092 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002084:	4b60      	ldr	r3, [pc, #384]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 800208a:	21e0      	movs	r1, #224	; 0xe0
 800208c:	01c9      	lsls	r1, r1, #7
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002092:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	4a5d      	ldr	r2, [pc, #372]	; (800220c <HAL_RCC_ClockConfig+0x1fc>)
 8002098:	4013      	ands	r3, r2
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2201      	movs	r2, #1
 80020ac:	4013      	ands	r3, r2
 80020ae:	d057      	beq.n	8002160 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	029b      	lsls	r3, r3, #10
 80020c0:	4013      	ands	r3, r2
 80020c2:	d12b      	bne.n	800211c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e097      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d0:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	049b      	lsls	r3, r3, #18
 80020d8:	4013      	ands	r3, r2
 80020da:	d11f      	bne.n	800211c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e08b      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e8:	4b47      	ldr	r3, [pc, #284]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4013      	ands	r3, r2
 80020f2:	d113      	bne.n	800211c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e07f      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d106      	bne.n	800210e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002100:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 8002102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d108      	bne.n	800211c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e074      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210e:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e06d      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2207      	movs	r2, #7
 8002122:	4393      	bics	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4b37      	ldr	r3, [pc, #220]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002130:	f7fe fbc8 	bl	80008c4 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002138:	e009      	b.n	800214e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213a:	f7fe fbc3 	bl	80008c4 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <HAL_RCC_ClockConfig+0x1f4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e054      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2238      	movs	r2, #56	; 0x38
 8002154:	401a      	ands	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	429a      	cmp	r2, r3
 800215e:	d1ec      	bne.n	800213a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2207      	movs	r2, #7
 8002166:	4013      	ands	r3, r2
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d21e      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2207      	movs	r2, #7
 8002174:	4393      	bics	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002180:	f7fe fba0 	bl	80008c4 <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002188:	e009      	b.n	800219e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218a:	f7fe fb9b 	bl	80008c4 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	4a1b      	ldr	r2, [pc, #108]	; (8002204 <HAL_RCC_ClockConfig+0x1f4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e02c      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2207      	movs	r2, #7
 80021a4:	4013      	ands	r3, r2
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1ee      	bne.n	800218a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2204      	movs	r2, #4
 80021b2:	4013      	ands	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4a15      	ldr	r2, [pc, #84]	; (8002210 <HAL_RCC_ClockConfig+0x200>)
 80021bc:	4013      	ands	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021ca:	f000 f829 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80021ce:	0001      	movs	r1, r0
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	220f      	movs	r2, #15
 80021d8:	401a      	ands	r2, r3
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_RCC_ClockConfig+0x204>)
 80021dc:	0092      	lsls	r2, r2, #2
 80021de:	58d3      	ldr	r3, [r2, r3]
 80021e0:	221f      	movs	r2, #31
 80021e2:	4013      	ands	r3, r2
 80021e4:	000a      	movs	r2, r1
 80021e6:	40da      	lsrs	r2, r3
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_ClockConfig+0x208>)
 80021ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x20c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7fe fb0b 	bl	800080c <HAL_InitTick>
 80021f6:	0003      	movs	r3, r0
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b004      	add	sp, #16
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40022000 	.word	0x40022000
 8002204:	00001388 	.word	0x00001388
 8002208:	40021000 	.word	0x40021000
 800220c:	fffff0ff 	.word	0xfffff0ff
 8002210:	ffff8fff 	.word	0xffff8fff
 8002214:	08002e6c 	.word	0x08002e6c
 8002218:	20000000 	.word	0x20000000
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002226:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2238      	movs	r2, #56	; 0x38
 800222c:	4013      	ands	r3, r2
 800222e:	d10f      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002230:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0adb      	lsrs	r3, r3, #11
 8002236:	2207      	movs	r2, #7
 8002238:	4013      	ands	r3, r2
 800223a:	2201      	movs	r2, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	0013      	movs	r3, r2
 8002240:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	4835      	ldr	r0, [pc, #212]	; (800231c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002246:	f7fd ff5b 	bl	8000100 <__udivsi3>
 800224a:	0003      	movs	r3, r0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	e05d      	b.n	800230c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002250:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2238      	movs	r2, #56	; 0x38
 8002256:	4013      	ands	r3, r2
 8002258:	2b08      	cmp	r3, #8
 800225a:	d102      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800225c:	4b30      	ldr	r3, [pc, #192]	; (8002320 <HAL_RCC_GetSysClockFreq+0x100>)
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	e054      	b.n	800230c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2238      	movs	r2, #56	; 0x38
 8002268:	4013      	ands	r3, r2
 800226a:	2b10      	cmp	r3, #16
 800226c:	d138      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2203      	movs	r2, #3
 8002274:	4013      	ands	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	2207      	movs	r2, #7
 8002280:	4013      	ands	r3, r2
 8002282:	3301      	adds	r3, #1
 8002284:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d10d      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	4824      	ldr	r0, [pc, #144]	; (8002320 <HAL_RCC_GetSysClockFreq+0x100>)
 8002290:	f7fd ff36 	bl	8000100 <__udivsi3>
 8002294:	0003      	movs	r3, r0
 8002296:	0019      	movs	r1, r3
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	227f      	movs	r2, #127	; 0x7f
 80022a0:	4013      	ands	r3, r2
 80022a2:	434b      	muls	r3, r1
 80022a4:	617b      	str	r3, [r7, #20]
        break;
 80022a6:	e00d      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	481c      	ldr	r0, [pc, #112]	; (800231c <HAL_RCC_GetSysClockFreq+0xfc>)
 80022ac:	f7fd ff28 	bl	8000100 <__udivsi3>
 80022b0:	0003      	movs	r3, r0
 80022b2:	0019      	movs	r1, r3
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	227f      	movs	r2, #127	; 0x7f
 80022bc:	4013      	ands	r3, r2
 80022be:	434b      	muls	r3, r1
 80022c0:	617b      	str	r3, [r7, #20]
        break;
 80022c2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0f5b      	lsrs	r3, r3, #29
 80022ca:	2207      	movs	r2, #7
 80022cc:	4013      	ands	r3, r2
 80022ce:	3301      	adds	r3, #1
 80022d0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	6978      	ldr	r0, [r7, #20]
 80022d6:	f7fd ff13 	bl	8000100 <__udivsi3>
 80022da:	0003      	movs	r3, r0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	e015      	b.n	800230c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2238      	movs	r2, #56	; 0x38
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d103      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2238      	movs	r2, #56	; 0x38
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b18      	cmp	r3, #24
 80022fe:	d103      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002300:	23fa      	movs	r3, #250	; 0xfa
 8002302:	01db      	lsls	r3, r3, #7
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	e001      	b.n	800230c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800230c:	693b      	ldr	r3, [r7, #16]
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b006      	add	sp, #24
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	40021000 	.word	0x40021000
 800231c:	00f42400 	.word	0x00f42400
 8002320:	007a1200 	.word	0x007a1200

08002324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e04a      	b.n	80023cc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	223d      	movs	r2, #61	; 0x3d
 800233a:	5c9b      	ldrb	r3, [r3, r2]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d107      	bne.n	8002352 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	223c      	movs	r2, #60	; 0x3c
 8002346:	2100      	movs	r1, #0
 8002348:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f7fe f98b 	bl	8000668 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	223d      	movs	r2, #61	; 0x3d
 8002356:	2102      	movs	r1, #2
 8002358:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3304      	adds	r3, #4
 8002362:	0019      	movs	r1, r3
 8002364:	0010      	movs	r0, r2
 8002366:	f000 f935 	bl	80025d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2248      	movs	r2, #72	; 0x48
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	223e      	movs	r2, #62	; 0x3e
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223f      	movs	r2, #63	; 0x3f
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2241      	movs	r2, #65	; 0x41
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2242      	movs	r2, #66	; 0x42
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2243      	movs	r2, #67	; 0x43
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2244      	movs	r2, #68	; 0x44
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2245      	movs	r2, #69	; 0x45
 80023ae:	2101      	movs	r1, #1
 80023b0:	5499      	strb	r1, [r3, r2]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2246      	movs	r2, #70	; 0x46
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2247      	movs	r2, #71	; 0x47
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	223d      	movs	r2, #61	; 0x3d
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e0:	2317      	movs	r3, #23
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	223c      	movs	r2, #60	; 0x3c
 80023ec:	5c9b      	ldrb	r3, [r3, r2]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e0e5      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	223c      	movs	r2, #60	; 0x3c
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b14      	cmp	r3, #20
 8002402:	d900      	bls.n	8002406 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002404:	e0d1      	b.n	80025aa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	009a      	lsls	r2, r3, #2
 800240a:	4b70      	ldr	r3, [pc, #448]	; (80025cc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800240c:	18d3      	adds	r3, r2, r3
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	0011      	movs	r1, r2
 800241a:	0018      	movs	r0, r3
 800241c:	f000 f954 	bl	80026c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2108      	movs	r1, #8
 800242c:	430a      	orrs	r2, r1
 800242e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2104      	movs	r1, #4
 800243c:	438a      	bics	r2, r1
 800243e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6999      	ldr	r1, [r3, #24]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	619a      	str	r2, [r3, #24]
      break;
 8002452:	e0af      	b.n	80025b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	0011      	movs	r1, r2
 800245c:	0018      	movs	r0, r3
 800245e:	f000 f9b3 	bl	80027c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699a      	ldr	r2, [r3, #24]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	0109      	lsls	r1, r1, #4
 8002470:	430a      	orrs	r2, r1
 8002472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4954      	ldr	r1, [pc, #336]	; (80025d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002480:	400a      	ands	r2, r1
 8002482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6999      	ldr	r1, [r3, #24]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	619a      	str	r2, [r3, #24]
      break;
 8002498:	e08c      	b.n	80025b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	0011      	movs	r1, r2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fa0e 	bl	80028c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2108      	movs	r1, #8
 80024b4:	430a      	orrs	r2, r1
 80024b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2104      	movs	r1, #4
 80024c4:	438a      	bics	r2, r1
 80024c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69d9      	ldr	r1, [r3, #28]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	61da      	str	r2, [r3, #28]
      break;
 80024da:	e06b      	b.n	80025b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	0011      	movs	r1, r2
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 fa6f 	bl	80029c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	0109      	lsls	r1, r1, #4
 80024f8:	430a      	orrs	r2, r1
 80024fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4932      	ldr	r1, [pc, #200]	; (80025d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002508:	400a      	ands	r2, r1
 800250a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	69d9      	ldr	r1, [r3, #28]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	021a      	lsls	r2, r3, #8
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	61da      	str	r2, [r3, #28]
      break;
 8002520:	e048      	b.n	80025b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	0011      	movs	r1, r2
 800252a:	0018      	movs	r0, r3
 800252c:	f000 fab0 	bl	8002a90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2108      	movs	r1, #8
 800253c:	430a      	orrs	r2, r1
 800253e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2104      	movs	r1, #4
 800254c:	438a      	bics	r2, r1
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002562:	e027      	b.n	80025b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	0011      	movs	r1, r2
 800256c:	0018      	movs	r0, r3
 800256e:	f000 fae9 	bl	8002b44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	0109      	lsls	r1, r1, #4
 8002580:	430a      	orrs	r2, r1
 8002582:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4910      	ldr	r1, [pc, #64]	; (80025d0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002590:	400a      	ands	r2, r1
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	021a      	lsls	r2, r3, #8
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025a8:	e004      	b.n	80025b4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80025aa:	2317      	movs	r3, #23
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
      break;
 80025b2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	223c      	movs	r2, #60	; 0x3c
 80025b8:	2100      	movs	r1, #0
 80025ba:	5499      	strb	r1, [r3, r2]

  return status;
 80025bc:	2317      	movs	r3, #23
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	781b      	ldrb	r3, [r3, #0]
}
 80025c2:	0018      	movs	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b006      	add	sp, #24
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	08002eac 	.word	0x08002eac
 80025d0:	fffffbff 	.word	0xfffffbff

080025d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a32      	ldr	r2, [pc, #200]	; (80026b0 <TIM_Base_SetConfig+0xdc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d003      	beq.n	80025f4 <TIM_Base_SetConfig+0x20>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a31      	ldr	r2, [pc, #196]	; (80026b4 <TIM_Base_SetConfig+0xe0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d108      	bne.n	8002606 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2270      	movs	r2, #112	; 0x70
 80025f8:	4393      	bics	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <TIM_Base_SetConfig+0xdc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00f      	beq.n	800262e <TIM_Base_SetConfig+0x5a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a28      	ldr	r2, [pc, #160]	; (80026b4 <TIM_Base_SetConfig+0xe0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00b      	beq.n	800262e <TIM_Base_SetConfig+0x5a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <TIM_Base_SetConfig+0xe4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d007      	beq.n	800262e <TIM_Base_SetConfig+0x5a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a26      	ldr	r2, [pc, #152]	; (80026bc <TIM_Base_SetConfig+0xe8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d003      	beq.n	800262e <TIM_Base_SetConfig+0x5a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <TIM_Base_SetConfig+0xec>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d108      	bne.n	8002640 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <TIM_Base_SetConfig+0xf0>)
 8002632:	4013      	ands	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	4393      	bics	r3, r2
 8002646:	001a      	movs	r2, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <TIM_Base_SetConfig+0xdc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0xaa>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <TIM_Base_SetConfig+0xe8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0xaa>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <TIM_Base_SetConfig+0xec>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d103      	bne.n	8002686 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2201      	movs	r2, #1
 8002692:	4013      	ands	r3, r2
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2201      	movs	r2, #1
 800269e:	4393      	bics	r3, r2
 80026a0:	001a      	movs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	611a      	str	r2, [r3, #16]
  }
}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40002000 	.word	0x40002000
 80026bc:	40014400 	.word	0x40014400
 80026c0:	40014800 	.word	0x40014800
 80026c4:	fffffcff 	.word	0xfffffcff

080026c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	2201      	movs	r2, #1
 80026de:	4393      	bics	r3, r2
 80026e0:	001a      	movs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4a2e      	ldr	r2, [pc, #184]	; (80027b0 <TIM_OC1_SetConfig+0xe8>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2203      	movs	r2, #3
 80026fe:	4393      	bics	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2202      	movs	r2, #2
 8002710:	4393      	bics	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <TIM_OC1_SetConfig+0xec>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <TIM_OC1_SetConfig+0x6e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <TIM_OC1_SetConfig+0xf0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d003      	beq.n	8002736 <TIM_OC1_SetConfig+0x6e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a22      	ldr	r2, [pc, #136]	; (80027bc <TIM_OC1_SetConfig+0xf4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10c      	bne.n	8002750 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2208      	movs	r2, #8
 800273a:	4393      	bics	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2204      	movs	r2, #4
 800274c:	4393      	bics	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <TIM_OC1_SetConfig+0xec>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d007      	beq.n	8002768 <TIM_OC1_SetConfig+0xa0>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <TIM_OC1_SetConfig+0xf0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <TIM_OC1_SetConfig+0xa0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <TIM_OC1_SetConfig+0xf4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d111      	bne.n	800278c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <TIM_OC1_SetConfig+0xf8>)
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <TIM_OC1_SetConfig+0xfc>)
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b006      	add	sp, #24
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	fffeff8f 	.word	0xfffeff8f
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40014400 	.word	0x40014400
 80027bc:	40014800 	.word	0x40014800
 80027c0:	fffffeff 	.word	0xfffffeff
 80027c4:	fffffdff 	.word	0xfffffdff

080027c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	2210      	movs	r2, #16
 80027de:	4393      	bics	r3, r2
 80027e0:	001a      	movs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <TIM_OC2_SetConfig+0xe0>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4a2b      	ldr	r2, [pc, #172]	; (80028ac <TIM_OC2_SetConfig+0xe4>)
 80027fe:	4013      	ands	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2220      	movs	r2, #32
 8002812:	4393      	bics	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <TIM_OC2_SetConfig+0xe8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10d      	bne.n	8002846 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2280      	movs	r2, #128	; 0x80
 800282e:	4393      	bics	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2240      	movs	r2, #64	; 0x40
 8002842:	4393      	bics	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <TIM_OC2_SetConfig+0xe8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <TIM_OC2_SetConfig+0x96>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <TIM_OC2_SetConfig+0xec>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <TIM_OC2_SetConfig+0x96>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <TIM_OC2_SetConfig+0xf0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d113      	bne.n	8002886 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4a16      	ldr	r2, [pc, #88]	; (80028bc <TIM_OC2_SetConfig+0xf4>)
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4a15      	ldr	r2, [pc, #84]	; (80028c0 <TIM_OC2_SetConfig+0xf8>)
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b006      	add	sp, #24
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	feff8fff 	.word	0xfeff8fff
 80028ac:	fffffcff 	.word	0xfffffcff
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40014400 	.word	0x40014400
 80028b8:	40014800 	.word	0x40014800
 80028bc:	fffffbff 	.word	0xfffffbff
 80028c0:	fffff7ff 	.word	0xfffff7ff

080028c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <TIM_OC3_SetConfig+0xdc>)
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a2d      	ldr	r2, [pc, #180]	; (80029a4 <TIM_OC3_SetConfig+0xe0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2203      	movs	r2, #3
 80028f8:	4393      	bics	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <TIM_OC3_SetConfig+0xe4>)
 800290a:	4013      	ands	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a23      	ldr	r2, [pc, #140]	; (80029ac <TIM_OC3_SetConfig+0xe8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10d      	bne.n	800293e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <TIM_OC3_SetConfig+0xec>)
 8002926:	4013      	ands	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <TIM_OC3_SetConfig+0xf0>)
 800293a:	4013      	ands	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a1a      	ldr	r2, [pc, #104]	; (80029ac <TIM_OC3_SetConfig+0xe8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <TIM_OC3_SetConfig+0x92>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <TIM_OC3_SetConfig+0xf4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d003      	beq.n	8002956 <TIM_OC3_SetConfig+0x92>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <TIM_OC3_SetConfig+0xf8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d113      	bne.n	800297e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <TIM_OC3_SetConfig+0xfc>)
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <TIM_OC3_SetConfig+0x100>)
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	621a      	str	r2, [r3, #32]
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b006      	add	sp, #24
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	fffffeff 	.word	0xfffffeff
 80029a4:	fffeff8f 	.word	0xfffeff8f
 80029a8:	fffffdff 	.word	0xfffffdff
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	fffff7ff 	.word	0xfffff7ff
 80029b4:	fffffbff 	.word	0xfffffbff
 80029b8:	40014400 	.word	0x40014400
 80029bc:	40014800 	.word	0x40014800
 80029c0:	ffffefff 	.word	0xffffefff
 80029c4:	ffffdfff 	.word	0xffffdfff

080029c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <TIM_OC4_SetConfig+0xa8>)
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <TIM_OC4_SetConfig+0xac>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <TIM_OC4_SetConfig+0xb0>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <TIM_OC4_SetConfig+0xb4>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	031b      	lsls	r3, r3, #12
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <TIM_OC4_SetConfig+0xb8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <TIM_OC4_SetConfig+0x70>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <TIM_OC4_SetConfig+0xbc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_OC4_SetConfig+0x70>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <TIM_OC4_SetConfig+0xc0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d109      	bne.n	8002a4c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <TIM_OC4_SetConfig+0xc4>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	019b      	lsls	r3, r3, #6
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b006      	add	sp, #24
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	ffffefff 	.word	0xffffefff
 8002a74:	feff8fff 	.word	0xfeff8fff
 8002a78:	fffffcff 	.word	0xfffffcff
 8002a7c:	ffffdfff 	.word	0xffffdfff
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40014400 	.word	0x40014400
 8002a88:	40014800 	.word	0x40014800
 8002a8c:	ffffbfff 	.word	0xffffbfff

08002a90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <TIM_OC5_SetConfig+0x9c>)
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <TIM_OC5_SetConfig+0xa0>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <TIM_OC5_SetConfig+0xa4>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a15      	ldr	r2, [pc, #84]	; (8002b38 <TIM_OC5_SetConfig+0xa8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <TIM_OC5_SetConfig+0x66>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <TIM_OC5_SetConfig+0xac>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <TIM_OC5_SetConfig+0x66>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <TIM_OC5_SetConfig+0xb0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d109      	bne.n	8002b0a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <TIM_OC5_SetConfig+0x9c>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	621a      	str	r2, [r3, #32]
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b006      	add	sp, #24
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	fffeffff 	.word	0xfffeffff
 8002b30:	fffeff8f 	.word	0xfffeff8f
 8002b34:	fffdffff 	.word	0xfffdffff
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40014400 	.word	0x40014400
 8002b40:	40014800 	.word	0x40014800

08002b44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a22      	ldr	r2, [pc, #136]	; (8002be4 <TIM_OC6_SetConfig+0xa0>)
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <TIM_OC6_SetConfig+0xa4>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <TIM_OC6_SetConfig+0xa8>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	051b      	lsls	r3, r3, #20
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a16      	ldr	r2, [pc, #88]	; (8002bf0 <TIM_OC6_SetConfig+0xac>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <TIM_OC6_SetConfig+0x68>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <TIM_OC6_SetConfig+0xb0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d003      	beq.n	8002bac <TIM_OC6_SetConfig+0x68>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <TIM_OC6_SetConfig+0xb4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d109      	bne.n	8002bc0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4a13      	ldr	r2, [pc, #76]	; (8002bfc <TIM_OC6_SetConfig+0xb8>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	029b      	lsls	r3, r3, #10
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b006      	add	sp, #24
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	ffefffff 	.word	0xffefffff
 8002be8:	feff8fff 	.word	0xfeff8fff
 8002bec:	ffdfffff 	.word	0xffdfffff
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40014400 	.word	0x40014400
 8002bf8:	40014800 	.word	0x40014800
 8002bfc:	fffbffff 	.word	0xfffbffff

08002c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223c      	movs	r2, #60	; 0x3c
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e04a      	b.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	223c      	movs	r2, #60	; 0x3c
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	223d      	movs	r2, #61	; 0x3d
 8002c24:	2102      	movs	r1, #2
 8002c26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2270      	movs	r2, #112	; 0x70
 8002c58:	4393      	bics	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10c      	bne.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	4393      	bics	r3, r2
 8002c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	223d      	movs	r2, #61	; 0x3d
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	223c      	movs	r2, #60	; 0x3c
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	ff0fffff 	.word	0xff0fffff
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	223c      	movs	r2, #60	; 0x3c
 8002cd6:	5c9b      	ldrb	r3, [r3, r2]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e06f      	b.n	8002dc0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	223c      	movs	r2, #60	; 0x3c
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	22ff      	movs	r2, #255	; 0xff
 8002cec:	4393      	bics	r3, r2
 8002cee:	001a      	movs	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a33      	ldr	r2, [pc, #204]	; (8002dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4a30      	ldr	r2, [pc, #192]	; (8002dcc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a2e      	ldr	r2, [pc, #184]	; (8002dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002d18:	401a      	ands	r2, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a2b      	ldr	r2, [pc, #172]	; (8002dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002d26:	401a      	ands	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a29      	ldr	r2, [pc, #164]	; (8002dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002d34:	401a      	ands	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002d42:	401a      	ands	r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002d50:	401a      	ands	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a21      	ldr	r2, [pc, #132]	; (8002de4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002d60:	401a      	ands	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d11c      	bne.n	8002dae <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002d78:	401a      	ands	r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	051b      	lsls	r3, r3, #20
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002d88:	401a      	ands	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002d96:	401a      	ands	r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002da4:	401a      	ands	r2, r3
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	223c      	movs	r2, #60	; 0x3c
 8002dba:	2100      	movs	r1, #0
 8002dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b004      	add	sp, #16
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	fffffcff 	.word	0xfffffcff
 8002dcc:	fffffbff 	.word	0xfffffbff
 8002dd0:	fffff7ff 	.word	0xfffff7ff
 8002dd4:	ffffefff 	.word	0xffffefff
 8002dd8:	ffffdfff 	.word	0xffffdfff
 8002ddc:	ffffbfff 	.word	0xffffbfff
 8002de0:	fff0ffff 	.word	0xfff0ffff
 8002de4:	efffffff 	.word	0xefffffff
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	ff0fffff 	.word	0xff0fffff
 8002df0:	feffffff 	.word	0xfeffffff
 8002df4:	fdffffff 	.word	0xfdffffff
 8002df8:	dfffffff 	.word	0xdfffffff

08002dfc <__libc_init_array>:
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	2600      	movs	r6, #0
 8002e00:	4d0c      	ldr	r5, [pc, #48]	; (8002e34 <__libc_init_array+0x38>)
 8002e02:	4c0d      	ldr	r4, [pc, #52]	; (8002e38 <__libc_init_array+0x3c>)
 8002e04:	1b64      	subs	r4, r4, r5
 8002e06:	10a4      	asrs	r4, r4, #2
 8002e08:	42a6      	cmp	r6, r4
 8002e0a:	d109      	bne.n	8002e20 <__libc_init_array+0x24>
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	f000 f821 	bl	8002e54 <_init>
 8002e12:	4d0a      	ldr	r5, [pc, #40]	; (8002e3c <__libc_init_array+0x40>)
 8002e14:	4c0a      	ldr	r4, [pc, #40]	; (8002e40 <__libc_init_array+0x44>)
 8002e16:	1b64      	subs	r4, r4, r5
 8002e18:	10a4      	asrs	r4, r4, #2
 8002e1a:	42a6      	cmp	r6, r4
 8002e1c:	d105      	bne.n	8002e2a <__libc_init_array+0x2e>
 8002e1e:	bd70      	pop	{r4, r5, r6, pc}
 8002e20:	00b3      	lsls	r3, r6, #2
 8002e22:	58eb      	ldr	r3, [r5, r3]
 8002e24:	4798      	blx	r3
 8002e26:	3601      	adds	r6, #1
 8002e28:	e7ee      	b.n	8002e08 <__libc_init_array+0xc>
 8002e2a:	00b3      	lsls	r3, r6, #2
 8002e2c:	58eb      	ldr	r3, [r5, r3]
 8002e2e:	4798      	blx	r3
 8002e30:	3601      	adds	r6, #1
 8002e32:	e7f2      	b.n	8002e1a <__libc_init_array+0x1e>
 8002e34:	08002f00 	.word	0x08002f00
 8002e38:	08002f00 	.word	0x08002f00
 8002e3c:	08002f00 	.word	0x08002f00
 8002e40:	08002f04 	.word	0x08002f04

08002e44 <memset>:
 8002e44:	0003      	movs	r3, r0
 8002e46:	1882      	adds	r2, r0, r2
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memset+0xa>
 8002e4c:	4770      	bx	lr
 8002e4e:	7019      	strb	r1, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	e7f9      	b.n	8002e48 <memset+0x4>

08002e54 <_init>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr

08002e60 <_fini>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr
